// -*- idl -*- ///////////////////////////////////////////////////////////////
//
// This file is part of Miro (The Middleware For Robots)
//
// for details copyright, usage and credits to other groups see Miro/COPYRIGHT
// for documentation see Miro/doc
// 
// (c) 1999,2000
// Department of Neural Information Processing, University of Ulm, Germany
//
// Authors: 
//    Stefan Enderle, 
//    Stefan Sablatnoeg, 
//    Hans Utz
// 
// $Id$
// 
//////////////////////////////////////////////////////////////////////////////
#ifndef ImageDefinitions_idl
#define ImageDefinitions_idl

#include "Exception.idl"
#include "Time.idl"
#include "Position.idl"

module Miro
{
/**
	Data source
*/
const long kNoSource = 0;
const long kVideoSource = 1;
const long kRenderSource = 2;
const long kTestPatternSource = 3;

/**
	Data source channel
*/
const long kNoChannel = 0;
const long kMonoChannel = 1;
const long kLeftChannel = 2;
const long kRightChannel = 4;
const long kStereo = 6;

/**
	Subfields
*/
const long kNoSubfield = 0;
const long kEvenSubfield = 1;
const long kOddSubfield = 2;
const long kAllSubfields = 3;

/**
	Image format
*/
const long kGray = 2;
const long kGrayFloat = 16;
const long kRGB = 32;
const long kRGBFloat = 16384;
const long kHSV = 32768;
const long kHSVFloat = 262144;

/**
	Parameter tolerance
*/
const long kNoTolerance = 0;
const long kSizeTolerance = 1;
const long kDepthTolerance = 2;
const long kChannelTolerance = 4;
const long kSubfieldTolerance = 8;

/**
* Struct representing a single shared image of a specified type.
*/
struct SharedImageIDL
	{
	/**
	 * Server side shared image ID.
	 */
	long		sharedImageID;
	/**
	 * Image contains valid data.
	 */
	boolean		dataValid;
	/**
	 * Shared memory key is valid.
	 */
	boolean		sharedMemoryValid;
	/**
	 * Shared memory key of image data.
	 */
	long		shMemKey;
	/**
	 * Mapped shared image data (server side).
	 */
	long		serverShMemData;
	/**
	 * Image format (grayscale, rgb, hsv).
	 */
	long		format;
	};

	
/**
* Struct representing a collection of images.
*/
struct ImageIDL
	{
	/**
	 * Image width (columns).
	 */
	long		width;
	/**
	 * Image height (rows).
	 */
	long		height;
	/**
	 * Image data is valid
	 */
	boolean	imageValid;
	/**
	 * Data source of image (camera, test pattern, ...).
	 */
	long	dataSource;
	/**
	 * Data channel of image (mono, left, right, stereo, ...).
	 */
	long	dataChannel;
	/**
	 * Subfields requested (odd, even, all).
	 */
	long	dataSubfields;
	/**
	 * Image formats available.
	 */
	long	dataFormats;
	/**
	 * Image format delivered from data source.
	 */
	long	sourceFormat;
	/**
	 * Timestamp.
	 */
	TimeIDL		timestamp;
	/**
	 * Position.
	 */
	PositionIDL	position;
	/**
	 * Position valid, is Base running?
	 */
	boolean		positionValid;
	/**
	 * Structs describing different image types
	 */
	SharedImageIDL	grayImage;
	SharedImageIDL	rgbImage;
	SharedImageIDL	hsvImage;
	};

/**
* Struct representing a stereo image.
*/
struct StereoImageIDL
	{
	ImageIDL	leftImage;
	ImageIDL	rightImage;
	};

/**
* Struct representing the description of the image data.
*
* This is not really used yet.
*/
struct ImageDescriptionIDL
	{
	long type;
	long width;
	long height;
	};

};

#endif
