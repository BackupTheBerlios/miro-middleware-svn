// -*- idl -*- ///////////////////////////////////////////////////////////////
//
// This file is part of Miro (The Middleware for Robots)
// Copyright (C) 1999-2005
// Department of Neuroinformatics, University of Ulm, Germany
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation; either version 2, or (at your option)
// any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//
// $Id$
//
#ifndef MCL_Localization_idl
#define MCL_Localization_idl

#include "Time.idl"
#include "Position.idl"

module Miro
{
  module MCL
  {
    struct LocalizeStatisticsIDL
    {
      // sample set statistics
      
      unsigned long maxSampleSetSize;
      
      unsigned long oldSampleSet;
      unsigned long newSampleSet;
      unsigned long competitiveSamples;
      unsigned long newSamples;
      
      // sample wheight statistics
      
      double min;
      double max;
      double mean;
      double variance;
      
      unsigned long histogram[10];
      
      unsigned long hypoSamples;
      double hypoVariance;
      
      // performance statistics
      
      Miro::TimeIDL preprocessTime;
      Miro::TimeIDL updateTime;
      Miro::TimeIDL selectTime;
      Miro::TimeIDL hypothesisTime;
      Miro::TimeIDL totalTime;
      
      // arbitrary message to the world
      
      string result;
    };
    
    typedef sequence<string> FeatureVector;
    
    exception EUnknown {};
    
    interface Localization
    {
      void initRestart();
      void initUniform();
      
      void resampling(in boolean flag);
    };

    interface MultiFeatureLocalization : Localization
    {
      void addFeature(in string feature) raises (EUnknown);
      void delFeature(in string feature) raises (EUnknown);
      //! The features currently used by the feature manager.
      /**
       * Feature detectors for which there is no data available
       * will be internally skipped, but still be present in this
       * list.
       */
      FeatureVector currentFeatures();
      //! The features availalble to the feature manager.
      FeatureVector availableFeatures();
    };
  };
};
#endif
