// -*- idl -*- ///////////////////////////////////////////////////////////////
//
// This file is part of Miro (The Middleware for Robots)
// Copyright (C) 1999-2005
// Department of Neuroinformatics, University of Ulm, Germany
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation; either version 2, or (at your option)
// any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//
// $Id$
//
#ifndef SphinxSpeech_idl
#define SphinxSpeech_idl

#include "Exception.idl"
#include "Speech.idl"
#include "Time.idl"

module Miro
{
  struct WordIDL 
  {
    long startFrame;
    long endFrame;       //start and end frame within utterance for this word
    long aScore;
    long lScore; //acoustic and LM scores (not always used!)
    float confidence;    // confidence measure (roughly prob(correct)) for this word
                         // NOT FILLED IN BY THE RECOGNIZER at the moment (sphinx2)
    long latticeDensity; // Average lattice density in segment. 
                            // Larger values imply more confusion and 
                            // less certainty about the result.
                            // To use it for rejection, cutoffs must be found independently
    double phonePerplexity; // Average phone perplexity in segment
                            // Larger values imply more confusion and 
                            // less certainty about the result.
                            // To use it for rejection, cutoffs must be found independently
    string word;
  };

  struct SentenceIDL 
  {
    TimeIDL timestamp;
    boolean valid;
    sequence<WordIDL> sentence;
  };


  //! Interface to the Sphinx speech recognition services
  /**
   * It registers as "Speech" at the naming service
   * within the selected naming context.
   * It includes the Festival speech production module
   *
   * @author Guillem Pages Gassull 
   */
  interface SphinxSpeech : Speech
  {
    //! Returns the last recognized sentence.
    SentenceIDL getLastSentence() raises(EDevIO);
  };
};
#endif // Speech_idl
