// -*- idl -*- ///////////////////////////////////////////////////////////////
//
// This file is part of Miro (The Middleware for Robots)
// Copyright (C) 1999-2005
// Department of Neuroinformatics, University of Ulm, Germany
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation; either version 2, or (at your option)
// any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//
// $Id$
//
#ifndef ClosedMotion_idl
#define ClosedMotion_idl

#include "Exception.idl"

module Miro
{
  //! The closed motion interface.
  /**
   * A closed motion in Miro is a motion that is specified in distance
   * and angle of the motion instead of its velocity. 
   * 
   * @author Hans Utz
   */
  interface ClosedMotion
  {
    //! Rotate to absolute heading.
    /**
     * Note that the coordinate system of the odometry is used. 
     *
     * @param angle
     * It is specified in rad.
     * @throw EOutOfBounds
     * The allowed values for the angle are: -PI < angle <= PI.
     * @throw EDevIO
     * is thrown to indicate low level device problems.
     */
    void rotateToPosition(in double angle) raises(EOutOfBounds, EDevIO);
    //! Rotate relative to the current heading.
    /**
     * @param angle
     * It is specified in rad.
     * @throw EOutOfBounds
     * The allowed values for the angle are: -2 * PI < angle <= 2 * PI.
     * @throw EDevIO
     * is thrown to indicate low level device problems.
     */
    void rotateRelative(in double angle) raises(EOutOfBounds, EDevIO);
    //! Translate relative to the current position.
    /**
     * @param distance 
     * It is specified in mm.
     * @throw EOutOfBounds
     * Most motion controllers will only allow to move in
     * closed motion for a limited distance - e.g. 5000mm.
     * @throw EDevIO
     * is thrown to indicate low level device problems.
     */
    void translateRelative(in long distance) raises(EOutOfBounds, EDevIO);
  };
};

#endif // closedMotion_idl
