// -*- idl -*- ///////////////////////////////////////////////////////////////
//
// This file is part of Miro (The Middleware for Robots)
// Copyright (C) 2005 Ingo van Lil <ingo@vanlil.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation; either version 2, or (at your option)
// any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//
// $Id$
//
//
// Authors: 
//   Ingo van Lil
//
#ifndef Gps_idl
#define Gps_idl

#include "Exception.idl"
#include "GpsData.idl"
#include "WorldPoint3D.idl"

module Miro
{
  //! Generic GPS module interface.
  /**
   * This is a generic interface that should work with about any
   * NMEA-0183 compatible GPS receiver. The implementation is purely
   * passive, i.e. it just reads data from the GPS device and
   * interprets any known standard sentences, but does not send out
   * any commands.\n
   * Set the \a ReceiverType config parameter in GPS::Parameters to
   * \c "generic" (default value) in order to use this interface.
   *
   * \note Since setting and querying the relative position implies a
   *       Carthesian coordinate system instead of the global polar
   *       coordinates these functions only give useful results when
   *       used within small distances. Don't place the position
   *       reference in Murmansk if your robot crawls along in
   *       Lisbon. ;-)\n
   *       Furthermore, the position reference must not be placed close
   *       to one of the poles.
   *
   * @author Ingo van Lil
   */
  interface Gps
  {
    //! Get the latest global position readings
    /**
     * @return Last valid global position, including latitude, longitude,
     *         altitude and a timestamp. Fields may be NaN in case no
     *         value has been received, yet.
     */
    GpsGlobalPositionEventIDL getGlobalPosition();

    //! Wait up to ten seconds for a new position reading
    /**
     * @return New global position (latitude, longitude and altitude)
     *         plus timestamp, fields may be NaN.
     *
     * @throw ETimeOut is thrown on timeout waiting for a position update.
     */
    GpsGlobalPositionEventIDL getWaitGlobalPosition() raises(ETimeOut);

    //! Get the latest dilution of precision readings
    /**
     * @return Last valid dilution values (HDOP, VDOP and PDOP) plus
     *         timestamp. Fields may be NaN in case no value has been
     *         received, yet.
     */
    GpsDilutionEventIDL getDilution();

    //! Wait up to ten seconds for a new dilution reading
    /**
     * @return New dilution values (HDOP, VDOP and PDOP) plus timestamp,
     *         fields may be NaN.
     *
     * @throw ETimeOut is thrown on timeout waiting for a dilution update.
     */
    GpsDilutionEventIDL getWaitDilution() raises(ETimeOut);

    //! Set the position reference for getPosition() and getWaitPosition()
    /**
     * @param reference New location of the position reference. Since
     *        the reference must not be placed close to one of the
     *        poles the valid latitude range is limited to -1.5 .. 1.5
     *        (about -85 deg .. 85 deg).
     *
     * @throw EOutOfBounds is thrown on invalid position values.
     *
     * \note The change won't take effect before the next position update
     *       is received from the GPS device.
     */
    void setPositionReference(in GpsPositionIDL reference)
		raises(EOutOfBounds);

    //! Get the position reference
    /**
     * @return Position reference location. If the reference has not been
     *         placed using either setPosition() or setPositionReference()
     *         the first valid GPS reading is used. If no GPS reading has
     *         been received the returned reference coordinates will be NaN.
     */
    GpsPositionIDL getPositionReference();

    //! Place the position reference relative to the robot's current location
    /**
     * This method moves the position reference so that the robot's
     * current location (to be precise: the last global position reading
     * from the GPS device) is associated with the specified coordinates.
     * This is only possible if at least one position reading has been
     * received from GPS. If only latitude and longitude readings are
     * available the reference altitude will be set to NaN.
     *
     * @param position New relative position (in mm) to associate the
     *        robot's current location with.
     *
     * @throw EDevIO is thrown if no GPS position reading has been
     *        received, yet.
     *
     * @throw EOutOfBounds is thrown if the position reference would be
     *        placed too close to one of the poles (or beyond).
     */
    void setPosition(in WorldPoint3DIDL position)
		raises(EDevIO, EOutOfBounds);

    //! Read the relative position
    /**
     * If the position reference has not been explicitly placed using the
     * return value is relative to the first GPS position received after
     * service startup. If no GPS reading has been received at all the
     * returned coordinates will be NaN.
     *
     * @return Current position (in mm) relative to position reference.
     */
    GpsRelativePositionEventIDL getPosition();

    //! Wait up to ten seconds for a position update
    /**
     * @return Current position (in mm) relative to position reference.
     *
     * @throw ETimeOut is thrown on timeout waiting for a position update.
     */
    GpsRelativePositionEventIDL getWaitPosition() raises(ETimeOut);
  };
};

#endif // Gps_idl
