// -*- c++ -*- ///////////////////////////////////////////////////////////////
// This file was auto-generated by MakeParameters
//////////////////////////////////////////////////////////////////////////////
#include "Parameters.h"

#include <miro/IO.h>
#include <miro/TimeHelper.h>
#include <miro/XmlParse.h>
#include <qdom.h>

namespace
{
  using Miro::operator<<=;
  using Miro::operator>>=;
  using Miro::operator<<;
};

namespace Inertial
{
  std::ostream&
  operator << (std::ostream& ostr, const InertialParameters& rhs)
  {
    rhs.printToStream(ostr);
    return ostr;
  }

  Miro::Singleton<InertialParameters> InertialParameters::instance;

  InertialParameters::InertialParameters() :
    device("/dev/ttyUSB2"),
    outputmode("CALIB-ORIENT"),
    outputsettings("ACC-GYR-EULER"),
    pollInterval(0, 100000),
    inclinometer()
  {
    
          inclinometer.minPitch = Miro::deg2Rad(-20);
          inclinometer.maxPitch = Miro::deg2Rad(20);
          inclinometer.minRoll = Miro::deg2Rad(-20);
          inclinometer.maxRoll = Miro::deg2Rad(20);
        
  }

  InertialParameters::~InertialParameters()
  {}

  char const *
  InertialParameters::fullTypeName() const throw()
  {
    return "Inertial::InertialParameters";
  }

  void
  InertialParameters::operator <<= (const QDomNode& _node)
  {
    if (!_node.isNull()) {
      QDomNode n = _node.firstChild();
      while(!n.isNull() ) {
        QDomElement e = n.toElement();
        if( !e.isNull() ) {
          QDomAttr a = e.attributeNode("name");
          if (!a.isNull()) {
            QString i = a.value();
            if (i == "Device") {
              this->device <<= n;
            }
            else if (i == "Outputmode") {
              this->outputmode <<= n;
            }
            else if (i == "Outputsettings") {
              this->outputsettings <<= n;
            }
            else if (i == "PollInterval") {
              this->pollInterval <<= n;
            }
            else if (i == "Inclinometer") {
              this->inclinometer <<= n;
            }
          }
        }
        n = n.nextSibling();
      }
    }
  }
  QDomElement
  InertialParameters::operator >>= (QDomNode& _node) const
  {
    QDomDocument d = _node.ownerDocument();
    QDomElement e = d.createElement("parameter");
    _node.appendChild(e);

    QDomElement g;

    g = (this->device >>= e);
    g.setAttribute("name", "Device");
    g = (this->outputmode >>= e);
    g.setAttribute("name", "Outputmode");
    g = (this->outputsettings >>= e);
    g.setAttribute("name", "Outputsettings");
    g = (this->pollInterval >>= e);
    g.setAttribute("name", "PollInterval");
    g = (this->inclinometer >>= e);
    g.setAttribute("name", "Inclinometer");

    return e;
  }

  void
  InertialParameters::printToStream(std::ostream& ostr) const
  {
    ostr << "Device: " << device << std::endl
         << "Outputmode: " << outputmode << std::endl
         << "Outputsettings: " << outputsettings << std::endl
         << "PollInterval: " << pollInterval << "usecs" << std::endl
         << "Inclinometer: " << inclinometer << std::endl;
  }
}
