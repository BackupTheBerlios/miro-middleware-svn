// -*- c++ -*- ///////////////////////////////////////////////////////////////
// This file was auto-generated by MakeParameters
//////////////////////////////////////////////////////////////////////////////
#include "Parameters.h"

#include <idl/RangeSensorC.h>
#include <miro/IO.h>
#include <miro/ScanDescriptionHelper.h>
#include <miro/TimeHelper.h>
#include <miro/XmlParse.h>
#include <qdom.h>

namespace
{
  using Miro::operator<<=;
  using Miro::operator>>=;
  using Miro::operator<<;
};

namespace Laser
{
  Miro::Singleton<Parameters> Parameters::instance;

  Parameters::Parameters() :
    stdCrystal(false),
    pollInterval(0, 100000),
    continousMode(false),
    notify(false),
    positionStamps(false),
    statistics(true),
    fov(270),
    scanResolution(0.5),
    laserDescription()
  {
    
        ttyParams.baudrate = 500000;
      
    device = "/dev/ttyUSB1";
    
        laserDescription.scanType = Miro::RangeSensor::GROUPWISE;
        laserDescription.eventName = "Laser";
        laserDescription.group.length(1);
        laserDescription.group[0].description.minRange = 50;
        laserDescription.group[0].description.maxRange = 8000;
        laserDescription.group[0].description.focus = 0.00435;
        laserDescription.group[0].sensor.length(361);
        for (unsigned int i = 0; i < 361; ++i) {
          laserDescription.group[0].sensor[i].height = 300;
          laserDescription.group[0].sensor[i].distance = 0;
          laserDescription.group[0].sensor[i].alpha = Miro::deg2Rad(-90. + (double)i * 0.5);
          laserDescription.group[0].sensor[i].beta = 0;
          laserDescription.group[0].sensor[i].gamma = 0;
          laserDescription.group[0].sensor[i].masked = false;
        }
      
  }

  char const *
  Parameters::fullTypeName() const throw()
  {
    return "Laser::Parameters";
  }

  void
  Parameters::operator <<= (const QDomNode& _node)
  {
    this->Super::operator <<= (_node);

    if (!_node.isNull()) {
      QDomNode n = _node.firstChild();
      while(!n.isNull() ) {
        QDomElement e = n.toElement();
        if( !e.isNull() ) {
          QDomAttr a = e.attributeNode("name");
          if (!a.isNull()) {
            QString i = a.value();
            if (i == "StdCrystal") {
              this->stdCrystal <<= n;
            }
            else if (i == "PollInterval") {
              this->pollInterval <<= n;
            }
            else if (i == "ContinousMode") {
              this->continousMode <<= n;
            }
            else if (i == "Notify") {
              this->notify <<= n;
            }
            else if (i == "PositionStamps") {
              this->positionStamps <<= n;
            }
            else if (i == "Statistics") {
              this->statistics <<= n;
            }
            else if (i == "Fov") {
              this->fov <<= n;
            }
            else if (i == "ScanResolution") {
              this->scanResolution <<= n;
            }
            else if (i == "LaserDescription") {
              this->laserDescription <<= n;
            }
          }
        }
        n = n.nextSibling();
      }
    }
  }
  QDomElement
  Parameters::operator >>= (QDomNode& _node) const
  {
    QDomElement e = Super::operator >>= (_node);
    QDomElement g;

    g = (this->stdCrystal >>= e);
    g.setAttribute("name", "StdCrystal");
    g = (this->pollInterval >>= e);
    g.setAttribute("name", "PollInterval");
    g = (this->continousMode >>= e);
    g.setAttribute("name", "ContinousMode");
    g = (this->notify >>= e);
    g.setAttribute("name", "Notify");
    g = (this->positionStamps >>= e);
    g.setAttribute("name", "PositionStamps");
    g = (this->statistics >>= e);
    g.setAttribute("name", "Statistics");
    g = (this->fov >>= e);
    g.setAttribute("name", "Fov");
    g = (this->scanResolution >>= e);
    g.setAttribute("name", "ScanResolution");
    g = (this->laserDescription >>= e);
    g.setAttribute("name", "LaserDescription");

    return e;
  }

  void
  Parameters::printToStream(std::ostream& ostr) const
  {
    Super::printToStream(ostr);

    ostr << "StdCrystal: " << stdCrystal << std::endl
         << "PollInterval: " << pollInterval << "sec" << std::endl
         << "ContinousMode: " << continousMode << std::endl
         << "Notify: " << notify << std::endl
         << "PositionStamps: " << positionStamps << std::endl
         << "Statistics: " << statistics << std::endl
         << "Fov: " << fov << std::endl
         << "ScanResolution: " << scanResolution << std::endl
         << "LaserDescription: " << laserDescription << std::endl;
  }
}
