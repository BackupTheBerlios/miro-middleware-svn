<?xml version='1.0' encoding='ISO-8859-1' standalone='yes'?>
<tagfile>
  <compound kind="file">
    <name>Abstract_Servant_Base.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Abstract__Servant__Base_8cpp</filename>
    <includes id="Abstract__Servant__Base_8h" name="Abstract_Servant_Base.h" local="yes" imported="no">tao/Abstract_Servant_Base.h</includes>
  </compound>
  <compound kind="file">
    <name>Abstract_Servant_Base.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Abstract__Servant__Base_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <includes id="Collocation__Strategy_8h" name="Collocation_Strategy.h" local="yes" imported="no">tao/Collocation_Strategy.h</includes>
    <includes id="CORBA__methods_8h" name="CORBA_methods.h" local="yes" imported="no">tao/CORBA_methods.h</includes>
    <includes id="Pseudo__VarOut__T_8h" name="Pseudo_VarOut_T.h" local="yes" imported="no">tao/Pseudo_VarOut_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">TAO_Abstract_ServantBase</class>
    <member kind="typedef">
      <type>InterfaceDef *</type>
      <name>InterfaceDef_ptr</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object *</type>
      <name>Object_ptr</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Var_T&lt; Object &gt;</type>
      <name>Object_var</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Out_T&lt; Object, Object_var &gt;</type>
      <name>Object_out</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>TAO_Skeleton</name>
      <anchor>a4</anchor>
      <arglist>)(TAO_ServerRequest &amp;, void *, void *)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>TAO_Collocated_Skeleton</name>
      <anchor>a5</anchor>
      <arglist>)(TAO_Abstract_ServantBase *, TAO::Argument **, int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Acceptor_Filter.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Acceptor__Filter_8cpp</filename>
    <includes id="Acceptor__Filter_8h" name="Acceptor_Filter.h" local="yes" imported="no">tao/Acceptor_Filter.h</includes>
  </compound>
  <compound kind="file">
    <name>Acceptor_Filter.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Acceptor__Filter_8h</filename>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO_Acceptor_Filter</class>
  </compound>
  <compound kind="file">
    <name>Acceptor_Impl.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Acceptor__Impl_8cpp</filename>
    <includes id="Acceptor__Impl_8h" name="Acceptor_Impl.h" local="yes" imported="no">tao/Acceptor_Impl.h</includes>
    <includes id="Thread__Per__Connection__Handler_8h" name="Thread_Per_Connection_Handler.h" local="yes" imported="no">Thread_Per_Connection_Handler.h</includes>
    <includes id="Server__Strategy__Factory_8h" name="Server_Strategy_Factory.h" local="yes" imported="no">Server_Strategy_Factory.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="Transport__Cache__Manager_8h" name="Transport_Cache_Manager.h" local="yes" imported="no">Transport_Cache_Manager.h</includes>
    <includes id="Thread__Lane__Resources_8h" name="Thread_Lane_Resources.h" local="yes" imported="no">Thread_Lane_Resources.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">Transport.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
  </compound>
  <compound kind="file">
    <name>Acceptor_Impl.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Acceptor__Impl_8h</filename>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <class kind="class">TAO_Creation_Strategy</class>
    <class kind="class">TAO_Concurrency_Strategy</class>
    <class kind="class">TAO_Accept_Strategy</class>
  </compound>
  <compound kind="file">
    <name>Acceptor_Registry.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Acceptor__Registry_8cpp</filename>
    <includes id="Acceptor__Registry_8h" name="Acceptor_Registry.h" local="yes" imported="no">tao/Acceptor_Registry.h</includes>
    <includes id="Profile_8h" name="Profile.h" local="yes" imported="no">tao/Profile.h</includes>
    <includes id="Transport__Acceptor_8h" name="Transport_Acceptor.h" local="yes" imported="no">tao/Transport_Acceptor.h</includes>
    <includes id="Protocol__Factory_8h" name="Protocol_Factory.h" local="yes" imported="no">tao/Protocol_Factory.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <includes id="params_8h" name="params.h" local="yes" imported="no">tao/params.h</includes>
    <includes id="MProfile_8h" name="MProfile.h" local="yes" imported="no">tao/MProfile.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <includes id="Acceptor__Filter_8h" name="Acceptor_Filter.h" local="yes" imported="no">tao/Acceptor_Filter.h</includes>
    <includes id="Endpoint_8h" name="Endpoint.h" local="yes" imported="no">tao/Endpoint.h</includes>
    <includes id="ORB__Constants_8h" name="ORB_Constants.h" local="yes" imported="no">tao/ORB_Constants.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="Acceptor__Registry_8i" name="Acceptor_Registry.i" local="yes" imported="no">tao/Acceptor_Registry.i</includes>
  </compound>
  <compound kind="file">
    <name>Acceptor_Registry.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Acceptor__Registry_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Exception_8h" name="Exception.h" local="yes" imported="no">tao/Exception.h</includes>
    <includes id="params_8h" name="params.h" local="yes" imported="no">tao/params.h</includes>
    <class kind="class">TAO_Acceptor_Registry</class>
    <member kind="typedef">
      <type>ACE_Unbounded_Set_Iterator&lt; TAO_Protocol_Item * &gt;</type>
      <name>TAO_ProtocolFactorySetItor</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Acceptor **</type>
      <name>TAO_AcceptorSetIterator</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Acceptor_Registry.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Acceptor__Registry_8i</filename>
  </compound>
  <compound kind="file">
    <name>Adapter.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Adapter_8cpp</filename>
    <includes id="Adapter_8h" name="Adapter.h" local="yes" imported="no">Adapter.h</includes>
  </compound>
  <compound kind="file">
    <name>Adapter.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Adapter_8h</filename>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="CORBA__methods_8h" name="CORBA_methods.h" local="yes" imported="no">tao/CORBA_methods.h</includes>
    <includes id="Pseudo__VarOut__T_8h" name="Pseudo_VarOut_T.h" local="yes" imported="no">tao/Pseudo_VarOut_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">TAO_Adapter</class>
  </compound>
  <compound kind="file">
    <name>Adapter_Factory.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Adapter__Factory_8cpp</filename>
    <includes id="Adapter__Factory_8h" name="Adapter_Factory.h" local="yes" imported="no">Adapter_Factory.h</includes>
  </compound>
  <compound kind="file">
    <name>Adapter_Factory.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Adapter__Factory_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <class kind="class">TAO_Adapter_Factory</class>
  </compound>
  <compound kind="file">
    <name>Adapter_Registry.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Adapter__Registry_8cpp</filename>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">Object.h</includes>
    <includes id="Adapter__Registry_8h" name="Adapter_Registry.h" local="yes" imported="no">Adapter_Registry.h</includes>
    <includes id="Adapter_8h" name="Adapter.h" local="yes" imported="no">Adapter.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
  </compound>
  <compound kind="file">
    <name>Adapter_Registry.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Adapter__Registry_8h</filename>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="CORBA__methods_8h" name="CORBA_methods.h" local="yes" imported="no">tao/CORBA_methods.h</includes>
    <includes id="Pseudo__VarOut__T_8h" name="Pseudo_VarOut_T.h" local="yes" imported="no">tao/Pseudo_VarOut_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">TAO_Adapter_Registry</class>
  </compound>
  <compound kind="file">
    <name>Alias_TypeCode.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Alias__TypeCode_8cpp</filename>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Alias__TypeCode_8inl" name="Alias_TypeCode.inl" local="yes" imported="no">tao/Alias_TypeCode.inl</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="TypeCode__Traits_8h" name="TypeCode_Traits.h" local="yes" imported="no">tao/TypeCode_Traits.h</includes>
  </compound>
  <compound kind="file">
    <name>Alias_TypeCode.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Alias__TypeCode_8h</filename>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">tao/TypeCode.h</includes>
    <includes id="TypeCodeFactory__Adapter_8h" name="TypeCodeFactory_Adapter.h" local="yes" imported="no">tao/TypeCodeFactory_Adapter.h</includes>
    <includes id="TypeCode__Base__Attributes_8h" name="TypeCode_Base_Attributes.h" local="yes" imported="no">tao/TypeCode_Base_Attributes.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <class kind="struct">TAO::TypeCode::Alias_Traits&lt; CORBA::tk_alias &gt;</class>
    <class kind="struct">TAO::TypeCode::Alias_Traits&lt; CORBA::tk_value_box &gt;</class>
    <class kind="class">TAO::TypeCode::Alias</class>
  </compound>
  <compound kind="file">
    <name>Alias_TypeCode.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Alias__TypeCode_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Allocator.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Allocator_8h</filename>
    <namespace>TAO</namespace>
    <class kind="class">TAO::TAO_Allocator</class>
  </compound>
  <compound kind="file">
    <name>Any.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any_8cpp</filename>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Basic__Impl_8h" name="Any_Basic_Impl.h" local="yes" imported="no">tao/Any_Basic_Impl.h</includes>
    <includes id="Any__Impl__T_8h" name="Any_Impl_T.h" local="yes" imported="no">tao/Any_Impl_T.h</includes>
    <includes id="Any__Special__Impl__T_8h" name="Any_Special_Impl_T.h" local="yes" imported="no">tao/Any_Special_Impl_T.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <includes id="Any__Unknown__IDL__Type_8h" name="Any_Unknown_IDL_Type.h" local="yes" imported="no">tao/Any_Unknown_IDL_Type.h</includes>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">tao/Object.h</includes>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">tao/TypeCode.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8i" name="Any.i" local="yes" imported="no">tao/Any.i</includes>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, const CORBA::Any &amp;any)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;cdr, CORBA::Any &amp;any)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Any &amp;any, CORBA::Short s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::Any &amp;any, CORBA::UShort us)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;any, CORBA::Long l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;any, CORBA::ULong ul)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::Any &amp;any, CORBA::LongLong ll)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Any &amp;any, CORBA::ULongLong ull)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::Any &amp;any, CORBA::Float f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::Any &amp;any, CORBA::Double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::Any &amp;any, CORBA::LongDouble ld)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::Any &amp;any, const CORBA::Any &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::Any &amp;any, CORBA::Any *a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::Any &amp;any, CORBA::TypeCode_ptr tc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::Any &amp;any, CORBA::TypeCode_ptr *tc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::Any &amp;any, const CORBA::Object_ptr obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::Any &amp;any, CORBA::Object_ptr *objptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a17</anchor>
      <arglist>(CORBA::Any &amp;any, const char *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::Any &amp;any, const CORBA::WChar *ws)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a19</anchor>
      <arglist>(const CORBA::Any &amp;any, CORBA::Short &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a20</anchor>
      <arglist>(const CORBA::Any &amp;any, CORBA::UShort &amp;us)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a21</anchor>
      <arglist>(const CORBA::Any &amp;any, CORBA::Long &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a22</anchor>
      <arglist>(const CORBA::Any &amp;any, CORBA::ULong &amp;ul)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a23</anchor>
      <arglist>(const CORBA::Any &amp;any, CORBA::LongLong &amp;ll)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a24</anchor>
      <arglist>(const CORBA::Any &amp;any, CORBA::ULongLong &amp;ull)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a25</anchor>
      <arglist>(const CORBA::Any &amp;any, CORBA::Float &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a26</anchor>
      <arglist>(const CORBA::Any &amp;any, CORBA::Double &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a27</anchor>
      <arglist>(const CORBA::Any &amp;any, CORBA::LongDouble &amp;ld)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a28</anchor>
      <arglist>(const CORBA::Any &amp;any, const CORBA::Any *&amp;a)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a29</anchor>
      <arglist>(const CORBA::Any &amp;any, const CORBA::Char *&amp;s)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a30</anchor>
      <arglist>(const CORBA::Any &amp;any, const CORBA::WChar *&amp;ws)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a31</anchor>
      <arglist>(const CORBA::Any &amp;any, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; CORBA::Object &gt;::to_object</name>
      <anchor>a62</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Any.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any_8h</filename>
    <includes id="CORBA__methods_8h" name="CORBA_methods.h" local="yes" imported="no">tao/CORBA_methods.h</includes>
    <includes id="Pseudo__VarOut__T_8h" name="Pseudo_VarOut_T.h" local="yes" imported="no">tao/Pseudo_VarOut_T.h</includes>
    <includes id="Arg__Traits__T_8h" name="Arg_Traits_T.h" local="yes" imported="no">tao/Arg_Traits_T.h</includes>
    <namespace>TAO</namespace>
    <namespace>CORBA</namespace>
    <class kind="class">CORBA::Any</class>
    <class kind="struct">CORBA::Any::to_object</class>
    <class kind="struct">CORBA::Any::to_abstract_base</class>
    <class kind="struct">CORBA::Any::to_value</class>
    <class kind="class">CORBA::Any_var</class>
    <class kind="class">CORBA::Any_out</class>
    <member kind="typedef">
      <type>Any *</type>
      <name>Any_ptr</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeCode *</type>
      <name>TypeCode_ptr</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractBase *</type>
      <name>AbstractBase_ptr</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::Any &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::Any &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::Short)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::UShort)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::Long)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::ULong)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::Float)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::Double)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::Any &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::Any *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::Any &amp;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::WChar *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::TypeCode_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::TypeCode_ptr *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a17</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::Object_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::Object_ptr *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a19</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::Short &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a20</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::UShort &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a21</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::Long &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a22</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::ULong &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a23</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::LongLong &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a24</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::ULongLong &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a25</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::Float &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a26</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::Double &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a27</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::LongDouble &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a28</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::Any *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a29</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::TypeCode_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a30</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::Char *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a31</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::WChar *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a32</anchor>
      <arglist>(CORBA::Any_var &amp;, CORBA::Short)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a33</anchor>
      <arglist>(CORBA::Any_var &amp;, CORBA::UShort)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a34</anchor>
      <arglist>(CORBA::Any_var &amp;, CORBA::Long)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a35</anchor>
      <arglist>(CORBA::Any_var &amp;, CORBA::ULong)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a36</anchor>
      <arglist>(CORBA::Any_var &amp;, CORBA::Float)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a37</anchor>
      <arglist>(CORBA::Any_var &amp;, CORBA::Double)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a38</anchor>
      <arglist>(CORBA::Any_var &amp;, const CORBA::Any *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a39</anchor>
      <arglist>(CORBA::Any_var &amp;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a40</anchor>
      <arglist>(CORBA::Any_var &amp;, CORBA::TypeCode_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a41</anchor>
      <arglist>(CORBA::Any_var &amp;, const CORBA::Object_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a42</anchor>
      <arglist>(CORBA::Any_var &amp;, CORBA::Any::from_boolean)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a43</anchor>
      <arglist>(CORBA::Any_var &amp;, CORBA::Any::from_char)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a44</anchor>
      <arglist>(CORBA::Any_var &amp;, CORBA::Any::from_wchar)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a45</anchor>
      <arglist>(CORBA::Any_var &amp;, CORBA::Any::from_octet)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a46</anchor>
      <arglist>(CORBA::Any_var &amp;, CORBA::Any::from_string)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a47</anchor>
      <arglist>(CORBA::Any_var &amp;, CORBA::Any::from_wstring)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a48</anchor>
      <arglist>(const CORBA::Any_var &amp;, CORBA::Short &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a49</anchor>
      <arglist>(const CORBA::Any_var &amp;, CORBA::UShort &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a50</anchor>
      <arglist>(const CORBA::Any_var &amp;, CORBA::Long &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a51</anchor>
      <arglist>(const CORBA::Any_var &amp;, CORBA::ULong &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a52</anchor>
      <arglist>(const CORBA::Any_var &amp;, CORBA::LongLong &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a53</anchor>
      <arglist>(const CORBA::Any_var &amp;, CORBA::ULongLong &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a54</anchor>
      <arglist>(const CORBA::Any_var &amp;, CORBA::Float &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a55</anchor>
      <arglist>(const CORBA::Any_var &amp;, CORBA::Double &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a56</anchor>
      <arglist>(const CORBA::Any_var &amp;, CORBA::Any &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a57</anchor>
      <arglist>(const CORBA::Any_var &amp;, CORBA::TypeCode_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a58</anchor>
      <arglist>(const CORBA::Any_var &amp;, const char *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a59</anchor>
      <arglist>(const CORBA::Any_var &amp;, const CORBA::WChar *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a60</anchor>
      <arglist>(const CORBA::Any_var &amp;, CORBA::Any::to_boolean)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a61</anchor>
      <arglist>(const CORBA::Any_var &amp;, CORBA::Any::to_octet)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a62</anchor>
      <arglist>(const CORBA::Any_var &amp;, CORBA::Any::to_char)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a63</anchor>
      <arglist>(const CORBA::Any_var &amp;, CORBA::Any::to_wchar)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a64</anchor>
      <arglist>(const CORBA::Any_var &amp;, CORBA::Any::to_string)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a65</anchor>
      <arglist>(const CORBA::Any_var &amp;, CORBA::Any::to_wstring)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a66</anchor>
      <arglist>(const CORBA::Any_var &amp;, CORBA::Any::to_object)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Any.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any_8i</filename>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::Any_var &amp;lhs, CORBA::Short rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::Any_var &amp;lhs, CORBA::UShort rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Any_var &amp;lhs, CORBA::Long rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::Any_var &amp;lhs, CORBA::ULong rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any_var &amp;lhs, CORBA::LongLong rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any_var &amp;lhs, CORBA::ULongLong rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::Any_var &amp;lhs, CORBA::Float rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Any_var &amp;lhs, CORBA::Double rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::Any_var &amp;lhs, const CORBA::Any &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::Any_var &amp;lhs, const char *rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::Any_var &amp;lhs, CORBA::TypeCode_ptr rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::Any_var &amp;lhs, const CORBA::Object_ptr rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::Any_var &amp;lhs, CORBA::Any::from_boolean rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::Any_var &amp;lhs, CORBA::Any::from_char rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::Any_var &amp;lhs, CORBA::Any::from_wchar rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::Any_var &amp;lhs, CORBA::Any::from_octet rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::Any_var &amp;lhs, CORBA::Any::from_string rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a17</anchor>
      <arglist>(CORBA::Any_var &amp;lhs, CORBA::Any::from_wstring rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a18</anchor>
      <arglist>(const CORBA::Any_var &amp;lhs, CORBA::Short &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a19</anchor>
      <arglist>(const CORBA::Any_var &amp;lhs, CORBA::UShort &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a20</anchor>
      <arglist>(const CORBA::Any_var &amp;lhs, CORBA::Long &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a21</anchor>
      <arglist>(const CORBA::Any_var &amp;lhs, CORBA::ULong &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a22</anchor>
      <arglist>(const CORBA::Any_var &amp;lhs, CORBA::LongLong &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a23</anchor>
      <arglist>(const CORBA::Any_var &amp;lhs, CORBA::ULongLong &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a24</anchor>
      <arglist>(const CORBA::Any_var &amp;lhs, CORBA::Float &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a25</anchor>
      <arglist>(const CORBA::Any_var &amp;lhs, CORBA::Double &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a26</anchor>
      <arglist>(const CORBA::Any_var &amp;lhs, const CORBA::Any *&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a27</anchor>
      <arglist>(const CORBA::Any_var &amp;lhs, CORBA::TypeCode_ptr &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a28</anchor>
      <arglist>(const CORBA::Any_var &amp;lhs, const char *&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a29</anchor>
      <arglist>(const CORBA::Any_var &amp;lhs, const CORBA::WChar *&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a30</anchor>
      <arglist>(const CORBA::Any_var &amp;lhs, CORBA::Any::to_boolean rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a31</anchor>
      <arglist>(const CORBA::Any_var &amp;lhs, CORBA::Any::to_octet rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a32</anchor>
      <arglist>(const CORBA::Any_var &amp;lhs, CORBA::Any::to_char rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a33</anchor>
      <arglist>(const CORBA::Any_var &amp;lhs, CORBA::Any::to_wchar rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a34</anchor>
      <arglist>(const CORBA::Any_var &amp;lhs, CORBA::Any::to_string rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a35</anchor>
      <arglist>(const CORBA::Any_var &amp;lhs, CORBA::Any::to_wstring rhs)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a36</anchor>
      <arglist>(const CORBA::Any_var &amp;lhs, CORBA::Any::to_object rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Any_Arg_Traits.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any__Arg__Traits_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Var__Size__Argument__T_8h" name="Var_Size_Argument_T.h" local="yes" imported="no">tao/Var_Size_Argument_T.h</includes>
    <includes id="Arg__Traits__T_8h" name="Arg_Traits_T.h" local="yes" imported="no">tao/Arg_Traits_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::Any &gt;</class>
  </compound>
  <compound kind="file">
    <name>Any_Array_Impl_T.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any__Array__Impl__T_8cpp</filename>
    <includes id="Any__Array__Impl__T_8h" name="Any_Array_Impl_T.h" local="yes" imported="no">tao/Any_Array_Impl_T.h</includes>
    <includes id="Any__Unknown__IDL__Type_8h" name="Any_Unknown_IDL_Type.h" local="yes" imported="no">tao/Any_Unknown_IDL_Type.h</includes>
    <includes id="Marshal_8h" name="Marshal.h" local="yes" imported="no">tao/Marshal.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="Any__Array__Impl__T_8inl" name="Any_Array_Impl_T.inl" local="yes" imported="no">tao/Any_Array_Impl_T.inl</includes>
  </compound>
  <compound kind="file">
    <name>Any_Array_Impl_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any__Array__Impl__T_8h</filename>
    <includes id="Any__Impl_8h" name="Any_Impl.h" local="yes" imported="no">tao/Any_Impl.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Any_Array_Impl_T</class>
  </compound>
  <compound kind="file">
    <name>Any_Array_Impl_T.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any__Array__Impl__T_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Any_Basic_Impl.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any__Basic__Impl_8cpp</filename>
    <includes id="Any__Basic__Impl_8h" name="Any_Basic_Impl.h" local="yes" imported="no">tao/Any_Basic_Impl.h</includes>
    <includes id="Any__Unknown__IDL__Type_8h" name="Any_Unknown_IDL_Type.h" local="yes" imported="no">tao/Any_Unknown_IDL_Type.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">tao/TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>Any_Basic_Impl.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any__Basic__Impl_8h</filename>
    <includes id="Any__Impl_8h" name="Any_Impl.h" local="yes" imported="no">tao/Any_Impl.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Any_Basic_Impl</class>
  </compound>
  <compound kind="file">
    <name>Any_Basic_Impl_T.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any__Basic__Impl__T_8cpp</filename>
    <includes id="Any__Basic__Impl__T_8h" name="Any_Basic_Impl_T.h" local="yes" imported="no">tao/Any_Basic_Impl_T.h</includes>
    <includes id="Any__Unknown__IDL__Type_8h" name="Any_Unknown_IDL_Type.h" local="yes" imported="no">tao/Any_Unknown_IDL_Type.h</includes>
    <includes id="Marshal_8h" name="Marshal.h" local="yes" imported="no">tao/Marshal.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any__Basic__Impl__T_8inl" name="Any_Basic_Impl_T.inl" local="yes" imported="no">tao/Any_Basic_Impl_T.inl</includes>
  </compound>
  <compound kind="file">
    <name>Any_Basic_Impl_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any__Basic__Impl__T_8h</filename>
    <includes id="Any__Impl_8h" name="Any_Impl.h" local="yes" imported="no">tao/Any_Impl.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Any_Basic_Impl_T</class>
  </compound>
  <compound kind="file">
    <name>Any_Basic_Impl_T.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any__Basic__Impl__T_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Any_Dual_Impl_T.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any__Dual__Impl__T_8cpp</filename>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Unknown__IDL__Type_8h" name="Any_Unknown_IDL_Type.h" local="yes" imported="no">tao/Any_Unknown_IDL_Type.h</includes>
    <includes id="Marshal_8h" name="Marshal.h" local="yes" imported="no">tao/Marshal.h</includes>
    <includes id="CORBA__String_8h" name="CORBA_String.h" local="yes" imported="no">tao/CORBA_String.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">tao/TypeCode.h</includes>
    <includes id="Any__Dual__Impl__T_8inl" name="Any_Dual_Impl_T.inl" local="yes" imported="no">tao/Any_Dual_Impl_T.inl</includes>
  </compound>
  <compound kind="file">
    <name>Any_Dual_Impl_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any__Dual__Impl__T_8h</filename>
    <includes id="Any__Impl_8h" name="Any_Impl.h" local="yes" imported="no">tao/Any_Impl.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Any_Dual_Impl_T</class>
  </compound>
  <compound kind="file">
    <name>Any_Dual_Impl_T.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any__Dual__Impl__T_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Any_Impl.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any__Impl_8cpp</filename>
    <includes id="Any__Impl_8h" name="Any_Impl.h" local="yes" imported="no">Any_Impl.h</includes>
    <includes id="Marshal_8h" name="Marshal.h" local="yes" imported="no">Marshal.h</includes>
    <includes id="CORBA__String_8h" name="CORBA_String.h" local="yes" imported="no">CORBA_String.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">TypeCode.h</includes>
  </compound>
  <compound kind="file">
    <name>Any_Impl.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any__Impl_8h</filename>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Any_Impl</class>
  </compound>
  <compound kind="file">
    <name>Any_Impl_T.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any__Impl__T_8cpp</filename>
    <includes id="Any__Impl__T_8h" name="Any_Impl_T.h" local="yes" imported="no">tao/Any_Impl_T.h</includes>
    <includes id="Any__Unknown__IDL__Type_8h" name="Any_Unknown_IDL_Type.h" local="yes" imported="no">tao/Any_Unknown_IDL_Type.h</includes>
    <includes id="Marshal_8h" name="Marshal.h" local="yes" imported="no">tao/Marshal.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">tao/TypeCode.h</includes>
    <includes id="Any__Impl__T_8inl" name="Any_Impl_T.inl" local="yes" imported="no">tao/Any_Impl_T.inl</includes>
  </compound>
  <compound kind="file">
    <name>Any_Impl_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any__Impl__T_8h</filename>
    <includes id="Any__Impl_8h" name="Any_Impl.h" local="yes" imported="no">tao/Any_Impl.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Any_Impl_T</class>
  </compound>
  <compound kind="file">
    <name>Any_Impl_T.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any__Impl__T_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Any_Special_Impl_T.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any__Special__Impl__T_8cpp</filename>
    <includes id="Any__Special__Impl__T_8h" name="Any_Special_Impl_T.h" local="yes" imported="no">tao/Any_Special_Impl_T.h</includes>
    <includes id="Any__Unknown__IDL__Type_8h" name="Any_Unknown_IDL_Type.h" local="yes" imported="no">tao/Any_Unknown_IDL_Type.h</includes>
    <includes id="Marshal_8h" name="Marshal.h" local="yes" imported="no">tao/Marshal.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="String__TypeCode__Traits_8h" name="String_TypeCode_Traits.h" local="yes" imported="no">tao/String_TypeCode_Traits.h</includes>
    <includes id="Any__Special__Impl__T_8inl" name="Any_Special_Impl_T.inl" local="yes" imported="no">tao/Any_Special_Impl_T.inl</includes>
  </compound>
  <compound kind="file">
    <name>Any_Special_Impl_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any__Special__Impl__T_8h</filename>
    <includes id="Any__Impl_8h" name="Any_Impl.h" local="yes" imported="no">tao/Any_Impl.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Any_Special_Impl_T</class>
  </compound>
  <compound kind="file">
    <name>Any_Special_Impl_T.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any__Special__Impl__T_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Any_SystemException.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any__SystemException_8cpp</filename>
    <includes id="Any__SystemException_8h" name="Any_SystemException.h" local="yes" imported="no">Any_SystemException.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">Any.h</includes>
    <includes id="Any__Unknown__IDL__Type_8h" name="Any_Unknown_IDL_Type.h" local="yes" imported="no">Any_Unknown_IDL_Type.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">CDR.h</includes>
    <includes id="Exception_8h" name="Exception.h" local="yes" imported="no">Exception.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">Environment.h</includes>
    <includes id="Marshal_8h" name="Marshal.h" local="yes" imported="no">Marshal.h</includes>
    <includes id="CORBA__String_8h" name="CORBA_String.h" local="yes" imported="no">CORBA_String.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">TypeCode.h</includes>
  </compound>
  <compound kind="file">
    <name>Any_SystemException.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any__SystemException_8h</filename>
    <includes id="Any__Impl_8h" name="Any_Impl.h" local="yes" imported="no">tao/Any_Impl.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Any_SystemException</class>
    <member kind="typedef">
      <type>CORBA::SystemException *(*</type>
      <name>excp_factory</name>
      <anchor>a0</anchor>
      <arglist>)(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Any_Unknown_IDL_Type.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any__Unknown__IDL__Type_8cpp</filename>
    <includes id="Any__Unknown__IDL__Type_8h" name="Any_Unknown_IDL_Type.h" local="yes" imported="no">tao/Any_Unknown_IDL_Type.h</includes>
    <includes id="Valuetype__Adapter_8h" name="Valuetype_Adapter.h" local="yes" imported="no">tao/Valuetype_Adapter.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="Marshal_8h" name="Marshal.h" local="yes" imported="no">tao/Marshal.h</includes>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">tao/TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
  </compound>
  <compound kind="file">
    <name>Any_Unknown_IDL_Type.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Any__Unknown__IDL__Type_8h</filename>
    <includes id="Any__Impl_8h" name="Any_Impl.h" local="yes" imported="no">tao/Any_Impl.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Unknown_IDL_Type</class>
  </compound>
  <compound kind="file">
    <name>AnySeq.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>AnySeq_8pidl</filename>
    <namespace>CORBA</namespace>
    <member kind="typedef">
      <type>sequence&lt; any &gt;</type>
      <name>AnySeq</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AnySeqA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>AnySeqA_8cpp</filename>
    <includes id="AnySeqC_8h" name="AnySeqC.h" local="yes" imported="no">AnySeqC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <namespace>CORBA</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::AnySeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::AnySeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::AnySeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::AnySeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_AnySeq_0</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_any, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_AnySeq_0</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_AnySeq</name>
      <anchor>a2</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/AnySeq:1.0&quot;,&quot;AnySeq&quot;,&amp;TAO::TypeCode::tc_CORBA_AnySeq_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_AnySeq</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AnySeqC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>AnySeqC_8cpp</filename>
    <includes id="AnySeqC_8h" name="AnySeqC.h" local="yes" imported="no">AnySeqC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_ANYSEQ_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::AnySeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::AnySeq &amp;_tao_sequence)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AnySeqC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>AnySeqC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">CORBA::AnySeq</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_ANYSEQ_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_VarSeq_Var_T&lt; AnySeq, CORBA::Any &gt;</type>
      <name>AnySeq_var</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; AnySeq, AnySeq_var, CORBA::Any &gt;</type>
      <name>AnySeq_out</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::AnySeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::AnySeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::AnySeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::AnySeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::AnySeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::AnySeq &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AnySeqS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>AnySeqS_8h</filename>
  </compound>
  <compound kind="file">
    <name>append.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>append_8cpp</filename>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <includes id="Valuetype__Adapter_8h" name="Valuetype_Adapter.h" local="yes" imported="no">tao/Valuetype_Adapter.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">tao/TypeCode.h</includes>
    <includes id="Marshal_8h" name="Marshal.h" local="yes" imported="no">tao/Marshal.h</includes>
    <includes id="Any__Unknown__IDL__Type_8h" name="Any_Unknown_IDL_Type.h" local="yes" imported="no">tao/Any_Unknown_IDL_Type.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
  </compound>
  <compound kind="file">
    <name>Arg_Traits_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Arg__Traits__T_8h</filename>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Arg_Traits</class>
    <class kind="class">TAO::SArg_Traits</class>
  </compound>
  <compound kind="file">
    <name>Argument.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Argument_8cpp</filename>
    <includes id="Argument_8h" name="Argument.h" local="yes" imported="no">tao/Argument.h</includes>
  </compound>
  <compound kind="file">
    <name>Argument.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Argument_8h</filename>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <namespace>Dynamic</namespace>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Argument</class>
  </compound>
  <compound kind="file">
    <name>Array_VarOut_T.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Array__VarOut__T_8cpp</filename>
    <includes id="Array__VarOut__T_8h" name="Array_VarOut_T.h" local="yes" imported="no">tao/Array_VarOut_T.h</includes>
    <includes id="Array__VarOut__T_8inl" name="Array_VarOut_T.inl" local="yes" imported="no">tao/Array_VarOut_T.inl</includes>
    <member kind="function">
      <type></type>
      <name>ACE_RCSID</name>
      <anchor>a1</anchor>
      <arglist>(tao, Array_VarOut_T,&quot;$Id$&quot;) template&lt; typename T</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>T_slice</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Array_VarOut_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Array__VarOut__T_8h</filename>
    <namespace>TAO</namespace>
    <class kind="struct">TAO::Array_Traits</class>
    <class kind="class">TAO_Array_Var_Base_T</class>
    <class kind="class">TAO_FixedArray_Var_T</class>
    <class kind="class">TAO_VarArray_Var_T</class>
    <class kind="class">TAO_Array_Out_T</class>
    <class kind="class">TAO_Array_Forany_T</class>
  </compound>
  <compound kind="file">
    <name>Array_VarOut_T.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Array__VarOut__T_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Asynch_Queued_Message.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Asynch__Queued__Message_8cpp</filename>
    <includes id="Asynch__Queued__Message_8h" name="Asynch_Queued_Message.h" local="yes" imported="no">Asynch_Queued_Message.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
  </compound>
  <compound kind="file">
    <name>Asynch_Queued_Message.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Asynch__Queued__Message_8h</filename>
    <includes id="Queued__Message_8h" name="Queued_Message.h" local="yes" imported="no">tao/Queued_Message.h</includes>
    <class kind="class">TAO_Asynch_Queued_Message</class>
  </compound>
  <compound kind="file">
    <name>Asynch_Reply_Dispatcher_Base.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Asynch__Reply__Dispatcher__Base_8cpp</filename>
    <includes id="Asynch__Reply__Dispatcher__Base_8h" name="Asynch_Reply_Dispatcher_Base.h" local="yes" imported="no">tao/Asynch_Reply_Dispatcher_Base.h</includes>
    <includes id="Pluggable__Messaging__Utils_8h" name="Pluggable_Messaging_Utils.h" local="yes" imported="no">tao/Pluggable_Messaging_Utils.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">tao/Transport.h</includes>
    <includes id="Asynch__Reply__Dispatcher__Base_8i" name="Asynch_Reply_Dispatcher_Base.i" local="yes" imported="no">tao/Asynch_Reply_Dispatcher_Base.i</includes>
  </compound>
  <compound kind="file">
    <name>Asynch_Reply_Dispatcher_Base.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Asynch__Reply__Dispatcher__Base_8h</filename>
    <includes id="Reply__Dispatcher_8h" name="Reply_Dispatcher.h" local="yes" imported="no">tao/Reply_Dispatcher.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="IOP__IORC_8h" name="IOP_IORC.h" local="yes" imported="no">tao/IOP_IORC.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO_Asynch_Reply_Dispatcher_Base</class>
    <class kind="class">TAO::ARDB_Refcount_Functor</class>
  </compound>
  <compound kind="file">
    <name>Asynch_Reply_Dispatcher_Base.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Asynch__Reply__Dispatcher__Base_8i</filename>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>Auto_Functor.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Auto__Functor_8h</filename>
    <namespace>TAO</namespace>
    <namespace>TAO::Utils</namespace>
  </compound>
  <compound kind="file">
    <name>Base_Transport_Property.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Base__Transport__Property_8cpp</filename>
    <includes id="Base__Transport__Property_8h" name="Base_Transport_Property.h" local="yes" imported="no">tao/Base_Transport_Property.h</includes>
    <includes id="Base__Transport__Property_8inl" name="Base_Transport_Property.inl" local="yes" imported="no">tao/Base_Transport_Property.inl</includes>
  </compound>
  <compound kind="file">
    <name>Base_Transport_Property.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Base__Transport__Property_8h</filename>
    <includes id="Transport__Descriptor__Interface_8h" name="Transport_Descriptor_Interface.h" local="yes" imported="no">tao/Transport_Descriptor_Interface.h</includes>
    <includes id="Endpoint_8h" name="Endpoint.h" local="yes" imported="no">tao/Endpoint.h</includes>
    <class kind="class">TAO_Base_Transport_Property</class>
  </compound>
  <compound kind="file">
    <name>Base_Transport_Property.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Base__Transport__Property_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Basic_Argument_T.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Basic__Argument__T_8cpp</filename>
    <includes id="Basic__Argument__T_8h" name="Basic_Argument_T.h" local="yes" imported="no">tao/Basic_Argument_T.h</includes>
    <includes id="Dynamic__ParameterC_8h" name="Dynamic_ParameterC.h" local="yes" imported="no">tao/Dynamic_ParameterC.h</includes>
    <includes id="Basic__Argument__T_8inl" name="Basic_Argument_T.inl" local="yes" imported="no">tao/Basic_Argument_T.inl</includes>
  </compound>
  <compound kind="file">
    <name>Basic_Argument_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Basic__Argument__T_8h</filename>
    <includes id="Argument_8h" name="Argument.h" local="yes" imported="no">tao/Argument.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::In_Basic_Argument_T</class>
    <class kind="class">TAO::Inout_Basic_Argument_T</class>
    <class kind="class">TAO::Out_Basic_Argument_T</class>
    <class kind="class">TAO::Ret_Basic_Argument_T</class>
    <class kind="struct">TAO::Basic_Tag</class>
    <class kind="struct">TAO::Basic_Arg_Traits_T</class>
  </compound>
  <compound kind="file">
    <name>Basic_Argument_T.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Basic__Argument__T_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Basic_Arguments.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Basic__Arguments_8cpp</filename>
    <includes id="Basic__Arguments_8h" name="Basic_Arguments.h" local="yes" imported="no">tao/Basic_Arguments.h</includes>
  </compound>
  <compound kind="file">
    <name>Basic_Arguments.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Basic__Arguments_8h</filename>
    <includes id="Basic__Argument__T_8h" name="Basic_Argument_T.h" local="yes" imported="no">tao/Basic_Argument_T.h</includes>
    <includes id="Arg__Traits__T_8h" name="Arg_Traits_T.h" local="yes" imported="no">tao/Arg_Traits_T.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Arg_Traits&lt; void &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::Short &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::Long &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::UShort &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::ULong &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::Float &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::Double &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::LongLong &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::ULongLong &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::LongDouble &gt;</class>
  </compound>
  <compound kind="file">
    <name>Basic_Types.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Basic__Types_8h</filename>
    <namespace>CORBA</namespace>
    <member kind="typedef">
      <type>ACE_CDR::Boolean</type>
      <name>Boolean</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Boolean &amp;</type>
      <name>Boolean_out</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_CDR::Octet</type>
      <name>Octet</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Octet &amp;</type>
      <name>Octet_out</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_CDR::Short</type>
      <name>Short</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Short &amp;</type>
      <name>Short_out</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_CDR::UShort</type>
      <name>UShort</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UShort &amp;</type>
      <name>UShort_out</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_CDR::Long</type>
      <name>Long</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Long &amp;</type>
      <name>Long_out</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_CDR::ULong</type>
      <name>ULong</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ULong &amp;</type>
      <name>ULong_out</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_CDR::LongLong</type>
      <name>LongLong</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LongLong &amp;</type>
      <name>LongLong_out</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_CDR::ULongLong</type>
      <name>ULongLong</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ULongLong &amp;</type>
      <name>ULongLong_out</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_CDR::Float</type>
      <name>Float</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Float &amp;</type>
      <name>Float_out</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_CDR::Double</type>
      <name>Double</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Double &amp;</type>
      <name>Double_out</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_CDR::LongDouble</type>
      <name>LongDouble</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LongDouble &amp;</type>
      <name>LongDouble_out</name>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_CDR::Char</type>
      <name>Char</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Char &amp;</type>
      <name>Char_out</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_CDR::WChar</type>
      <name>WChar</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WChar &amp;</type>
      <name>WChar_out</name>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BD_String_Argument_T.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>BD__String__Argument__T_8cpp</filename>
    <includes id="BD__String__Argument__T_8h" name="BD_String_Argument_T.h" local="yes" imported="no">tao/BD_String_Argument_T.h</includes>
    <includes id="Dynamic__ParameterC_8h" name="Dynamic_ParameterC.h" local="yes" imported="no">tao/Dynamic_ParameterC.h</includes>
    <includes id="BD__String__Argument__T_8inl" name="BD_String_Argument_T.inl" local="yes" imported="no">tao/BD_String_Argument_T.inl</includes>
  </compound>
  <compound kind="file">
    <name>BD_String_Argument_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>BD__String__Argument__T_8h</filename>
    <includes id="Argument_8h" name="Argument.h" local="yes" imported="no">tao/Argument.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::In_BD_String_Argument_T</class>
    <class kind="class">TAO::Inout_BD_String_Argument_T</class>
    <class kind="class">TAO::Out_BD_String_Argument_T</class>
    <class kind="class">TAO::Ret_BD_String_Argument_T</class>
    <class kind="struct">TAO::BD_String_Tag</class>
    <class kind="struct">TAO::BD_String_Arg_Traits_T</class>
    <class kind="class">TAO::BD_String_Arg_Traits</class>
    <class kind="class">TAO::BD_WString_Arg_Traits</class>
  </compound>
  <compound kind="file">
    <name>BD_String_Argument_T.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>BD__String__Argument__T_8inl</filename>
  </compound>
  <compound kind="file">
    <name>BiDir_Adapter.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>BiDir__Adapter_8cpp</filename>
    <includes id="BiDir__Adapter_8h" name="BiDir_Adapter.h" local="yes" imported="no">tao/BiDir_Adapter.h</includes>
  </compound>
  <compound kind="file">
    <name>BiDir_Adapter.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>BiDir__Adapter_8h</filename>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">TAO_BiDir_Adapter</class>
    <member kind="typedef">
      <type>ORB *</type>
      <name>ORB_ptr</name>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Bind_Dispatcher_Guard.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Bind__Dispatcher__Guard_8cpp</filename>
    <includes id="Bind__Dispatcher__Guard_8h" name="Bind_Dispatcher_Guard.h" local="yes" imported="no">tao/Bind_Dispatcher_Guard.h</includes>
    <includes id="Bind__Dispatcher__Guard_8i" name="Bind_Dispatcher_Guard.i" local="yes" imported="no">tao/Bind_Dispatcher_Guard.i</includes>
  </compound>
  <compound kind="file">
    <name>Bind_Dispatcher_Guard.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Bind__Dispatcher__Guard_8h</filename>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <class kind="class">TAO_Bind_Dispatcher_Guard</class>
  </compound>
  <compound kind="file">
    <name>Bind_Dispatcher_Guard.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Bind__Dispatcher__Guard_8i</filename>
    <includes id="Reply__Dispatcher_8h" name="Reply_Dispatcher.h" local="yes" imported="no">tao/Reply_Dispatcher.h</includes>
    <includes id="Transport__Mux__Strategy_8h" name="Transport_Mux_Strategy.h" local="yes" imported="no">tao/Transport_Mux_Strategy.h</includes>
  </compound>
  <compound kind="file">
    <name>Block_Flushing_Strategy.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Block__Flushing__Strategy_8cpp</filename>
    <includes id="Block__Flushing__Strategy_8h" name="Block_Flushing_Strategy.h" local="yes" imported="no">Block_Flushing_Strategy.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">Transport.h</includes>
    <includes id="Queued__Message_8h" name="Queued_Message.h" local="yes" imported="no">Queued_Message.h</includes>
  </compound>
  <compound kind="file">
    <name>Block_Flushing_Strategy.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Block__Flushing__Strategy_8h</filename>
    <includes id="Flushing__Strategy_8h" name="Flushing_Strategy.h" local="yes" imported="no">Flushing_Strategy.h</includes>
    <class kind="class">TAO_Block_Flushing_Strategy</class>
  </compound>
  <compound kind="file">
    <name>Blocked_Connect_Strategy.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Blocked__Connect__Strategy_8cpp</filename>
    <includes id="Blocked__Connect__Strategy_8h" name="Blocked_Connect_Strategy.h" local="yes" imported="no">Blocked_Connect_Strategy.h</includes>
    <includes id="Connection__Handler_8h" name="Connection_Handler.h" local="yes" imported="no">Connection_Handler.h</includes>
  </compound>
  <compound kind="file">
    <name>Blocked_Connect_Strategy.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Blocked__Connect__Strategy_8h</filename>
    <includes id="Connect__Strategy_8h" name="Connect_Strategy.h" local="yes" imported="no">Connect_Strategy.h</includes>
    <class kind="class">TAO_Blocked_Connect_Strategy</class>
  </compound>
  <compound kind="file">
    <name>BooleanSeq.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>BooleanSeq_8pidl</filename>
    <namespace>CORBA</namespace>
    <member kind="typedef">
      <type>sequence&lt; boolean &gt;</type>
      <name>BooleanSeq</name>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BooleanSeqA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>BooleanSeqA_8cpp</filename>
    <includes id="BooleanSeqC_8h" name="BooleanSeqC.h" local="yes" imported="no">BooleanSeqC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <namespace>CORBA</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::BooleanSeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::BooleanSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::BooleanSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::BooleanSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_BooleanSeq_0</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_boolean, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_BooleanSeq_0</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_BooleanSeq</name>
      <anchor>a2</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/BooleanSeq:1.0&quot;,&quot;BooleanSeq&quot;,&amp;TAO::TypeCode::tc_CORBA_BooleanSeq_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_BooleanSeq</name>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BooleanSeqC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>BooleanSeqC_8cpp</filename>
    <includes id="BooleanSeqC_8h" name="BooleanSeqC.h" local="yes" imported="no">BooleanSeqC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_BOOLEANSEQ_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::BooleanSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::BooleanSeq &amp;_tao_sequence)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BooleanSeqC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>BooleanSeqC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">CORBA::BooleanSeq</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_BOOLEANSEQ_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; BooleanSeq, CORBA::Boolean &gt;</type>
      <name>BooleanSeq_var</name>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; BooleanSeq, BooleanSeq_var, CORBA::Boolean &gt;</type>
      <name>BooleanSeq_out</name>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::BooleanSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::BooleanSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::BooleanSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::BooleanSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::BooleanSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::BooleanSeq &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BooleanSeqS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>BooleanSeqS_8h</filename>
  </compound>
  <compound kind="file">
    <name>Bounds.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Bounds_8pidl</filename>
    <namespace>CORBA</namespace>
    <class kind="exception">CORBA::Bounds</class>
  </compound>
  <compound kind="file">
    <name>BoundsA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>BoundsA_8cpp</filename>
    <includes id="BoundsC_8h" name="BoundsC.h" local="yes" imported="no">BoundsC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Struct__TypeCode_8h" name="Struct_TypeCode.h" local="yes" imported="no">tao/Struct_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; CORBA::Bounds &gt;::demarshal_value</name>
      <anchor>a63</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::Bounds &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::Bounds *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::Bounds *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::Bounds *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *const</type>
      <name>_tao_fields_CORBA_Bounds</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_Bounds</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::tk_except,&quot;IDL:omg.org/CORBA/Bounds:1.0&quot;,&quot;Bounds&quot;, _tao_fields_CORBA_Bounds, 0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_Bounds</name>
      <anchor>a42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoundsC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>BoundsC_8cpp</filename>
    <includes id="BoundsC_8h" name="BoundsC.h" local="yes" imported="no">BoundsC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::Bounds &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::Bounds &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoundsC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>BoundsC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="exception">CORBA::Bounds</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_BOUNDS_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::Bounds &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::Bounds *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::Bounds *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::Bounds *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::Bounds &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::Bounds &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Buffer_Allocator_T.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Buffer__Allocator__T_8cpp</filename>
    <includes id="Buffer__Allocator__T_8h" name="Buffer_Allocator_T.h" local="yes" imported="no">tao/Buffer_Allocator_T.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>Buffer_Allocator_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Buffer__Allocator__T_8h</filename>
    <includes id="Allocator_8h" name="Allocator.h" local="yes" imported="no">tao/Allocator.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::TAO_Buffer_Allocator</class>
  </compound>
  <compound kind="file">
    <name>Buffering_Constraint_Policy.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Buffering__Constraint__Policy_8cpp</filename>
    <includes id="Buffering__Constraint__Policy_8h" name="Buffering_Constraint_Policy.h" local="yes" imported="no">tao/Buffering_Constraint_Policy.h</includes>
    <includes id="TAOC_8h" name="TAOC.h" local="yes" imported="no">TAOC.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="Buffering__Constraint__Policy_8i" name="Buffering_Constraint_Policy.i" local="yes" imported="no">tao/Buffering_Constraint_Policy.i</includes>
  </compound>
  <compound kind="file">
    <name>Buffering_Constraint_Policy.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Buffering__Constraint__Policy_8h</filename>
    <includes id="TAOC_8h" name="TAOC.h" local="yes" imported="no">tao/TAOC.h</includes>
    <includes id="LocalObject_8h" name="LocalObject.h" local="yes" imported="no">tao/LocalObject.h</includes>
    <class kind="class">TAO_Buffering_Constraint_Policy</class>
  </compound>
  <compound kind="file">
    <name>Buffering_Constraint_Policy.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Buffering__Constraint__Policy_8i</filename>
  </compound>
  <compound kind="file">
    <name>Cache_Entries.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Cache__Entries_8cpp</filename>
    <includes id="Cache__Entries_8h" name="Cache_Entries.h" local="yes" imported="no">tao/Cache_Entries.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">tao/Transport.h</includes>
    <includes id="Cache__Entries_8inl" name="Cache_Entries.inl" local="yes" imported="no">tao/Cache_Entries.inl</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>Cache_Entries.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Cache__Entries_8h</filename>
    <includes id="Transport__Descriptor__Interface_8h" name="Transport_Descriptor_Interface.h" local="yes" imported="no">tao/Transport_Descriptor_Interface.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Cache_IntId</class>
    <class kind="class">TAO::Cache_ExtId</class>
    <member kind="enumeration">
      <name>Cache_Entries_State</name>
      <anchor>a147</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENTRY_IDLE_AND_PURGABLE</name>
      <anchor>a147a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENTRY_IDLE_BUT_NOT_PURGABLE</name>
      <anchor>a147a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENTRY_PURGABLE_BUT_NOT_IDLE</name>
      <anchor>a147a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENTRY_BUSY</name>
      <anchor>a147a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENTRY_CLOSED</name>
      <anchor>a147a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENTRY_UNKNOWN</name>
      <anchor>a147a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Cache_Entries.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Cache__Entries_8inl</filename>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>CDR.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CDR_8cpp</filename>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Timeprobe_8h" name="Timeprobe.h" local="yes" imported="no">tao/Timeprobe.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="CDR_8i" name="CDR.i" local="yes" imported="no">tao/CDR.i</includes>
  </compound>
  <compound kind="file">
    <name>CDR.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CDR_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">TAO_OutputCDR</class>
    <class kind="class">TAO_InputCDR</class>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::Short x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::UShort x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::Long x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::ULong x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::LongLong x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::ULongLong x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::LongDouble x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a7</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::Float x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::Double x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_OutputCDR &amp;os, const CORBA::Char *x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a10</anchor>
      <arglist>(TAO_OutputCDR &amp;os, const CORBA::WChar *x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a11</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::Short &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a12</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::UShort &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a13</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::Long &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a14</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::ULong &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a15</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::LongLong &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a16</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::ULongLong &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a17</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::LongDouble &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a18</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::Float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a19</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::Double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a20</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::Char *&amp;x)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a21</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::WChar *&amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CDR.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CDR_8i</filename>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::Short x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::UShort x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::Long x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::ULong x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::LongLong x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::ULongLong x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::LongDouble x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a7</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::Float x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;os, CORBA::Double x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_OutputCDR &amp;os, const CORBA::Char *x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a10</anchor>
      <arglist>(TAO_OutputCDR &amp;os, const CORBA::WChar *x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a11</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::Short &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a12</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::UShort &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a13</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::Long &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a14</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::ULong &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a15</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::LongLong &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a16</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::ULongLong &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a17</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::LongDouble &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a18</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::Float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a19</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::Double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a20</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::Char *&amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a21</anchor>
      <arglist>(TAO_InputCDR &amp;is, CORBA::WChar *&amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CDR_Encaps_Codec.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CDR__Encaps__Codec_8cpp</filename>
    <includes id="CDR__Encaps__Codec_8h" name="CDR_Encaps_Codec.h" local="yes" imported="no">CDR_Encaps_Codec.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">CDR.h</includes>
    <includes id="OctetSeqC_8h" name="OctetSeqC.h" local="yes" imported="no">OctetSeqC.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">Any.h</includes>
    <includes id="Any__Impl_8h" name="Any_Impl.h" local="yes" imported="no">Any_Impl.h</includes>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">TypeCode.h</includes>
    <includes id="Marshal_8h" name="Marshal.h" local="yes" imported="no">Marshal.h</includes>
    <includes id="Any__Unknown__IDL__Type_8h" name="Any_Unknown_IDL_Type.h" local="yes" imported="no">Any_Unknown_IDL_Type.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="ORB__Constants_8h" name="ORB_Constants.h" local="yes" imported="no">ORB_Constants.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">TypeCode_Constants.h</includes>
  </compound>
  <compound kind="file">
    <name>CDR_Encaps_Codec.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CDR__Encaps__Codec_8h</filename>
    <includes id="IOP__CodecC_8h" name="IOP_CodecC.h" local="yes" imported="no">IOP_CodecC.h</includes>
    <includes id="LocalObject_8h" name="LocalObject.h" local="yes" imported="no">LocalObject.h</includes>
    <class kind="class">TAO_CDR_Encaps_Codec</class>
  </compound>
  <compound kind="file">
    <name>CharSeq.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CharSeq_8pidl</filename>
    <namespace>CORBA</namespace>
    <member kind="typedef">
      <type>sequence&lt; char &gt;</type>
      <name>CharSeq</name>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CharSeqA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CharSeqA_8cpp</filename>
    <includes id="CharSeqC_8h" name="CharSeqC.h" local="yes" imported="no">CharSeqC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <namespace>CORBA</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::CharSeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::CharSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::CharSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::CharSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_CharSeq_0</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_char, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_CharSeq_0</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_CharSeq</name>
      <anchor>a2</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/CharSeq:1.0&quot;,&quot;CharSeq&quot;,&amp;TAO::TypeCode::tc_CORBA_CharSeq_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_CharSeq</name>
      <anchor>a44</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CharSeqC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CharSeqC_8cpp</filename>
    <includes id="CharSeqC_8h" name="CharSeqC.h" local="yes" imported="no">CharSeqC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_CHARSEQ_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::CharSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::CharSeq &amp;_tao_sequence)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CharSeqC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CharSeqC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">CORBA::CharSeq</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_CHARSEQ_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; CharSeq, CORBA::Char &gt;</type>
      <name>CharSeq_var</name>
      <anchor>a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; CharSeq, CharSeq_var, CORBA::Char &gt;</type>
      <name>CharSeq_out</name>
      <anchor>a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::CharSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::CharSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::CharSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::CharSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::CharSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::CharSeq &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CharSeqS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CharSeqS_8h</filename>
  </compound>
  <compound kind="file">
    <name>Cleanup_Func_Registry.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Cleanup__Func__Registry_8cpp</filename>
    <includes id="Cleanup__Func__Registry_8h" name="Cleanup_Func_Registry.h" local="yes" imported="no">Cleanup_Func_Registry.h</includes>
    <includes id="Cleanup__Func__Registry_8inl" name="Cleanup_Func_Registry.inl" local="yes" imported="no">Cleanup_Func_Registry.inl</includes>
  </compound>
  <compound kind="file">
    <name>Cleanup_Func_Registry.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Cleanup__Func__Registry_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">TAO_Export.h</includes>
    <class kind="class">TAO_Cleanup_Func_Registry</class>
  </compound>
  <compound kind="file">
    <name>Cleanup_Func_Registry.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Cleanup__Func__Registry_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Client_Strategy_Factory.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Client__Strategy__Factory_8cpp</filename>
    <includes id="Client__Strategy__Factory_8h" name="Client_Strategy_Factory.h" local="yes" imported="no">tao/Client_Strategy_Factory.h</includes>
  </compound>
  <compound kind="file">
    <name>Client_Strategy_Factory.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Client__Strategy__Factory_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">TAO_Export.h</includes>
    <class kind="class">TAO_Client_Strategy_Factory</class>
  </compound>
  <compound kind="file">
    <name>ClientRequestInfo.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ClientRequestInfo_8cpp</filename>
    <includes id="ClientRequestInfo_8h" name="ClientRequestInfo.h" local="yes" imported="no">ClientRequestInfo.h</includes>
    <includes id="ClientRequestInfo__i_8h" name="ClientRequestInfo_i.h" local="yes" imported="no">ClientRequestInfo_i.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">Any.h</includes>
    <includes id="PolicyC_8h" name="PolicyC.h" local="yes" imported="no">PolicyC.h</includes>
    <includes id="ClientRequestInfo_8inl" name="ClientRequestInfo.inl" local="yes" imported="no">ClientRequestInfo.inl</includes>
  </compound>
  <compound kind="file">
    <name>ClientRequestInfo.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ClientRequestInfo_8h</filename>
    <includes id="LocalObject_8h" name="LocalObject.h" local="yes" imported="no">tao/LocalObject.h</includes>
    <includes id="ClientRequestInfoC_8h" name="ClientRequestInfoC.h" local="yes" imported="no">tao/ClientRequestInfoC.h</includes>
    <includes id="ORB__Constants_8h" name="ORB_Constants.h" local="yes" imported="no">tao/ORB_Constants.h</includes>
    <class kind="class">TAO_ClientRequestInfo</class>
    <class kind="class">TAO_ClientRequestInfo_Guard</class>
  </compound>
  <compound kind="file">
    <name>ClientRequestInfo.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ClientRequestInfo_8inl</filename>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
  </compound>
  <compound kind="file">
    <name>ClientRequestInfo.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ClientRequestInfo_8pidl</filename>
    <includes id="RequestInfo_8pidl" name="RequestInfo.pidl" local="yes" imported="yes">RequestInfo.pidl</includes>
    <includes id="orb__types_8pidl" name="orb_types.pidl" local="yes" imported="yes">orb_types.pidl</includes>
    <includes id="Policy__Forward_8pidl" name="Policy_Forward.pidl" local="yes" imported="yes">Policy_Forward.pidl</includes>
    <namespace>PortableInterceptor</namespace>
    <class kind="interface">PortableInterceptor::ClientRequestInfo</class>
    <member kind="variable">
      <type>typeprefix PortableInterceptor omg</type>
      <name>org</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClientRequestInfo_i.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ClientRequestInfo__i_8cpp</filename>
    <includes id="ClientRequestInfo__i_8h" name="ClientRequestInfo_i.h" local="yes" imported="no">ClientRequestInfo_i.h</includes>
    <includes id="Invocation__Base_8h" name="Invocation_Base.h" local="yes" imported="no">Invocation_Base.h</includes>
    <includes id="Stub_8h" name="Stub.h" local="yes" imported="no">Stub.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="Profile_8h" name="Profile.h" local="yes" imported="no">Profile.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="Service__Context_8h" name="Service_Context.h" local="yes" imported="no">Service_Context.h</includes>
    <includes id="ClientRequestInfo__i_8inl" name="ClientRequestInfo_i.inl" local="yes" imported="no">ClientRequestInfo_i.inl</includes>
  </compound>
  <compound kind="file">
    <name>ClientRequestInfo_i.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ClientRequestInfo__i_8h</filename>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <includes id="Invocation__Utils_8h" name="Invocation_Utils.h" local="yes" imported="no">tao/Invocation_Utils.h</includes>
    <includes id="PICurrent_8h" name="PICurrent.h" local="yes" imported="no">tao/PICurrent.h</includes>
    <includes id="PICurrent__Copy__Callback_8h" name="PICurrent_Copy_Callback.h" local="yes" imported="no">tao/PICurrent_Copy_Callback.h</includes>
    <namespace>TAO</namespace>
    <namespace>CORBA</namespace>
    <class kind="class">TAO_ClientRequestInfo_i</class>
  </compound>
  <compound kind="file">
    <name>ClientRequestInfo_i.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ClientRequestInfo__i_8inl</filename>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
  </compound>
  <compound kind="file">
    <name>ClientRequestInfoA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ClientRequestInfoA_8cpp</filename>
    <includes id="ClientRequestInfoC_8h" name="ClientRequestInfoC.h" local="yes" imported="no">ClientRequestInfoC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Objref__TypeCode_8h" name="Objref_TypeCode.h" local="yes" imported="no">tao/Objref_TypeCode.h</includes>
    <includes id="String__TypeCode_8h" name="String_TypeCode.h" local="yes" imported="no">tao/String_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Impl__T_8h" name="Any_Impl_T.h" local="yes" imported="no">tao/Any_Impl_T.h</includes>
    <namespace>PortableInterceptor</namespace>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ClientRequestInfo &gt;::to_object</name>
      <anchor>a64</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ClientRequestInfo &gt;::marshal_value</name>
      <anchor>a65</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ClientRequestInfo &gt;::demarshal_value</name>
      <anchor>a66</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, PortableInterceptor::ClientRequestInfo_ptr _tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, PortableInterceptor::ClientRequestInfo_ptr *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, PortableInterceptor::ClientRequestInfo_ptr &amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Objref&lt; char const *, CORBA::tk_local_interface, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_PortableInterceptor_ClientRequestInfo</name>
      <anchor>a0</anchor>
      <arglist>(&quot;IDL:omg.org/PortableInterceptor/ClientRequestInfo:1.0&quot;,&quot;ClientRequestInfo&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ClientRequestInfo</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClientRequestInfoC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ClientRequestInfoC_8cpp</filename>
    <includes id="ClientRequestInfoC_8h" name="ClientRequestInfoC.h" local="yes" imported="no">ClientRequestInfoC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>ClientRequestInfoC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ClientRequestInfoC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">tao/Object.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Objref__VarOut__T_8h" name="Objref_VarOut_T.h" local="yes" imported="no">tao/Objref_VarOut_T.h</includes>
    <includes id="RequestInfoC_8h" name="RequestInfoC.h" local="yes" imported="no">tao/RequestInfoC.h</includes>
    <includes id="orb__typesC_8h" name="orb_typesC.h" local="yes" imported="no">tao/orb_typesC.h</includes>
    <includes id="Policy__ForwardC_8h" name="Policy_ForwardC.h" local="yes" imported="no">tao/Policy_ForwardC.h</includes>
    <namespace>PortableInterceptor</namespace>
    <namespace>TAO</namespace>
    <class kind="interface">PortableInterceptor::ClientRequestInfo</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::PortableInterceptor::ClientRequestInfo &gt;</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_CLIENTREQUESTINFO__VAR_OUT_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_CLIENTREQUESTINFO_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_CLIENTREQUESTINFO__TRAITS_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClientRequestInfo *</type>
      <name>ClientRequestInfo_ptr</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; ClientRequestInfo &gt;</type>
      <name>ClientRequestInfo_var</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; ClientRequestInfo &gt;</type>
      <name>ClientRequestInfo_out</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::ClientRequestInfo_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::ClientRequestInfo_ptr *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a9</anchor>
      <arglist>(const CORBA::Any &amp;, PortableInterceptor::ClientRequestInfo_ptr &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClientRequestInfoS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ClientRequestInfoS_8h</filename>
  </compound>
  <compound kind="file">
    <name>ClientRequestInterceptor_Adapter.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ClientRequestInterceptor__Adapter_8cpp</filename>
    <includes id="ClientRequestInterceptor__Adapter_8h" name="ClientRequestInterceptor_Adapter.h" local="yes" imported="no">ClientRequestInterceptor_Adapter.h</includes>
    <includes id="ClientRequestInterceptor__Adapter_8inl" name="ClientRequestInterceptor_Adapter.inl" local="yes" imported="no">ClientRequestInterceptor_Adapter.inl</includes>
    <includes id="ClientRequestInfo_8h" name="ClientRequestInfo.h" local="yes" imported="no">ClientRequestInfo.h</includes>
    <includes id="Invocation__Base_8h" name="Invocation_Base.h" local="yes" imported="no">Invocation_Base.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>ClientRequestInterceptor_Adapter.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ClientRequestInterceptor__Adapter_8h</filename>
    <includes id="Interceptor__List_8h" name="Interceptor_List.h" local="yes" imported="no">Interceptor_List.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::ClientRequestInterceptor_Adapter</class>
  </compound>
  <compound kind="file">
    <name>ClientRequestInterceptor_Adapter.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ClientRequestInterceptor__Adapter_8inl</filename>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>CodecFactory.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CodecFactory_8cpp</filename>
    <includes id="CodecFactory_8h" name="CodecFactory.h" local="yes" imported="no">CodecFactory.h</includes>
    <includes id="CDR__Encaps__Codec_8h" name="CDR_Encaps_Codec.h" local="yes" imported="no">CDR_Encaps_Codec.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="ORB__Constants_8h" name="ORB_Constants.h" local="yes" imported="no">ORB_Constants.h</includes>
  </compound>
  <compound kind="file">
    <name>CodecFactory.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CodecFactory_8h</filename>
    <includes id="IOP__CodecC_8h" name="IOP_CodecC.h" local="yes" imported="no">IOP_CodecC.h</includes>
    <includes id="LocalObject_8h" name="LocalObject.h" local="yes" imported="no">LocalObject.h</includes>
    <class kind="class">TAO_CodecFactory</class>
  </compound>
  <compound kind="file">
    <name>CodecFactory_ORBInitializer.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CodecFactory__ORBInitializer_8cpp</filename>
    <includes id="CodecFactory__ORBInitializer_8h" name="CodecFactory_ORBInitializer.h" local="yes" imported="no">CodecFactory_ORBInitializer.h</includes>
    <includes id="CodecFactory_8h" name="CodecFactory.h" local="yes" imported="no">CodecFactory.h</includes>
    <includes id="ORBInitInfo_8h" name="ORBInitInfo.h" local="yes" imported="no">ORBInitInfo.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="ORB__Constants_8h" name="ORB_Constants.h" local="yes" imported="no">ORB_Constants.h</includes>
  </compound>
  <compound kind="file">
    <name>CodecFactory_ORBInitializer.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CodecFactory__ORBInitializer_8h</filename>
    <includes id="ORBInitializerC_8h" name="ORBInitializerC.h" local="yes" imported="no">ORBInitializerC.h</includes>
    <includes id="LocalObject_8h" name="LocalObject.h" local="yes" imported="no">LocalObject.h</includes>
    <class kind="class">TAO_CodecFactory_ORBInitializer</class>
  </compound>
  <compound kind="file">
    <name>Codeset_Manager.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Codeset__Manager_8cpp</filename>
    <includes id="Codeset__Manager_8h" name="Codeset_Manager.h" local="yes" imported="no">tao/Codeset_Manager.h</includes>
    <includes id="TAO__Server__Request_8h" name="TAO_Server_Request.h" local="yes" imported="no">tao/TAO_Server_Request.h</includes>
    <includes id="operation__details_8h" name="operation_details.h" local="yes" imported="no">tao/operation_details.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">tao/Transport.h</includes>
    <includes id="Profile_8h" name="Profile.h" local="yes" imported="no">tao/Profile.h</includes>
    <includes id="Codeset__Translator__Factory_8h" name="Codeset_Translator_Factory.h" local="yes" imported="no">tao/Codeset_Translator_Factory.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="UTF16__BOM__Factory_8h" name="UTF16_BOM_Factory.h" local="yes" imported="no">tao/UTF16_BOM_Factory.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TAO_CODESET_ID_ISO8859_1</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_CODESET_ID_UNICODE</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_CODESET_ID_XOPEN_UTF_8</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_CHAR_CODESET_ID</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_WCHAR_CODESET_ID</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Codeset_Manager.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Codeset__Manager_8h</filename>
    <includes id="CONV__FRAMEC_8h" name="CONV_FRAMEC.h" local="yes" imported="no">tao/CONV_FRAMEC.h</includes>
    <class kind="class">TAO_Codeset_Item</class>
    <class kind="class">TAO_Codeset_Manager</class>
  </compound>
  <compound kind="file">
    <name>Codeset_Translator_Factory.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Codeset__Translator__Factory_8cpp</filename>
    <includes id="Codeset__Translator__Factory_8h" name="Codeset_Translator_Factory.h" local="yes" imported="no">tao/Codeset_Translator_Factory.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
  </compound>
  <compound kind="file">
    <name>Codeset_Translator_Factory.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Codeset__Translator__Factory_8h</filename>
    <includes id="CONV__FRAMEC_8h" name="CONV_FRAMEC.h" local="yes" imported="no">tao/CONV_FRAMEC.h</includes>
    <includes id="Codeset__Translator__Factory__T_8h" name="Codeset_Translator_Factory_T.h" local="yes" imported="no">tao/Codeset_Translator_Factory_T.h</includes>
    <class kind="class">TAO_Codeset_Translator_Factory</class>
  </compound>
  <compound kind="file">
    <name>Codeset_Translator_Factory_T.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Codeset__Translator__Factory__T_8cpp</filename>
    <includes id="Codeset__Translator__Factory__T_8h" name="Codeset_Translator_Factory_T.h" local="yes" imported="no">tao/Codeset_Translator_Factory_T.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
  </compound>
  <compound kind="file">
    <name>Codeset_Translator_Factory_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Codeset__Translator__Factory__T_8h</filename>
    <includes id="Codeset__Translator__Factory_8h" name="Codeset_Translator_Factory.h" local="yes" imported="no">tao/Codeset_Translator_Factory.h</includes>
    <class kind="class">TAO_Codeset_Translator_Factory_T</class>
  </compound>
  <compound kind="file">
    <name>Collocated_Invocation.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Collocated__Invocation_8cpp</filename>
    <includes id="Collocated__Invocation_8h" name="Collocated_Invocation.h" local="yes" imported="no">Collocated_Invocation.h</includes>
    <includes id="Collocation__Proxy__Broker_8h" name="Collocation_Proxy_Broker.h" local="yes" imported="no">Collocation_Proxy_Broker.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="Request__Dispatcher_8h" name="Request_Dispatcher.h" local="yes" imported="no">Request_Dispatcher.h</includes>
    <includes id="TAO__Server__Request_8h" name="TAO_Server_Request.h" local="yes" imported="no">TAO_Server_Request.h</includes>
    <includes id="Stub_8h" name="Stub.h" local="yes" imported="no">Stub.h</includes>
    <includes id="operation__details_8h" name="operation_details.h" local="yes" imported="no">operation_details.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>Collocated_Invocation.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Collocated__Invocation_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Collocation__Strategy_8h" name="Collocation_Strategy.h" local="yes" imported="no">tao/Collocation_Strategy.h</includes>
    <includes id="Invocation__Base_8h" name="Invocation_Base.h" local="yes" imported="no">tao/Invocation_Base.h</includes>
    <includes id="Exception_8h" name="Exception.h" local="yes" imported="no">tao/Exception.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Collocated_Invocation</class>
  </compound>
  <compound kind="file">
    <name>Collocation_Proxy_Broker.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Collocation__Proxy__Broker_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Collocation__Strategy_8h" name="Collocation_Strategy.h" local="yes" imported="no">tao/Collocation_Strategy.h</includes>
    <includes id="Pseudo__VarOut__T_8h" name="Pseudo_VarOut_T.h" local="yes" imported="no">tao/Pseudo_VarOut_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Collocation_Proxy_Broker</class>
  </compound>
  <compound kind="file">
    <name>Collocation_Resolver.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Collocation__Resolver_8cpp</filename>
    <includes id="Collocation__Resolver_8h" name="Collocation_Resolver.h" local="yes" imported="no">tao/Collocation_Resolver.h</includes>
  </compound>
  <compound kind="file">
    <name>Collocation_Resolver.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Collocation__Resolver_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">TAO_Collocation_Resolver</class>
  </compound>
  <compound kind="file">
    <name>Collocation_Strategy.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Collocation__Strategy_8h</filename>
    <namespace>TAO</namespace>
    <member kind="enumeration">
      <name>Collocation_Strategy</name>
      <anchor>a148</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CS_REMOTE_STRATEGY</name>
      <anchor>a148a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CS_THRU_POA_STRATEGY</name>
      <anchor>a148a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CS_DIRECT_STRATEGY</name>
      <anchor>a148a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CS_LAST</name>
      <anchor>a148a10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Condition.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Condition_8cpp</filename>
    <includes id="Condition_8h" name="Condition.h" local="yes" imported="no">Condition.h</includes>
    <includes id="Condition_8inl" name="Condition.inl" local="yes" imported="no">tao/Condition.inl</includes>
  </compound>
  <compound kind="file">
    <name>Condition.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Condition_8h</filename>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">orbconf.h</includes>
    <class kind="class">TAO_Condition</class>
  </compound>
  <compound kind="file">
    <name>Condition.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Condition_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Connect_Strategy.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Connect__Strategy_8cpp</filename>
    <includes id="Connect__Strategy_8h" name="Connect_Strategy.h" local="yes" imported="no">Connect_Strategy.h</includes>
  </compound>
  <compound kind="file">
    <name>Connect_Strategy.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Connect__Strategy_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">TAO_Export.h</includes>
    <class kind="class">TAO_Connect_Strategy</class>
  </compound>
  <compound kind="file">
    <name>Connection_Handler.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Connection__Handler_8cpp</filename>
    <includes id="Connection__Handler_8h" name="Connection_Handler.h" local="yes" imported="no">Connection_Handler.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="Resume__Handle_8h" name="Resume_Handle.h" local="yes" imported="no">Resume_Handle.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">Transport.h</includes>
    <includes id="Wait__Strategy_8h" name="Wait_Strategy.h" local="yes" imported="no">Wait_Strategy.h</includes>
    <includes id="Connection__Handler_8inl" name="Connection_Handler.inl" local="yes" imported="no">tao/Connection_Handler.inl</includes>
  </compound>
  <compound kind="file">
    <name>Connection_Handler.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Connection__Handler_8h</filename>
    <includes id="LF__CH__Event_8h" name="LF_CH_Event.h" local="yes" imported="no">LF_CH_Event.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <class kind="class">TAO_Connection_Handler</class>
  </compound>
  <compound kind="file">
    <name>Connection_Handler.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Connection__Handler_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Connection_Purging_Strategy.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Connection__Purging__Strategy_8cpp</filename>
    <includes id="Connection__Purging__Strategy_8h" name="Connection_Purging_Strategy.h" local="yes" imported="no">tao/Connection_Purging_Strategy.h</includes>
    <includes id="Connection__Purging__Strategy_8inl" name="Connection_Purging_Strategy.inl" local="yes" imported="no">tao/Connection_Purging_Strategy.inl</includes>
  </compound>
  <compound kind="file">
    <name>Connection_Purging_Strategy.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Connection__Purging__Strategy_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">TAO_Export.h</includes>
    <class kind="class">TAO_Connection_Purging_Strategy</class>
  </compound>
  <compound kind="file">
    <name>Connection_Purging_Strategy.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Connection__Purging__Strategy_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Connector_Impl.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Connector__Impl_8cpp</filename>
    <includes id="Connector__Impl_8h" name="Connector_Impl.h" local="yes" imported="no">tao/Connector_Impl.h</includes>
  </compound>
  <compound kind="file">
    <name>Connector_Impl.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Connector__Impl_8h</filename>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <class kind="class">TAO_Connect_Creation_Strategy</class>
    <class kind="class">TAO_Connect_Concurrency_Strategy</class>
  </compound>
  <compound kind="file">
    <name>Connector_Registry.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Connector__Registry_8cpp</filename>
    <includes id="Connector__Registry_8h" name="Connector_Registry.h" local="yes" imported="no">tao/Connector_Registry.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <includes id="Profile_8h" name="Profile.h" local="yes" imported="no">tao/Profile.h</includes>
    <includes id="Transport__Connector_8h" name="Transport_Connector.h" local="yes" imported="no">tao/Transport_Connector.h</includes>
    <includes id="Protocol__Factory_8h" name="Protocol_Factory.h" local="yes" imported="no">tao/Protocol_Factory.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <includes id="ORB__Constants_8h" name="ORB_Constants.h" local="yes" imported="no">tao/ORB_Constants.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="Connector__Registry_8i" name="Connector_Registry.i" local="yes" imported="no">tao/Connector_Registry.i</includes>
  </compound>
  <compound kind="file">
    <name>Connector_Registry.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Connector__Registry_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">TAO_Connector_Registry</class>
    <member kind="typedef">
      <type>TAO_Connector **</type>
      <name>TAO_ConnectorSetIterator</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Connector_Registry.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Connector__Registry_8i</filename>
  </compound>
  <compound kind="file">
    <name>CONV_FRAME.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CONV__FRAME_8pidl</filename>
    <namespace>CONV_FRAME</namespace>
    <class kind="struct">CONV_FRAME::CodeSetComponent</class>
    <class kind="struct">CONV_FRAME::CodeSetComponentInfo</class>
    <class kind="struct">CONV_FRAME::CodeSetContext</class>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>CodeSetId</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; CodeSetId &gt;</type>
      <name>CodeSetIdSeq</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CONV_FRAMEA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CONV__FRAMEA_8cpp</filename>
    <includes id="CONV__FRAMEC_8h" name="CONV_FRAMEC.h" local="yes" imported="no">CONV_FRAMEC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="Struct__TypeCode_8h" name="Struct_TypeCode.h" local="yes" imported="no">tao/Struct_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>CONV_FRAME</namespace>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CONV_FRAME::CodeSetIdSeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CONV_FRAME::CodeSetIdSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a17</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CONV_FRAME::CodeSetIdSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a18</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CONV_FRAME::CodeSetIdSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a19</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CONV_FRAME::CodeSetComponent &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a20</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CONV_FRAME::CodeSetComponent *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a21</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CONV_FRAME::CodeSetComponent *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a22</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CONV_FRAME::CodeSetComponent *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a23</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CONV_FRAME::CodeSetComponentInfo &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a24</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CONV_FRAME::CodeSetComponentInfo *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a25</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CONV_FRAME::CodeSetComponentInfo *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a26</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CONV_FRAME::CodeSetComponentInfo *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a27</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CONV_FRAME::CodeSetContext &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a28</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CONV_FRAME::CodeSetContext *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a29</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CONV_FRAME::CodeSetContext *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a30</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CONV_FRAME::CodeSetContext *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CONV_FRAME_CodeSetId</name>
      <anchor>a0</anchor>
      <arglist>(&quot;IDL:omg.org/CONV_FRAME/CodeSetId:1.0&quot;,&quot;CodeSetId&quot;,&amp;CORBA::_tc_ulong)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_CodeSetId</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CONV_FRAME_CodeSetIdSeq_0</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CONV_FRAME::_tc_CodeSetId, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CONV_FRAME_CodeSetIdSeq_0</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CONV_FRAME_CodeSetIdSeq</name>
      <anchor>a4</anchor>
      <arglist>(&quot;IDL:omg.org/CONV_FRAME/CodeSetIdSeq:1.0&quot;,&quot;CodeSetIdSeq&quot;,&amp;TAO::TypeCode::tc_CONV_FRAME_CodeSetIdSeq_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_CodeSetIdSeq</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_fields_CONV_FRAME_CodeSetComponent</name>
      <anchor>a6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CONV_FRAME_CodeSetComponent</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::tk_struct,&quot;IDL:omg.org/CONV_FRAME/CodeSetComponent:1.0&quot;,&quot;CodeSetComponent&quot;, _tao_fields_CONV_FRAME_CodeSetComponent, 2)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_CodeSetComponent</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_fields_CONV_FRAME_CodeSetComponentInfo</name>
      <anchor>a9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CONV_FRAME_CodeSetComponentInfo</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::tk_struct,&quot;IDL:omg.org/CONV_FRAME/CodeSetComponentInfo:1.0&quot;,&quot;CodeSetComponentInfo&quot;, _tao_fields_CONV_FRAME_CodeSetComponentInfo, 2)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_CodeSetComponentInfo</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_fields_CONV_FRAME_CodeSetContext</name>
      <anchor>a12</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CONV_FRAME_CodeSetContext</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::tk_struct,&quot;IDL:omg.org/CONV_FRAME/CodeSetContext:1.0&quot;,&quot;CodeSetContext&quot;, _tao_fields_CONV_FRAME_CodeSetContext, 2)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_CodeSetContext</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CONV_FRAMEC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CONV__FRAMEC_8cpp</filename>
    <includes id="CONV__FRAMEC_8h" name="CONV_FRAMEC.h" local="yes" imported="no">CONV_FRAMEC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CONV_FRAME_CODESETIDSEQ_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CONV_FRAME::CodeSetIdSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CONV_FRAME::CodeSetIdSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CONV_FRAME::CodeSetComponent &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CONV_FRAME::CodeSetComponent &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CONV_FRAME::CodeSetComponentInfo &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a6</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CONV_FRAME::CodeSetComponentInfo &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a7</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CONV_FRAME::CodeSetContext &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CONV_FRAME::CodeSetContext &amp;_tao_aggregate)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CONV_FRAMEC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CONV__FRAMEC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <includes id="VarOut__T_8h" name="VarOut_T.h" local="yes" imported="no">tao/VarOut_T.h</includes>
    <namespace>CONV_FRAME</namespace>
    <namespace>TAO</namespace>
    <class kind="class">CONV_FRAME::CodeSetIdSeq</class>
    <class kind="struct">CONV_FRAME::CodeSetComponent</class>
    <class kind="struct">CONV_FRAME::CodeSetComponentInfo</class>
    <class kind="struct">CONV_FRAME::CodeSetContext</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CONV_FRAME_CODESETIDSEQ_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::ULong_out</type>
      <name>CodeSetId_out</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; CodeSetIdSeq, CodeSetId &gt;</type>
      <name>CodeSetIdSeq_var</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; CodeSetIdSeq, CodeSetIdSeq_var, CodeSetId &gt;</type>
      <name>CodeSetIdSeq_out</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; CodeSetComponent &gt;</type>
      <name>CodeSetComponent_var</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; CodeSetComponent, CodeSetComponent_var &gt;</type>
      <name>CodeSetComponent_out</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; CodeSetComponentInfo &gt;</type>
      <name>CodeSetComponentInfo_var</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; CodeSetComponentInfo, CodeSetComponentInfo_var &gt;</type>
      <name>CodeSetComponentInfo_out</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Fixed_Var_T&lt; CodeSetContext &gt;</type>
      <name>CodeSetContext_var</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CodeSetContext &amp;</type>
      <name>CodeSetContext_out</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::Any &amp;, const CONV_FRAME::CodeSetIdSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::Any &amp;, CONV_FRAME::CodeSetIdSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a13</anchor>
      <arglist>(const CORBA::Any &amp;, CONV_FRAME::CodeSetIdSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a14</anchor>
      <arglist>(const CORBA::Any &amp;, const CONV_FRAME::CodeSetIdSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::Any &amp;, const CONV_FRAME::CodeSetComponent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::Any &amp;, CONV_FRAME::CodeSetComponent *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a17</anchor>
      <arglist>(const CORBA::Any &amp;, CONV_FRAME::CodeSetComponent *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a18</anchor>
      <arglist>(const CORBA::Any &amp;, const CONV_FRAME::CodeSetComponent *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a19</anchor>
      <arglist>(CORBA::Any &amp;, const CONV_FRAME::CodeSetComponentInfo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a20</anchor>
      <arglist>(CORBA::Any &amp;, CONV_FRAME::CodeSetComponentInfo *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a21</anchor>
      <arglist>(const CORBA::Any &amp;, CONV_FRAME::CodeSetComponentInfo *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a22</anchor>
      <arglist>(const CORBA::Any &amp;, const CONV_FRAME::CodeSetComponentInfo *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a23</anchor>
      <arglist>(CORBA::Any &amp;, const CONV_FRAME::CodeSetContext &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a24</anchor>
      <arglist>(CORBA::Any &amp;, CONV_FRAME::CodeSetContext *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a25</anchor>
      <arglist>(const CORBA::Any &amp;, CONV_FRAME::CodeSetContext *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a26</anchor>
      <arglist>(const CORBA::Any &amp;, const CONV_FRAME::CodeSetContext *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a27</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CONV_FRAME::CodeSetIdSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a28</anchor>
      <arglist>(TAO_InputCDR &amp;, CONV_FRAME::CodeSetIdSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a29</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CONV_FRAME::CodeSetComponent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a30</anchor>
      <arglist>(TAO_InputCDR &amp;, CONV_FRAME::CodeSetComponent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a31</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CONV_FRAME::CodeSetComponentInfo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a32</anchor>
      <arglist>(TAO_InputCDR &amp;, CONV_FRAME::CodeSetComponentInfo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a33</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CONV_FRAME::CodeSetContext &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a34</anchor>
      <arglist>(TAO_InputCDR &amp;, CONV_FRAME::CodeSetContext &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CONV_FRAMES.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CONV__FRAMES_8h</filename>
  </compound>
  <compound kind="file">
    <name>CONV_FRAMES_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CONV__FRAMES__T_8h</filename>
    <namespace>POA_CONV_FRAME</namespace>
  </compound>
  <compound kind="file">
    <name>corba.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>corba_8h</filename>
    <includes id="corbafwd_8h" name="corbafwd.h" local="yes" imported="no">tao/corbafwd.h</includes>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">tao/TypeCode.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="UserException_8h" name="UserException.h" local="yes" imported="no">tao/UserException.h</includes>
    <includes id="NVList_8h" name="NVList.h" local="yes" imported="no">tao/NVList.h</includes>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">tao/Object.h</includes>
    <includes id="LocalObject_8h" name="LocalObject.h" local="yes" imported="no">tao/LocalObject.h</includes>
    <includes id="Principal_8h" name="Principal.h" local="yes" imported="no">tao/Principal.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="CurrentC_8h" name="CurrentC.h" local="yes" imported="no">tao/CurrentC.h</includes>
    <includes id="BoundsC_8h" name="BoundsC.h" local="yes" imported="no">tao/BoundsC.h</includes>
    <includes id="PolicyC_8h" name="PolicyC.h" local="yes" imported="no">tao/PolicyC.h</includes>
    <includes id="ServicesC_8h" name="ServicesC.h" local="yes" imported="no">tao/ServicesC.h</includes>
    <includes id="DomainC_8h" name="DomainC.h" local="yes" imported="no">tao/DomainC.h</includes>
    <includes id="WrongTransactionC_8h" name="WrongTransactionC.h" local="yes" imported="no">tao/WrongTransactionC.h</includes>
    <includes id="ObjectIdListC_8h" name="ObjectIdListC.h" local="yes" imported="no">tao/ObjectIdListC.h</includes>
    <includes id="AnySeqC_8h" name="AnySeqC.h" local="yes" imported="no">tao/AnySeqC.h</includes>
    <includes id="BooleanSeqC_8h" name="BooleanSeqC.h" local="yes" imported="no">tao/BooleanSeqC.h</includes>
    <includes id="CharSeqC_8h" name="CharSeqC.h" local="yes" imported="no">tao/CharSeqC.h</includes>
    <includes id="DoubleSeqC_8h" name="DoubleSeqC.h" local="yes" imported="no">tao/DoubleSeqC.h</includes>
    <includes id="FloatSeqC_8h" name="FloatSeqC.h" local="yes" imported="no">tao/FloatSeqC.h</includes>
    <includes id="LongDoubleSeqC_8h" name="LongDoubleSeqC.h" local="yes" imported="no">tao/LongDoubleSeqC.h</includes>
    <includes id="LongLongSeqC_8h" name="LongLongSeqC.h" local="yes" imported="no">tao/LongLongSeqC.h</includes>
    <includes id="LongSeqC_8h" name="LongSeqC.h" local="yes" imported="no">tao/LongSeqC.h</includes>
    <includes id="OctetSeqC_8h" name="OctetSeqC.h" local="yes" imported="no">tao/OctetSeqC.h</includes>
    <includes id="ShortSeqC_8h" name="ShortSeqC.h" local="yes" imported="no">tao/ShortSeqC.h</includes>
    <includes id="StringSeqC_8h" name="StringSeqC.h" local="yes" imported="no">tao/StringSeqC.h</includes>
    <includes id="ULongLongSeqC_8h" name="ULongLongSeqC.h" local="yes" imported="no">tao/ULongLongSeqC.h</includes>
    <includes id="ULongSeqC_8h" name="ULongSeqC.h" local="yes" imported="no">tao/ULongSeqC.h</includes>
    <includes id="UShortSeqC_8h" name="UShortSeqC.h" local="yes" imported="no">tao/UShortSeqC.h</includes>
    <includes id="WCharSeqC_8h" name="WCharSeqC.h" local="yes" imported="no">tao/WCharSeqC.h</includes>
    <includes id="WStringSeqC_8h" name="WStringSeqC.h" local="yes" imported="no">tao/WStringSeqC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Managed__Types_8h" name="Managed_Types.h" local="yes" imported="no">tao/Managed_Types.h</includes>
    <includes id="Object__KeyC_8h" name="Object_KeyC.h" local="yes" imported="no">tao/Object_KeyC.h</includes>
    <includes id="PortableInterceptorC_8h" name="PortableInterceptorC.h" local="yes" imported="no">tao/PortableInterceptorC.h</includes>
  </compound>
  <compound kind="file">
    <name>CORBA_methods.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CORBA__methods_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <namespace>CORBA</namespace>
    <member kind="function">
      <type>TAO_Export ORB_ptr</type>
      <name>ORB_init</name>
      <anchor>a345</anchor>
      <arglist>(int &amp;argc, char *argv[], const char *orb_name=0)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export ORB_ptr</type>
      <name>ORB_init</name>
      <anchor>a346</anchor>
      <arglist>(int &amp;argc, char *argv[], const char *orb_name, Environment &amp;ACE_TRY_ENV)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Environment *</type>
      <name>Environment_ptr</name>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NamedValue *</type>
      <name>NamedValue_ptr</name>
      <anchor>a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NVList *</type>
      <name>NVList_ptr</name>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Principal *</type>
      <name>Principal_ptr</name>
      <anchor>a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OperationDef *</type>
      <name>OperationDef_ptr</name>
      <anchor>a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION Boolean</type>
      <name>is_nil</name>
      <anchor>a347</anchor>
      <arglist>(Environment_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION void</type>
      <name>release</name>
      <anchor>a348</anchor>
      <arglist>(Environment_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION Boolean</type>
      <name>is_nil</name>
      <anchor>a349</anchor>
      <arglist>(NamedValue_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION void</type>
      <name>release</name>
      <anchor>a350</anchor>
      <arglist>(NamedValue_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION Boolean</type>
      <name>is_nil</name>
      <anchor>a351</anchor>
      <arglist>(NVList_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION void</type>
      <name>release</name>
      <anchor>a352</anchor>
      <arglist>(NVList_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION Boolean</type>
      <name>is_nil</name>
      <anchor>a353</anchor>
      <arglist>(ORB_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION void</type>
      <name>release</name>
      <anchor>a354</anchor>
      <arglist>(ORB_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION Boolean</type>
      <name>is_nil</name>
      <anchor>a355</anchor>
      <arglist>(Object_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION void</type>
      <name>release</name>
      <anchor>a356</anchor>
      <arglist>(Object_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION Boolean</type>
      <name>is_nil</name>
      <anchor>a357</anchor>
      <arglist>(Principal_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION void</type>
      <name>release</name>
      <anchor>a358</anchor>
      <arglist>(Principal_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION Boolean</type>
      <name>is_nil</name>
      <anchor>a359</anchor>
      <arglist>(TypeCode_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION void</type>
      <name>release</name>
      <anchor>a360</anchor>
      <arglist>(TypeCode_ptr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CORBA_String.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CORBA__String_8cpp</filename>
    <includes id="CORBA__String_8h" name="CORBA_String.h" local="yes" imported="no">CORBA_String.h</includes>
    <includes id="Managed__Types_8h" name="Managed_Types.h" local="yes" imported="no">Managed_Types.h</includes>
    <includes id="CORBA__String_8inl" name="CORBA_String.inl" local="yes" imported="no">tao/CORBA_String.inl</includes>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(ostream &amp;os, const CORBA::String_var &amp;sv)</arglist>
    </member>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchor>a1</anchor>
      <arglist>(istream &amp;is, CORBA::String_var &amp;sv)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(ostream &amp;os, CORBA::String_out &amp;so)</arglist>
    </member>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchor>a3</anchor>
      <arglist>(istream &amp;is, CORBA::String_out &amp;so)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(ostream &amp;os, const CORBA::WString_var &amp;wsv)</arglist>
    </member>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchor>a5</anchor>
      <arglist>(istream &amp;is, CORBA::WString_var &amp;wsv)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a6</anchor>
      <arglist>(ostream &amp;os, CORBA::WString_out &amp;wso)</arglist>
    </member>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchor>a7</anchor>
      <arglist>(istream &amp;is, CORBA::WString_out &amp;wso)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CORBA_String.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CORBA__String_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">CORBA::String_var</class>
    <class kind="class">CORBA::String_out</class>
    <class kind="class">CORBA::WString_var</class>
    <class kind="class">CORBA::WString_out</class>
    <member kind="function">
      <type>TAO_Export char *</type>
      <name>string_alloc</name>
      <anchor>a361</anchor>
      <arglist>(ULong len)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export char *</type>
      <name>string_dup</name>
      <anchor>a362</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>string_free</name>
      <anchor>a363</anchor>
      <arglist>(char *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export WChar *</type>
      <name>wstring_alloc</name>
      <anchor>a364</anchor>
      <arglist>(ULong len)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export WChar *</type>
      <name>wstring_dup</name>
      <anchor>a365</anchor>
      <arglist>(const WChar *const)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>wstring_free</name>
      <anchor>a366</anchor>
      <arglist>(WChar *const)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a6</anchor>
      <arglist>(ostream &amp;, const CORBA::String_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchor>a7</anchor>
      <arglist>(istream &amp;, CORBA::String_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(ostream &amp;, CORBA::String_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(istream &amp;, CORBA::String_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a10</anchor>
      <arglist>(ostream &amp;, const CORBA::WString_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchor>a11</anchor>
      <arglist>(istream &amp;, CORBA::WString_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a12</anchor>
      <arglist>(ostream &amp;, CORBA::WString_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchor>a13</anchor>
      <arglist>(istream &amp;, CORBA::WString_out &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CORBA_String.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CORBA__String_8inl</filename>
  </compound>
  <compound kind="file">
    <name>corbafwd.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>corbafwd_8cpp</filename>
    <includes id="corbafwd_8h" name="corbafwd.h" local="yes" imported="no">corbafwd.h</includes>
  </compound>
  <compound kind="file">
    <name>corbafwd.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>corbafwd_8h</filename>
    <includes id="ORB__Constants_8h" name="ORB_Constants.h" local="yes" imported="no">tao/ORB_Constants.h</includes>
    <includes id="TC__Constants__Forward_8h" name="TC_Constants_Forward.h" local="yes" imported="no">tao/TC_Constants_Forward.h</includes>
    <includes id="CORBA__methods_8h" name="CORBA_methods.h" local="yes" imported="no">tao/CORBA_methods.h</includes>
  </compound>
  <compound kind="file">
    <name>CORBALOC_Parser.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CORBALOC__Parser_8cpp</filename>
    <includes id="CORBALOC__Parser_8h" name="CORBALOC_Parser.h" local="yes" imported="no">CORBALOC_Parser.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="Stub_8h" name="Stub.h" local="yes" imported="no">Stub.h</includes>
    <includes id="MProfile_8h" name="MProfile.h" local="yes" imported="no">MProfile.h</includes>
    <includes id="Connector__Registry_8h" name="Connector_Registry.h" local="yes" imported="no">Connector_Registry.h</includes>
    <includes id="Transport__Connector_8h" name="Transport_Connector.h" local="yes" imported="no">Transport_Connector.h</includes>
    <includes id="Protocol__Factory_8h" name="Protocol_Factory.h" local="yes" imported="no">Protocol_Factory.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <includes id="CORBALOC__Parser_8i" name="CORBALOC_Parser.i" local="yes" imported="no">CORBALOC_Parser.i</includes>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>prefix</name>
      <anchor>a0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const size_t</type>
      <name>prefix_len</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>rir_token</name>
      <anchor>a2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const size_t</type>
      <name>rir_token_len</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>iiop_token</name>
      <anchor>a4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>iiop_token_len</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CORBALOC_Parser.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CORBALOC__Parser_8h</filename>
    <includes id="IOR__Parser_8h" name="IOR_Parser.h" local="yes" imported="no">tao/IOR_Parser.h</includes>
    <includes id="Profile_8h" name="Profile.h" local="yes" imported="no">tao/Profile.h</includes>
    <class kind="class">TAO_CORBALOC_Parser</class>
    <class kind="struct">TAO_CORBALOC_Parser::parsed_endpoint</class>
  </compound>
  <compound kind="file">
    <name>CORBALOC_Parser.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CORBALOC__Parser_8i</filename>
  </compound>
  <compound kind="file">
    <name>CORBANAME_Parser.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CORBANAME__Parser_8cpp</filename>
    <includes id="CORBANAME__Parser_8h" name="CORBANAME_Parser.h" local="yes" imported="no">CORBANAME_Parser.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">ORB.h</includes>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">Object.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="UB__String__Arguments_8h" name="UB_String_Arguments.h" local="yes" imported="no">UB_String_Arguments.h</includes>
    <includes id="Invocation__Adapter_8h" name="Invocation_Adapter.h" local="yes" imported="no">Invocation_Adapter.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="CORBANAME__Parser_8i" name="CORBANAME_Parser.i" local="yes" imported="no">CORBANAME_Parser.i</includes>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>corbaname_prefix</name>
      <anchor>a0</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CORBANAME_Parser.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CORBANAME__Parser_8h</filename>
    <includes id="IOR__Parser_8h" name="IOR_Parser.h" local="yes" imported="no">tao/IOR_Parser.h</includes>
    <class kind="class">TAO_CORBANAME_Parser</class>
  </compound>
  <compound kind="file">
    <name>CORBANAME_Parser.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CORBANAME__Parser_8i</filename>
  </compound>
  <compound kind="file">
    <name>Current.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Current_8pidl</filename>
    <namespace>CORBA</namespace>
    <class kind="interface">CORBA::Current</class>
  </compound>
  <compound kind="file">
    <name>CurrentA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CurrentA_8cpp</filename>
    <includes id="CurrentC_8h" name="CurrentC.h" local="yes" imported="no">CurrentC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Objref__TypeCode_8h" name="Objref_TypeCode.h" local="yes" imported="no">tao/Objref_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Impl__T_8h" name="Any_Impl_T.h" local="yes" imported="no">tao/Any_Impl_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; CORBA::Current &gt;::to_object</name>
      <anchor>a67</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; CORBA::Current &gt;::marshal_value</name>
      <anchor>a68</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; CORBA::Current &gt;::demarshal_value</name>
      <anchor>a69</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::Current_ptr _tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::Current_ptr *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::Current_ptr &amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Objref&lt; char const *, CORBA::tk_local_interface, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_Current</name>
      <anchor>a0</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/Current:1.0&quot;,&quot;Current&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_Current</name>
      <anchor>a52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CurrentC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CurrentC_8cpp</filename>
    <includes id="CurrentC_8h" name="CurrentC.h" local="yes" imported="no">CurrentC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>CurrentC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CurrentC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">tao/Object.h</includes>
    <includes id="Objref__VarOut__T_8h" name="Objref_VarOut_T.h" local="yes" imported="no">tao/Objref_VarOut_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="interface">CORBA::Current</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::CORBA::Current &gt;</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_CURRENT__VAR_OUT_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_CURRENT_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_CURRENT__TRAITS_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Current *</type>
      <name>Current_ptr</name>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; Current &gt;</type>
      <name>Current_var</name>
      <anchor>a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; Current &gt;</type>
      <name>Current_out</name>
      <anchor>a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::Current_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::Current_ptr *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a9</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::Current_ptr &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CurrentS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>CurrentS_8h</filename>
  </compound>
  <compound kind="file">
    <name>debug.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>debug_8cpp</filename>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <member kind="variable">
      <type>TAO_Export unsigned int</type>
      <name>TAO_debug_level</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>debug.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>debug_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <member kind="variable">
      <type>TAO_Export unsigned int</type>
      <name>TAO_debug_level</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export unsigned int</type>
      <name>TAO_orbdebug</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>default_client.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>default__client_8cpp</filename>
    <includes id="default__client_8h" name="default_client.h" local="yes" imported="no">default_client.h</includes>
    <includes id="Wait__On__Read_8h" name="Wait_On_Read.h" local="yes" imported="no">Wait_On_Read.h</includes>
    <includes id="Wait__On__Reactor_8h" name="Wait_On_Reactor.h" local="yes" imported="no">Wait_On_Reactor.h</includes>
    <includes id="Wait__On__Leader__Follower_8h" name="Wait_On_Leader_Follower.h" local="yes" imported="no">Wait_On_Leader_Follower.h</includes>
    <includes id="Wait__On__LF__No__Upcall_8h" name="Wait_On_LF_No_Upcall.h" local="yes" imported="no">Wait_On_LF_No_Upcall.h</includes>
    <includes id="Exclusive__TMS_8h" name="Exclusive_TMS.h" local="yes" imported="no">Exclusive_TMS.h</includes>
    <includes id="Muxed__TMS_8h" name="Muxed_TMS.h" local="yes" imported="no">Muxed_TMS.h</includes>
    <includes id="Blocked__Connect__Strategy_8h" name="Blocked_Connect_Strategy.h" local="yes" imported="no">Blocked_Connect_Strategy.h</includes>
    <includes id="Reactive__Connect__Strategy_8h" name="Reactive_Connect_Strategy.h" local="yes" imported="no">Reactive_Connect_Strategy.h</includes>
    <includes id="LF__Connect__Strategy_8h" name="LF_Connect_Strategy.h" local="yes" imported="no">LF_Connect_Strategy.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">orbconf.h</includes>
  </compound>
  <compound kind="file">
    <name>default_client.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>default__client_8h</filename>
    <includes id="Client__Strategy__Factory_8h" name="Client_Strategy_Factory.h" local="yes" imported="no">tao/Client_Strategy_Factory.h</includes>
    <class kind="class">TAO_Default_Client_Strategy_Factory</class>
  </compound>
  <compound kind="file">
    <name>Default_Collocation_Resolver.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Default__Collocation__Resolver_8cpp</filename>
    <includes id="Default__Collocation__Resolver_8h" name="Default_Collocation_Resolver.h" local="yes" imported="no">tao/Default_Collocation_Resolver.h</includes>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">tao/Object.h</includes>
  </compound>
  <compound kind="file">
    <name>Default_Collocation_Resolver.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Default__Collocation__Resolver_8h</filename>
    <includes id="Collocation__Resolver_8h" name="Collocation_Resolver.h" local="yes" imported="no">tao/Collocation_Resolver.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">TAO_Default_Collocation_Resolver</class>
  </compound>
  <compound kind="file">
    <name>Default_Endpoint_Selector_Factory.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Default__Endpoint__Selector__Factory_8cpp</filename>
    <includes id="Default__Endpoint__Selector__Factory_8h" name="Default_Endpoint_Selector_Factory.h" local="yes" imported="no">tao/Default_Endpoint_Selector_Factory.h</includes>
    <includes id="Invocation__Endpoint__Selectors_8h" name="Invocation_Endpoint_Selectors.h" local="yes" imported="no">tao/Invocation_Endpoint_Selectors.h</includes>
  </compound>
  <compound kind="file">
    <name>Default_Endpoint_Selector_Factory.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Default__Endpoint__Selector__Factory_8h</filename>
    <includes id="Endpoint__Selector__Factory_8h" name="Endpoint_Selector_Factory.h" local="yes" imported="no">tao/Endpoint_Selector_Factory.h</includes>
    <class kind="class">TAO_Default_Endpoint_Selector_Factory</class>
  </compound>
  <compound kind="file">
    <name>default_environment.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>default__environment_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <namespace>CORBA</namespace>
    <member kind="function">
      <type>TAO_Export CORBA::Environment &amp;</type>
      <name>TAO_default_environment</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>default_ports.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>default__ports_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_NAME_SERVER_REQUEST_PORT</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_NAME_SERVER_REPLY_PORT</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_TRADING_SERVER_REQUEST_PORT</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_TRADING_SERVER_REPLY_PORT</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_IMPLREPO_SERVER_REQUEST_PORT</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_IMPLREPO_SERVER_REPLY_PORT</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_INTERFACEREPO_SERVER_REQUEST_PORT</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_INTERFACEREPO_SERVER_REPLY_PORT</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Default_Protocols_Hooks.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Default__Protocols__Hooks_8cpp</filename>
    <includes id="Default__Protocols__Hooks_8h" name="Default_Protocols_Hooks.h" local="yes" imported="no">Default_Protocols_Hooks.h</includes>
  </compound>
  <compound kind="file">
    <name>Default_Protocols_Hooks.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Default__Protocols__Hooks_8h</filename>
    <includes id="Protocols__Hooks_8h" name="Protocols_Hooks.h" local="yes" imported="no">tao/Protocols_Hooks.h</includes>
    <class kind="class">TAO_Default_Protocols_Hooks</class>
  </compound>
  <compound kind="file">
    <name>default_resource.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>default__resource_8cpp</filename>
    <includes id="default__resource_8h" name="default_resource.h" local="yes" imported="no">tao/default_resource.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <includes id="IIOP__Factory_8h" name="IIOP_Factory.h" local="yes" imported="no">tao/IIOP_Factory.h</includes>
    <includes id="Acceptor__Registry_8h" name="Acceptor_Registry.h" local="yes" imported="no">tao/Acceptor_Registry.h</includes>
    <includes id="Connector__Registry_8h" name="Connector_Registry.h" local="yes" imported="no">tao/Connector_Registry.h</includes>
    <includes id="Reactive__Flushing__Strategy_8h" name="Reactive_Flushing_Strategy.h" local="yes" imported="no">tao/Reactive_Flushing_Strategy.h</includes>
    <includes id="Block__Flushing__Strategy_8h" name="Block_Flushing_Strategy.h" local="yes" imported="no">tao/Block_Flushing_Strategy.h</includes>
    <includes id="Leader__Follower__Flushing__Strategy_8h" name="Leader_Follower_Flushing_Strategy.h" local="yes" imported="no">tao/Leader_Follower_Flushing_Strategy.h</includes>
    <includes id="LRU__Connection__Purging__Strategy_8h" name="LRU_Connection_Purging_Strategy.h" local="yes" imported="no">tao/LRU_Connection_Purging_Strategy.h</includes>
    <includes id="LF__Strategy__Complete_8h" name="LF_Strategy_Complete.h" local="yes" imported="no">tao/LF_Strategy_Complete.h</includes>
    <includes id="Codeset__Manager_8h" name="Codeset_Manager.h" local="yes" imported="no">tao/Codeset_Manager.h</includes>
    <member kind="typedef">
      <type>ACE_Malloc&lt; ACE_LOCAL_MEMORY_POOL, TAO_SYNCH_MUTEX &gt;</type>
      <name>LOCKED_MALLOC</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Allocator_Adapter&lt; LOCKED_MALLOC &gt;</type>
      <name>LOCKED_ALLOCATOR</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>default_resource.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>default__resource_8h</filename>
    <includes id="Resource__Factory_8h" name="Resource_Factory.h" local="yes" imported="no">tao/Resource_Factory.h</includes>
    <class kind="class">TAO_Default_Resource_Factory</class>
  </compound>
  <compound kind="file">
    <name>default_server.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>default__server_8cpp</filename>
    <includes id="default__server_8h" name="default_server.h" local="yes" imported="no">tao/default_server.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TAO_BEGINCHECK</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_CHECKANDSET</name>
      <anchor>a1</anchor>
      <arglist>(sym)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ENDCHECK</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>default_server.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>default__server_8h</filename>
    <includes id="Server__Strategy__Factory_8h" name="Server_Strategy_Factory.h" local="yes" imported="no">tao/Server_Strategy_Factory.h</includes>
    <class kind="class">TAO_Default_Server_Strategy_Factory</class>
  </compound>
  <compound kind="file">
    <name>Default_Stub_Factory.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Default__Stub__Factory_8cpp</filename>
    <includes id="Default__Stub__Factory_8h" name="Default_Stub_Factory.h" local="yes" imported="no">Default_Stub_Factory.h</includes>
    <includes id="Stub_8h" name="Stub.h" local="yes" imported="no">Stub.h</includes>
    <includes id="ORB__Constants_8h" name="ORB_Constants.h" local="yes" imported="no">ORB_Constants.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
  </compound>
  <compound kind="file">
    <name>Default_Stub_Factory.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Default__Stub__Factory_8h</filename>
    <includes id="Stub__Factory_8h" name="Stub_Factory.h" local="yes" imported="no">tao/Stub_Factory.h</includes>
    <class kind="class">TAO_Default_Stub_Factory</class>
  </compound>
  <compound kind="file">
    <name>Default_Thread_Lane_Resources_Manager.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Default__Thread__Lane__Resources__Manager_8cpp</filename>
    <includes id="Default__Thread__Lane__Resources__Manager_8h" name="Default_Thread_Lane_Resources_Manager.h" local="yes" imported="no">Default_Thread_Lane_Resources_Manager.h</includes>
    <includes id="Thread__Lane__Resources_8h" name="Thread_Lane_Resources.h" local="yes" imported="no">Thread_Lane_Resources.h</includes>
    <includes id="Exception_8h" name="Exception.h" local="yes" imported="no">Exception.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">Environment.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
  </compound>
  <compound kind="file">
    <name>Default_Thread_Lane_Resources_Manager.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Default__Thread__Lane__Resources__Manager_8h</filename>
    <includes id="Thread__Lane__Resources__Manager_8h" name="Thread_Lane_Resources_Manager.h" local="yes" imported="no">tao/Thread_Lane_Resources_Manager.h</includes>
    <class kind="class">TAO_Default_Thread_Lane_Resources_Manager</class>
    <class kind="class">TAO_Default_Thread_Lane_Resources_Manager_Factory</class>
  </compound>
  <compound kind="file">
    <name>DLL_Parser.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>DLL__Parser_8cpp</filename>
    <includes id="DLL__Parser_8h" name="DLL_Parser.h" local="yes" imported="no">DLL_Parser.h</includes>
    <includes id="Object__Loader_8h" name="Object_Loader.h" local="yes" imported="no">Object_Loader.h</includes>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">Object.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">Environment.h</includes>
    <includes id="ORB__Constants_8h" name="ORB_Constants.h" local="yes" imported="no">ORB_Constants.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="DLL__Parser_8i" name="DLL_Parser.i" local="yes" imported="no">DLL_Parser.i</includes>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>dll_prefix</name>
      <anchor>a0</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DLL_Parser.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>DLL__Parser_8h</filename>
    <includes id="IOR__Parser_8h" name="IOR_Parser.h" local="yes" imported="no">tao/IOR_Parser.h</includes>
    <class kind="class">TAO_DLL_Parser</class>
  </compound>
  <compound kind="file">
    <name>DLL_Parser.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>DLL__Parser_8i</filename>
  </compound>
  <compound kind="file">
    <name>Domain.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Domain_8pidl</filename>
    <includes id="Policy_8pidl" name="Policy.pidl" local="yes" imported="yes">Policy.pidl</includes>
    <includes id="InterfaceDef_8pidl" name="InterfaceDef.pidl" local="yes" imported="yes">InterfaceDef.pidl</includes>
    <namespace>CORBA</namespace>
    <class kind="interface">CORBA::DomainManager</class>
    <class kind="interface">CORBA::ConstructionPolicy</class>
    <member kind="typedef">
      <type>sequence&lt; DomainManager &gt;</type>
      <name>DomainManagerList</name>
      <anchor>a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PolicyType</type>
      <name>SecConstruction</name>
      <anchor>a56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DomainA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>DomainA_8cpp</filename>
    <includes id="DomainC_8h" name="DomainC.h" local="yes" imported="no">DomainC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Objref__TypeCode_8h" name="Objref_TypeCode.h" local="yes" imported="no">tao/Objref_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Impl__T_8h" name="Any_Impl_T.h" local="yes" imported="no">tao/Any_Impl_T.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; CORBA::DomainManager &gt;::to_object</name>
      <anchor>a70</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::DomainManager_ptr _tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::DomainManager_ptr *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a11</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::DomainManager_ptr &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; CORBA::ConstructionPolicy &gt;::to_object</name>
      <anchor>a71</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::ConstructionPolicy_ptr _tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::ConstructionPolicy_ptr *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a15</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::ConstructionPolicy_ptr &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::DomainManagerList &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a17</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::DomainManagerList *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a18</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::DomainManagerList *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a19</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::DomainManagerList *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Objref&lt; char const *, CORBA::tk_objref, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_DomainManager</name>
      <anchor>a0</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/DomainManager:1.0&quot;,&quot;DomainManager&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_DomainManager</name>
      <anchor>a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Objref&lt; char const *, CORBA::tk_objref, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_ConstructionPolicy</name>
      <anchor>a2</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/ConstructionPolicy:1.0&quot;,&quot;ConstructionPolicy&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ConstructionPolicy</name>
      <anchor>a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_DomainManagerList_0</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_DomainManager, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_DomainManagerList_0</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_DomainManagerList</name>
      <anchor>a6</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/DomainManagerList:1.0&quot;,&quot;DomainManagerList&quot;,&amp;TAO::TypeCode::tc_CORBA_DomainManagerList_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_DomainManagerList</name>
      <anchor>a60</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DomainC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>DomainC_8cpp</filename>
    <includes id="DomainC_8h" name="DomainC.h" local="yes" imported="no">DomainC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Exception__Data_8h" name="Exception_Data.h" local="yes" imported="no">tao/Exception_Data.h</includes>
    <includes id="Invocation__Adapter_8h" name="Invocation_Adapter.h" local="yes" imported="no">tao/Invocation_Adapter.h</includes>
    <includes id="Object__T_8h" name="Object_T.h" local="yes" imported="no">tao/Object_T.h</includes>
    <includes id="Basic__Arguments_8h" name="Basic_Arguments.h" local="yes" imported="no">tao/Basic_Arguments.h</includes>
    <includes id="Object__Argument__T_8h" name="Object_Argument_T.h" local="yes" imported="no">tao/Object_Argument_T.h</includes>
    <includes id="Special__Basic__Arguments_8h" name="Special_Basic_Arguments.h" local="yes" imported="no">tao/Special_Basic_Arguments.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <includes id="IFR__Client__Adapter_8h" name="IFR_Client_Adapter.h" local="yes" imported="no">tao/IFR_Client_Adapter.h</includes>
    <includes id="DomainC_8inl" name="DomainC.inl" local="yes" imported="no">DomainC.inl</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::Policy &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::InterfaceDef &gt;</class>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICY__ARG_TRAITS_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_INTERFACEDEF__ARG_TRAITS_CS_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_DOMAINMANAGERLIST_CS_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; InterfaceDef &gt;</type>
      <name>InterfaceDef_var</name>
      <anchor>a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; InterfaceDef &gt;</type>
      <name>InterfaceDef_out</name>
      <anchor>a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>In_Object_Argument_T&lt; CORBA::InterfaceDef_ptr &gt;::interceptor_param</name>
      <anchor>a72</anchor>
      <arglist>(Dynamic::Parameter &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>In_Object_Argument_T&lt; CORBA::InterfaceDef_ptr &gt;::marshal</name>
      <anchor>a73</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::DomainManager_ptr _tao_objref)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a10</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::DomainManager_ptr &amp;_tao_objref)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a11</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::ConstructionPolicy_ptr _tao_objref)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a12</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::ConstructionPolicy_ptr &amp;_tao_objref)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a13</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::DomainManagerList &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a14</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::DomainManagerList &amp;_tao_sequence)</arglist>
    </member>
    <member kind="variable">
      <type>TAO::Collocation_Proxy_Broker *(*</type>
      <name>CORBA__TAO_DomainManager_Proxy_Broker_Factory_function_pointer</name>
      <anchor>a5</anchor>
      <arglist>)(CORBA::Object_ptr obj)=0</arglist>
    </member>
    <member kind="variable">
      <type>TAO::Collocation_Proxy_Broker *(*</type>
      <name>CORBA__TAO_ConstructionPolicy_Proxy_Broker_Factory_function_pointer</name>
      <anchor>a6</anchor>
      <arglist>)(CORBA::Object_ptr obj)=0</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DomainC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>DomainC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">tao/Object.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Objref__VarOut__T_8h" name="Objref_VarOut_T.h" local="yes" imported="no">tao/Objref_VarOut_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <includes id="PolicyC_8h" name="PolicyC.h" local="yes" imported="no">tao/PolicyC.h</includes>
    <namespace>TAO</namespace>
    <namespace>CORBA</namespace>
    <class kind="interface">CORBA::DomainManager</class>
    <class kind="interface">CORBA::ConstructionPolicy</class>
    <class kind="class">CORBA::DomainManagerList</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::CORBA::DomainManager &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::CORBA::ConstructionPolicy &gt;</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_DOMAINMANAGER__VAR_OUT_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_DOMAINMANAGER_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_CONSTRUCTIONPOLICY__VAR_OUT_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_CONSTRUCTIONPOLICY_CH_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_DOMAINMANAGERLIST_CH_</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_DOMAINMANAGER__TRAITS_CH_</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_CONSTRUCTIONPOLICY__TRAITS_CH_</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DomainManager *</type>
      <name>DomainManager_ptr</name>
      <anchor>a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; DomainManager &gt;</type>
      <name>DomainManager_var</name>
      <anchor>a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; DomainManager &gt;</type>
      <name>DomainManager_out</name>
      <anchor>a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstructionPolicy *</type>
      <name>ConstructionPolicy_ptr</name>
      <anchor>a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; ConstructionPolicy &gt;</type>
      <name>ConstructionPolicy_var</name>
      <anchor>a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; ConstructionPolicy &gt;</type>
      <name>ConstructionPolicy_out</name>
      <anchor>a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_MngSeq_Var_T&lt; DomainManagerList, TAO_Object_Manager&lt; DomainManager, DomainManager_var &gt; &gt;</type>
      <name>DomainManagerList_var</name>
      <anchor>a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_MngSeq_Out_T&lt; DomainManagerList, DomainManagerList_var, TAO_Object_Manager&lt; DomainManager, DomainManager_var &gt; &gt;</type>
      <name>DomainManagerList_out</name>
      <anchor>a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::DomainManager_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a19</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::DomainManager_ptr *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a20</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::DomainManager_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a21</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::ConstructionPolicy_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a22</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::ConstructionPolicy_ptr *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a23</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::ConstructionPolicy_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a24</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::DomainManagerList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a25</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::DomainManagerList *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a26</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::DomainManagerList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a27</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::DomainManagerList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a28</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::DomainManager_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a29</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::DomainManager_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a30</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::ConstructionPolicy_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a31</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::ConstructionPolicy_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a32</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::DomainManagerList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a33</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::DomainManagerList &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TAO::Collocation_Proxy_Broker *(*</type>
      <name>CORBA__TAO_DomainManager_Proxy_Broker_Factory_function_pointer</name>
      <anchor>a16</anchor>
      <arglist>)(CORBA::Object_ptr obj)</arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TAO::Collocation_Proxy_Broker *(*</type>
      <name>CORBA__TAO_ConstructionPolicy_Proxy_Broker_Factory_function_pointer</name>
      <anchor>a17</anchor>
      <arglist>)(CORBA::Object_ptr obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DomainC.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>DomainC_8inl</filename>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_DOMAINMANAGER___CI_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_CONSTRUCTIONPOLICY___CI_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DoubleSeq.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>DoubleSeq_8pidl</filename>
    <namespace>CORBA</namespace>
    <member kind="typedef">
      <type>sequence&lt; double &gt;</type>
      <name>DoubleSeq</name>
      <anchor>a71</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DoubleSeqA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>DoubleSeqA_8cpp</filename>
    <includes id="DoubleSeqC_8h" name="DoubleSeqC.h" local="yes" imported="no">DoubleSeqC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <namespace>CORBA</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::DoubleSeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::DoubleSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::DoubleSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::DoubleSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_DoubleSeq_0</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_double, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_DoubleSeq_0</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_DoubleSeq</name>
      <anchor>a2</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/DoubleSeq:1.0&quot;,&quot;DoubleSeq&quot;,&amp;TAO::TypeCode::tc_CORBA_DoubleSeq_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_DoubleSeq</name>
      <anchor>a72</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DoubleSeqC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>DoubleSeqC_8cpp</filename>
    <includes id="DoubleSeqC_8h" name="DoubleSeqC.h" local="yes" imported="no">DoubleSeqC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_DOUBLESEQ_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::DoubleSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::DoubleSeq &amp;_tao_sequence)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DoubleSeqC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>DoubleSeqC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">CORBA::DoubleSeq</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_DOUBLESEQ_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; DoubleSeq, CORBA::Double &gt;</type>
      <name>DoubleSeq_var</name>
      <anchor>a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; DoubleSeq, DoubleSeq_var, CORBA::Double &gt;</type>
      <name>DoubleSeq_out</name>
      <anchor>a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::DoubleSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::DoubleSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::DoubleSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::DoubleSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::DoubleSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::DoubleSeq &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DoubleSeqS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>DoubleSeqS_8h</filename>
  </compound>
  <compound kind="file">
    <name>Dynamic.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Dynamic_8pidl</filename>
    <includes id="Dynamic__Parameter_8pidl" name="Dynamic_Parameter.pidl" local="yes" imported="yes">Dynamic_Parameter.pidl</includes>
    <includes id="StringSeq_8pidl" name="StringSeq.pidl" local="yes" imported="yes">StringSeq.pidl</includes>
    <includes id="Typecode__types_8pidl" name="Typecode_types.pidl" local="yes" imported="yes">Typecode_types.pidl</includes>
    <namespace>Dynamic</namespace>
    <member kind="typedef">
      <type>sequence&lt; Parameter &gt;</type>
      <name>ParameterList</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::StringSeq</type>
      <name>ContextList</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; CORBA::TypeCode &gt;</type>
      <name>ExceptionList</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::StringSeq</type>
      <name>RequestContext</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>typeprefix Dynamic omg</type>
      <name>org</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Dynamic_Adapter.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Dynamic__Adapter_8cpp</filename>
    <includes id="Dynamic__Adapter_8h" name="Dynamic_Adapter.h" local="yes" imported="no">tao/Dynamic_Adapter.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
  </compound>
  <compound kind="file">
    <name>Dynamic_Adapter.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Dynamic__Adapter_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">TAO_Dynamic_Adapter</class>
    <member kind="typedef">
      <type>ExceptionList *</type>
      <name>ExceptionList_ptr</name>
      <anchor>a75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Request *</type>
      <name>Request_ptr</name>
      <anchor>a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Context *</type>
      <name>Context_ptr</name>
      <anchor>a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ServerRequest *</type>
      <name>ServerRequest_ptr</name>
      <anchor>a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ULong</type>
      <name>Flags</name>
      <anchor>a79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Dynamic_Parameter.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Dynamic__Parameter_8pidl</filename>
    <includes id="ParameterMode_8pidl" name="ParameterMode.pidl" local="yes" imported="yes">ParameterMode.pidl</includes>
    <namespace>Dynamic</namespace>
    <class kind="struct">Dynamic::Parameter</class>
  </compound>
  <compound kind="file">
    <name>Dynamic_ParameterA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Dynamic__ParameterA_8cpp</filename>
    <includes id="Dynamic__ParameterC_8h" name="Dynamic_ParameterC.h" local="yes" imported="no">Dynamic_ParameterC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Struct__TypeCode_8h" name="Struct_TypeCode.h" local="yes" imported="no">tao/Struct_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>Dynamic</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const Dynamic::Parameter &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, Dynamic::Parameter *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, Dynamic::Parameter *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const Dynamic::Parameter *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_fields_Dynamic_Parameter</name>
      <anchor>a0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_Dynamic_Parameter</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::tk_struct,&quot;IDL:Dynamic/Parameter:1.0&quot;,&quot;Parameter&quot;, _tao_fields_Dynamic_Parameter, 2)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_Parameter</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Dynamic_ParameterC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Dynamic__ParameterC_8cpp</filename>
    <includes id="Dynamic__ParameterC_8h" name="Dynamic_ParameterC.h" local="yes" imported="no">Dynamic_ParameterC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const Dynamic::Parameter &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;strm, Dynamic::Parameter &amp;_tao_aggregate)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Dynamic_ParameterC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Dynamic__ParameterC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="VarOut__T_8h" name="VarOut_T.h" local="yes" imported="no">tao/VarOut_T.h</includes>
    <includes id="ParameterModeC_8h" name="ParameterModeC.h" local="yes" imported="no">tao/ParameterModeC.h</includes>
    <namespace>Dynamic</namespace>
    <namespace>TAO</namespace>
    <class kind="struct">Dynamic::Parameter</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; Parameter &gt;</type>
      <name>Parameter_var</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; Parameter, Parameter_var &gt;</type>
      <name>Parameter_out</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::Any &amp;, const Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;, Dynamic::Parameter *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA::Any &amp;, Dynamic::Parameter *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;, const Dynamic::Parameter *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a7</anchor>
      <arglist>(TAO_OutputCDR &amp;, const Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_InputCDR &amp;, Dynamic::Parameter &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DynamicA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>DynamicA_8cpp</filename>
    <includes id="DynamicC_8h" name="DynamicC.h" local="yes" imported="no">DynamicC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="String__TypeCode_8h" name="String_TypeCode.h" local="yes" imported="no">tao/String_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <namespace>Dynamic</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const Dynamic::ParameterList &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, Dynamic::ParameterList *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a14</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, Dynamic::ParameterList *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a15</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const Dynamic::ParameterList *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const Dynamic::ExceptionList &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a17</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, Dynamic::ExceptionList *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a18</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, Dynamic::ExceptionList *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a19</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const Dynamic::ExceptionList *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>Dynamic_ParameterList_0</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::tk_sequence,&amp;Dynamic::_tc_Parameter, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_Dynamic_ParameterList_0</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_Dynamic_ParameterList</name>
      <anchor>a2</anchor>
      <arglist>(&quot;IDL:omg.org/Dynamic/ParameterList:1.0&quot;,&quot;ParameterList&quot;,&amp;TAO::TypeCode::tc_Dynamic_ParameterList_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ParameterList</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_Dynamic_ContextList</name>
      <anchor>a4</anchor>
      <arglist>(&quot;IDL:omg.org/Dynamic/ContextList:1.0&quot;,&quot;ContextList&quot;,&amp;CORBA::_tc_StringSeq)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ContextList</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>Dynamic_ExceptionList_0</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_TypeCode, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_Dynamic_ExceptionList_0</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_Dynamic_ExceptionList</name>
      <anchor>a8</anchor>
      <arglist>(&quot;IDL:omg.org/Dynamic/ExceptionList:1.0&quot;,&quot;ExceptionList&quot;,&amp;TAO::TypeCode::tc_Dynamic_ExceptionList_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ExceptionList</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_Dynamic_RequestContext</name>
      <anchor>a10</anchor>
      <arglist>(&quot;IDL:omg.org/Dynamic/RequestContext:1.0&quot;,&quot;RequestContext&quot;,&amp;CORBA::_tc_StringSeq)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_RequestContext</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DynamicC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>DynamicC_8cpp</filename>
    <includes id="DynamicC_8h" name="DynamicC.h" local="yes" imported="no">DynamicC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_DYNAMIC_PARAMETERLIST_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_DYNAMIC_EXCEPTIONLIST_CS_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const Dynamic::ParameterList &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_InputCDR &amp;strm, Dynamic::ParameterList &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const Dynamic::ExceptionList &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a5</anchor>
      <arglist>(TAO_InputCDR &amp;strm, Dynamic::ExceptionList &amp;_tao_sequence)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DynamicC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>DynamicC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">tao/TypeCode.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <includes id="Dynamic__ParameterC_8h" name="Dynamic_ParameterC.h" local="yes" imported="no">tao/Dynamic_ParameterC.h</includes>
    <includes id="StringSeqC_8h" name="StringSeqC.h" local="yes" imported="no">tao/StringSeqC.h</includes>
    <includes id="Typecode__typesC_8h" name="Typecode_typesC.h" local="yes" imported="no">tao/Typecode_typesC.h</includes>
    <namespace>Dynamic</namespace>
    <namespace>TAO</namespace>
    <class kind="class">Dynamic::ParameterList</class>
    <class kind="class">Dynamic::ExceptionList</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_DYNAMIC_PARAMETERLIST_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_DYNAMIC_EXCEPTIONLIST_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_VarSeq_Var_T&lt; ParameterList, Parameter &gt;</type>
      <name>ParameterList_var</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; ParameterList, ParameterList_var, Parameter &gt;</type>
      <name>ParameterList_out</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::StringSeq_var</type>
      <name>ContextList_var</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::StringSeq_out</type>
      <name>ContextList_out</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_MngSeq_Var_T&lt; ExceptionList, TAO_Pseudo_Object_Manager&lt; CORBA::TypeCode &gt; &gt;</type>
      <name>ExceptionList_var</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_MngSeq_Out_T&lt; ExceptionList, ExceptionList_var, TAO_Pseudo_Object_Manager&lt; CORBA::TypeCode &gt; &gt;</type>
      <name>ExceptionList_out</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::StringSeq_var</type>
      <name>RequestContext_var</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::StringSeq_out</type>
      <name>RequestContext_out</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::Any &amp;, const Dynamic::ParameterList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::Any &amp;, Dynamic::ParameterList *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a13</anchor>
      <arglist>(const CORBA::Any &amp;, Dynamic::ParameterList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a14</anchor>
      <arglist>(const CORBA::Any &amp;, const Dynamic::ParameterList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::Any &amp;, const Dynamic::ExceptionList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::Any &amp;, Dynamic::ExceptionList *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a17</anchor>
      <arglist>(const CORBA::Any &amp;, Dynamic::ExceptionList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a18</anchor>
      <arglist>(const CORBA::Any &amp;, const Dynamic::ExceptionList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a19</anchor>
      <arglist>(TAO_OutputCDR &amp;, const Dynamic::ParameterList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a20</anchor>
      <arglist>(TAO_InputCDR &amp;, Dynamic::ParameterList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a21</anchor>
      <arglist>(TAO_OutputCDR &amp;, const Dynamic::ExceptionList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a22</anchor>
      <arglist>(TAO_InputCDR &amp;, Dynamic::ExceptionList &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DynamicS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>DynamicS_8h</filename>
  </compound>
  <compound kind="file">
    <name>Empty_Param_TypeCode.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Empty__Param__TypeCode_8cpp</filename>
    <includes id="Empty__Param__TypeCode_8h" name="Empty_Param_TypeCode.h" local="yes" imported="no">Empty_Param_TypeCode.h</includes>
    <includes id="Empty__Param__TypeCode_8inl" name="Empty_Param_TypeCode.inl" local="yes" imported="no">Empty_Param_TypeCode.inl</includes>
  </compound>
  <compound kind="file">
    <name>Empty_Param_TypeCode.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Empty__Param__TypeCode_8h</filename>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">tao/TypeCode.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <class kind="class">TAO::TypeCode::Empty_Param</class>
  </compound>
  <compound kind="file">
    <name>Empty_Param_TypeCode.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Empty__Param__TypeCode_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Encodable.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Encodable_8cpp</filename>
    <includes id="Encodable_8h" name="Encodable.h" local="yes" imported="no">tao/Encodable.h</includes>
  </compound>
  <compound kind="file">
    <name>Encodable.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Encodable_8h</filename>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <class kind="class">TAO_Encodable</class>
  </compound>
  <compound kind="file">
    <name>Endpoint.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Endpoint_8cpp</filename>
    <includes id="Endpoint_8h" name="Endpoint.h" local="yes" imported="no">tao/Endpoint.h</includes>
    <includes id="Endpoint_8i" name="Endpoint.i" local="yes" imported="no">tao/Endpoint.i</includes>
  </compound>
  <compound kind="file">
    <name>Endpoint.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Endpoint_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <class kind="class">TAO_Endpoint</class>
  </compound>
  <compound kind="file">
    <name>Endpoint.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Endpoint_8i</filename>
  </compound>
  <compound kind="file">
    <name>Endpoint_Selector_Factory.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Endpoint__Selector__Factory_8cpp</filename>
    <includes id="Endpoint__Selector__Factory_8h" name="Endpoint_Selector_Factory.h" local="yes" imported="no">tao/Endpoint_Selector_Factory.h</includes>
  </compound>
  <compound kind="file">
    <name>Endpoint_Selector_Factory.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Endpoint__Selector__Factory_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">TAO_Endpoint_Selector_Factory</class>
  </compound>
  <compound kind="file">
    <name>Enum_TypeCode.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Enum__TypeCode_8cpp</filename>
    <includes id="Enum__TypeCode_8h" name="Enum_TypeCode.h" local="yes" imported="no">tao/Enum_TypeCode.h</includes>
    <includes id="TypeCode__Traits_8h" name="TypeCode_Traits.h" local="yes" imported="no">tao/TypeCode_Traits.h</includes>
    <includes id="TypeCodeFactory__Adapter_8h" name="TypeCodeFactory_Adapter.h" local="yes" imported="no">tao/TypeCodeFactory_Adapter.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <includes id="Enum__TypeCode_8inl" name="Enum_TypeCode.inl" local="yes" imported="no">tao/Enum_TypeCode.inl</includes>
  </compound>
  <compound kind="file">
    <name>Enum_TypeCode.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Enum__TypeCode_8h</filename>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">tao/TypeCode.h</includes>
    <includes id="TypeCode__Base__Attributes_8h" name="TypeCode_Base_Attributes.h" local="yes" imported="no">tao/TypeCode_Base_Attributes.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <class kind="class">TAO::TypeCode::Enum</class>
  </compound>
  <compound kind="file">
    <name>Enum_TypeCode.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Enum__TypeCode_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Environment.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Environment_8cpp</filename>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">Environment.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="default__environment_8h" name="default_environment.h" local="yes" imported="no">default_environment.h</includes>
    <includes id="Environment_8i" name="Environment.i" local="yes" imported="no">tao/Environment.i</includes>
  </compound>
  <compound kind="file">
    <name>Environment.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Environment_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <includes id="CORBA__methods_8h" name="CORBA_methods.h" local="yes" imported="no">tao/CORBA_methods.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <includes id="Pseudo__VarOut__T_8h" name="Pseudo_VarOut_T.h" local="yes" imported="no">tao/Pseudo_VarOut_T.h</includes>
    <includes id="default__environment_8h" name="default_environment.h" local="yes" imported="no">tao/default_environment.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">CORBA::Environment</class>
    <member kind="typedef">
      <type>TAO_Pseudo_Var_T&lt; Environment &gt;</type>
      <name>Environment_var</name>
      <anchor>a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Out_T&lt; Environment, Environment_var &gt;</type>
      <name>Environment_out</name>
      <anchor>a81</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Environment.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Environment_8i</filename>
  </compound>
  <compound kind="file">
    <name>Exception.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Exception_8cpp</filename>
    <includes id="Exception_8h" name="Exception.h" local="yes" imported="no">Exception.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">Environment.h</includes>
    <includes id="Any__SystemException_8h" name="Any_SystemException.h" local="yes" imported="no">Any_SystemException.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">Any_Dual_Impl_T.h</includes>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">TypeCode.h</includes>
    <includes id="ORB__Constants_8h" name="ORB_Constants.h" local="yes" imported="no">ORB_Constants.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">TypeCode_Constants.h</includes>
    <includes id="CORBA__String_8h" name="CORBA_String.h" local="yes" imported="no">CORBA_String.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">CDR.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="Exception_8i" name="Exception.i" local="yes" imported="no">tao/Exception.i</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>ACE_OSTREAM_TYPE &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a367</anchor>
      <arglist>(ACE_OSTREAM_TYPE &amp;os, const CORBA::Exception &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>ACE_OSTREAM_TYPE &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a368</anchor>
      <arglist>(ACE_OSTREAM_TYPE &amp;os, const CORBA::Exception *e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Any_Dual_Impl_T&lt; CORBA::Exception &gt;::value</name>
      <anchor>a74</anchor>
      <arglist>(const CORBA::Exception &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; CORBA::Exception &gt;::marshal_value</name>
      <anchor>a75</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; CORBA::Exception &gt;::demarshal_value</name>
      <anchor>a76</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; CORBA::Exception &gt;::extract</name>
      <anchor>a77</anchor>
      <arglist>(const CORBA::Any &amp;, _tao_destructor, CORBA::TypeCode_ptr, const CORBA::Exception *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::Any &amp;any, const CORBA::Exception &amp;exception)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Any &amp;any, CORBA::Exception *exception)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Exception.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Exception_8h</filename>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <includes id="CORBA__String_8h" name="CORBA_String.h" local="yes" imported="no">tao/CORBA_String.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">CORBA::Exception</class>
    <class kind="class">TAO_Exceptions</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_RAISE</name>
      <anchor>a0</anchor>
      <arglist>(EXCEPTION)</arglist>
    </member>
    <member kind="enumeration">
      <name>exception_type</name>
      <anchor>a409</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_EXCEPTION</name>
      <anchor>a409a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USER_EXCEPTION</name>
      <anchor>a409a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SYSTEM_EXCEPTION</name>
      <anchor>a409a85</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::Exception &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::Exception *)</arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr</type>
      <name>_tc_exception_type</name>
      <anchor>a82</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Exception.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Exception_8i</filename>
  </compound>
  <compound kind="file">
    <name>Exception_Data.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Exception__Data_8h</filename>
    <namespace>TAO</namespace>
    <class kind="struct">TAO::Exception_Data</class>
    <member kind="typedef">
      <type>CORBA::Exception *(*</type>
      <name>TAO_Exception_Alloc</name>
      <anchor>a11</anchor>
      <arglist>)(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Exclusive_TMS.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Exclusive__TMS_8cpp</filename>
    <includes id="Exclusive__TMS_8h" name="Exclusive_TMS.h" local="yes" imported="no">tao/Exclusive_TMS.h</includes>
    <includes id="Reply__Dispatcher_8h" name="Reply_Dispatcher.h" local="yes" imported="no">tao/Reply_Dispatcher.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">Transport.h</includes>
  </compound>
  <compound kind="file">
    <name>Exclusive_TMS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Exclusive__TMS_8h</filename>
    <includes id="Transport__Mux__Strategy_8h" name="Transport_Mux_Strategy.h" local="yes" imported="no">tao/Transport_Mux_Strategy.h</includes>
    <class kind="class">TAO_Exclusive_TMS</class>
  </compound>
  <compound kind="file">
    <name>Fault_Tolerance_Service.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Fault__Tolerance__Service_8cpp</filename>
    <includes id="Fault__Tolerance__Service_8h" name="Fault_Tolerance_Service.h" local="yes" imported="no">tao/Fault_Tolerance_Service.h</includes>
    <includes id="Services__Activate_8h" name="Services_Activate.h" local="yes" imported="no">tao/Services_Activate.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <includes id="Client__Strategy__Factory_8h" name="Client_Strategy_Factory.h" local="yes" imported="no">tao/Client_Strategy_Factory.h</includes>
    <includes id="Fault__Tolerance__Service_8i" name="Fault_Tolerance_Service.i" local="yes" imported="no">tao/Fault_Tolerance_Service.i</includes>
  </compound>
  <compound kind="file">
    <name>Fault_Tolerance_Service.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Fault__Tolerance__Service_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <class kind="class">TAO_Fault_Tolerance_Service</class>
  </compound>
  <compound kind="file">
    <name>Fault_Tolerance_Service.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Fault__Tolerance__Service_8i</filename>
  </compound>
  <compound kind="file">
    <name>FILE_Parser.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>FILE__Parser_8cpp</filename>
    <includes id="FILE__Parser_8h" name="FILE_Parser.h" local="yes" imported="no">FILE_Parser.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">tao/Object.h</includes>
    <includes id="FILE__Parser_8i" name="FILE_Parser.i" local="yes" imported="no">FILE_Parser.i</includes>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>file_prefix</name>
      <anchor>a0</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FILE_Parser.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>FILE__Parser_8h</filename>
    <includes id="IOR__Parser_8h" name="IOR_Parser.h" local="yes" imported="no">tao/IOR_Parser.h</includes>
    <class kind="class">TAO_FILE_Parser</class>
  </compound>
  <compound kind="file">
    <name>FILE_Parser.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>FILE__Parser_8i</filename>
  </compound>
  <compound kind="file">
    <name>Fixed_Array_Argument_T.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Fixed__Array__Argument__T_8cpp</filename>
    <includes id="Fixed__Array__Argument__T_8h" name="Fixed_Array_Argument_T.h" local="yes" imported="no">tao/Fixed_Array_Argument_T.h</includes>
    <includes id="Dynamic__ParameterC_8h" name="Dynamic_ParameterC.h" local="yes" imported="no">tao/Dynamic_ParameterC.h</includes>
    <includes id="Fixed__Array__Argument__T_8inl" name="Fixed_Array_Argument_T.inl" local="yes" imported="no">tao/Fixed_Array_Argument_T.inl</includes>
  </compound>
  <compound kind="file">
    <name>Fixed_Array_Argument_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Fixed__Array__Argument__T_8h</filename>
    <includes id="Argument_8h" name="Argument.h" local="yes" imported="no">tao/Argument.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::In_Fixed_Array_Argument_T</class>
    <class kind="class">TAO::Inout_Fixed_Array_Argument_T</class>
    <class kind="class">TAO::Out_Fixed_Array_Argument_T</class>
    <class kind="class">TAO::Ret_Fixed_Array_Argument_T</class>
    <class kind="struct">TAO::Fixed_Array_Tag</class>
    <class kind="struct">TAO::Fixed_Array_Arg_Traits_T</class>
  </compound>
  <compound kind="file">
    <name>Fixed_Array_Argument_T.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Fixed__Array__Argument__T_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Fixed_Size_Argument_T.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Fixed__Size__Argument__T_8cpp</filename>
    <includes id="Fixed__Size__Argument__T_8h" name="Fixed_Size_Argument_T.h" local="yes" imported="no">tao/Fixed_Size_Argument_T.h</includes>
    <includes id="Dynamic__ParameterC_8h" name="Dynamic_ParameterC.h" local="yes" imported="no">tao/Dynamic_ParameterC.h</includes>
    <includes id="Fixed__Size__Argument__T_8inl" name="Fixed_Size_Argument_T.inl" local="yes" imported="no">tao/Fixed_Size_Argument_T.inl</includes>
  </compound>
  <compound kind="file">
    <name>Fixed_Size_Argument_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Fixed__Size__Argument__T_8h</filename>
    <includes id="Argument_8h" name="Argument.h" local="yes" imported="no">tao/Argument.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::In_Fixed_Size_Argument_T</class>
    <class kind="class">TAO::Inout_Fixed_Size_Argument_T</class>
    <class kind="class">TAO::Out_Fixed_Size_Argument_T</class>
    <class kind="class">TAO::Ret_Fixed_Size_Argument_T</class>
    <class kind="struct">TAO::Fixed_Size_Tag</class>
    <class kind="struct">TAO::Fixed_Size_Arg_Traits_T</class>
  </compound>
  <compound kind="file">
    <name>Fixed_Size_Argument_T.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Fixed__Size__Argument__T_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Fixed_TypeCode.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Fixed__TypeCode_8cpp</filename>
    <includes id="Fixed__TypeCode_8h" name="Fixed_TypeCode.h" local="yes" imported="no">tao/Fixed_TypeCode.h</includes>
    <includes id="Fixed__TypeCode_8inl" name="Fixed_TypeCode.inl" local="yes" imported="no">tao/Fixed_TypeCode.inl</includes>
  </compound>
  <compound kind="file">
    <name>Fixed_TypeCode.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Fixed__TypeCode_8h</filename>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">tao/TypeCode.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <class kind="class">TAO::TypeCode::Fixed</class>
  </compound>
  <compound kind="file">
    <name>Fixed_TypeCode.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Fixed__TypeCode_8inl</filename>
  </compound>
  <compound kind="file">
    <name>FloatSeq.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>FloatSeq_8pidl</filename>
    <namespace>CORBA</namespace>
    <member kind="typedef">
      <type>sequence&lt; float &gt;</type>
      <name>FloatSeq</name>
      <anchor>a86</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FloatSeqA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>FloatSeqA_8cpp</filename>
    <includes id="FloatSeqC_8h" name="FloatSeqC.h" local="yes" imported="no">FloatSeqC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <namespace>CORBA</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::FloatSeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::FloatSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::FloatSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::FloatSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_FloatSeq_0</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_float, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_FloatSeq_0</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_FloatSeq</name>
      <anchor>a2</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/FloatSeq:1.0&quot;,&quot;FloatSeq&quot;,&amp;TAO::TypeCode::tc_CORBA_FloatSeq_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_FloatSeq</name>
      <anchor>a87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FloatSeqC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>FloatSeqC_8cpp</filename>
    <includes id="FloatSeqC_8h" name="FloatSeqC.h" local="yes" imported="no">FloatSeqC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_FLOATSEQ_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::FloatSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::FloatSeq &amp;_tao_sequence)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FloatSeqC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>FloatSeqC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">CORBA::FloatSeq</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_FLOATSEQ_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; FloatSeq, CORBA::Float &gt;</type>
      <name>FloatSeq_var</name>
      <anchor>a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; FloatSeq, FloatSeq_var, CORBA::Float &gt;</type>
      <name>FloatSeq_out</name>
      <anchor>a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::FloatSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::FloatSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::FloatSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::FloatSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::FloatSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::FloatSeq &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FloatSeqS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>FloatSeqS_8h</filename>
  </compound>
  <compound kind="file">
    <name>FlResource_Factory.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>FlResource__Factory_8cpp</filename>
    <includes id="FlResource__Factory_8h" name="FlResource_Factory.h" local="yes" imported="no">FlResource_Factory.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>FlResource_Factory.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>FlResource__Factory_8h</filename>
    <includes id="TAO__FlResource__Export_8h" name="TAO_FlResource_Export.h" local="yes" imported="no">tao/TAO_FlResource_Export.h</includes>
    <includes id="GUIResource__Factory_8h" name="GUIResource_Factory.h" local="yes" imported="no">tao/GUIResource_Factory.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::FlResource_Factory</class>
  </compound>
  <compound kind="file">
    <name>FlResource_Loader.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>FlResource__Loader_8cpp</filename>
    <includes id="FlResource__Loader_8h" name="FlResource_Loader.h" local="yes" imported="no">FlResource_Loader.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="FlResource__Factory_8h" name="FlResource_Factory.h" local="yes" imported="no">FlResource_Factory.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>FlResource_Loader.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>FlResource__Loader_8h</filename>
    <includes id="TAO__FlResource__Export_8h" name="TAO_FlResource_Export.h" local="yes" imported="no">tao/TAO_FlResource_Export.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::FlResource_Loader</class>
  </compound>
  <compound kind="file">
    <name>Flushing_Strategy.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Flushing__Strategy_8cpp</filename>
    <includes id="Flushing__Strategy_8h" name="Flushing_Strategy.h" local="yes" imported="no">Flushing_Strategy.h</includes>
  </compound>
  <compound kind="file">
    <name>Flushing_Strategy.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Flushing__Strategy_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">TAO_Export.h</includes>
    <class kind="class">TAO_Flushing_Strategy</class>
  </compound>
  <compound kind="file">
    <name>GIOP.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP_8pidl</filename>
    <includes id="IOP__IOR_8pidl" name="IOP_IOR.pidl" local="yes" imported="yes">IOP_IOR.pidl</includes>
    <namespace>GIOP</namespace>
    <class kind="struct">GIOP::Version</class>
    <class kind="struct">GIOP::IORAddressingInfo</class>
    <class kind="union">GIOP::TargetAddress</class>
    <member kind="typedef">
      <type>short</type>
      <name>AddressingDisposition</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const short</type>
      <name>KeyAddr</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const short</type>
      <name>ProfileAddr</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const short</type>
      <name>ReferenceAddr</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Base.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP__Message__Base_8cpp</filename>
    <includes id="GIOP__Message__Base_8h" name="GIOP_Message_Base.h" local="yes" imported="no">GIOP_Message_Base.h</includes>
    <includes id="operation__details_8h" name="operation_details.h" local="yes" imported="no">operation_details.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="TAO__Server__Request_8h" name="TAO_Server_Request.h" local="yes" imported="no">TAO_Server_Request.h</includes>
    <includes id="GIOP__Message__Locate__Header_8h" name="GIOP_Message_Locate_Header.h" local="yes" imported="no">GIOP_Message_Locate_Header.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">Transport.h</includes>
    <includes id="Transport__Mux__Strategy_8h" name="Transport_Mux_Strategy.h" local="yes" imported="no">Transport_Mux_Strategy.h</includes>
    <includes id="LF__Strategy_8h" name="LF_Strategy.h" local="yes" imported="no">LF_Strategy.h</includes>
    <includes id="Request__Dispatcher_8h" name="Request_Dispatcher.h" local="yes" imported="no">Request_Dispatcher.h</includes>
    <includes id="Codeset__Manager_8h" name="Codeset_Manager.h" local="yes" imported="no">Codeset_Manager.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Base.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP__Message__Base_8h</filename>
    <includes id="Pluggable__Messaging_8h" name="Pluggable_Messaging.h" local="yes" imported="no">tao/Pluggable_Messaging.h</includes>
    <includes id="Pluggable__Messaging__Utils_8h" name="Pluggable_Messaging_Utils.h" local="yes" imported="no">tao/Pluggable_Messaging_Utils.h</includes>
    <includes id="GIOP__Message__Generator__Parser__Impl_8h" name="GIOP_Message_Generator_Parser_Impl.h" local="yes" imported="no">tao/GIOP_Message_Generator_Parser_Impl.h</includes>
    <includes id="GIOP__Utils_8h" name="GIOP_Utils.h" local="yes" imported="no">tao/GIOP_Utils.h</includes>
    <includes id="GIOP__Message__State_8h" name="GIOP_Message_State.h" local="yes" imported="no">tao/GIOP_Message_State.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <class kind="class">TAO_GIOP_Message_Base</class>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Generator_Parser.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP__Message__Generator__Parser_8cpp</filename>
    <includes id="GIOP__Message__Generator__Parser_8h" name="GIOP_Message_Generator_Parser.h" local="yes" imported="no">tao/GIOP_Message_Generator_Parser.h</includes>
    <includes id="Pluggable__Messaging__Utils_8h" name="Pluggable_Messaging_Utils.h" local="yes" imported="no">tao/Pluggable_Messaging_Utils.h</includes>
    <includes id="GIOP__Utils_8h" name="GIOP_Utils.h" local="yes" imported="no">tao/GIOP_Utils.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Generator_Parser.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP__Message__Generator__Parser_8h</filename>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <class kind="class">TAO_GIOP_Message_Generator_Parser</class>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Generator_Parser_10.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP__Message__Generator__Parser__10_8cpp</filename>
    <includes id="GIOP__Message__Generator__Parser__10_8h" name="GIOP_Message_Generator_Parser_10.h" local="yes" imported="no">tao/GIOP_Message_Generator_Parser_10.h</includes>
    <includes id="GIOP__Utils_8h" name="GIOP_Utils.h" local="yes" imported="no">tao/GIOP_Utils.h</includes>
    <includes id="GIOP__Message__Locate__Header_8h" name="GIOP_Message_Locate_Header.h" local="yes" imported="no">tao/GIOP_Message_Locate_Header.h</includes>
    <includes id="operation__details_8h" name="operation_details.h" local="yes" imported="no">tao/operation_details.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <includes id="Pluggable__Messaging__Utils_8h" name="Pluggable_Messaging_Utils.h" local="yes" imported="no">tao/Pluggable_Messaging_Utils.h</includes>
    <includes id="TAO__Server__Request_8h" name="TAO_Server_Request.h" local="yes" imported="no">tao/TAO_Server_Request.h</includes>
    <includes id="ORB__Constants_8h" name="ORB_Constants.h" local="yes" imported="no">tao/ORB_Constants.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Generator_Parser_10.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP__Message__Generator__Parser__10_8h</filename>
    <includes id="GIOP__Message__Generator__Parser_8h" name="GIOP_Message_Generator_Parser.h" local="yes" imported="no">tao/GIOP_Message_Generator_Parser.h</includes>
    <class kind="class">TAO_GIOP_Message_Generator_Parser_10</class>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Generator_Parser_11.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP__Message__Generator__Parser__11_8cpp</filename>
    <includes id="GIOP__Message__Generator__Parser__11_8h" name="GIOP_Message_Generator_Parser_11.h" local="yes" imported="no">tao/GIOP_Message_Generator_Parser_11.h</includes>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Generator_Parser_11.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP__Message__Generator__Parser__11_8h</filename>
    <includes id="GIOP__Message__Generator__Parser__10_8h" name="GIOP_Message_Generator_Parser_10.h" local="yes" imported="no">tao/GIOP_Message_Generator_Parser_10.h</includes>
    <class kind="class">TAO_GIOP_Message_Generator_Parser_11</class>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Generator_Parser_12.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP__Message__Generator__Parser__12_8cpp</filename>
    <includes id="GIOP__Message__Generator__Parser__12_8h" name="GIOP_Message_Generator_Parser_12.h" local="yes" imported="no">tao/GIOP_Message_Generator_Parser_12.h</includes>
    <includes id="GIOPC_8h" name="GIOPC.h" local="yes" imported="no">tao/GIOPC.h</includes>
    <includes id="GIOP__Utils_8h" name="GIOP_Utils.h" local="yes" imported="no">tao/GIOP_Utils.h</includes>
    <includes id="GIOP__Message__Locate__Header_8h" name="GIOP_Message_Locate_Header.h" local="yes" imported="no">tao/GIOP_Message_Locate_Header.h</includes>
    <includes id="operation__details_8h" name="operation_details.h" local="yes" imported="no">tao/operation_details.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <includes id="Pluggable__Messaging__Utils_8h" name="Pluggable_Messaging_Utils.h" local="yes" imported="no">tao/Pluggable_Messaging_Utils.h</includes>
    <includes id="GIOP__Message__State_8h" name="GIOP_Message_State.h" local="yes" imported="no">tao/GIOP_Message_State.h</includes>
    <includes id="TAO__Server__Request_8h" name="TAO_Server_Request.h" local="yes" imported="no">tao/TAO_Server_Request.h</includes>
    <includes id="TAOC_8h" name="TAOC.h" local="yes" imported="no">tao/TAOC.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">tao/Transport.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <member kind="variable" static="yes">
      <type>const size_t</type>
      <name>TAO_GIOP_MESSAGE_ALIGN_PTR</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Generator_Parser_12.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP__Message__Generator__Parser__12_8h</filename>
    <includes id="GIOP__Message__Generator__Parser_8h" name="GIOP_Message_Generator_Parser.h" local="yes" imported="no">tao/GIOP_Message_Generator_Parser.h</includes>
    <class kind="class">TAO_GIOP_Message_Generator_Parser_12</class>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Generator_Parser_Impl.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP__Message__Generator__Parser__Impl_8cpp</filename>
    <includes id="GIOP__Message__Generator__Parser__Impl_8h" name="GIOP_Message_Generator_Parser_Impl.h" local="yes" imported="no">tao/GIOP_Message_Generator_Parser_Impl.h</includes>
    <includes id="GIOP__Message__Generator__Parser__Impl_8inl" name="GIOP_Message_Generator_Parser_Impl.inl" local="yes" imported="no">tao/GIOP_Message_Generator_Parser_Impl.inl</includes>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Generator_Parser_Impl.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP__Message__Generator__Parser__Impl_8h</filename>
    <includes id="GIOP__Message__Generator__Parser__11_8h" name="GIOP_Message_Generator_Parser_11.h" local="yes" imported="no">tao/GIOP_Message_Generator_Parser_11.h</includes>
    <includes id="GIOP__Message__Generator__Parser__12_8h" name="GIOP_Message_Generator_Parser_12.h" local="yes" imported="no">tao/GIOP_Message_Generator_Parser_12.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <class kind="class">TAO_GIOP_Message_Generator_Parser_Impl</class>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Generator_Parser_Impl.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP__Message__Generator__Parser__Impl_8inl</filename>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Lite.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP__Message__Lite_8cpp</filename>
    <includes id="GIOP__Message__Lite_8h" name="GIOP_Message_Lite.h" local="yes" imported="no">GIOP_Message_Lite.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="TAOC_8h" name="TAOC.h" local="yes" imported="no">TAOC.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="operation__details_8h" name="operation_details.h" local="yes" imported="no">operation_details.h</includes>
    <includes id="TAO__Server__Request_8h" name="TAO_Server_Request.h" local="yes" imported="no">TAO_Server_Request.h</includes>
    <includes id="GIOP__Message__Locate__Header_8h" name="GIOP_Message_Locate_Header.h" local="yes" imported="no">GIOP_Message_Locate_Header.h</includes>
    <includes id="LF__Strategy_8h" name="LF_Strategy.h" local="yes" imported="no">LF_Strategy.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">Transport.h</includes>
    <includes id="Transport__Mux__Strategy_8h" name="Transport_Mux_Strategy.h" local="yes" imported="no">Transport_Mux_Strategy.h</includes>
    <includes id="Codeset__Manager_8h" name="Codeset_Manager.h" local="yes" imported="no">Codeset_Manager.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <member kind="variable" static="yes">
      <type>const size_t</type>
      <name>TAO_GIOP_LITE_HEADER_LEN</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const size_t</type>
      <name>TAO_GIOP_LITE_MESSAGE_SIZE_OFFSET</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const size_t</type>
      <name>TAO_GIOP_LITE_MESSAGE_TYPE_OFFSET</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Lite.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP__Message__Lite_8h</filename>
    <includes id="Pluggable__Messaging_8h" name="Pluggable_Messaging.h" local="yes" imported="no">tao/Pluggable_Messaging.h</includes>
    <includes id="Pluggable__Messaging__Utils_8h" name="Pluggable_Messaging_Utils.h" local="yes" imported="no">tao/Pluggable_Messaging_Utils.h</includes>
    <includes id="GIOP__Utils_8h" name="GIOP_Utils.h" local="yes" imported="no">tao/GIOP_Utils.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <class kind="class">TAO_GIOP_Message_Lite</class>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Locate_Header.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP__Message__Locate__Header_8cpp</filename>
    <includes id="GIOP__Message__Locate__Header_8h" name="GIOP_Message_Locate_Header.h" local="yes" imported="no">tao/GIOP_Message_Locate_Header.h</includes>
    <includes id="GIOP__Message__Locate__Header_8i" name="GIOP_Message_Locate_Header.i" local="yes" imported="no">tao/GIOP_Message_Locate_Header.i</includes>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Locate_Header.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP__Message__Locate__Header_8h</filename>
    <includes id="Tagged__Profile_8h" name="Tagged_Profile.h" local="yes" imported="no">tao/Tagged_Profile.h</includes>
    <class kind="class">TAO_GIOP_Locate_Request_Header</class>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Locate_Header.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP__Message__Locate__Header_8i</filename>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_State.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP__Message__State_8cpp</filename>
    <includes id="GIOP__Message__State_8h" name="GIOP_Message_State.h" local="yes" imported="no">tao/GIOP_Message_State.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <includes id="GIOP__Message__Base_8h" name="GIOP_Message_Base.h" local="yes" imported="no">tao/GIOP_Message_Base.h</includes>
    <includes id="GIOP__Message__State_8inl" name="GIOP_Message_State.inl" local="yes" imported="no">tao/GIOP_Message_State.inl</includes>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_State.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP__Message__State_8h</filename>
    <includes id="GIOP__Message__Version_8h" name="GIOP_Message_Version.h" local="yes" imported="no">tao/GIOP_Message_Version.h</includes>
    <class kind="class">TAO_GIOP_Message_State</class>
    <member kind="variable">
      <type>const size_t</type>
      <name>TAO_GIOP_MESSAGE_HEADER_LEN</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>TAO_GIOP_MESSAGE_SIZE_OFFSET</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>TAO_GIOP_MESSAGE_FLAGS_OFFSET</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>TAO_GIOP_MESSAGE_TYPE_OFFSET</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>TAO_GIOP_VERSION_MINOR_OFFSET</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>TAO_GIOP_VERSION_MAJOR_OFFSET</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>TAO_GIOP_MESSAGE_FRAGMENT_HEADER</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_State.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP__Message__State_8inl</filename>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Version.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP__Message__Version_8cpp</filename>
    <includes id="GIOP__Message__Version_8h" name="GIOP_Message_Version.h" local="yes" imported="no">GIOP_Message_Version.h</includes>
    <includes id="GIOP__Message__Version_8inl" name="GIOP_Message_Version.inl" local="yes" imported="no">tao/GIOP_Message_Version.inl</includes>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Version.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP__Message__Version_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <class kind="class">TAO_GIOP_Message_Version</class>
  </compound>
  <compound kind="file">
    <name>GIOP_Message_Version.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP__Message__Version_8inl</filename>
  </compound>
  <compound kind="file">
    <name>GIOP_Utils.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP__Utils_8cpp</filename>
    <includes id="GIOP__Utils_8h" name="GIOP_Utils.h" local="yes" imported="no">tao/GIOP_Utils.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">tao/Transport.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
  </compound>
  <compound kind="file">
    <name>GIOP_Utils.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOP__Utils_8h</filename>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">tao/Object.h</includes>
    <includes id="IOP__IORC_8h" name="IOP_IORC.h" local="yes" imported="no">tao/IOP_IORC.h</includes>
    <class kind="class">TAO_GIOP_Locate_Status_Msg</class>
    <class kind="class">TAO_GIOP_ReplyHeader</class>
    <class kind="class">TAO_GIOP_Utils</class>
    <member kind="typedef">
      <type>enum GIOP_Messages</type>
      <name>TAO_GIOP_Message_Type</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum GIOP_LocateStatusType</type>
      <name>TAO_GIOP_Locate_Status_Type</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum GIOP_ReplyStatusType</type>
      <name>TAO_GIOP_Reply_Status_Type</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>GIOP_Messages</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_REQUEST</name>
      <anchor>a23a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_REPLY</name>
      <anchor>a23a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_CANCELREQUEST</name>
      <anchor>a23a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_LOCATEREQUEST</name>
      <anchor>a23a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_LOCATEREPLY</name>
      <anchor>a23a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_CLOSECONNECTION</name>
      <anchor>a23a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_MESSAGERROR</name>
      <anchor>a23a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_FRAGMENT</name>
      <anchor>a23a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>GIOP_LocateStatusType</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_UNKNOWN_OBJECT</name>
      <anchor>a24a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_OBJECT_HERE</name>
      <anchor>a24a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_OBJECT_FORWARD</name>
      <anchor>a24a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_OBJECT_FORWARD_PERM</name>
      <anchor>a24a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_LOC_SYSTEM_EXCEPTION</name>
      <anchor>a24a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_LOC_NEEDS_ADDRESSING_MODE</name>
      <anchor>a24a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>GIOP_ReplyStatusType</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_NO_EXCEPTION</name>
      <anchor>a25a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_USER_EXCEPTION</name>
      <anchor>a25a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_SYSTEM_EXCEPTION</name>
      <anchor>a25a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_LOCATION_FORWARD</name>
      <anchor>a25a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_LOCATION_FORWARD_PERM</name>
      <anchor>a25a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_GIOP_NEEDS_ADDRESSING_MODE</name>
      <anchor>a25a22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GIOPA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOPA_8cpp</filename>
    <includes id="GIOPC_8h" name="GIOPC.h" local="yes" imported="no">GIOPC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="String__TypeCode_8h" name="String_TypeCode.h" local="yes" imported="no">tao/String_TypeCode.h</includes>
    <includes id="Struct__TypeCode_8h" name="Struct_TypeCode.h" local="yes" imported="no">tao/Struct_TypeCode.h</includes>
    <includes id="TypeCode__Non__Default__Case_8h" name="TypeCode_Non_Default_Case.h" local="yes" imported="no">tao/TypeCode_Non_Default_Case.h</includes>
    <includes id="TypeCode__Default__Case_8h" name="TypeCode_Default_Case.h" local="yes" imported="no">tao/TypeCode_Default_Case.h</includes>
    <includes id="Union__TypeCode_8h" name="Union_TypeCode.h" local="yes" imported="no">tao/Union_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>GIOP</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const GIOP::Version &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, GIOP::Version *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a16</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, GIOP::Version *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a17</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const GIOP::Version *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const GIOP::IORAddressingInfo &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a19</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, GIOP::IORAddressingInfo *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a20</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, GIOP::IORAddressingInfo *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a21</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const GIOP::IORAddressingInfo *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a22</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const GIOP::TargetAddress &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a23</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, GIOP::TargetAddress *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a24</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, GIOP::TargetAddress *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a25</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const GIOP::TargetAddress *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_GIOP_AddressingDisposition</name>
      <anchor>a0</anchor>
      <arglist>(&quot;IDL:omg.org/GIOP/AddressingDisposition:1.0&quot;,&quot;AddressingDisposition&quot;,&amp;CORBA::_tc_short)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_AddressingDisposition</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_fields_GIOP_Version</name>
      <anchor>a2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_GIOP_Version</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::tk_struct,&quot;IDL:omg.org/GIOP/Version:1.0&quot;,&quot;Version&quot;, _tao_fields_GIOP_Version, 2)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_Version</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_fields_GIOP_IORAddressingInfo</name>
      <anchor>a5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_GIOP_IORAddressingInfo</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::tk_struct,&quot;IDL:omg.org/GIOP/IORAddressingInfo:1.0&quot;,&quot;IORAddressingInfo&quot;, _tao_fields_GIOP_IORAddressingInfo, 2)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_IORAddressingInfo</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Non_Default_Case&lt; CORBA::Short, char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_cases_GIOP_TargetAddress_0</name>
      <anchor>a8</anchor>
      <arglist>(0,&quot;object_key&quot;,&amp;CORBA::_tc_OctetSeq)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Non_Default_Case&lt; CORBA::Short, char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_cases_GIOP_TargetAddress_1</name>
      <anchor>a9</anchor>
      <arglist>(1,&quot;profile&quot;,&amp;IOP::_tc_TaggedProfile)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Non_Default_Case&lt; CORBA::Short, char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_cases_GIOP_TargetAddress_2</name>
      <anchor>a10</anchor>
      <arglist>(2,&quot;ior&quot;,&amp;GIOP::_tc_IORAddressingInfo)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Case&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *const</type>
      <name>_tao_cases_GIOP_TargetAddress</name>
      <anchor>a11</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Union&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Case&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_GIOP_TargetAddress</name>
      <anchor>a12</anchor>
      <arglist>(&quot;IDL:omg.org/GIOP/TargetAddress:1.0&quot;,&quot;TargetAddress&quot;,&amp;CORBA::_tc_short, _tao_cases_GIOP_TargetAddress, 3,-1)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_TargetAddress</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GIOPC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOPC_8cpp</filename>
    <includes id="GIOPC_8h" name="GIOPC.h" local="yes" imported="no">GIOPC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <includes id="GIOPC_8inl" name="GIOPC.inl" local="yes" imported="no">GIOPC.inl</includes>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const GIOP::Version &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;strm, GIOP::Version &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const GIOP::IORAddressingInfo &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_InputCDR &amp;strm, GIOP::IORAddressingInfo &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const GIOP::TargetAddress &amp;_tao_union)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a5</anchor>
      <arglist>(TAO_InputCDR &amp;strm, GIOP::TargetAddress &amp;_tao_union)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GIOPC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOPC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="VarOut__T_8h" name="VarOut_T.h" local="yes" imported="no">tao/VarOut_T.h</includes>
    <includes id="IOP__IORC_8h" name="IOP_IORC.h" local="yes" imported="no">tao/IOP_IORC.h</includes>
    <namespace>GIOP</namespace>
    <namespace>TAO</namespace>
    <class kind="struct">GIOP::Version</class>
    <class kind="struct">GIOP::IORAddressingInfo</class>
    <class kind="union">GIOP::TargetAddress</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_GIOP_TARGETADDRESS_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::Short_out</type>
      <name>AddressingDisposition_out</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Fixed_Var_T&lt; Version &gt;</type>
      <name>Version_var</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Version &amp;</type>
      <name>Version_out</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; IORAddressingInfo &gt;</type>
      <name>IORAddressingInfo_var</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; IORAddressingInfo, IORAddressingInfo_var &gt;</type>
      <name>IORAddressingInfo_out</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; TargetAddress &gt;</type>
      <name>TargetAddress_var</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; TargetAddress, TargetAddress_var &gt;</type>
      <name>TargetAddress_out</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::Any &amp;, const GIOP::Version &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::Any &amp;, GIOP::Version *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a11</anchor>
      <arglist>(const CORBA::Any &amp;, GIOP::Version *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a12</anchor>
      <arglist>(const CORBA::Any &amp;, const GIOP::Version *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::Any &amp;, const GIOP::IORAddressingInfo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::Any &amp;, GIOP::IORAddressingInfo *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a15</anchor>
      <arglist>(const CORBA::Any &amp;, GIOP::IORAddressingInfo *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a16</anchor>
      <arglist>(const CORBA::Any &amp;, const GIOP::IORAddressingInfo *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a17</anchor>
      <arglist>(CORBA::Any &amp;, const GIOP::TargetAddress &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::Any &amp;, GIOP::TargetAddress *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a19</anchor>
      <arglist>(const CORBA::Any &amp;, GIOP::TargetAddress *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a20</anchor>
      <arglist>(const CORBA::Any &amp;, const GIOP::TargetAddress *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a21</anchor>
      <arglist>(TAO_OutputCDR &amp;, const GIOP::Version &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a22</anchor>
      <arglist>(TAO_InputCDR &amp;, GIOP::Version &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a23</anchor>
      <arglist>(TAO_OutputCDR &amp;, const GIOP::IORAddressingInfo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a24</anchor>
      <arglist>(TAO_InputCDR &amp;, GIOP::IORAddressingInfo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a25</anchor>
      <arglist>(TAO_OutputCDR &amp;, const GIOP::TargetAddress &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a26</anchor>
      <arglist>(TAO_InputCDR &amp;, GIOP::TargetAddress &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GIOPC.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOPC_8inl</filename>
  </compound>
  <compound kind="file">
    <name>GIOPS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOPS_8h</filename>
  </compound>
  <compound kind="file">
    <name>GIOPS_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GIOPS__T_8h</filename>
    <namespace>POA_GIOP</namespace>
  </compound>
  <compound kind="file">
    <name>GUIResource_Factory.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GUIResource__Factory_8cpp</filename>
    <includes id="GUIResource__Factory_8h" name="GUIResource_Factory.h" local="yes" imported="no">tao/GUIResource_Factory.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>GUIResource_Factory.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>GUIResource__Factory_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::GUIResource_Factory</class>
  </compound>
  <compound kind="file">
    <name>IFR_Client_Adapter.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IFR__Client__Adapter_8cpp</filename>
    <includes id="IFR__Client__Adapter_8h" name="IFR_Client_Adapter.h" local="yes" imported="no">tao/IFR_Client_Adapter.h</includes>
  </compound>
  <compound kind="file">
    <name>IFR_Client_Adapter.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IFR__Client__Adapter_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">TAO_IFR_Client_Adapter</class>
  </compound>
  <compound kind="file">
    <name>IIOP.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IIOP_8pidl</filename>
    <namespace>IIOP</namespace>
    <class kind="struct">IIOP::ListenPoint</class>
    <class kind="struct">IIOP::BiDirIIOPServiceContext</class>
    <member kind="typedef">
      <type>sequence&lt; ListenPoint &gt;</type>
      <name>ListenPointList</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IIOP_Acceptor.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IIOP__Acceptor_8cpp</filename>
    <includes id="IIOP__Acceptor_8h" name="IIOP_Acceptor.h" local="yes" imported="no">tao/IIOP_Acceptor.h</includes>
    <includes id="IIOP__Profile_8h" name="IIOP_Profile.h" local="yes" imported="no">tao/IIOP_Profile.h</includes>
    <includes id="MProfile_8h" name="MProfile.h" local="yes" imported="no">tao/MProfile.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <includes id="Protocols__Hooks_8h" name="Protocols_Hooks.h" local="yes" imported="no">tao/Protocols_Hooks.h</includes>
    <includes id="Codeset__Manager_8h" name="Codeset_Manager.h" local="yes" imported="no">tao/Codeset_Manager.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">tao/Transport.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="IIOP__Acceptor_8i" name="IIOP_Acceptor.i" local="yes" imported="no">tao/IIOP_Acceptor.i</includes>
  </compound>
  <compound kind="file">
    <name>IIOP_Acceptor.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IIOP__Acceptor_8h</filename>
    <includes id="Transport__Acceptor_8h" name="Transport_Acceptor.h" local="yes" imported="no">tao/Transport_Acceptor.h</includes>
    <includes id="IIOP__Connection__Handler_8h" name="IIOP_Connection_Handler.h" local="yes" imported="no">tao/IIOP_Connection_Handler.h</includes>
    <includes id="Acceptor__Impl_8h" name="Acceptor_Impl.h" local="yes" imported="no">tao/Acceptor_Impl.h</includes>
    <includes id="GIOP__Message__Version_8h" name="GIOP_Message_Version.h" local="yes" imported="no">tao/GIOP_Message_Version.h</includes>
    <class kind="class">TAO_IIOP_Acceptor</class>
  </compound>
  <compound kind="file">
    <name>IIOP_Acceptor.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IIOP__Acceptor_8i</filename>
  </compound>
  <compound kind="file">
    <name>IIOP_Connection_Handler.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IIOP__Connection__Handler_8cpp</filename>
    <includes id="IIOP__Connection__Handler_8h" name="IIOP_Connection_Handler.h" local="yes" imported="no">IIOP_Connection_Handler.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="IIOP__Transport_8h" name="IIOP_Transport.h" local="yes" imported="no">IIOP_Transport.h</includes>
    <includes id="IIOP__Endpoint_8h" name="IIOP_Endpoint.h" local="yes" imported="no">IIOP_Endpoint.h</includes>
    <includes id="IIOPC_8h" name="IIOPC.h" local="yes" imported="no">IIOPC.h</includes>
    <includes id="Thread__Lane__Resources_8h" name="Thread_Lane_Resources.h" local="yes" imported="no">Thread_Lane_Resources.h</includes>
    <includes id="Base__Transport__Property_8h" name="Base_Transport_Property.h" local="yes" imported="no">Base_Transport_Property.h</includes>
    <includes id="Protocols__Hooks_8h" name="Protocols_Hooks.h" local="yes" imported="no">Protocols_Hooks.h</includes>
    <includes id="Wait__Strategy_8h" name="Wait_Strategy.h" local="yes" imported="no">Wait_Strategy.h</includes>
  </compound>
  <compound kind="file">
    <name>IIOP_Connection_Handler.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IIOP__Connection__Handler_8h</filename>
    <includes id="Connection__Handler_8h" name="Connection_Handler.h" local="yes" imported="no">tao/Connection_Handler.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <namespace>IIOP</namespace>
    <class kind="class">TAO_IIOP_Connection_Handler</class>
    <member kind="typedef">
      <type>ACE_Svc_Handler&lt; ACE_SOCK_STREAM, ACE_NULL_SYNCH &gt;</type>
      <name>TAO_IIOP_SVC_HANDLER</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IIOP_Connector.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IIOP__Connector_8cpp</filename>
    <includes id="IIOP__Connector_8h" name="IIOP_Connector.h" local="yes" imported="no">IIOP_Connector.h</includes>
    <includes id="IIOP__Profile_8h" name="IIOP_Profile.h" local="yes" imported="no">IIOP_Profile.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">Environment.h</includes>
    <includes id="Protocols__Hooks_8h" name="Protocols_Hooks.h" local="yes" imported="no">Protocols_Hooks.h</includes>
    <includes id="Connect__Strategy_8h" name="Connect_Strategy.h" local="yes" imported="no">Connect_Strategy.h</includes>
    <includes id="Thread__Lane__Resources_8h" name="Thread_Lane_Resources.h" local="yes" imported="no">Thread_Lane_Resources.h</includes>
    <includes id="Profile__Transport__Resolver_8h" name="Profile_Transport_Resolver.h" local="yes" imported="no">Profile_Transport_Resolver.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">Transport.h</includes>
    <includes id="Wait__Strategy_8h" name="Wait_Strategy.h" local="yes" imported="no">Wait_Strategy.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
  </compound>
  <compound kind="file">
    <name>IIOP_Connector.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IIOP__Connector_8h</filename>
    <includes id="Transport__Connector_8h" name="Transport_Connector.h" local="yes" imported="no">tao/Transport_Connector.h</includes>
    <includes id="Connector__Impl_8h" name="Connector_Impl.h" local="yes" imported="no">tao/Connector_Impl.h</includes>
    <includes id="IIOP__Connection__Handler_8h" name="IIOP_Connection_Handler.h" local="yes" imported="no">tao/IIOP_Connection_Handler.h</includes>
    <class kind="class">TAO_IIOP_Connector</class>
  </compound>
  <compound kind="file">
    <name>IIOP_Endpoint.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IIOP__Endpoint_8cpp</filename>
    <includes id="IIOP__Endpoint_8h" name="IIOP_Endpoint.h" local="yes" imported="no">IIOP_Endpoint.h</includes>
    <includes id="IOP__IORC_8h" name="IOP_IORC.h" local="yes" imported="no">IOP_IORC.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="IIOP__Endpoint_8i" name="IIOP_Endpoint.i" local="yes" imported="no">tao/IIOP_Endpoint.i</includes>
  </compound>
  <compound kind="file">
    <name>IIOP_Endpoint.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IIOP__Endpoint_8h</filename>
    <includes id="Endpoint_8h" name="Endpoint.h" local="yes" imported="no">tao/Endpoint.h</includes>
    <includes id="CORBA__String_8h" name="CORBA_String.h" local="yes" imported="no">tao/CORBA_String.h</includes>
    <includes id="IIOP__EndpointsC_8h" name="IIOP_EndpointsC.h" local="yes" imported="no">tao/IIOP_EndpointsC.h</includes>
    <class kind="class">TAO_IIOP_Endpoint</class>
  </compound>
  <compound kind="file">
    <name>IIOP_Endpoint.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IIOP__Endpoint_8i</filename>
  </compound>
  <compound kind="file">
    <name>IIOP_Endpoints.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IIOP__Endpoints_8pidl</filename>
    <namespace>TAO</namespace>
    <class kind="struct">TAO::IIOP_Endpoint_Info</class>
    <member kind="typedef">
      <type>sequence&lt; IIOP_Endpoint_Info &gt;</type>
      <name>IIOPEndpointSequence</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IIOP_EndpointsA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IIOP__EndpointsA_8cpp</filename>
    <includes id="IIOP__EndpointsC_8h" name="IIOP_EndpointsC.h" local="yes" imported="no">IIOP_EndpointsC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="String__TypeCode_8h" name="String_TypeCode.h" local="yes" imported="no">tao/String_TypeCode.h</includes>
    <includes id="Struct__TypeCode_8h" name="Struct_TypeCode.h" local="yes" imported="no">tao/Struct_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const TAO::IIOP_Endpoint_Info &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, TAO::IIOP_Endpoint_Info *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a9</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, TAO::IIOP_Endpoint_Info *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a10</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const TAO::IIOP_Endpoint_Info *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const TAO::IIOPEndpointSequence &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, TAO::IIOPEndpointSequence *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a13</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, TAO::IIOPEndpointSequence *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a14</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const TAO::IIOPEndpointSequence *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_fields_TAO_IIOP_Endpoint_Info</name>
      <anchor>a0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_TAO_IIOP_Endpoint_Info</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::tk_struct,&quot;IDL:TAO/IIOP_Endpoint_Info:1.0&quot;,&quot;IIOP_Endpoint_Info&quot;, _tao_fields_TAO_IIOP_Endpoint_Info, 3)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_IIOP_Endpoint_Info</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>TAO_IIOPEndpointSequence_0</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::tk_sequence,&amp;TAO::_tc_IIOP_Endpoint_Info, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_TAO_IIOPEndpointSequence_0</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_TAO_IIOPEndpointSequence</name>
      <anchor>a5</anchor>
      <arglist>(&quot;IDL:TAO/IIOPEndpointSequence:1.0&quot;,&quot;IIOPEndpointSequence&quot;,&amp;TAO::TypeCode::tc_TAO_IIOPEndpointSequence_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_IIOPEndpointSequence</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IIOP_EndpointsC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IIOP__EndpointsC_8cpp</filename>
    <includes id="IIOP__EndpointsC_8h" name="IIOP_EndpointsC.h" local="yes" imported="no">IIOP_EndpointsC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_TAO_IIOPENDPOINTSEQUENCE_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const TAO::IIOP_Endpoint_Info &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;strm, TAO::IIOP_Endpoint_Info &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const TAO::IIOPEndpointSequence &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;strm, TAO::IIOPEndpointSequence &amp;_tao_sequence)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IIOP_EndpointsC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IIOP__EndpointsC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <includes id="VarOut__T_8h" name="VarOut_T.h" local="yes" imported="no">tao/VarOut_T.h</includes>
    <namespace>TAO</namespace>
    <class kind="struct">TAO::IIOP_Endpoint_Info</class>
    <class kind="class">TAO::IIOPEndpointSequence</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_TAO_IIOPENDPOINTSEQUENCE_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; IIOP_Endpoint_Info &gt;</type>
      <name>IIOP_Endpoint_Info_var</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; IIOP_Endpoint_Info, IIOP_Endpoint_Info_var &gt;</type>
      <name>IIOP_Endpoint_Info_out</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_VarSeq_Var_T&lt; IIOPEndpointSequence, IIOP_Endpoint_Info &gt;</type>
      <name>IIOPEndpointSequence_var</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; IIOPEndpointSequence, IIOPEndpointSequence_var, IIOP_Endpoint_Info &gt;</type>
      <name>IIOPEndpointSequence_out</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::Any &amp;, const TAO::IIOP_Endpoint_Info &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Any &amp;, TAO::IIOP_Endpoint_Info *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a8</anchor>
      <arglist>(const CORBA::Any &amp;, TAO::IIOP_Endpoint_Info *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a9</anchor>
      <arglist>(const CORBA::Any &amp;, const TAO::IIOP_Endpoint_Info *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::Any &amp;, const TAO::IIOPEndpointSequence &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::Any &amp;, TAO::IIOPEndpointSequence *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a12</anchor>
      <arglist>(const CORBA::Any &amp;, TAO::IIOPEndpointSequence *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a13</anchor>
      <arglist>(const CORBA::Any &amp;, const TAO::IIOPEndpointSequence *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a14</anchor>
      <arglist>(TAO_OutputCDR &amp;, const TAO::IIOP_Endpoint_Info &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a15</anchor>
      <arglist>(TAO_InputCDR &amp;, TAO::IIOP_Endpoint_Info &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a16</anchor>
      <arglist>(TAO_OutputCDR &amp;, const TAO::IIOPEndpointSequence &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a17</anchor>
      <arglist>(TAO_InputCDR &amp;, TAO::IIOPEndpointSequence &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IIOP_Factory.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IIOP__Factory_8cpp</filename>
    <includes id="IIOP__Factory_8h" name="IIOP_Factory.h" local="yes" imported="no">IIOP_Factory.h</includes>
    <includes id="IIOP__Acceptor_8h" name="IIOP_Acceptor.h" local="yes" imported="no">IIOP_Acceptor.h</includes>
    <includes id="IIOP__Connector_8h" name="IIOP_Connector.h" local="yes" imported="no">IIOP_Connector.h</includes>
    <includes id="IOP__IORC_8h" name="IOP_IORC.h" local="yes" imported="no">IOP_IORC.h</includes>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>prefix_</name>
      <anchor>a0</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IIOP_Factory.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IIOP__Factory_8h</filename>
    <includes id="Protocol__Factory_8h" name="Protocol_Factory.h" local="yes" imported="no">tao/Protocol_Factory.h</includes>
    <class kind="class">TAO_IIOP_Protocol_Factory</class>
  </compound>
  <compound kind="file">
    <name>IIOP_Lite_Factory.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IIOP__Lite__Factory_8cpp</filename>
    <includes id="IIOP__Lite__Factory_8h" name="IIOP_Lite_Factory.h" local="yes" imported="no">IIOP_Lite_Factory.h</includes>
    <includes id="IIOP__Acceptor_8h" name="IIOP_Acceptor.h" local="yes" imported="no">IIOP_Acceptor.h</includes>
    <includes id="IIOP__Connector_8h" name="IIOP_Connector.h" local="yes" imported="no">IIOP_Connector.h</includes>
    <includes id="IOP__IORC_8h" name="IOP_IORC.h" local="yes" imported="no">IOP_IORC.h</includes>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>prefix_</name>
      <anchor>a0</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IIOP_Lite_Factory.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IIOP__Lite__Factory_8h</filename>
    <includes id="Protocol__Factory_8h" name="Protocol_Factory.h" local="yes" imported="no">tao/Protocol_Factory.h</includes>
    <class kind="class">TAO_IIOP_Lite_Protocol_Factory</class>
  </compound>
  <compound kind="file">
    <name>IIOP_Profile.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IIOP__Profile_8cpp</filename>
    <includes id="IIOP__Profile_8h" name="IIOP_Profile.h" local="yes" imported="no">tao/IIOP_Profile.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <includes id="IIOP__EndpointsC_8h" name="IIOP_EndpointsC.h" local="yes" imported="no">tao/IIOP_EndpointsC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>prefix_</name>
      <anchor>a0</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IIOP_Profile.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IIOP__Profile_8h</filename>
    <includes id="Profile_8h" name="Profile.h" local="yes" imported="no">tao/Profile.h</includes>
    <includes id="IIOP__Endpoint_8h" name="IIOP_Endpoint.h" local="yes" imported="no">tao/IIOP_Endpoint.h</includes>
    <class kind="class">TAO_IIOP_Profile</class>
  </compound>
  <compound kind="file">
    <name>IIOP_Transport.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IIOP__Transport_8cpp</filename>
    <includes id="IIOP__Transport_8h" name="IIOP_Transport.h" local="yes" imported="no">IIOP_Transport.h</includes>
    <includes id="IIOP__Acceptor_8h" name="IIOP_Acceptor.h" local="yes" imported="no">IIOP_Acceptor.h</includes>
    <includes id="IIOPC_8h" name="IIOPC.h" local="yes" imported="no">IIOPC.h</includes>
    <includes id="Acceptor__Registry_8h" name="Acceptor_Registry.h" local="yes" imported="no">Acceptor_Registry.h</includes>
    <includes id="operation__details_8h" name="operation_details.h" local="yes" imported="no">operation_details.h</includes>
    <includes id="Wait__Strategy_8h" name="Wait_Strategy.h" local="yes" imported="no">Wait_Strategy.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="GIOP__Message__Base_8h" name="GIOP_Message_Base.h" local="yes" imported="no">GIOP_Message_Base.h</includes>
    <includes id="Protocols__Hooks_8h" name="Protocols_Hooks.h" local="yes" imported="no">Protocols_Hooks.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="Thread__Lane__Resources_8h" name="Thread_Lane_Resources.h" local="yes" imported="no">Thread_Lane_Resources.h</includes>
    <includes id="Transport__Mux__Strategy_8h" name="Transport_Mux_Strategy.h" local="yes" imported="no">Transport_Mux_Strategy.h</includes>
  </compound>
  <compound kind="file">
    <name>IIOP_Transport.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IIOP__Transport_8h</filename>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">tao/Transport.h</includes>
    <namespace>IIOP</namespace>
    <class kind="class">TAO_IIOP_Transport</class>
  </compound>
  <compound kind="file">
    <name>IIOPA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IIOPA_8cpp</filename>
    <includes id="IIOPC_8h" name="IIOPC.h" local="yes" imported="no">IIOPC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="String__TypeCode_8h" name="String_TypeCode.h" local="yes" imported="no">tao/String_TypeCode.h</includes>
    <includes id="Struct__TypeCode_8h" name="Struct_TypeCode.h" local="yes" imported="no">tao/Struct_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>IIOP</namespace>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const IIOP::ListenPoint &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, IIOP::ListenPoint *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a12</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, IIOP::ListenPoint *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a13</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const IIOP::ListenPoint *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const IIOP::ListenPointList &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, IIOP::ListenPointList *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a16</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, IIOP::ListenPointList *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a17</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const IIOP::ListenPointList *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const IIOP::BiDirIIOPServiceContext &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a19</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, IIOP::BiDirIIOPServiceContext *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a20</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, IIOP::BiDirIIOPServiceContext *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a21</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const IIOP::BiDirIIOPServiceContext *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_fields_IIOP_ListenPoint</name>
      <anchor>a0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_IIOP_ListenPoint</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::tk_struct,&quot;IDL:omg.org/IIOP/ListenPoint:1.0&quot;,&quot;ListenPoint&quot;, _tao_fields_IIOP_ListenPoint, 2)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ListenPoint</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>IIOP_ListenPointList_0</name>
      <anchor>a20</anchor>
      <arglist>(CORBA::tk_sequence,&amp;IIOP::_tc_ListenPoint, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_IIOP_ListenPointList_0</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_IIOP_ListenPointList</name>
      <anchor>a5</anchor>
      <arglist>(&quot;IDL:omg.org/IIOP/ListenPointList:1.0&quot;,&quot;ListenPointList&quot;,&amp;TAO::TypeCode::tc_IIOP_ListenPointList_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ListenPointList</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_fields_IIOP_BiDirIIOPServiceContext</name>
      <anchor>a7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_IIOP_BiDirIIOPServiceContext</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::tk_struct,&quot;IDL:omg.org/IIOP/BiDirIIOPServiceContext:1.0&quot;,&quot;BiDirIIOPServiceContext&quot;, _tao_fields_IIOP_BiDirIIOPServiceContext, 1)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_BiDirIIOPServiceContext</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IIOPC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IIOPC_8cpp</filename>
    <includes id="IIOPC_8h" name="IIOPC.h" local="yes" imported="no">IIOPC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_IIOP_LISTENPOINTLIST_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const IIOP::ListenPoint &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;strm, IIOP::ListenPoint &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const IIOP::ListenPointList &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;strm, IIOP::ListenPointList &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const IIOP::BiDirIIOPServiceContext &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a6</anchor>
      <arglist>(TAO_InputCDR &amp;strm, IIOP::BiDirIIOPServiceContext &amp;_tao_aggregate)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IIOPC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IIOPC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <includes id="VarOut__T_8h" name="VarOut_T.h" local="yes" imported="no">tao/VarOut_T.h</includes>
    <namespace>IIOP</namespace>
    <namespace>TAO</namespace>
    <class kind="struct">IIOP::ListenPoint</class>
    <class kind="class">IIOP::ListenPointList</class>
    <class kind="struct">IIOP::BiDirIIOPServiceContext</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IIOP_LISTENPOINTLIST_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; ListenPoint &gt;</type>
      <name>ListenPoint_var</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; ListenPoint, ListenPoint_var &gt;</type>
      <name>ListenPoint_out</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_VarSeq_Var_T&lt; ListenPointList, ListenPoint &gt;</type>
      <name>ListenPointList_var</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; ListenPointList, ListenPointList_var, ListenPoint &gt;</type>
      <name>ListenPointList_out</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; BiDirIIOPServiceContext &gt;</type>
      <name>BiDirIIOPServiceContext_var</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; BiDirIIOPServiceContext, BiDirIIOPServiceContext_var &gt;</type>
      <name>BiDirIIOPServiceContext_out</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::Any &amp;, const IIOP::ListenPoint &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::Any &amp;, IIOP::ListenPoint *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a10</anchor>
      <arglist>(const CORBA::Any &amp;, IIOP::ListenPoint *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a11</anchor>
      <arglist>(const CORBA::Any &amp;, const IIOP::ListenPoint *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::Any &amp;, const IIOP::ListenPointList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::Any &amp;, IIOP::ListenPointList *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a14</anchor>
      <arglist>(const CORBA::Any &amp;, IIOP::ListenPointList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a15</anchor>
      <arglist>(const CORBA::Any &amp;, const IIOP::ListenPointList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::Any &amp;, const IIOP::BiDirIIOPServiceContext &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a17</anchor>
      <arglist>(CORBA::Any &amp;, IIOP::BiDirIIOPServiceContext *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a18</anchor>
      <arglist>(const CORBA::Any &amp;, IIOP::BiDirIIOPServiceContext *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a19</anchor>
      <arglist>(const CORBA::Any &amp;, const IIOP::BiDirIIOPServiceContext *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a20</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IIOP::ListenPoint &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a21</anchor>
      <arglist>(TAO_InputCDR &amp;, IIOP::ListenPoint &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a22</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IIOP::ListenPointList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a23</anchor>
      <arglist>(TAO_InputCDR &amp;, IIOP::ListenPointList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a24</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IIOP::BiDirIIOPServiceContext &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a25</anchor>
      <arglist>(TAO_InputCDR &amp;, IIOP::BiDirIIOPServiceContext &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Incoming_Message_Queue.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Incoming__Message__Queue_8cpp</filename>
    <includes id="Incoming__Message__Queue_8h" name="Incoming_Message_Queue.h" local="yes" imported="no">Incoming_Message_Queue.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="Incoming__Message__Queue_8inl" name="Incoming_Message_Queue.inl" local="yes" imported="no">Incoming_Message_Queue.inl</includes>
    <member kind="function" static="yes">
      <type>ACE_Message_Block *</type>
      <name>clone_mb_nocopy_size</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Message_Block *mb, size_t span_size)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Incoming_Message_Queue.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Incoming__Message__Queue_8h</filename>
    <includes id="Pluggable__Messaging__Utils_8h" name="Pluggable_Messaging_Utils.h" local="yes" imported="no">tao/Pluggable_Messaging_Utils.h</includes>
    <class kind="class">TAO_Incoming_Message_Queue</class>
    <class kind="class">TAO_Queued_Data</class>
  </compound>
  <compound kind="file">
    <name>Incoming_Message_Queue.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Incoming__Message__Queue_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Interceptor_List.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Interceptor__List_8cpp</filename>
    <includes id="Interceptor__List_8h" name="Interceptor_List.h" local="yes" imported="no">tao/Interceptor_List.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="ORB__Constants_8h" name="ORB_Constants.h" local="yes" imported="no">tao/ORB_Constants.h</includes>
    <includes id="Interceptor__List_8inl" name="Interceptor_List.inl" local="yes" imported="no">tao/Interceptor_List.inl</includes>
  </compound>
  <compound kind="file">
    <name>Interceptor_List.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Interceptor__List_8h</filename>
    <includes id="PortableInterceptorC_8h" name="PortableInterceptorC.h" local="yes" imported="no">PortableInterceptorC.h</includes>
    <class kind="class">TAO_Interceptor_List</class>
    <class kind="class">TAO_ClientRequestInterceptor_List</class>
    <class kind="class">TAO_ServerRequestInterceptor_List</class>
  </compound>
  <compound kind="file">
    <name>Interceptor_List.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Interceptor__List_8inl</filename>
  </compound>
  <compound kind="file">
    <name>InterfaceDef.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>InterfaceDef_8pidl</filename>
    <includes id="InterfaceDef_8pidl" name="InterfaceDef.pidl" local="yes" imported="yes">InterfaceDef.pidl</includes>
    <namespace>CORBA</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidName.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>InvalidName_8pidl</filename>
    <namespace>CORBA</namespace>
    <class kind="interface">CORBA::ORB</class>
    <class kind="exception">CORBA::ORB::InvalidName</class>
  </compound>
  <compound kind="file">
    <name>InvalidSlot.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>InvalidSlot_8pidl</filename>
    <namespace>PortableInterceptor</namespace>
    <class kind="exception">PortableInterceptor::InvalidSlot</class>
  </compound>
  <compound kind="file">
    <name>InvalidSlotA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>InvalidSlotA_8cpp</filename>
    <includes id="InvalidSlotC_8h" name="InvalidSlotC.h" local="yes" imported="no">InvalidSlotC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Struct__TypeCode_8h" name="Struct_TypeCode.h" local="yes" imported="no">tao/Struct_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>PortableInterceptor</namespace>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; PortableInterceptor::InvalidSlot &gt;::demarshal_value</name>
      <anchor>a78</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const PortableInterceptor::InvalidSlot &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, PortableInterceptor::InvalidSlot *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, PortableInterceptor::InvalidSlot *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const PortableInterceptor::InvalidSlot *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *const</type>
      <name>_tao_fields_PortableInterceptor_InvalidSlot</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_PortableInterceptor_InvalidSlot</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::tk_except,&quot;IDL:omg.org/PortableInterceptor/InvalidSlot:1.0&quot;,&quot;InvalidSlot&quot;, _tao_fields_PortableInterceptor_InvalidSlot, 0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_InvalidSlot</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InvalidSlotC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>InvalidSlotC_8cpp</filename>
    <includes id="InvalidSlotC_8h" name="InvalidSlotC.h" local="yes" imported="no">InvalidSlotC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const PortableInterceptor::InvalidSlot &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;, PortableInterceptor::InvalidSlot &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InvalidSlotC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>InvalidSlotC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <namespace>PortableInterceptor</namespace>
    <namespace>TAO</namespace>
    <class kind="exception">PortableInterceptor::InvalidSlot</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_INVALIDSLOT_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Any &amp;, const PortableInterceptor::InvalidSlot &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::InvalidSlot *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA::Any &amp;, PortableInterceptor::InvalidSlot *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA::Any &amp;, const PortableInterceptor::InvalidSlot *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;, const PortableInterceptor::InvalidSlot &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;, PortableInterceptor::InvalidSlot &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InvalidSlotS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>InvalidSlotS_8h</filename>
  </compound>
  <compound kind="file">
    <name>Invocation_Adapter.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Invocation__Adapter_8cpp</filename>
    <includes id="Invocation__Adapter_8h" name="Invocation_Adapter.h" local="yes" imported="no">Invocation_Adapter.h</includes>
    <includes id="Profile__Transport__Resolver_8h" name="Profile_Transport_Resolver.h" local="yes" imported="no">Profile_Transport_Resolver.h</includes>
    <includes id="operation__details_8h" name="operation_details.h" local="yes" imported="no">operation_details.h</includes>
    <includes id="Stub_8h" name="Stub.h" local="yes" imported="no">Stub.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="Synch__Invocation_8h" name="Synch_Invocation.h" local="yes" imported="no">Synch_Invocation.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="Collocated__Invocation_8h" name="Collocated_Invocation.h" local="yes" imported="no">Collocated_Invocation.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">Transport.h</includes>
    <includes id="Transport__Mux__Strategy_8h" name="Transport_Mux_Strategy.h" local="yes" imported="no">Transport_Mux_Strategy.h</includes>
    <includes id="Collocation__Proxy__Broker_8h" name="Collocation_Proxy_Broker.h" local="yes" imported="no">Collocation_Proxy_Broker.h</includes>
    <includes id="Invocation__Adapter_8inl" name="Invocation_Adapter.inl" local="yes" imported="no">tao/Invocation_Adapter.inl</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>Invocation_Adapter.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Invocation__Adapter_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Invocation__Utils_8h" name="Invocation_Utils.h" local="yes" imported="no">tao/Invocation_Utils.h</includes>
    <includes id="Collocation__Strategy_8h" name="Collocation_Strategy.h" local="yes" imported="no">tao/Collocation_Strategy.h</includes>
    <includes id="CORBA__methods_8h" name="CORBA_methods.h" local="yes" imported="no">tao/CORBA_methods.h</includes>
    <includes id="Pseudo__VarOut__T_8h" name="Pseudo_VarOut_T.h" local="yes" imported="no">tao/Pseudo_VarOut_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Invocation_Adapter</class>
  </compound>
  <compound kind="file">
    <name>Invocation_Adapter.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Invocation__Adapter_8inl</filename>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>Invocation_Base.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Invocation__Base_8cpp</filename>
    <includes id="Invocation__Base_8h" name="Invocation_Base.h" local="yes" imported="no">Invocation_Base.h</includes>
    <includes id="Stub_8h" name="Stub.h" local="yes" imported="no">Stub.h</includes>
    <includes id="operation__details_8h" name="operation_details.h" local="yes" imported="no">operation_details.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">TypeCode.h</includes>
    <includes id="DynamicC_8h" name="DynamicC.h" local="yes" imported="no">DynamicC.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="RequestInfo__Util_8h" name="RequestInfo_Util.h" local="yes" imported="no">RequestInfo_Util.h</includes>
    <includes id="Invocation__Base_8inl" name="Invocation_Base.inl" local="yes" imported="no">Invocation_Base.inl</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>Invocation_Base.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Invocation__Base_8h</filename>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">tao/Object.h</includes>
    <includes id="Invocation__Utils_8h" name="Invocation_Utils.h" local="yes" imported="no">tao/Invocation_Utils.h</includes>
    <includes id="ClientRequestInfo__i_8h" name="ClientRequestInfo_i.h" local="yes" imported="no">tao/ClientRequestInfo_i.h</includes>
    <includes id="ClientRequestInterceptor__Adapter_8h" name="ClientRequestInterceptor_Adapter.h" local="yes" imported="no">tao/ClientRequestInterceptor_Adapter.h</includes>
    <namespace>Dynamic</namespace>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Invocation_Base</class>
  </compound>
  <compound kind="file">
    <name>Invocation_Base.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Invocation__Base_8inl</filename>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>Invocation_Endpoint_Selectors.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Invocation__Endpoint__Selectors_8cpp</filename>
    <includes id="Invocation__Endpoint__Selectors_8h" name="Invocation_Endpoint_Selectors.h" local="yes" imported="no">tao/Invocation_Endpoint_Selectors.h</includes>
    <includes id="Stub_8h" name="Stub.h" local="yes" imported="no">tao/Stub.h</includes>
    <includes id="Profile_8h" name="Profile.h" local="yes" imported="no">tao/Profile.h</includes>
    <includes id="Base__Transport__Property_8h" name="Base_Transport_Property.h" local="yes" imported="no">Base_Transport_Property.h</includes>
    <includes id="Profile__Transport__Resolver_8h" name="Profile_Transport_Resolver.h" local="yes" imported="no">Profile_Transport_Resolver.h</includes>
    <includes id="ORB__Constants_8h" name="ORB_Constants.h" local="yes" imported="no">ORB_Constants.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
  </compound>
  <compound kind="file">
    <name>Invocation_Endpoint_Selectors.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Invocation__Endpoint__Selectors_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <namespace>TAO</namespace>
    <namespace>CORBA</namespace>
    <class kind="class">TAO_Invocation_Endpoint_Selector</class>
    <class kind="class">TAO_Default_Endpoint_Selector</class>
  </compound>
  <compound kind="file">
    <name>Invocation_Utils.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Invocation__Utils_8h</filename>
    <namespace>TAO</namespace>
    <member kind="enumeration">
      <name>Invocation_Status</name>
      <anchor>a149</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_INVOKE_START</name>
      <anchor>a149a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_INVOKE_RESTART</name>
      <anchor>a149a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_INVOKE_SUCCESS</name>
      <anchor>a149a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_INVOKE_USER_EXCEPTION</name>
      <anchor>a149a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_INVOKE_SYSTEM_EXCEPTION</name>
      <anchor>a149a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_INVOKE_FAILURE</name>
      <anchor>a149a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Invocation_Type</name>
      <anchor>a150</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_ONEWAY_INVOCATION</name>
      <anchor>a150a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_TWOWAY_INVOCATION</name>
      <anchor>a150a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Invocation_Mode</name>
      <anchor>a151</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_SYNCHRONOUS_INVOCATION</name>
      <anchor>a151a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_ASYNCHRONOUS_CALLBACK_INVOCATION</name>
      <anchor>a151a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_ASYNCHRONOUS_POLLER_INVOCATION</name>
      <anchor>a151a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_DII_INVOCATION</name>
      <anchor>a151a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_DII_DEFERRED_INVOCATION</name>
      <anchor>a151a31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IOP.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IOP_8pidl</filename>
    <includes id="IOP__IOR_8pidl" name="IOP_IOR.pidl" local="yes" imported="yes">IOP_IOR.pidl</includes>
    <includes id="IOP__Codec_8pidl" name="IOP_Codec.pidl" local="yes" imported="yes">IOP_Codec.pidl</includes>
  </compound>
  <compound kind="file">
    <name>IOP_Codec.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IOP__Codec_8pidl</filename>
    <includes id="Typecode__types_8pidl" name="Typecode_types.pidl" local="yes" imported="yes">Typecode_types.pidl</includes>
    <includes id="OctetSeq_8pidl" name="OctetSeq.pidl" local="yes" imported="yes">OctetSeq.pidl</includes>
    <namespace>IOP</namespace>
    <class kind="interface">IOP::Codec</class>
    <class kind="exception">IOP::Codec::InvalidTypeForEncoding</class>
    <class kind="exception">IOP::Codec::FormatMismatch</class>
    <class kind="exception">IOP::Codec::TypeMismatch</class>
    <class kind="struct">IOP::Encoding</class>
    <class kind="interface">IOP::CodecFactory</class>
    <class kind="exception">IOP::CodecFactory::UnknownEncoding</class>
    <member kind="typedef">
      <type>short</type>
      <name>EncodingFormat</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const EncodingFormat</type>
      <name>ENCODING_CDR_ENCAPS</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IOP_CodecA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IOP__CodecA_8cpp</filename>
    <includes id="IOP__CodecC_8h" name="IOP_CodecC.h" local="yes" imported="no">IOP_CodecC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Objref__TypeCode_8h" name="Objref_TypeCode.h" local="yes" imported="no">tao/Objref_TypeCode.h</includes>
    <includes id="Struct__TypeCode_8h" name="Struct_TypeCode.h" local="yes" imported="no">tao/Struct_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Impl__T_8h" name="Any_Impl_T.h" local="yes" imported="no">tao/Any_Impl_T.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>IOP</namespace>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; IOP::Codec &gt;::to_object</name>
      <anchor>a79</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; IOP::Codec &gt;::marshal_value</name>
      <anchor>a80</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; IOP::Codec &gt;::demarshal_value</name>
      <anchor>a81</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a20</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, IOP::Codec_ptr _tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a21</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, IOP::Codec_ptr *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a22</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, IOP::Codec_ptr &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; IOP::Codec::InvalidTypeForEncoding &gt;::marshal_value</name>
      <anchor>a82</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; IOP::Codec::InvalidTypeForEncoding &gt;::demarshal_value</name>
      <anchor>a83</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a25</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const IOP::Codec::InvalidTypeForEncoding &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a26</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, IOP::Codec::InvalidTypeForEncoding *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a27</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, IOP::Codec::InvalidTypeForEncoding *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a28</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const IOP::Codec::InvalidTypeForEncoding *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; IOP::Codec::FormatMismatch &gt;::marshal_value</name>
      <anchor>a84</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; IOP::Codec::FormatMismatch &gt;::demarshal_value</name>
      <anchor>a85</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a31</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const IOP::Codec::FormatMismatch &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a32</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, IOP::Codec::FormatMismatch *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a33</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, IOP::Codec::FormatMismatch *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a34</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const IOP::Codec::FormatMismatch *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; IOP::Codec::TypeMismatch &gt;::marshal_value</name>
      <anchor>a86</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; IOP::Codec::TypeMismatch &gt;::demarshal_value</name>
      <anchor>a87</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a37</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const IOP::Codec::TypeMismatch &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a38</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, IOP::Codec::TypeMismatch *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a39</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, IOP::Codec::TypeMismatch *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a40</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const IOP::Codec::TypeMismatch *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a41</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const IOP::Encoding &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a42</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, IOP::Encoding *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a43</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, IOP::Encoding *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a44</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const IOP::Encoding *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; IOP::CodecFactory &gt;::to_object</name>
      <anchor>a88</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; IOP::CodecFactory &gt;::marshal_value</name>
      <anchor>a89</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; IOP::CodecFactory &gt;::demarshal_value</name>
      <anchor>a90</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a48</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, IOP::CodecFactory_ptr _tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a49</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, IOP::CodecFactory_ptr *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a50</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, IOP::CodecFactory_ptr &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; IOP::CodecFactory::UnknownEncoding &gt;::marshal_value</name>
      <anchor>a91</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; IOP::CodecFactory::UnknownEncoding &gt;::demarshal_value</name>
      <anchor>a92</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a53</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const IOP::CodecFactory::UnknownEncoding &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a54</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, IOP::CodecFactory::UnknownEncoding *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a55</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, IOP::CodecFactory::UnknownEncoding *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a56</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const IOP::CodecFactory::UnknownEncoding *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *const</type>
      <name>_tao_fields_IOP_Codec_InvalidTypeForEncoding</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_IOP_Codec_InvalidTypeForEncoding</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::tk_except,&quot;IDL:omg.org/IOP/Codec/InvalidTypeForEncoding:1.0&quot;,&quot;InvalidTypeForEncoding&quot;, _tao_fields_IOP_Codec_InvalidTypeForEncoding, 0)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *const</type>
      <name>_tao_fields_IOP_Codec_FormatMismatch</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_IOP_Codec_FormatMismatch</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::tk_except,&quot;IDL:omg.org/IOP/Codec/FormatMismatch:1.0&quot;,&quot;FormatMismatch&quot;, _tao_fields_IOP_Codec_FormatMismatch, 0)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *const</type>
      <name>_tao_fields_IOP_Codec_TypeMismatch</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_IOP_Codec_TypeMismatch</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::tk_except,&quot;IDL:omg.org/IOP/Codec/TypeMismatch:1.0&quot;,&quot;TypeMismatch&quot;, _tao_fields_IOP_Codec_TypeMismatch, 0)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Objref&lt; char const *, CORBA::tk_local_interface, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_IOP_Codec</name>
      <anchor>a6</anchor>
      <arglist>(&quot;IDL:omg.org/IOP/Codec:1.0&quot;,&quot;Codec&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_Codec</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_IOP_EncodingFormat</name>
      <anchor>a8</anchor>
      <arglist>(&quot;IDL:omg.org/IOP/EncodingFormat:1.0&quot;,&quot;EncodingFormat&quot;,&amp;CORBA::_tc_short)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_EncodingFormat</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_fields_IOP_Encoding</name>
      <anchor>a10</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_IOP_Encoding</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::tk_struct,&quot;IDL:omg.org/IOP/Encoding:1.0&quot;,&quot;Encoding&quot;, _tao_fields_IOP_Encoding, 3)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_Encoding</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *const</type>
      <name>_tao_fields_IOP_CodecFactory_UnknownEncoding</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_IOP_CodecFactory_UnknownEncoding</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::tk_except,&quot;IDL:omg.org/IOP/CodecFactory/UnknownEncoding:1.0&quot;,&quot;UnknownEncoding&quot;, _tao_fields_IOP_CodecFactory_UnknownEncoding, 0)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Objref&lt; char const *, CORBA::tk_local_interface, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_IOP_CodecFactory</name>
      <anchor>a15</anchor>
      <arglist>(&quot;IDL:omg.org/IOP/CodecFactory:1.0&quot;,&quot;CodecFactory&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_CodecFactory</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IOP_CodecC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IOP__CodecC_8cpp</filename>
    <includes id="IOP__CodecC_8h" name="IOP_CodecC.h" local="yes" imported="no">IOP_CodecC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const IOP::Encoding &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;strm, IOP::Encoding &amp;_tao_aggregate)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IOP_CodecC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IOP__CodecC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">tao/Object.h</includes>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">tao/TypeCode.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Objref__VarOut__T_8h" name="Objref_VarOut_T.h" local="yes" imported="no">tao/Objref_VarOut_T.h</includes>
    <includes id="VarOut__T_8h" name="VarOut_T.h" local="yes" imported="no">tao/VarOut_T.h</includes>
    <includes id="Typecode__typesC_8h" name="Typecode_typesC.h" local="yes" imported="no">tao/Typecode_typesC.h</includes>
    <includes id="OctetSeqC_8h" name="OctetSeqC.h" local="yes" imported="no">tao/OctetSeqC.h</includes>
    <namespace>IOP</namespace>
    <namespace>TAO</namespace>
    <class kind="interface">IOP::Codec</class>
    <class kind="exception">IOP::Codec::InvalidTypeForEncoding</class>
    <class kind="exception">IOP::Codec::FormatMismatch</class>
    <class kind="exception">IOP::Codec::TypeMismatch</class>
    <class kind="struct">IOP::Encoding</class>
    <class kind="interface">IOP::CodecFactory</class>
    <class kind="exception">IOP::CodecFactory::UnknownEncoding</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::IOP::Codec &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::IOP::CodecFactory &gt;</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_CODEC__VAR_OUT_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_CODEC_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_CODEC_INVALIDTYPEFORENCODING_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_CODEC_FORMATMISMATCH_CH_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_CODEC_TYPEMISMATCH_CH_</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_CODECFACTORY__VAR_OUT_CH_</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_CODECFACTORY_CH_</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_CODECFACTORY_UNKNOWNENCODING_CH_</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_CODEC__TRAITS_CH_</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_CODECFACTORY__TRAITS_CH_</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Codec *</type>
      <name>Codec_ptr</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; Codec &gt;</type>
      <name>Codec_var</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; Codec &gt;</type>
      <name>Codec_out</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::Short_out</type>
      <name>EncodingFormat_out</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Fixed_Var_T&lt; Encoding &gt;</type>
      <name>Encoding_var</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Encoding &amp;</type>
      <name>Encoding_out</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CodecFactory *</type>
      <name>CodecFactory_ptr</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; CodecFactory &gt;</type>
      <name>CodecFactory_var</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; CodecFactory &gt;</type>
      <name>CodecFactory_out</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a20</anchor>
      <arglist>(CORBA::Any &amp;, IOP::Codec_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a21</anchor>
      <arglist>(CORBA::Any &amp;, IOP::Codec_ptr *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a22</anchor>
      <arglist>(const CORBA::Any &amp;, IOP::Codec_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a23</anchor>
      <arglist>(CORBA::Any &amp;, const IOP::Codec::InvalidTypeForEncoding &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a24</anchor>
      <arglist>(CORBA::Any &amp;, IOP::Codec::InvalidTypeForEncoding *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a25</anchor>
      <arglist>(const CORBA::Any &amp;, IOP::Codec::InvalidTypeForEncoding *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a26</anchor>
      <arglist>(const CORBA::Any &amp;, const IOP::Codec::InvalidTypeForEncoding *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a27</anchor>
      <arglist>(CORBA::Any &amp;, const IOP::Codec::FormatMismatch &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a28</anchor>
      <arglist>(CORBA::Any &amp;, IOP::Codec::FormatMismatch *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a29</anchor>
      <arglist>(const CORBA::Any &amp;, IOP::Codec::FormatMismatch *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a30</anchor>
      <arglist>(const CORBA::Any &amp;, const IOP::Codec::FormatMismatch *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a31</anchor>
      <arglist>(CORBA::Any &amp;, const IOP::Codec::TypeMismatch &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a32</anchor>
      <arglist>(CORBA::Any &amp;, IOP::Codec::TypeMismatch *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a33</anchor>
      <arglist>(const CORBA::Any &amp;, IOP::Codec::TypeMismatch *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a34</anchor>
      <arglist>(const CORBA::Any &amp;, const IOP::Codec::TypeMismatch *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a35</anchor>
      <arglist>(CORBA::Any &amp;, const IOP::Encoding &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a36</anchor>
      <arglist>(CORBA::Any &amp;, IOP::Encoding *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a37</anchor>
      <arglist>(const CORBA::Any &amp;, IOP::Encoding *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a38</anchor>
      <arglist>(const CORBA::Any &amp;, const IOP::Encoding *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a39</anchor>
      <arglist>(CORBA::Any &amp;, IOP::CodecFactory_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a40</anchor>
      <arglist>(CORBA::Any &amp;, IOP::CodecFactory_ptr *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a41</anchor>
      <arglist>(const CORBA::Any &amp;, IOP::CodecFactory_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a42</anchor>
      <arglist>(CORBA::Any &amp;, const IOP::CodecFactory::UnknownEncoding &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a43</anchor>
      <arglist>(CORBA::Any &amp;, IOP::CodecFactory::UnknownEncoding *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a44</anchor>
      <arglist>(const CORBA::Any &amp;, IOP::CodecFactory::UnknownEncoding *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a45</anchor>
      <arglist>(const CORBA::Any &amp;, const IOP::CodecFactory::UnknownEncoding *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a46</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::Encoding &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a47</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::Encoding &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IOP_CodecS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IOP__CodecS_8h</filename>
  </compound>
  <compound kind="file">
    <name>IOP_IOR.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IOP__IOR_8pidl</filename>
    <includes id="OctetSeq_8pidl" name="OctetSeq.pidl" local="yes" imported="yes">OctetSeq.pidl</includes>
    <namespace>IOP</namespace>
    <class kind="struct">IOP::TaggedProfile</class>
    <class kind="struct">IOP::IOR</class>
    <class kind="struct">IOP::TaggedComponent</class>
    <class kind="struct">IOP::ServiceContext</class>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>ProfileId</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; TaggedProfile &gt;</type>
      <name>TaggedProfileSeq</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>ComponentId</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; TaggedComponent &gt;</type>
      <name>MultipleComponentProfile</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; TaggedComponent &gt;</type>
      <name>TaggedComponentList</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; TaggedComponent &gt;</type>
      <name>TaggedComponentSeq</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>ServiceId</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; ServiceContext &gt;</type>
      <name>ServiceContextList</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ProfileId</type>
      <name>TAG_INTERNET_IOP</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ProfileId</type>
      <name>TAG_MULTIPLE_COMPONENTS</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_ORB_TYPE</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_CODE_SETS</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_POLICIES</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_ALTERNATE_IIOP_ADDRESS</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_COMPLETE_OBJECT_KEY</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_ENDPOINT_ID_POSITION</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_LOCATION_POLICY</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_DCE_STRING_BINDING</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_DCE_BINDING_NAME</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_DCE_NO_PIPES</name>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>TransactionService</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>CodeSets</name>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>ChainBypassCheck</name>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>ChainBypassInfo</name>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>LogicalThreadId</name>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>BI_DIR_IIOP</name>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>SendingContextRunTime</name>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>INVOCATION_POLICIES</name>
      <anchor>a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>UnknownExceptionInfo</name>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>RTCorbaPriority</name>
      <anchor>a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>RTCorbaPriorityRange</name>
      <anchor>a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_FT_GROUP</name>
      <anchor>a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_FT_PRIMARY</name>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_FT_HEARTBEAT_ENABLED</name>
      <anchor>a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>FT_GROUP_VERSION</name>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>FT_REQUEST</name>
      <anchor>a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ProfileId</type>
      <name>TAG_UIPMC</name>
      <anchor>a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_GROUP</name>
      <anchor>a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_GROUP_IIOP</name>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IOP_IORA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IOP__IORA_8cpp</filename>
    <includes id="IOP__IORC_8h" name="IOP_IORC.h" local="yes" imported="no">IOP_IORC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="String__TypeCode_8h" name="String_TypeCode.h" local="yes" imported="no">tao/String_TypeCode.h</includes>
    <includes id="Struct__TypeCode_8h" name="Struct_TypeCode.h" local="yes" imported="no">tao/Struct_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>IOP</namespace>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a38</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const IOP::TaggedProfile &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a39</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, IOP::TaggedProfile *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a40</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, IOP::TaggedProfile *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a41</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const IOP::TaggedProfile *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a42</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const IOP::TaggedProfileSeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a43</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, IOP::TaggedProfileSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a44</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, IOP::TaggedProfileSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a45</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const IOP::TaggedProfileSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a46</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const IOP::IOR &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a47</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, IOP::IOR *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a48</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, IOP::IOR *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a49</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const IOP::IOR *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a50</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const IOP::TaggedComponent &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a51</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, IOP::TaggedComponent *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a52</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, IOP::TaggedComponent *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a53</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const IOP::TaggedComponent *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a54</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const IOP::MultipleComponentProfile &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a55</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, IOP::MultipleComponentProfile *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a56</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, IOP::MultipleComponentProfile *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a57</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const IOP::MultipleComponentProfile *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a58</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const IOP::TaggedComponentList &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a59</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, IOP::TaggedComponentList *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a60</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, IOP::TaggedComponentList *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a61</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const IOP::TaggedComponentList *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a62</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const IOP::TaggedComponentSeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a63</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, IOP::TaggedComponentSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a64</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, IOP::TaggedComponentSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a65</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const IOP::TaggedComponentSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a66</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const IOP::ServiceContext &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a67</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, IOP::ServiceContext *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a68</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, IOP::ServiceContext *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a69</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const IOP::ServiceContext *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a70</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const IOP::ServiceContextList &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a71</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, IOP::ServiceContextList *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a72</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, IOP::ServiceContextList *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a73</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const IOP::ServiceContextList *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_IOP_ProfileId</name>
      <anchor>a0</anchor>
      <arglist>(&quot;IDL:omg.org/IOP/ProfileId:1.0&quot;,&quot;ProfileId&quot;,&amp;CORBA::_tc_ulong)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ProfileId</name>
      <anchor>a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_fields_IOP_TaggedProfile</name>
      <anchor>a2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_IOP_TaggedProfile</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::tk_struct,&quot;IDL:omg.org/IOP/TaggedProfile:1.0&quot;,&quot;TaggedProfile&quot;, _tao_fields_IOP_TaggedProfile, 2)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_TaggedProfile</name>
      <anchor>a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>IOP_TaggedProfileSeq_0</name>
      <anchor>a22</anchor>
      <arglist>(CORBA::tk_sequence,&amp;IOP::_tc_TaggedProfile, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_IOP_TaggedProfileSeq_0</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_IOP_TaggedProfileSeq</name>
      <anchor>a7</anchor>
      <arglist>(&quot;IDL:omg.org/IOP/TaggedProfileSeq:1.0&quot;,&quot;TaggedProfileSeq&quot;,&amp;TAO::TypeCode::tc_IOP_TaggedProfileSeq_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_TaggedProfileSeq</name>
      <anchor>a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_fields_IOP_IOR</name>
      <anchor>a9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_IOP_IOR</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::tk_struct,&quot;IDL:omg.org/IOP/IOR:1.0&quot;,&quot;IOR&quot;, _tao_fields_IOP_IOR, 2)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_IOR</name>
      <anchor>a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_IOP_ComponentId</name>
      <anchor>a12</anchor>
      <arglist>(&quot;IDL:omg.org/IOP/ComponentId:1.0&quot;,&quot;ComponentId&quot;,&amp;CORBA::_tc_ulong)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ComponentId</name>
      <anchor>a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_fields_IOP_TaggedComponent</name>
      <anchor>a14</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_IOP_TaggedComponent</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::tk_struct,&quot;IDL:omg.org/IOP/TaggedComponent:1.0&quot;,&quot;TaggedComponent&quot;, _tao_fields_IOP_TaggedComponent, 2)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_TaggedComponent</name>
      <anchor>a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>IOP_MultipleComponentProfile_0</name>
      <anchor>a24</anchor>
      <arglist>(CORBA::tk_sequence,&amp;IOP::_tc_TaggedComponent, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_IOP_MultipleComponentProfile_0</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_IOP_MultipleComponentProfile</name>
      <anchor>a19</anchor>
      <arglist>(&quot;IDL:omg.org/IOP/MultipleComponentProfile:1.0&quot;,&quot;MultipleComponentProfile&quot;,&amp;TAO::TypeCode::tc_IOP_MultipleComponentProfile_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_MultipleComponentProfile</name>
      <anchor>a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>IOP_TaggedComponentList_0</name>
      <anchor>a26</anchor>
      <arglist>(CORBA::tk_sequence,&amp;IOP::_tc_TaggedComponent, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_IOP_TaggedComponentList_0</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_IOP_TaggedComponentList</name>
      <anchor>a23</anchor>
      <arglist>(&quot;IDL:omg.org/IOP/TaggedComponentList:1.0&quot;,&quot;TaggedComponentList&quot;,&amp;TAO::TypeCode::tc_IOP_TaggedComponentList_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_TaggedComponentList</name>
      <anchor>a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>IOP_TaggedComponentSeq_0</name>
      <anchor>a28</anchor>
      <arglist>(CORBA::tk_sequence,&amp;IOP::_tc_TaggedComponent, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_IOP_TaggedComponentSeq_0</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_IOP_TaggedComponentSeq</name>
      <anchor>a27</anchor>
      <arglist>(&quot;IDL:omg.org/IOP/TaggedComponentSeq:1.0&quot;,&quot;TaggedComponentSeq&quot;,&amp;TAO::TypeCode::tc_IOP_TaggedComponentSeq_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_TaggedComponentSeq</name>
      <anchor>a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_IOP_ServiceId</name>
      <anchor>a29</anchor>
      <arglist>(&quot;IDL:omg.org/IOP/ServiceId:1.0&quot;,&quot;ServiceId&quot;,&amp;CORBA::_tc_ulong)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServiceId</name>
      <anchor>a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_fields_IOP_ServiceContext</name>
      <anchor>a31</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_IOP_ServiceContext</name>
      <anchor>a32</anchor>
      <arglist>(CORBA::tk_struct,&quot;IDL:omg.org/IOP/ServiceContext:1.0&quot;,&quot;ServiceContext&quot;, _tao_fields_IOP_ServiceContext, 2)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServiceContext</name>
      <anchor>a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>IOP_ServiceContextList_0</name>
      <anchor>a30</anchor>
      <arglist>(CORBA::tk_sequence,&amp;IOP::_tc_ServiceContext, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_IOP_ServiceContextList_0</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_IOP_ServiceContextList</name>
      <anchor>a36</anchor>
      <arglist>(&quot;IDL:omg.org/IOP/ServiceContextList:1.0&quot;,&quot;ServiceContextList&quot;,&amp;TAO::TypeCode::tc_IOP_ServiceContextList_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServiceContextList</name>
      <anchor>a65</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IOP_IORC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IOP__IORC_8cpp</filename>
    <includes id="IOP__IORC_8h" name="IOP_IORC.h" local="yes" imported="no">IOP_IORC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_TAGGEDPROFILESEQ_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_MULTIPLECOMPONENTPROFILE_CS_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_TAGGEDCOMPONENTLIST_CS_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_TAGGEDCOMPONENTSEQ_CS_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_SERVICECONTEXTLIST_CS_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a5</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const IOP::TaggedProfile &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a6</anchor>
      <arglist>(TAO_InputCDR &amp;strm, IOP::TaggedProfile &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a7</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const IOP::TaggedProfileSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_InputCDR &amp;strm, IOP::TaggedProfileSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const IOP::IOR &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a10</anchor>
      <arglist>(TAO_InputCDR &amp;strm, IOP::IOR &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a11</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const IOP::TaggedComponent &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a12</anchor>
      <arglist>(TAO_InputCDR &amp;strm, IOP::TaggedComponent &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a13</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const IOP::MultipleComponentProfile &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a14</anchor>
      <arglist>(TAO_InputCDR &amp;strm, IOP::MultipleComponentProfile &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a15</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const IOP::TaggedComponentList &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a16</anchor>
      <arglist>(TAO_InputCDR &amp;strm, IOP::TaggedComponentList &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a17</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const IOP::TaggedComponentSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a18</anchor>
      <arglist>(TAO_InputCDR &amp;strm, IOP::TaggedComponentSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a19</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const IOP::ServiceContext &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a20</anchor>
      <arglist>(TAO_InputCDR &amp;strm, IOP::ServiceContext &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a21</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const IOP::ServiceContextList &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a22</anchor>
      <arglist>(TAO_InputCDR &amp;strm, IOP::ServiceContextList &amp;_tao_sequence)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IOP_IORC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IOP__IORC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <includes id="VarOut__T_8h" name="VarOut_T.h" local="yes" imported="no">tao/VarOut_T.h</includes>
    <includes id="OctetSeqC_8h" name="OctetSeqC.h" local="yes" imported="no">tao/OctetSeqC.h</includes>
    <namespace>IOP</namespace>
    <namespace>TAO</namespace>
    <class kind="struct">IOP::TaggedProfile</class>
    <class kind="class">IOP::TaggedProfileSeq</class>
    <class kind="struct">IOP::IOR</class>
    <class kind="struct">IOP::TaggedComponent</class>
    <class kind="class">IOP::MultipleComponentProfile</class>
    <class kind="class">IOP::TaggedComponentList</class>
    <class kind="class">IOP::TaggedComponentSeq</class>
    <class kind="struct">IOP::ServiceContext</class>
    <class kind="class">IOP::ServiceContextList</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_TAGGEDPROFILESEQ_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_MULTIPLECOMPONENTPROFILE_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_TAGGEDCOMPONENTLIST_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_TAGGEDCOMPONENTSEQ_CH_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOP_SERVICECONTEXTLIST_CH_</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::ULong_out</type>
      <name>ProfileId_out</name>
      <anchor>a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; TaggedProfile &gt;</type>
      <name>TaggedProfile_var</name>
      <anchor>a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; TaggedProfile, TaggedProfile_var &gt;</type>
      <name>TaggedProfile_out</name>
      <anchor>a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_VarSeq_Var_T&lt; TaggedProfileSeq, TaggedProfile &gt;</type>
      <name>TaggedProfileSeq_var</name>
      <anchor>a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; TaggedProfileSeq, TaggedProfileSeq_var, TaggedProfile &gt;</type>
      <name>TaggedProfileSeq_out</name>
      <anchor>a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; IOR &gt;</type>
      <name>IOR_var</name>
      <anchor>a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; IOR, IOR_var &gt;</type>
      <name>IOR_out</name>
      <anchor>a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::ULong_out</type>
      <name>ComponentId_out</name>
      <anchor>a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; TaggedComponent &gt;</type>
      <name>TaggedComponent_var</name>
      <anchor>a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; TaggedComponent, TaggedComponent_var &gt;</type>
      <name>TaggedComponent_out</name>
      <anchor>a75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_VarSeq_Var_T&lt; MultipleComponentProfile, TaggedComponent &gt;</type>
      <name>MultipleComponentProfile_var</name>
      <anchor>a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; MultipleComponentProfile, MultipleComponentProfile_var, TaggedComponent &gt;</type>
      <name>MultipleComponentProfile_out</name>
      <anchor>a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_VarSeq_Var_T&lt; TaggedComponentList, TaggedComponent &gt;</type>
      <name>TaggedComponentList_var</name>
      <anchor>a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; TaggedComponentList, TaggedComponentList_var, TaggedComponent &gt;</type>
      <name>TaggedComponentList_out</name>
      <anchor>a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_VarSeq_Var_T&lt; TaggedComponentSeq, TaggedComponent &gt;</type>
      <name>TaggedComponentSeq_var</name>
      <anchor>a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; TaggedComponentSeq, TaggedComponentSeq_var, TaggedComponent &gt;</type>
      <name>TaggedComponentSeq_out</name>
      <anchor>a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::ULong_out</type>
      <name>ServiceId_out</name>
      <anchor>a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; ServiceContext &gt;</type>
      <name>ServiceContext_var</name>
      <anchor>a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; ServiceContext, ServiceContext_var &gt;</type>
      <name>ServiceContext_out</name>
      <anchor>a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_VarSeq_Var_T&lt; ServiceContextList, ServiceContext &gt;</type>
      <name>ServiceContextList_var</name>
      <anchor>a85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; ServiceContextList, ServiceContextList_var, ServiceContext &gt;</type>
      <name>ServiceContextList_out</name>
      <anchor>a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a27</anchor>
      <arglist>(CORBA::Any &amp;, const IOP::TaggedProfile &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a28</anchor>
      <arglist>(CORBA::Any &amp;, IOP::TaggedProfile *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a29</anchor>
      <arglist>(const CORBA::Any &amp;, IOP::TaggedProfile *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a30</anchor>
      <arglist>(const CORBA::Any &amp;, const IOP::TaggedProfile *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a31</anchor>
      <arglist>(CORBA::Any &amp;, const IOP::TaggedProfileSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a32</anchor>
      <arglist>(CORBA::Any &amp;, IOP::TaggedProfileSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a33</anchor>
      <arglist>(const CORBA::Any &amp;, IOP::TaggedProfileSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a34</anchor>
      <arglist>(const CORBA::Any &amp;, const IOP::TaggedProfileSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a35</anchor>
      <arglist>(CORBA::Any &amp;, const IOP::IOR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a36</anchor>
      <arglist>(CORBA::Any &amp;, IOP::IOR *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a37</anchor>
      <arglist>(const CORBA::Any &amp;, IOP::IOR *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a38</anchor>
      <arglist>(const CORBA::Any &amp;, const IOP::IOR *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a39</anchor>
      <arglist>(CORBA::Any &amp;, const IOP::TaggedComponent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a40</anchor>
      <arglist>(CORBA::Any &amp;, IOP::TaggedComponent *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a41</anchor>
      <arglist>(const CORBA::Any &amp;, IOP::TaggedComponent *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a42</anchor>
      <arglist>(const CORBA::Any &amp;, const IOP::TaggedComponent *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a43</anchor>
      <arglist>(CORBA::Any &amp;, const IOP::MultipleComponentProfile &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a44</anchor>
      <arglist>(CORBA::Any &amp;, IOP::MultipleComponentProfile *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a45</anchor>
      <arglist>(const CORBA::Any &amp;, IOP::MultipleComponentProfile *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a46</anchor>
      <arglist>(const CORBA::Any &amp;, const IOP::MultipleComponentProfile *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a47</anchor>
      <arglist>(CORBA::Any &amp;, const IOP::TaggedComponentList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a48</anchor>
      <arglist>(CORBA::Any &amp;, IOP::TaggedComponentList *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a49</anchor>
      <arglist>(const CORBA::Any &amp;, IOP::TaggedComponentList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a50</anchor>
      <arglist>(const CORBA::Any &amp;, const IOP::TaggedComponentList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a51</anchor>
      <arglist>(CORBA::Any &amp;, const IOP::TaggedComponentSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a52</anchor>
      <arglist>(CORBA::Any &amp;, IOP::TaggedComponentSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a53</anchor>
      <arglist>(const CORBA::Any &amp;, IOP::TaggedComponentSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a54</anchor>
      <arglist>(const CORBA::Any &amp;, const IOP::TaggedComponentSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a55</anchor>
      <arglist>(CORBA::Any &amp;, const IOP::ServiceContext &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a56</anchor>
      <arglist>(CORBA::Any &amp;, IOP::ServiceContext *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a57</anchor>
      <arglist>(const CORBA::Any &amp;, IOP::ServiceContext *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a58</anchor>
      <arglist>(const CORBA::Any &amp;, const IOP::ServiceContext *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a59</anchor>
      <arglist>(CORBA::Any &amp;, const IOP::ServiceContextList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a60</anchor>
      <arglist>(CORBA::Any &amp;, IOP::ServiceContextList *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a61</anchor>
      <arglist>(const CORBA::Any &amp;, IOP::ServiceContextList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a62</anchor>
      <arglist>(const CORBA::Any &amp;, const IOP::ServiceContextList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a63</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::TaggedProfile &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a64</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::TaggedProfile &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a65</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::TaggedProfileSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a66</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::TaggedProfileSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a67</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::IOR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a68</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::IOR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a69</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::TaggedComponent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a70</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::TaggedComponent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a71</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::MultipleComponentProfile &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a72</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::MultipleComponentProfile &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a73</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::TaggedComponentList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a74</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::TaggedComponentList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a75</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::TaggedComponentSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a76</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::TaggedComponentSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a77</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::ServiceContext &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a78</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::ServiceContext &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a79</anchor>
      <arglist>(TAO_OutputCDR &amp;, const IOP::ServiceContextList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a80</anchor>
      <arglist>(TAO_InputCDR &amp;, IOP::ServiceContextList &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IOP_IORS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IOP__IORS_8h</filename>
  </compound>
  <compound kind="file">
    <name>IOPC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IOPC_8cpp</filename>
    <includes id="IOPC_8h" name="IOPC.h" local="yes" imported="no">IOPC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>IOPC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IOPC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="IOP__IORC_8h" name="IOP_IORC.h" local="yes" imported="no">tao/IOP_IORC.h</includes>
    <includes id="IOP__CodecC_8h" name="IOP_CodecC.h" local="yes" imported="no">tao/IOP_CodecC.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IOPS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IOPS_8h</filename>
  </compound>
  <compound kind="file">
    <name>IOPS_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IOPS__T_8h</filename>
  </compound>
  <compound kind="file">
    <name>IOR_Parser.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IOR__Parser_8cpp</filename>
    <includes id="IOR__Parser_8h" name="IOR_Parser.h" local="yes" imported="no">tao/IOR_Parser.h</includes>
  </compound>
  <compound kind="file">
    <name>IOR_Parser.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IOR__Parser_8h</filename>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">TAO_IOR_Parser</class>
  </compound>
  <compound kind="file">
    <name>IORInterceptor_Adapter.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IORInterceptor__Adapter_8cpp</filename>
    <includes id="IORInterceptor__Adapter_8h" name="IORInterceptor_Adapter.h" local="yes" imported="no">tao/IORInterceptor_Adapter.h</includes>
  </compound>
  <compound kind="file">
    <name>IORInterceptor_Adapter.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IORInterceptor__Adapter_8h</filename>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="PI__ForwardC_8h" name="PI_ForwardC.h" local="yes" imported="no">tao/PI_ForwardC.h</includes>
    <namespace>PortableInterceptor</namespace>
    <class kind="class">TAO_IORInterceptor_Adapter</class>
    <member kind="typedef">
      <type>Interceptor *</type>
      <name>Interceptor_ptr</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IORInterceptor *</type>
      <name>IORInterceptor_ptr</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IORInfo *</type>
      <name>IORInfo_ptr</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Array_Base&lt; PortableInterceptor::ObjectReferenceTemplate * &gt;</type>
      <name>TAO_ObjectReferenceTemplate_Array</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IORInterceptor_Adapter_Factory.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IORInterceptor__Adapter__Factory_8cpp</filename>
    <includes id="IORInterceptor__Adapter__Factory_8h" name="IORInterceptor_Adapter_Factory.h" local="yes" imported="no">tao/IORInterceptor_Adapter_Factory.h</includes>
  </compound>
  <compound kind="file">
    <name>IORInterceptor_Adapter_Factory.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>IORInterceptor__Adapter__Factory_8h</filename>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <class kind="class">TAO_IORInterceptor_Adapter_Factory</class>
  </compound>
  <compound kind="file">
    <name>Leader_Follower.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Leader__Follower_8cpp</filename>
    <includes id="Leader__Follower_8h" name="Leader_Follower.h" local="yes" imported="no">tao/Leader_Follower.h</includes>
    <includes id="LF__Follower__Auto__Ptr_8h" name="LF_Follower_Auto_Ptr.h" local="yes" imported="no">tao/LF_Follower_Auto_Ptr.h</includes>
    <includes id="LF__Follower__Auto__Adder_8h" name="LF_Follower_Auto_Adder.h" local="yes" imported="no">tao/LF_Follower_Auto_Adder.h</includes>
    <includes id="LF__Event__Binder_8h" name="LF_Event_Binder.h" local="yes" imported="no">tao/LF_Event_Binder.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">tao/Transport.h</includes>
    <includes id="GUIResource__Factory_8h" name="GUIResource_Factory.h" local="yes" imported="no">tao/GUIResource_Factory.h</includes>
    <includes id="Leader__Follower_8i" name="Leader_Follower.i" local="yes" imported="no">tao/Leader_Follower.i</includes>
  </compound>
  <compound kind="file">
    <name>Leader_Follower.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Leader__Follower_8h</filename>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <includes id="New__Leader__Generator_8h" name="New_Leader_Generator.h" local="yes" imported="no">tao/New_Leader_Generator.h</includes>
    <includes id="LF__Follower_8h" name="LF_Follower.h" local="yes" imported="no">tao/LF_Follower.h</includes>
    <class kind="class">TAO_Leader_Follower</class>
    <class kind="class">TAO_LF_Client_Thread_Helper</class>
    <class kind="class">TAO_LF_Client_Leader_Thread_Helper</class>
  </compound>
  <compound kind="file">
    <name>Leader_Follower.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Leader__Follower_8i</filename>
  </compound>
  <compound kind="file">
    <name>Leader_Follower_Flushing_Strategy.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Leader__Follower__Flushing__Strategy_8cpp</filename>
    <includes id="Leader__Follower__Flushing__Strategy_8h" name="Leader_Follower_Flushing_Strategy.h" local="yes" imported="no">tao/Leader_Follower_Flushing_Strategy.h</includes>
    <includes id="LF__Follower_8h" name="LF_Follower.h" local="yes" imported="no">tao/LF_Follower.h</includes>
    <includes id="Leader__Follower_8h" name="Leader_Follower.h" local="yes" imported="no">tao/Leader_Follower.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">tao/Transport.h</includes>
    <includes id="Queued__Message_8h" name="Queued_Message.h" local="yes" imported="no">tao/Queued_Message.h</includes>
  </compound>
  <compound kind="file">
    <name>Leader_Follower_Flushing_Strategy.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Leader__Follower__Flushing__Strategy_8h</filename>
    <includes id="Flushing__Strategy_8h" name="Flushing_Strategy.h" local="yes" imported="no">Flushing_Strategy.h</includes>
    <class kind="class">TAO_Leader_Follower_Flushing_Strategy</class>
  </compound>
  <compound kind="file">
    <name>LF_CH_Event.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__CH__Event_8cpp</filename>
    <includes id="LF__CH__Event_8h" name="LF_CH_Event.h" local="yes" imported="no">LF_CH_Event.h</includes>
  </compound>
  <compound kind="file">
    <name>LF_CH_Event.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__CH__Event_8h</filename>
    <includes id="LF__Event_8h" name="LF_Event.h" local="yes" imported="no">LF_Event.h</includes>
    <class kind="class">TAO_LF_CH_Event</class>
  </compound>
  <compound kind="file">
    <name>LF_Connect_Strategy.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Connect__Strategy_8cpp</filename>
    <includes id="LF__Connect__Strategy_8h" name="LF_Connect_Strategy.h" local="yes" imported="no">LF_Connect_Strategy.h</includes>
    <includes id="Connection__Handler_8h" name="Connection_Handler.h" local="yes" imported="no">Connection_Handler.h</includes>
    <includes id="LF__Follower_8h" name="LF_Follower.h" local="yes" imported="no">LF_Follower.h</includes>
    <includes id="Leader__Follower_8h" name="Leader_Follower.h" local="yes" imported="no">Leader_Follower.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">Transport.h</includes>
  </compound>
  <compound kind="file">
    <name>LF_Connect_Strategy.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Connect__Strategy_8h</filename>
    <includes id="Connect__Strategy_8h" name="Connect_Strategy.h" local="yes" imported="no">Connect_Strategy.h</includes>
    <class kind="class">TAO_LF_Connect_Strategy</class>
  </compound>
  <compound kind="file">
    <name>LF_Event.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Event_8cpp</filename>
    <includes id="LF__Event_8h" name="LF_Event.h" local="yes" imported="no">LF_Event.h</includes>
    <includes id="LF__Follower_8h" name="LF_Follower.h" local="yes" imported="no">LF_Follower.h</includes>
    <includes id="Leader__Follower_8h" name="Leader_Follower.h" local="yes" imported="no">Leader_Follower.h</includes>
    <includes id="LF__Event_8inl" name="LF_Event.inl" local="yes" imported="no">tao/LF_Event.inl</includes>
  </compound>
  <compound kind="file">
    <name>LF_Event.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Event_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">TAO_Export.h</includes>
    <class kind="class">TAO_LF_Event</class>
  </compound>
  <compound kind="file">
    <name>LF_Event.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Event_8inl</filename>
  </compound>
  <compound kind="file">
    <name>LF_Event_Binder.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Event__Binder_8cpp</filename>
    <includes id="LF__Event__Binder_8h" name="LF_Event_Binder.h" local="yes" imported="no">tao/LF_Event_Binder.h</includes>
    <includes id="LF__Event__Binder_8inl" name="LF_Event_Binder.inl" local="yes" imported="no">tao/LF_Event_Binder.inl</includes>
  </compound>
  <compound kind="file">
    <name>LF_Event_Binder.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Event__Binder_8h</filename>
    <includes id="LF__Event_8h" name="LF_Event.h" local="yes" imported="no">tao/LF_Event.h</includes>
    <class kind="class">TAO_LF_Event_Binder</class>
  </compound>
  <compound kind="file">
    <name>LF_Event_Binder.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Event__Binder_8inl</filename>
  </compound>
  <compound kind="file">
    <name>LF_Event_Loop_Thread_Helper.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Event__Loop__Thread__Helper_8cpp</filename>
    <includes id="LF__Event__Loop__Thread__Helper_8h" name="LF_Event_Loop_Thread_Helper.h" local="yes" imported="no">tao/LF_Event_Loop_Thread_Helper.h</includes>
    <includes id="LF__Event__Loop__Thread__Helper_8inl" name="LF_Event_Loop_Thread_Helper.inl" local="yes" imported="no">tao/LF_Event_Loop_Thread_Helper.inl</includes>
  </compound>
  <compound kind="file">
    <name>LF_Event_Loop_Thread_Helper.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Event__Loop__Thread__Helper_8h</filename>
    <includes id="LF__Strategy_8h" name="LF_Strategy.h" local="yes" imported="no">tao/LF_Strategy.h</includes>
    <class kind="class">TAO_LF_Event_Loop_Thread_Helper</class>
  </compound>
  <compound kind="file">
    <name>LF_Event_Loop_Thread_Helper.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Event__Loop__Thread__Helper_8inl</filename>
  </compound>
  <compound kind="file">
    <name>LF_Follower.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Follower_8cpp</filename>
    <includes id="LF__Follower_8h" name="LF_Follower.h" local="yes" imported="no">tao/LF_Follower.h</includes>
    <includes id="Leader__Follower_8h" name="Leader_Follower.h" local="yes" imported="no">tao/Leader_Follower.h</includes>
    <includes id="LF__Follower_8inl" name="LF_Follower.inl" local="yes" imported="no">tao/LF_Follower.inl</includes>
  </compound>
  <compound kind="file">
    <name>LF_Follower.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Follower_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <class kind="class">TAO_LF_Follower</class>
  </compound>
  <compound kind="file">
    <name>LF_Follower.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Follower_8inl</filename>
  </compound>
  <compound kind="file">
    <name>LF_Follower_Auto_Adder.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Follower__Auto__Adder_8cpp</filename>
    <includes id="LF__Follower__Auto__Adder_8h" name="LF_Follower_Auto_Adder.h" local="yes" imported="no">tao/LF_Follower_Auto_Adder.h</includes>
    <includes id="LF__Follower__Auto__Adder_8inl" name="LF_Follower_Auto_Adder.inl" local="yes" imported="no">tao/LF_Follower_Auto_Adder.inl</includes>
  </compound>
  <compound kind="file">
    <name>LF_Follower_Auto_Adder.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Follower__Auto__Adder_8h</filename>
    <includes id="LF__Follower_8h" name="LF_Follower.h" local="yes" imported="no">tao/LF_Follower.h</includes>
    <includes id="Leader__Follower_8h" name="Leader_Follower.h" local="yes" imported="no">tao/Leader_Follower.h</includes>
    <class kind="class">TAO_LF_Follower_Auto_Adder</class>
  </compound>
  <compound kind="file">
    <name>LF_Follower_Auto_Adder.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Follower__Auto__Adder_8inl</filename>
  </compound>
  <compound kind="file">
    <name>LF_Follower_Auto_Ptr.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Follower__Auto__Ptr_8cpp</filename>
    <includes id="LF__Follower__Auto__Ptr_8h" name="LF_Follower_Auto_Ptr.h" local="yes" imported="no">tao/LF_Follower_Auto_Ptr.h</includes>
    <includes id="LF__Follower__Auto__Ptr_8inl" name="LF_Follower_Auto_Ptr.inl" local="yes" imported="no">tao/LF_Follower_Auto_Ptr.inl</includes>
  </compound>
  <compound kind="file">
    <name>LF_Follower_Auto_Ptr.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Follower__Auto__Ptr_8h</filename>
    <includes id="LF__Follower_8h" name="LF_Follower.h" local="yes" imported="no">tao/LF_Follower.h</includes>
    <includes id="Leader__Follower_8h" name="Leader_Follower.h" local="yes" imported="no">tao/Leader_Follower.h</includes>
    <class kind="class">TAO_LF_Follower_Auto_Ptr</class>
  </compound>
  <compound kind="file">
    <name>LF_Follower_Auto_Ptr.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Follower__Auto__Ptr_8inl</filename>
  </compound>
  <compound kind="file">
    <name>LF_Invocation_Event.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Invocation__Event_8cpp</filename>
    <includes id="LF__Invocation__Event_8h" name="LF_Invocation_Event.h" local="yes" imported="no">LF_Invocation_Event.h</includes>
  </compound>
  <compound kind="file">
    <name>LF_Invocation_Event.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Invocation__Event_8h</filename>
    <includes id="LF__Event_8h" name="LF_Event.h" local="yes" imported="no">LF_Event.h</includes>
    <class kind="class">TAO_LF_Invocation_Event</class>
  </compound>
  <compound kind="file">
    <name>LF_Strategy.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Strategy_8cpp</filename>
    <includes id="LF__Strategy_8h" name="LF_Strategy.h" local="yes" imported="no">tao/LF_Strategy.h</includes>
  </compound>
  <compound kind="file">
    <name>LF_Strategy.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Strategy_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <class kind="class">TAO_LF_Strategy</class>
  </compound>
  <compound kind="file">
    <name>LF_Strategy_Complete.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Strategy__Complete_8cpp</filename>
    <includes id="LF__Strategy__Complete_8h" name="LF_Strategy_Complete.h" local="yes" imported="no">tao/LF_Strategy_Complete.h</includes>
    <includes id="LF__Follower_8h" name="LF_Follower.h" local="yes" imported="no">tao/LF_Follower.h</includes>
    <includes id="Leader__Follower_8h" name="Leader_Follower.h" local="yes" imported="no">tao/Leader_Follower.h</includes>
    <includes id="LF__Strategy__Complete_8inl" name="LF_Strategy_Complete.inl" local="yes" imported="no">tao/LF_Strategy_Complete.inl</includes>
  </compound>
  <compound kind="file">
    <name>LF_Strategy_Complete.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Strategy__Complete_8h</filename>
    <includes id="LF__Strategy_8h" name="LF_Strategy.h" local="yes" imported="no">tao/LF_Strategy.h</includes>
    <class kind="class">TAO_LF_Strategy_Complete</class>
  </compound>
  <compound kind="file">
    <name>LF_Strategy_Complete.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LF__Strategy__Complete_8inl</filename>
  </compound>
  <compound kind="file">
    <name>LocalObject.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LocalObject_8cpp</filename>
    <includes id="LocalObject_8h" name="LocalObject.h" local="yes" imported="no">LocalObject.h</includes>
    <includes id="LocalObject_8i" name="LocalObject.i" local="yes" imported="no">LocalObject.i</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="ORB__Constants_8h" name="ORB_Constants.h" local="yes" imported="no">ORB_Constants.h</includes>
  </compound>
  <compound kind="file">
    <name>LocalObject.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LocalObject_8h</filename>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">Object.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">CORBA::LocalObject</class>
    <class kind="class">TAO_Local_RefCounted_Object</class>
    <member kind="typedef">
      <type>LocalObject *</type>
      <name>LocalObject_ptr</name>
      <anchor>a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Var_T&lt; LocalObject &gt;</type>
      <name>LocalObject_var</name>
      <anchor>a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Out_T&lt; LocalObject, LocalObject_var &gt;</type>
      <name>LocalObject_out</name>
      <anchor>a92</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LocalObject.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LocalObject_8i</filename>
  </compound>
  <compound kind="file">
    <name>LocateRequest_Invocation.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LocateRequest__Invocation_8cpp</filename>
    <includes id="LocateRequest__Invocation_8h" name="LocateRequest_Invocation.h" local="yes" imported="no">LocateRequest_Invocation.h</includes>
    <includes id="Profile__Transport__Resolver_8h" name="Profile_Transport_Resolver.h" local="yes" imported="no">Profile_Transport_Resolver.h</includes>
    <includes id="operation__details_8h" name="operation_details.h" local="yes" imported="no">operation_details.h</includes>
    <includes id="Stub_8h" name="Stub.h" local="yes" imported="no">Stub.h</includes>
    <includes id="Bind__Dispatcher__Guard_8h" name="Bind_Dispatcher_Guard.h" local="yes" imported="no">Bind_Dispatcher_Guard.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">Transport.h</includes>
    <includes id="Synch__Reply__Dispatcher_8h" name="Synch_Reply_Dispatcher.h" local="yes" imported="no">Synch_Reply_Dispatcher.h</includes>
    <includes id="GIOP__Utils_8h" name="GIOP_Utils.h" local="yes" imported="no">GIOP_Utils.h</includes>
    <includes id="Profile_8h" name="Profile.h" local="yes" imported="no">Profile.h</includes>
    <includes id="ORB__Constants_8h" name="ORB_Constants.h" local="yes" imported="no">ORB_Constants.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>LocateRequest_Invocation.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LocateRequest__Invocation_8h</filename>
    <includes id="Synch__Invocation_8h" name="Synch_Invocation.h" local="yes" imported="no">tao/Synch_Invocation.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">TAO::LocateRequest_Invocation</class>
  </compound>
  <compound kind="file">
    <name>LocateRequest_Invocation_Adapter.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LocateRequest__Invocation__Adapter_8cpp</filename>
    <includes id="LocateRequest__Invocation__Adapter_8h" name="LocateRequest_Invocation_Adapter.h" local="yes" imported="no">LocateRequest_Invocation_Adapter.h</includes>
    <includes id="Profile__Transport__Resolver_8h" name="Profile_Transport_Resolver.h" local="yes" imported="no">Profile_Transport_Resolver.h</includes>
    <includes id="operation__details_8h" name="operation_details.h" local="yes" imported="no">operation_details.h</includes>
    <includes id="LocateRequest__Invocation_8h" name="LocateRequest_Invocation.h" local="yes" imported="no">LocateRequest_Invocation.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">Transport.h</includes>
    <includes id="Transport__Mux__Strategy_8h" name="Transport_Mux_Strategy.h" local="yes" imported="no">Transport_Mux_Strategy.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>LocateRequest_Invocation_Adapter.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LocateRequest__Invocation__Adapter_8h</filename>
    <includes id="Policy__ForwardC_8h" name="Policy_ForwardC.h" local="yes" imported="no">tao/Policy_ForwardC.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">TAO::LocateRequest_Invocation_Adapter</class>
  </compound>
  <compound kind="file">
    <name>LongDoubleSeq.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LongDoubleSeq_8pidl</filename>
    <namespace>CORBA</namespace>
    <member kind="typedef">
      <type>sequence&lt; long double &gt;</type>
      <name>LongDoubleSeq</name>
      <anchor>a93</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LongDoubleSeqA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LongDoubleSeqA_8cpp</filename>
    <includes id="LongDoubleSeqC_8h" name="LongDoubleSeqC.h" local="yes" imported="no">LongDoubleSeqC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <namespace>CORBA</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::LongDoubleSeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::LongDoubleSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::LongDoubleSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::LongDoubleSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_LongDoubleSeq_0</name>
      <anchor>a32</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_longdouble, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_LongDoubleSeq_0</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_LongDoubleSeq</name>
      <anchor>a2</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/LongDoubleSeq:1.0&quot;,&quot;LongDoubleSeq&quot;,&amp;TAO::TypeCode::tc_CORBA_LongDoubleSeq_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_LongDoubleSeq</name>
      <anchor>a94</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LongDoubleSeqC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LongDoubleSeqC_8cpp</filename>
    <includes id="LongDoubleSeqC_8h" name="LongDoubleSeqC.h" local="yes" imported="no">LongDoubleSeqC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_LONGDOUBLESEQ_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::LongDoubleSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::LongDoubleSeq &amp;_tao_sequence)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LongDoubleSeqC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LongDoubleSeqC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">CORBA::LongDoubleSeq</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_LONGDOUBLESEQ_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; LongDoubleSeq, CORBA::LongDouble &gt;</type>
      <name>LongDoubleSeq_var</name>
      <anchor>a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; LongDoubleSeq, LongDoubleSeq_var, CORBA::LongDouble &gt;</type>
      <name>LongDoubleSeq_out</name>
      <anchor>a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::LongDoubleSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::LongDoubleSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::LongDoubleSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::LongDoubleSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::LongDoubleSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::LongDoubleSeq &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LongDoubleSeqS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LongDoubleSeqS_8h</filename>
  </compound>
  <compound kind="file">
    <name>LongLongSeq.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LongLongSeq_8pidl</filename>
    <namespace>CORBA</namespace>
    <member kind="typedef">
      <type>sequence&lt; long long &gt;</type>
      <name>LongLongSeq</name>
      <anchor>a97</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LongLongSeqA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LongLongSeqA_8cpp</filename>
    <includes id="LongLongSeqC_8h" name="LongLongSeqC.h" local="yes" imported="no">LongLongSeqC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <namespace>CORBA</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::LongLongSeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::LongLongSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::LongLongSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::LongLongSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_LongLongSeq_0</name>
      <anchor>a34</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_longlong, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_LongLongSeq_0</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_LongLongSeq</name>
      <anchor>a2</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/LongLongSeq:1.0&quot;,&quot;LongLongSeq&quot;,&amp;TAO::TypeCode::tc_CORBA_LongLongSeq_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_LongLongSeq</name>
      <anchor>a98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LongLongSeqC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LongLongSeqC_8cpp</filename>
    <includes id="LongLongSeqC_8h" name="LongLongSeqC.h" local="yes" imported="no">LongLongSeqC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_LONGLONGSEQ_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::LongLongSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::LongLongSeq &amp;_tao_sequence)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LongLongSeqC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LongLongSeqC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">CORBA::LongLongSeq</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_LONGLONGSEQ_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; LongLongSeq, CORBA::LongLong &gt;</type>
      <name>LongLongSeq_var</name>
      <anchor>a99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; LongLongSeq, LongLongSeq_var, CORBA::LongLong &gt;</type>
      <name>LongLongSeq_out</name>
      <anchor>a100</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::LongLongSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::LongLongSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::LongLongSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::LongLongSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::LongLongSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::LongLongSeq &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LongLongSeqS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LongLongSeqS_8h</filename>
  </compound>
  <compound kind="file">
    <name>LongSeq.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LongSeq_8pidl</filename>
    <namespace>CORBA</namespace>
    <member kind="typedef">
      <type>sequence&lt; long &gt;</type>
      <name>LongSeq</name>
      <anchor>a101</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LongSeqA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LongSeqA_8cpp</filename>
    <includes id="LongSeqC_8h" name="LongSeqC.h" local="yes" imported="no">LongSeqC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <namespace>CORBA</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::LongSeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::LongSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::LongSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::LongSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_LongSeq_0</name>
      <anchor>a36</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_long, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_LongSeq_0</name>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_LongSeq</name>
      <anchor>a2</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/LongSeq:1.0&quot;,&quot;LongSeq&quot;,&amp;TAO::TypeCode::tc_CORBA_LongSeq_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_LongSeq</name>
      <anchor>a102</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LongSeqC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LongSeqC_8cpp</filename>
    <includes id="LongSeqC_8h" name="LongSeqC.h" local="yes" imported="no">LongSeqC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_LONGSEQ_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::LongSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::LongSeq &amp;_tao_sequence)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LongSeqC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LongSeqC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">CORBA::LongSeq</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_LONGSEQ_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; LongSeq, CORBA::Long &gt;</type>
      <name>LongSeq_var</name>
      <anchor>a103</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; LongSeq, LongSeq_var, CORBA::Long &gt;</type>
      <name>LongSeq_out</name>
      <anchor>a104</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::LongSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::LongSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::LongSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::LongSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::LongSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::LongSeq &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LongSeqS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LongSeqS_8h</filename>
  </compound>
  <compound kind="file">
    <name>LRU_Connection_Purging_Strategy.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LRU__Connection__Purging__Strategy_8cpp</filename>
    <includes id="LRU__Connection__Purging__Strategy_8h" name="LRU_Connection_Purging_Strategy.h" local="yes" imported="no">LRU_Connection_Purging_Strategy.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">Transport.h</includes>
  </compound>
  <compound kind="file">
    <name>LRU_Connection_Purging_Strategy.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>LRU__Connection__Purging__Strategy_8h</filename>
    <includes id="Connection__Purging__Strategy_8h" name="Connection_Purging_Strategy.h" local="yes" imported="no">tao/Connection_Purging_Strategy.h</includes>
    <class kind="class">TAO_LRU_Connection_Purging_Strategy</class>
  </compound>
  <compound kind="file">
    <name>Managed_Types.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Managed__Types_8cpp</filename>
    <includes id="Managed__Types_8h" name="Managed_Types.h" local="yes" imported="no">tao/Managed_Types.h</includes>
    <includes id="Managed__Types_8i" name="Managed_Types.i" local="yes" imported="no">tao/Managed_Types.i</includes>
  </compound>
  <compound kind="file">
    <name>Managed_Types.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Managed__Types_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <includes id="CORBA__String_8h" name="CORBA_String.h" local="yes" imported="no">tao/CORBA_String.h</includes>
    <class kind="class">TAO_String_Manager</class>
    <class kind="class">TAO_SeqElem_String_Manager</class>
    <class kind="class">TAO_WString_Manager</class>
    <class kind="class">TAO_SeqElem_WString_Manager</class>
  </compound>
  <compound kind="file">
    <name>Managed_Types.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Managed__Types_8i</filename>
  </compound>
  <compound kind="file">
    <name>Marshal.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Marshal_8cpp</filename>
    <includes id="Marshal_8h" name="Marshal.h" local="yes" imported="no">tao/Marshal.h</includes>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">tao/TypeCode.h</includes>
    <includes id="Marshal_8i" name="Marshal.i" local="yes" imported="no">tao/Marshal.i</includes>
  </compound>
  <compound kind="file">
    <name>Marshal.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Marshal_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">TAO_Marshal_Object</class>
    <class kind="class">TAO_Marshal_Primitive</class>
    <class kind="class">TAO_Marshal_Any</class>
    <class kind="class">TAO_Marshal_TypeCode</class>
    <class kind="class">TAO_Marshal_Principal</class>
    <class kind="class">TAO_Marshal_ObjRef</class>
    <class kind="class">TAO_Marshal_Struct</class>
    <class kind="class">TAO_Marshal_Union</class>
    <class kind="class">TAO_Marshal_String</class>
    <class kind="class">TAO_Marshal_Sequence</class>
    <class kind="class">TAO_Marshal_Array</class>
    <class kind="class">TAO_Marshal_Alias</class>
    <class kind="class">TAO_Marshal_Except</class>
    <class kind="class">TAO_Marshal_WString</class>
    <class kind="class">TAO_Marshal_Value</class>
    <member kind="enumeration">
      <name>traverse_status</name>
      <anchor>a152</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_STOP</name>
      <anchor>a152a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_CONTINUE</name>
      <anchor>a152a33</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Marshal.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Marshal_8i</filename>
  </compound>
  <compound kind="file">
    <name>MCAST_Parser.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>MCAST__Parser_8cpp</filename>
    <includes id="MCAST__Parser_8h" name="MCAST_Parser.h" local="yes" imported="no">MCAST_Parser.h</includes>
    <includes id="default__ports_8h" name="default_ports.h" local="yes" imported="no">default_ports.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">Environment.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="MCAST__Parser_8i" name="MCAST_Parser.i" local="yes" imported="no">MCAST_Parser.i</includes>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>mcast_prefix</name>
      <anchor>a0</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MCAST_Parser.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>MCAST__Parser_8h</filename>
    <includes id="CORBA__String_8h" name="CORBA_String.h" local="yes" imported="no">tao/CORBA_String.h</includes>
    <includes id="IOR__Parser_8h" name="IOR_Parser.h" local="yes" imported="no">tao/IOR_Parser.h</includes>
    <class kind="class">TAO_MCAST_Parser</class>
  </compound>
  <compound kind="file">
    <name>MCAST_Parser.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>MCAST__Parser_8i</filename>
  </compound>
  <compound kind="file">
    <name>Messaging_PolicyValue.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Messaging__PolicyValue_8pidl</filename>
    <includes id="IOP__IOR_8pidl" name="IOP_IOR.pidl" local="yes" imported="yes">IOP_IOR.pidl</includes>
    <includes id="Policy__Forward_8pidl" name="Policy_Forward.pidl" local="yes" imported="yes">Policy_Forward.pidl</includes>
    <namespace>Messaging</namespace>
    <class kind="struct">Messaging::PolicyValue</class>
    <member kind="typedef">
      <type>sequence&lt; PolicyValue &gt;</type>
      <name>PolicyValueSeq</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IOP::ComponentId</type>
      <name>TAG_POLICIES</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IOP::ServiceId</type>
      <name>INVOCATION_POLICIES</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Messaging_PolicyValueA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Messaging__PolicyValueA_8cpp</filename>
    <includes id="Messaging__PolicyValueC_8h" name="Messaging_PolicyValueC.h" local="yes" imported="no">Messaging_PolicyValueC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="String__TypeCode_8h" name="String_TypeCode.h" local="yes" imported="no">tao/String_TypeCode.h</includes>
    <includes id="Struct__TypeCode_8h" name="Struct_TypeCode.h" local="yes" imported="no">tao/Struct_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>Messaging</namespace>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const Messaging::PolicyValue &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, Messaging::PolicyValue *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a9</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, Messaging::PolicyValue *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a10</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const Messaging::PolicyValue *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const Messaging::PolicyValueSeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, Messaging::PolicyValueSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a13</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, Messaging::PolicyValueSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a14</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const Messaging::PolicyValueSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_fields_Messaging_PolicyValue</name>
      <anchor>a0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_Messaging_PolicyValue</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::tk_struct,&quot;IDL:omg.org/Messaging/PolicyValue:1.0&quot;,&quot;PolicyValue&quot;, _tao_fields_Messaging_PolicyValue, 2)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_PolicyValue</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>Messaging_PolicyValueSeq_0</name>
      <anchor>a38</anchor>
      <arglist>(CORBA::tk_sequence,&amp;Messaging::_tc_PolicyValue, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_Messaging_PolicyValueSeq_0</name>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_Messaging_PolicyValueSeq</name>
      <anchor>a5</anchor>
      <arglist>(&quot;IDL:omg.org/Messaging/PolicyValueSeq:1.0&quot;,&quot;PolicyValueSeq&quot;,&amp;TAO::TypeCode::tc_Messaging_PolicyValueSeq_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_PolicyValueSeq</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Messaging_PolicyValueC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Messaging__PolicyValueC_8cpp</filename>
    <includes id="Messaging__PolicyValueC_8h" name="Messaging_PolicyValueC.h" local="yes" imported="no">Messaging_PolicyValueC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_POLICYVALUESEQ_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const Messaging::PolicyValue &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;strm, Messaging::PolicyValue &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const Messaging::PolicyValueSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;strm, Messaging::PolicyValueSeq &amp;_tao_sequence)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Messaging_PolicyValueC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Messaging__PolicyValueC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <includes id="VarOut__T_8h" name="VarOut_T.h" local="yes" imported="no">tao/VarOut_T.h</includes>
    <includes id="IOP__IORC_8h" name="IOP_IORC.h" local="yes" imported="no">tao/IOP_IORC.h</includes>
    <includes id="Policy__ForwardC_8h" name="Policy_ForwardC.h" local="yes" imported="no">tao/Policy_ForwardC.h</includes>
    <namespace>Messaging</namespace>
    <namespace>TAO</namespace>
    <class kind="struct">Messaging::PolicyValue</class>
    <class kind="class">Messaging::PolicyValueSeq</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MESSAGING_POLICYVALUESEQ_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; PolicyValue &gt;</type>
      <name>PolicyValue_var</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; PolicyValue, PolicyValue_var &gt;</type>
      <name>PolicyValue_out</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_VarSeq_Var_T&lt; PolicyValueSeq, PolicyValue &gt;</type>
      <name>PolicyValueSeq_var</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; PolicyValueSeq, PolicyValueSeq_var, PolicyValue &gt;</type>
      <name>PolicyValueSeq_out</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::Any &amp;, const Messaging::PolicyValue &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Any &amp;, Messaging::PolicyValue *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a8</anchor>
      <arglist>(const CORBA::Any &amp;, Messaging::PolicyValue *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a9</anchor>
      <arglist>(const CORBA::Any &amp;, const Messaging::PolicyValue *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::Any &amp;, const Messaging::PolicyValueSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::Any &amp;, Messaging::PolicyValueSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a12</anchor>
      <arglist>(const CORBA::Any &amp;, Messaging::PolicyValueSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a13</anchor>
      <arglist>(const CORBA::Any &amp;, const Messaging::PolicyValueSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a14</anchor>
      <arglist>(TAO_OutputCDR &amp;, const Messaging::PolicyValue &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a15</anchor>
      <arglist>(TAO_InputCDR &amp;, Messaging::PolicyValue &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a16</anchor>
      <arglist>(TAO_OutputCDR &amp;, const Messaging::PolicyValueSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a17</anchor>
      <arglist>(TAO_InputCDR &amp;, Messaging::PolicyValueSeq &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Messaging_SyncScope.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Messaging__SyncScope_8pidl</filename>
    <namespace>Messaging</namespace>
    <member kind="typedef">
      <type>short</type>
      <name>SyncScope</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SyncScope</type>
      <name>SYNC_NONE</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SyncScope</type>
      <name>SYNC_WITH_TRANSPORT</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SyncScope</type>
      <name>SYNC_WITH_SERVER</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SyncScope</type>
      <name>SYNC_WITH_TARGET</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Messaging_SyncScopeC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Messaging__SyncScopeC_8cpp</filename>
    <includes id="Messaging__SyncScopeC_8h" name="Messaging_SyncScopeC.h" local="yes" imported="no">Messaging_SyncScopeC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>Messaging_SyncScopeC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Messaging__SyncScopeC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <namespace>Messaging</namespace>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::Short_out</type>
      <name>SyncScope_out</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MProfile.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>MProfile_8cpp</filename>
    <includes id="MProfile_8h" name="MProfile.h" local="yes" imported="no">tao/MProfile.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Profile_8h" name="Profile.h" local="yes" imported="no">tao/Profile.h</includes>
    <includes id="PolicyC_8h" name="PolicyC.h" local="yes" imported="no">tao/PolicyC.h</includes>
    <includes id="ORB__Constants_8h" name="ORB_Constants.h" local="yes" imported="no">tao/ORB_Constants.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="MProfile_8i" name="MProfile.i" local="yes" imported="no">tao/MProfile.i</includes>
  </compound>
  <compound kind="file">
    <name>MProfile.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>MProfile_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">TAO_MProfile</class>
    <member kind="typedef">
      <type>CORBA::ULong</type>
      <name>TAO_PHandle</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MProfile.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>MProfile_8i</filename>
  </compound>
  <compound kind="file">
    <name>Muxed_TMS.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Muxed__TMS_8cpp</filename>
    <includes id="Muxed__TMS_8h" name="Muxed_TMS.h" local="yes" imported="no">tao/Muxed_TMS.h</includes>
    <includes id="Reply__Dispatcher_8h" name="Reply_Dispatcher.h" local="yes" imported="no">tao/Reply_Dispatcher.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">Transport.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="Client__Strategy__Factory_8h" name="Client_Strategy_Factory.h" local="yes" imported="no">Client_Strategy_Factory.h</includes>
  </compound>
  <compound kind="file">
    <name>Muxed_TMS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Muxed__TMS_8h</filename>
    <includes id="Transport__Mux__Strategy_8h" name="Transport_Mux_Strategy.h" local="yes" imported="no">tao/Transport_Mux_Strategy.h</includes>
    <class kind="class">TAO_Muxed_TMS</class>
  </compound>
  <compound kind="file">
    <name>New_Leader_Generator.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>New__Leader__Generator_8h</filename>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <class kind="class">TAO_New_Leader_Generator</class>
  </compound>
  <compound kind="file">
    <name>Null_RefCount_Policy.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Null__RefCount__Policy_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Null_RefCount_Policy</class>
  </compound>
  <compound kind="file">
    <name>NVList.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>NVList_8cpp</filename>
    <includes id="NVList_8h" name="NVList.h" local="yes" imported="no">NVList.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="BoundsC_8h" name="BoundsC.h" local="yes" imported="no">tao/BoundsC.h</includes>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">tao/TypeCode.h</includes>
    <includes id="Marshal_8h" name="Marshal.h" local="yes" imported="no">tao/Marshal.h</includes>
    <includes id="CORBA__String_8h" name="CORBA_String.h" local="yes" imported="no">tao/CORBA_String.h</includes>
    <includes id="Any__Impl_8h" name="Any_Impl.h" local="yes" imported="no">tao/Any_Impl.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <includes id="NVList_8i" name="NVList.i" local="yes" imported="no">tao/NVList.i</includes>
  </compound>
  <compound kind="file">
    <name>NVList.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>NVList_8h</filename>
    <includes id="CORBA__methods_8h" name="CORBA_methods.h" local="yes" imported="no">tao/CORBA_methods.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">CORBA::NamedValue</class>
    <class kind="class">CORBA::NVList</class>
    <member kind="typedef">
      <type>TAO_Pseudo_Var_T&lt; NamedValue &gt;</type>
      <name>NamedValue_var</name>
      <anchor>a105</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Out_T&lt; NamedValue, NamedValue_var &gt;</type>
      <name>NamedValue_out</name>
      <anchor>a106</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Var_T&lt; NVList &gt;</type>
      <name>NVList_var</name>
      <anchor>a107</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Out_T&lt; NVList, NVList_var &gt;</type>
      <name>NVList_out</name>
      <anchor>a108</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARG_IN</name>
      <anchor>a410a109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARG_OUT</name>
      <anchor>a410a110</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARG_INOUT</name>
      <anchor>a410a111</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_COPY_VALUE</name>
      <anchor>a410a112</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUT_LIST_MEMORY</name>
      <anchor>a410a113</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPENDENT_LIST</name>
      <anchor>a410a114</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CTX_RESTRICT_SCOPE</name>
      <anchor>a410a115</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CTX_DELETE_DESCENDENTS</name>
      <anchor>a410a116</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INV_NO_RESPONSE</name>
      <anchor>a410a117</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INV_TERM_ON_ERR</name>
      <anchor>a410a118</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESP_NO_WAIT</name>
      <anchor>a410a119</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NVList.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>NVList_8i</filename>
  </compound>
  <compound kind="file">
    <name>Object.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Object_8cpp</filename>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">Object.h</includes>
    <includes id="Stub_8h" name="Stub.h" local="yes" imported="no">Stub.h</includes>
    <includes id="Profile_8h" name="Profile.h" local="yes" imported="no">Profile.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="Connector__Registry_8h" name="Connector_Registry.h" local="yes" imported="no">Connector_Registry.h</includes>
    <includes id="LocateRequest__Invocation__Adapter_8h" name="LocateRequest_Invocation_Adapter.h" local="yes" imported="no">LocateRequest_Invocation_Adapter.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="Dynamic__Adapter_8h" name="Dynamic_Adapter.h" local="yes" imported="no">Dynamic_Adapter.h</includes>
    <includes id="IFR__Client__Adapter_8h" name="IFR_Client_Adapter.h" local="yes" imported="no">IFR_Client_Adapter.h</includes>
    <includes id="Remote__Object__Proxy__Broker_8h" name="Remote_Object_Proxy_Broker.h" local="yes" imported="no">Remote_Object_Proxy_Broker.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">CDR.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="PolicyC_8h" name="PolicyC.h" local="yes" imported="no">PolicyC.h</includes>
    <includes id="Object_8i" name="Object.i" local="yes" imported="no">tao/Object.i</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJECT_IOR_EVALUATE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJECT_IOR_EVALUATE_RETURN</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, const CORBA::Object *x)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;cdr, CORBA::Object *&amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>Objref_Traits&lt; CORBA::Object &gt;::duplicate</name>
      <anchor>a93</anchor>
      <arglist>(CORBA::Object_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Objref_Traits&lt; CORBA::Object &gt;::release</name>
      <anchor>a94</anchor>
      <arglist>(CORBA::Object_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>Objref_Traits&lt; CORBA::Object &gt;::nil</name>
      <anchor>a95</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Objref_Traits&lt; CORBA::Object &gt;::marshal</name>
      <anchor>a96</anchor>
      <arglist>(CORBA::Object_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="variable">
      <type>TAO::Object_Proxy_Broker *(*</type>
      <name>_TAO_Object_Proxy_Broker_Factory_function_pointer</name>
      <anchor>a2</anchor>
      <arglist>)(CORBA::Object_ptr obj)=0</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Object.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Object_8h</filename>
    <includes id="IOP__IORC_8h" name="IOP_IORC.h" local="yes" imported="no">tao/IOP_IORC.h</includes>
    <includes id="CORBA__methods_8h" name="CORBA_methods.h" local="yes" imported="no">tao/CORBA_methods.h</includes>
    <includes id="Policy__ForwardC_8h" name="Policy_ForwardC.h" local="yes" imported="no">tao/Policy_ForwardC.h</includes>
    <includes id="Pseudo__VarOut__T_8h" name="Pseudo_VarOut_T.h" local="yes" imported="no">tao/Pseudo_VarOut_T.h</includes>
    <includes id="Object__Argument__T_8h" name="Object_Argument_T.h" local="yes" imported="no">tao/Object_Argument_T.h</includes>
    <includes id="Arg__Traits__T_8h" name="Arg_Traits_T.h" local="yes" imported="no">tao/Arg_Traits_T.h</includes>
    <namespace>TAO</namespace>
    <namespace>CORBA</namespace>
    <class kind="class">CORBA::Object</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::Object &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; CORBA::Object &gt;</class>
    <class kind="class">TAO::Ret_Object_Argument_T&lt; CORBA::Object_ptr, CORBA::Object_var &gt;</class>
    <member kind="typedef">
      <type>ImplementationDef *</type>
      <name>ImplementationDef_ptr</name>
      <anchor>a120</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContextList *</type>
      <name>ContextList_ptr</name>
      <anchor>a121</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::Object *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::Object *&amp;)</arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TAO::Object_Proxy_Broker *(*</type>
      <name>_TAO_Object_Proxy_Broker_Factory_function_pointer</name>
      <anchor>a2</anchor>
      <arglist>)(CORBA::Object_ptr obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Object.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Object_8i</filename>
  </compound>
  <compound kind="file">
    <name>Object_Argument_T.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Object__Argument__T_8cpp</filename>
    <includes id="Object__Argument__T_8h" name="Object_Argument_T.h" local="yes" imported="no">tao/Object_Argument_T.h</includes>
    <includes id="Dynamic__ParameterC_8h" name="Dynamic_ParameterC.h" local="yes" imported="no">tao/Dynamic_ParameterC.h</includes>
    <includes id="Object__Argument__T_8inl" name="Object_Argument_T.inl" local="yes" imported="no">tao/Object_Argument_T.inl</includes>
  </compound>
  <compound kind="file">
    <name>Object_Argument_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Object__Argument__T_8h</filename>
    <includes id="Argument_8h" name="Argument.h" local="yes" imported="no">tao/Argument.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::In_Object_Argument_T</class>
    <class kind="class">TAO::Inout_Object_Argument_T</class>
    <class kind="class">TAO::Out_Object_Argument_T</class>
    <class kind="class">TAO::Ret_Object_Argument_T</class>
    <class kind="struct">TAO::Object_Tag</class>
    <class kind="struct">TAO::Object_Arg_Traits_T</class>
  </compound>
  <compound kind="file">
    <name>Object_Argument_T.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Object__Argument__T_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Object_Key.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Object__Key_8pidl</filename>
    <namespace>TAO</namespace>
    <member kind="typedef">
      <type>sequence&lt; octet &gt;</type>
      <name>ObjectKey</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Object_KeyC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Object__KeyC_8cpp</filename>
    <includes id="Object__KeyC_8h" name="Object_KeyC.h" local="yes" imported="no">Object_KeyC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_TAO_OBJECTKEY_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const TAO::ObjectKey &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;strm, TAO::ObjectKey &amp;_tao_sequence)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Object_KeyC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Object__KeyC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::ObjectKey</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_TAO_OBJECTKEY_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; ObjectKey, CORBA::Octet &gt;</type>
      <name>ObjectKey_var</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; ObjectKey, ObjectKey_var, CORBA::Octet &gt;</type>
      <name>ObjectKey_out</name>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_OutputCDR &amp;, const TAO::ObjectKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a5</anchor>
      <arglist>(TAO_InputCDR &amp;, TAO::ObjectKey &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Object_Loader.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Object__Loader_8cpp</filename>
    <includes id="Object__Loader_8h" name="Object_Loader.h" local="yes" imported="no">Object_Loader.h</includes>
  </compound>
  <compound kind="file">
    <name>Object_Loader.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Object__Loader_8h</filename>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">TAO_Object_Loader</class>
  </compound>
  <compound kind="file">
    <name>Object_Proxy_Broker.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Object__Proxy__Broker_8cpp</filename>
    <includes id="Object__Proxy__Broker_8h" name="Object_Proxy_Broker.h" local="yes" imported="no">tao/Object_Proxy_Broker.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>Object_Proxy_Broker.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Object__Proxy__Broker_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Object_Proxy_Broker</class>
  </compound>
  <compound kind="file">
    <name>Object_Proxy_Impl.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Object__Proxy__Impl_8cpp</filename>
    <includes id="Object__Proxy__Impl_8h" name="Object_Proxy_Impl.h" local="yes" imported="no">tao/Object_Proxy_Impl.h</includes>
  </compound>
  <compound kind="file">
    <name>Object_Proxy_Impl.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Object__Proxy__Impl_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">TAO_Object_Proxy_Impl</class>
  </compound>
  <compound kind="file">
    <name>Object_Ref_Table.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Object__Ref__Table_8cpp</filename>
    <includes id="Object__Ref__Table_8h" name="Object_Ref_Table.h" local="yes" imported="no">Object_Ref_Table.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">Environment.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="ORB__Constants_8h" name="ORB_Constants.h" local="yes" imported="no">ORB_Constants.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">Object.h</includes>
  </compound>
  <compound kind="file">
    <name>Object_Ref_Table.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Object__Ref__Table_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">TAO_Object_Ref_Table</class>
  </compound>
  <compound kind="file">
    <name>Object_T.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Object__T_8cpp</filename>
    <includes id="Object__T_8h" name="Object_T.h" local="yes" imported="no">tao/Object_T.h</includes>
    <includes id="Stub_8h" name="Stub.h" local="yes" imported="no">tao/Stub.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>Object_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Object__T_8h</filename>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Narrow_Utils</class>
    <member kind="typedef">
      <type>Collocation_Proxy_Broker *(*</type>
      <name>Proxy_Broker_Factory</name>
      <anchor>a37</anchor>
      <arglist>)(CORBA::Object_ptr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>objectid.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>objectid_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_NAMESERVICE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_TRADINGSERVICE</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_IMPLREPOSERVICE</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_ROOTPOA</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_POACURRENT</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_INTERFACEREP</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_POLICYMANAGER</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_POLICYCURRENT</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_IORMANIPULATION</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_IORTABLE</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_DYNANYFACTORY</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_TYPECODEFACTORY</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_RTORB</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_RTCURRENT</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_PRIORITYMAPPINGMANAGER</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_NETWORKPRIORITYMAPPINGMANAGER</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_SECURITYCURRENT</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_SECURITYMANAGER</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_TRANSACTIONCURRENT</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_NOTIFICATIONSERVICE</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_TYPEDNOTIFICATIONSERVICE</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_COMPONENTHOMEFINDER</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_PSS</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_CODECFACTORY</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OBJID_PICurrent</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_LIST_OF_INITIAL_SERVICES</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_NO_OF_MCAST_SERVICES</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TAO_MCAST_SERVICEID</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NAMESERVICE</name>
      <anchor>a31a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRADINGSERVICE</name>
      <anchor>a31a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IMPLREPOSERVICE</name>
      <anchor>a31a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERFACEREPOSERVICE</name>
      <anchor>a31a30</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ObjectIdList.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ObjectIdList_8pidl</filename>
    <namespace>CORBA</namespace>
    <member kind="typedef">
      <type>string</type>
      <name>ORB_ObjectId</name>
      <anchor>a122</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; ORB_ObjectId &gt;</type>
      <name>ORB_ObjectIdList</name>
      <anchor>a123</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ObjectIdListA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ObjectIdListA_8cpp</filename>
    <includes id="ObjectIdListC_8h" name="ObjectIdListC.h" local="yes" imported="no">ObjectIdListC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="String__TypeCode_8h" name="String_TypeCode.h" local="yes" imported="no">tao/String_TypeCode.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_ORB_ObjectId</name>
      <anchor>a0</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/ORB_ObjectId:1.0&quot;,&quot;ORB_ObjectId&quot;,&amp;CORBA::_tc_string)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ORB_ObjectId</name>
      <anchor>a124</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_ORB_ObjectIdList_0</name>
      <anchor>a40</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_ORB_ObjectId, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_ORB_ObjectIdList_0</name>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_ORB_ObjectIdList</name>
      <anchor>a4</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/ORB_ObjectIdList:1.0&quot;,&quot;ORB_ObjectIdList&quot;,&amp;TAO::TypeCode::tc_CORBA_ORB_ObjectIdList_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ORB_ObjectIdList</name>
      <anchor>a125</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ObjectIdListC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ObjectIdListC_8cpp</filename>
    <includes id="ObjectIdListC_8h" name="ObjectIdListC.h" local="yes" imported="no">ObjectIdListC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_ORB_OBJECTIDLIST_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::ORB_ObjectIdList &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::ORB_ObjectIdList &amp;_tao_sequence)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ObjectIdListC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ObjectIdListC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">CORBA::ORB_ObjectIdList</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_ORB_OBJECTIDLIST_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_var</type>
      <name>ORB_ObjectId_var</name>
      <anchor>a126</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_out</type>
      <name>ORB_ObjectId_out</name>
      <anchor>a127</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_MngSeq_Var_T&lt; ORB_ObjectIdList, TAO_SeqElem_String_Manager &gt;</type>
      <name>ORB_ObjectIdList_var</name>
      <anchor>a128</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_MngSeq_Out_T&lt; ORB_ObjectIdList, ORB_ObjectIdList_var, TAO_SeqElem_String_Manager &gt;</type>
      <name>ORB_ObjectIdList_out</name>
      <anchor>a129</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::ORB_ObjectIdList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::ORB_ObjectIdList &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ObjectKey_Table.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ObjectKey__Table_8cpp</filename>
    <includes id="ObjectKey__Table_8h" name="ObjectKey_Table.h" local="yes" imported="no">ObjectKey_Table.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="Refcounted__ObjectKey_8h" name="Refcounted_ObjectKey.h" local="yes" imported="no">Refcounted_ObjectKey.h</includes>
  </compound>
  <compound kind="file">
    <name>ObjectKey_Table.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ObjectKey__Table_8h</filename>
    <includes id="Object__KeyC_8h" name="Object_KeyC.h" local="yes" imported="no">tao/Object_KeyC.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Less_Than_ObjectKey</class>
    <class kind="class">TAO::ObjectKey_Table</class>
  </compound>
  <compound kind="file">
    <name>Objref_TypeCode.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Objref__TypeCode_8cpp</filename>
    <includes id="Objref__TypeCode_8h" name="Objref_TypeCode.h" local="yes" imported="no">tao/Objref_TypeCode.h</includes>
    <includes id="Objref__TypeCode_8inl" name="Objref_TypeCode.inl" local="yes" imported="no">tao/Objref_TypeCode.inl</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
  </compound>
  <compound kind="file">
    <name>Objref_TypeCode.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Objref__TypeCode_8h</filename>
    <includes id="Objref__TypeCode__Base_8h" name="Objref_TypeCode_Base.h" local="yes" imported="no">tao/Objref_TypeCode_Base.h</includes>
    <includes id="TypeCodeFactory__Adapter_8h" name="TypeCodeFactory_Adapter.h" local="yes" imported="no">tao/TypeCodeFactory_Adapter.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <class kind="struct">TAO::TypeCode::Objref_Traits&lt; CORBA::tk_abstract_interface &gt;</class>
    <class kind="struct">TAO::TypeCode::Objref_Traits&lt; CORBA::tk_component &gt;</class>
    <class kind="struct">TAO::TypeCode::Objref_Traits&lt; CORBA::tk_home &gt;</class>
    <class kind="struct">TAO::TypeCode::Objref_Traits&lt; CORBA::tk_local_interface &gt;</class>
    <class kind="struct">TAO::TypeCode::Objref_Traits&lt; CORBA::tk_native &gt;</class>
    <class kind="struct">TAO::TypeCode::Objref_Traits&lt; CORBA::tk_objref &gt;</class>
    <class kind="class">TAO::TypeCode::Objref</class>
  </compound>
  <compound kind="file">
    <name>Objref_TypeCode.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Objref__TypeCode_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Objref_TypeCode_Base.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Objref__TypeCode__Base_8cpp</filename>
    <includes id="Objref__TypeCode__Base_8h" name="Objref_TypeCode_Base.h" local="yes" imported="no">tao/Objref_TypeCode_Base.h</includes>
    <includes id="Objref__TypeCode__Base_8inl" name="Objref_TypeCode_Base.inl" local="yes" imported="no">tao/Objref_TypeCode_Base.inl</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
  </compound>
  <compound kind="file">
    <name>Objref_TypeCode_Base.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Objref__TypeCode__Base_8h</filename>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">tao/TypeCode.h</includes>
    <includes id="TypeCode__Base__Attributes_8h" name="TypeCode_Base_Attributes.h" local="yes" imported="no">tao/TypeCode_Base_Attributes.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <class kind="class">TAO::TypeCode::Objref_Base</class>
  </compound>
  <compound kind="file">
    <name>Objref_TypeCode_Base.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Objref__TypeCode__Base_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Objref_TypeCode_Factory.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Objref__TypeCode__Factory_8h</filename>
    <includes id="Objref__TypeCode_8h" name="Objref_TypeCode.h" local="yes" imported="no">tao/Objref_TypeCode.h</includes>
    <includes id="True__RefCount__Policy_8h" name="True_RefCount_Policy.h" local="yes" imported="no">tao/True_RefCount_Policy.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCodeFactory</namespace>
    <class kind="struct">TAO::TypeCodeFactory::Objref_Traits&lt; CORBA::tk_abstract_interface &gt;</class>
    <class kind="struct">TAO::TypeCodeFactory::Objref_Traits&lt; CORBA::tk_component &gt;</class>
    <class kind="struct">TAO::TypeCodeFactory::Objref_Traits&lt; CORBA::tk_home &gt;</class>
    <class kind="struct">TAO::TypeCodeFactory::Objref_Traits&lt; CORBA::tk_local_interface &gt;</class>
    <class kind="struct">TAO::TypeCodeFactory::Objref_Traits&lt; CORBA::tk_native &gt;</class>
    <class kind="struct">TAO::TypeCodeFactory::Objref_Traits&lt; CORBA::tk_objref &gt;</class>
    <member kind="function">
      <type>bool</type>
      <name>tc_objref_factory</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Objref_VarOut_T.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Objref__VarOut__T_8cpp</filename>
    <includes id="Objref__VarOut__T_8h" name="Objref_VarOut_T.h" local="yes" imported="no">tao/Objref_VarOut_T.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
  </compound>
  <compound kind="file">
    <name>Objref_VarOut_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Objref__VarOut__T_8h</filename>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <includes id="varbase_8h" name="varbase.h" local="yes" imported="no">tao/varbase.h</includes>
    <namespace>TAO</namespace>
    <class kind="struct">TAO::Objref_Traits</class>
    <class kind="class">TAO_Objref_Var_T</class>
    <class kind="class">TAO_Objref_Out_T</class>
  </compound>
  <compound kind="file">
    <name>OctetSeq.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>OctetSeq_8pidl</filename>
    <namespace>CORBA</namespace>
    <member kind="typedef">
      <type>sequence&lt; octet &gt;</type>
      <name>OctetSeq</name>
      <anchor>a130</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OctetSeqA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>OctetSeqA_8cpp</filename>
    <includes id="OctetSeqC_8h" name="OctetSeqC.h" local="yes" imported="no">OctetSeqC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <namespace>CORBA</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::OctetSeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::OctetSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::OctetSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::OctetSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_OctetSeq_0</name>
      <anchor>a42</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_octet, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_OctetSeq_0</name>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_OctetSeq</name>
      <anchor>a2</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/OctetSeq:1.0&quot;,&quot;OctetSeq&quot;,&amp;TAO::TypeCode::tc_CORBA_OctetSeq_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_OctetSeq</name>
      <anchor>a131</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OctetSeqC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>OctetSeqC_8cpp</filename>
    <includes id="OctetSeqC_8h" name="OctetSeqC.h" local="yes" imported="no">OctetSeqC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_OCTETSEQ_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::OctetSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::OctetSeq &amp;_tao_sequence)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OctetSeqC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>OctetSeqC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">CORBA::OctetSeq</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_OCTETSEQ_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; OctetSeq, CORBA::Octet &gt;</type>
      <name>OctetSeq_var</name>
      <anchor>a132</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; OctetSeq, OctetSeq_var, CORBA::Octet &gt;</type>
      <name>OctetSeq_out</name>
      <anchor>a133</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::OctetSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::OctetSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::OctetSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::OctetSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::OctetSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::OctetSeq &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OctetSeqS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>OctetSeqS_8h</filename>
  </compound>
  <compound kind="file">
    <name>operation_details.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>operation__details_8cpp</filename>
    <includes id="operation__details_8h" name="operation_details.h" local="yes" imported="no">operation_details.h</includes>
    <includes id="Stub_8h" name="Stub.h" local="yes" imported="no">Stub.h</includes>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">TypeCode.h</includes>
    <includes id="ORB__Constants_8h" name="ORB_Constants.h" local="yes" imported="no">ORB_Constants.h</includes>
    <includes id="DynamicC_8h" name="DynamicC.h" local="yes" imported="no">DynamicC.h</includes>
    <includes id="Exception__Data_8h" name="Exception_Data.h" local="yes" imported="no">Exception_Data.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="operation__details_8i" name="operation_details.i" local="yes" imported="no">tao/operation_details.i</includes>
  </compound>
  <compound kind="file">
    <name>operation_details.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>operation__details_8h</filename>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="Service__Context_8h" name="Service_Context.h" local="yes" imported="no">Service_Context.h</includes>
    <includes id="target__specification_8h" name="target_specification.h" local="yes" imported="no">target_specification.h</includes>
    <namespace>Dynamic</namespace>
    <namespace>TAO</namespace>
    <class kind="class">TAO_Operation_Details</class>
  </compound>
  <compound kind="file">
    <name>operation_details.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>operation__details_8i</filename>
  </compound>
  <compound kind="file">
    <name>ORB.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORB_8cpp</filename>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">ORB.h</includes>
    <includes id="ORB__Table_8h" name="ORB_Table.h" local="yes" imported="no">ORB_Table.h</includes>
    <includes id="Connector__Registry_8h" name="Connector_Registry.h" local="yes" imported="no">Connector_Registry.h</includes>
    <includes id="IOR__Parser_8h" name="IOR_Parser.h" local="yes" imported="no">IOR_Parser.h</includes>
    <includes id="Stub_8h" name="Stub.h" local="yes" imported="no">Stub.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="TAO__Internal_8h" name="TAO_Internal.h" local="yes" imported="no">TAO_Internal.h</includes>
    <includes id="NVList_8h" name="NVList.h" local="yes" imported="no">NVList.h</includes>
    <includes id="Dynamic__Adapter_8h" name="Dynamic_Adapter.h" local="yes" imported="no">Dynamic_Adapter.h</includes>
    <includes id="Profile_8h" name="Profile.h" local="yes" imported="no">Profile.h</includes>
    <includes id="default__ports_8h" name="default_ports.h" local="yes" imported="no">default_ports.h</includes>
    <includes id="ORBInitInfo_8h" name="ORBInitInfo.h" local="yes" imported="no">ORBInitInfo.h</includes>
    <includes id="ORBInitializer__Registry_8h" name="ORBInitializer_Registry.h" local="yes" imported="no">ORBInitializer_Registry.h</includes>
    <includes id="TAO__Singleton__Manager_8h" name="TAO_Singleton_Manager.h" local="yes" imported="no">TAO_Singleton_Manager.h</includes>
    <includes id="Policy__Manager_8h" name="Policy_Manager.h" local="yes" imported="no">Policy_Manager.h</includes>
    <includes id="Valuetype__Adapter_8h" name="Valuetype_Adapter.h" local="yes" imported="no">Valuetype_Adapter.h</includes>
    <includes id="IFR__Client__Adapter_8h" name="IFR_Client_Adapter.h" local="yes" imported="no">IFR_Client_Adapter.h</includes>
    <includes id="CodecFactory__ORBInitializer_8h" name="CodecFactory_ORBInitializer.h" local="yes" imported="no">CodecFactory_ORBInitializer.h</includes>
    <includes id="TypeCodeFactory__Adapter_8h" name="TypeCodeFactory_Adapter.h" local="yes" imported="no">TypeCodeFactory_Adapter.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">CDR.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="default__environment_8h" name="default_environment.h" local="yes" imported="no">default_environment.h</includes>
    <includes id="PICurrent__ORBInitializer_8h" name="PICurrent_ORBInitializer.h" local="yes" imported="no">PICurrent_ORBInitializer.h</includes>
    <includes id="ORB_8i" name="ORB.i" local="yes" imported="no">ORB.i</includes>
    <member kind="function">
      <type>void</type>
      <name>TAO_unexpected_exception_handler</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>ior_prefix</name>
      <anchor>a0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>int</type>
      <name>orb_init_count</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ORB.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORB_8h</filename>
    <includes id="UserException_8h" name="UserException.h" local="yes" imported="no">UserException.h</includes>
    <includes id="orb__typesC_8h" name="orb_typesC.h" local="yes" imported="no">orb_typesC.h</includes>
    <includes id="objectid_8h" name="objectid.h" local="yes" imported="no">objectid.h</includes>
    <includes id="Policy__ForwardC_8h" name="Policy_ForwardC.h" local="yes" imported="no">Policy_ForwardC.h</includes>
    <includes id="CORBA__methods_8h" name="CORBA_methods.h" local="yes" imported="no">CORBA_methods.h</includes>
    <includes id="VarOut__T_8h" name="VarOut_T.h" local="yes" imported="no">VarOut_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <namespace>TAO::ORB</namespace>
    <class kind="interface">CORBA::ORB</class>
    <class kind="exception">CORBA::ORB::InvalidName</class>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; ServiceInformation &gt;</type>
      <name>ServiceInformation_var</name>
      <anchor>a134</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; ServiceInformation, ServiceInformation_var &gt;</type>
      <name>ServiceInformation_out</name>
      <anchor>a135</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueFactoryBase *</type>
      <name>ValueFactory</name>
      <anchor>a136</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UShort</type>
      <name>ServiceType</name>
      <anchor>a137</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Var_T&lt; Request &gt;</type>
      <name>Request_var</name>
      <anchor>a138</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Out_T&lt; Request, Request_var &gt;</type>
      <name>Request_out</name>
      <anchor>a139</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Var_T&lt; ORB &gt;</type>
      <name>ORB_var</name>
      <anchor>a140</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Out_T&lt; ORB, ORB_var &gt;</type>
      <name>ORB_out</name>
      <anchor>a141</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::Short</type>
      <name>ValueModifier</name>
      <anchor>a142</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TAO_Service_ID</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_SERVICEID_NAMESERVICE</name>
      <anchor>a15a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_SERVICEID_TRADINGSERVICE</name>
      <anchor>a15a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_SERVICEID_IMPLREPOSERVICE</name>
      <anchor>a15a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_SERVICEID_INTERFACEREPOSERVICE</name>
      <anchor>a15a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_SERVICEID_MCASTSERVER</name>
      <anchor>a15a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init_orb_globals</name>
      <anchor>a0</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ORB.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORB_8i</filename>
  </compound>
  <compound kind="file">
    <name>ORB_Constants.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORB__Constants_8h</filename>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_DEFAULT_MINOR_CODE</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_MAX_MINOR_CODE</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_TAG_UIOP_PROFILE</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_TAG_SHMEM_PROFILE</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_TAG_DIOP_PROFILE</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_TAG_UIPMC_PROFILE</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_TAG_SCIOP_PROFILE</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_TAG_NSKFS_PROFILE</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_TAG_NSKPW_PROFILE</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>IPDSFIELD_DSCP_DEFAULT</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_INVOCATION_LOCATION_FORWARD_MINOR_CODE</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_INVOCATION_SEND_REQUEST_MINOR_CODE</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_POA_DISCARDING</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_POA_HOLDING</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_UNHANDLED_SERVER_CXX_EXCEPTION</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_INVOCATION_RECV_REQUEST_MINOR_CODE</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_CONNECTOR_REGISTRY_NO_USABLE_PROTOCOL</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_MPROFILE_CREATION_ERROR</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_TIMEOUT_CONNECT_MINOR_CODE</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_TIMEOUT_SEND_MINOR_CODE</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_TIMEOUT_RECV_MINOR_CODE</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_IMPLREPO_MINOR_CODE</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_ACCEPTOR_REGISTRY_OPEN_LOCATION_CODE</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_ORB_CORE_INIT_LOCATION_CODE</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_POLICY_NARROW_CODE</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_GUARD_FAILURE</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_POA_BEING_DESTROYED</name>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_POA_INACTIVE</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_CONNECTOR_REGISTRY_INIT_LOCATION_CODE</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_AMH_REPLY_LOCATION_CODE</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_RTCORBA_THREAD_CREATION_LOCATION_CODE</name>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_TWOWAY_RESPONSE_FLAG</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ULong</type>
      <name>OMGVMCID</name>
      <anchor>a143</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>VMCID</name>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>MAX_MINOR_CODE</name>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>VPVID</name>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_SVC_CONTEXT_ALIGN</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ORB_Core.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORB__Core_8cpp</filename>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="ORB__Table_8h" name="ORB_Table.h" local="yes" imported="no">ORB_Table.h</includes>
    <includes id="TAO__Internal_8h" name="TAO_Internal.h" local="yes" imported="no">TAO_Internal.h</includes>
    <includes id="default__server_8h" name="default_server.h" local="yes" imported="no">default_server.h</includes>
    <includes id="Profile_8h" name="Profile.h" local="yes" imported="no">Profile.h</includes>
    <includes id="Stub_8h" name="Stub.h" local="yes" imported="no">Stub.h</includes>
    <includes id="LF__Follower_8h" name="LF_Follower.h" local="yes" imported="no">LF_Follower.h</includes>
    <includes id="Leader__Follower_8h" name="Leader_Follower.h" local="yes" imported="no">Leader_Follower.h</includes>
    <includes id="LF__Event__Loop__Thread__Helper_8h" name="LF_Event_Loop_Thread_Helper.h" local="yes" imported="no">LF_Event_Loop_Thread_Helper.h</includes>
    <includes id="Connector__Registry_8h" name="Connector_Registry.h" local="yes" imported="no">Connector_Registry.h</includes>
    <includes id="Sync__Strategies_8h" name="Sync_Strategies.h" local="yes" imported="no">Sync_Strategies.h</includes>
    <includes id="Object__Loader_8h" name="Object_Loader.h" local="yes" imported="no">Object_Loader.h</includes>
    <includes id="ObjectIdListC_8h" name="ObjectIdListC.h" local="yes" imported="no">ObjectIdListC.h</includes>
    <includes id="BiDir__Adapter_8h" name="BiDir_Adapter.h" local="yes" imported="no">BiDir_Adapter.h</includes>
    <includes id="Collocation__Resolver_8h" name="Collocation_Resolver.h" local="yes" imported="no">Collocation_Resolver.h</includes>
    <includes id="Flushing__Strategy_8h" name="Flushing_Strategy.h" local="yes" imported="no">Flushing_Strategy.h</includes>
    <includes id="Request__Dispatcher_8h" name="Request_Dispatcher.h" local="yes" imported="no">Request_Dispatcher.h</includes>
    <includes id="Stub__Factory_8h" name="Stub_Factory.h" local="yes" imported="no">Stub_Factory.h</includes>
    <includes id="Thread__Lane__Resources_8h" name="Thread_Lane_Resources.h" local="yes" imported="no">Thread_Lane_Resources.h</includes>
    <includes id="Thread__Lane__Resources__Manager_8h" name="Thread_Lane_Resources_Manager.h" local="yes" imported="no">Thread_Lane_Resources_Manager.h</includes>
    <includes id="TSS__Resources_8h" name="TSS_Resources.h" local="yes" imported="no">TSS_Resources.h</includes>
    <includes id="Protocols__Hooks_8h" name="Protocols_Hooks.h" local="yes" imported="no">Protocols_Hooks.h</includes>
    <includes id="IORInterceptor__Adapter_8h" name="IORInterceptor_Adapter.h" local="yes" imported="no">IORInterceptor_Adapter.h</includes>
    <includes id="IORInterceptor__Adapter__Factory_8h" name="IORInterceptor_Adapter_Factory.h" local="yes" imported="no">IORInterceptor_Adapter_Factory.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="TAOC_8h" name="TAOC.h" local="yes" imported="no">TAOC.h</includes>
    <includes id="Endpoint__Selector__Factory_8h" name="Endpoint_Selector_Factory.h" local="yes" imported="no">Endpoint_Selector_Factory.h</includes>
    <includes id="Client__Strategy__Factory_8h" name="Client_Strategy_Factory.h" local="yes" imported="no">Client_Strategy_Factory.h</includes>
    <includes id="Adapter__Factory_8h" name="Adapter_Factory.h" local="yes" imported="no">Adapter_Factory.h</includes>
    <includes id="Adapter_8h" name="Adapter.h" local="yes" imported="no">Adapter.h</includes>
    <includes id="GUIResource__Factory_8h" name="GUIResource_Factory.h" local="yes" imported="no">GUIResource_Factory.h</includes>
    <includes id="ClientRequestInfo_8h" name="ClientRequestInfo.h" local="yes" imported="no">ClientRequestInfo.h</includes>
    <includes id="ORB__Core_8i" name="ORB_Core.i" local="yes" imported="no">ORB_Core.i</includes>
    <member kind="function">
      <type>CORBA::Environment &amp;</type>
      <name>TAO_default_environment</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export TAO_ORB_Core *</type>
      <name>TAO_ORB_Core_instance</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ORB_Core.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORB__Core_8h</filename>
    <includes id="Resource__Factory_8h" name="Resource_Factory.h" local="yes" imported="no">tao/Resource_Factory.h</includes>
    <includes id="Collocation__Strategy_8h" name="Collocation_Strategy.h" local="yes" imported="no">tao/Collocation_Strategy.h</includes>
    <includes id="params_8h" name="params.h" local="yes" imported="no">tao/params.h</includes>
    <includes id="ORB__Constants_8h" name="ORB_Constants.h" local="yes" imported="no">tao/ORB_Constants.h</includes>
    <includes id="PolicyFactory__Registry_8h" name="PolicyFactory_Registry.h" local="yes" imported="no">tao/PolicyFactory_Registry.h</includes>
    <includes id="Parser__Registry_8h" name="Parser_Registry.h" local="yes" imported="no">tao/Parser_Registry.h</includes>
    <includes id="ORBInitializer__Registry_8h" name="ORBInitializer_Registry.h" local="yes" imported="no">tao/ORBInitializer_Registry.h</includes>
    <includes id="Service__Callbacks_8h" name="Service_Callbacks.h" local="yes" imported="no">tao/Service_Callbacks.h</includes>
    <includes id="Fault__Tolerance__Service_8h" name="Fault_Tolerance_Service.h" local="yes" imported="no">tao/Fault_Tolerance_Service.h</includes>
    <includes id="Cleanup__Func__Registry_8h" name="Cleanup_Func_Registry.h" local="yes" imported="no">tao/Cleanup_Func_Registry.h</includes>
    <includes id="Object__Ref__Table_8h" name="Object_Ref_Table.h" local="yes" imported="no">tao/Object_Ref_Table.h</includes>
    <includes id="ObjectKey__Table_8h" name="ObjectKey_Table.h" local="yes" imported="no">tao/ObjectKey_Table.h</includes>
    <includes id="Messaging__SyncScopeC_8h" name="Messaging_SyncScopeC.h" local="yes" imported="no">tao/Messaging_SyncScopeC.h</includes>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">tao/Object.h</includes>
    <includes id="Invocation__Utils_8h" name="Invocation_Utils.h" local="yes" imported="no">tao/Invocation_Utils.h</includes>
    <includes id="Adapter__Registry_8h" name="Adapter_Registry.h" local="yes" imported="no">tao/Adapter_Registry.h</includes>
    <includes id="Interceptor__List_8h" name="Interceptor_List.h" local="yes" imported="no">Interceptor_List.h</includes>
    <includes id="PICurrent_8h" name="PICurrent.h" local="yes" imported="no">PICurrent.h</includes>
    <namespace>TAO</namespace>
    <namespace>CORBA</namespace>
    <namespace>IOP</namespace>
    <namespace>PortableInterceptor</namespace>
    <class kind="class">TAO_ORB_Core_TSS_Resources</class>
    <class kind="class">TAO_ORB_Core</class>
    <class kind="class">TAO_ORB_Core_Static_Resources</class>
    <member kind="function">
      <type>TAO_Export TAO_ORB_Core *</type>
      <name>TAO_ORB_Core_instance</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ORB_Core.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORB__Core_8i</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_OC_RETRIEVE</name>
      <anchor>a0</anchor>
      <arglist>(member)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ORB_Core_Auto_Ptr.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORB__Core__Auto__Ptr_8cpp</filename>
    <includes id="ORB__Core__Auto__Ptr_8h" name="ORB_Core_Auto_Ptr.h" local="yes" imported="no">ORB_Core_Auto_Ptr.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="ORB__Core__Auto__Ptr_8inl" name="ORB_Core_Auto_Ptr.inl" local="yes" imported="no">ORB_Core_Auto_Ptr.inl</includes>
  </compound>
  <compound kind="file">
    <name>ORB_Core_Auto_Ptr.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORB__Core__Auto__Ptr_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <class kind="class">TAO_ORB_Core_Auto_Ptr</class>
  </compound>
  <compound kind="file">
    <name>ORB_Core_Auto_Ptr.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORB__Core__Auto__Ptr_8inl</filename>
  </compound>
  <compound kind="file">
    <name>ORB_Table.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORB__Table_8cpp</filename>
    <includes id="ORB__Table_8h" name="ORB_Table.h" local="yes" imported="no">ORB_Table.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="TAO__Singleton_8h" name="TAO_Singleton.h" local="yes" imported="no">TAO_Singleton.h</includes>
    <includes id="ORB__Table_8inl" name="ORB_Table.inl" local="yes" imported="no">ORB_Table.inl</includes>
  </compound>
  <compound kind="file">
    <name>ORB_Table.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORB__Table_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::ORB_Table</class>
  </compound>
  <compound kind="file">
    <name>ORB_Table.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORB__Table_8inl</filename>
  </compound>
  <compound kind="file">
    <name>orb_types.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>orb__types_8pidl</filename>
    <namespace>CORBA</namespace>
    <member kind="typedef">
      <type>string</type>
      <name>ORBid</name>
      <anchor>a144</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>string</type>
      <name>Identifier</name>
      <anchor>a145</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>string</type>
      <name>RepositoryId</name>
      <anchor>a146</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>orb_typesA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>orb__typesA_8cpp</filename>
    <includes id="orb__typesC_8h" name="orb_typesC.h" local="yes" imported="no">orb_typesC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="String__TypeCode_8h" name="String_TypeCode.h" local="yes" imported="no">tao/String_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <namespace>CORBA</namespace>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_ORBid</name>
      <anchor>a0</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/ORBid:1.0&quot;,&quot;ORBid&quot;,&amp;CORBA::_tc_string)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ORBid</name>
      <anchor>a147</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_Flags</name>
      <anchor>a2</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/Flags:1.0&quot;,&quot;Flags&quot;,&amp;CORBA::_tc_ulong)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_Flags</name>
      <anchor>a148</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_Identifier</name>
      <anchor>a4</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/Identifier:1.0&quot;,&quot;Identifier&quot;,&amp;CORBA::_tc_string)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_Identifier</name>
      <anchor>a149</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_RepositoryId</name>
      <anchor>a6</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/RepositoryId:1.0&quot;,&quot;RepositoryId&quot;,&amp;CORBA::_tc_string)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_RepositoryId</name>
      <anchor>a150</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>orb_typesC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>orb__typesC_8cpp</filename>
    <includes id="orb__typesC_8h" name="orb_typesC.h" local="yes" imported="no">orb_typesC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>orb_typesC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>orb__typesC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_var</type>
      <name>ORBid_var</name>
      <anchor>a151</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_out</type>
      <name>ORBid_out</name>
      <anchor>a152</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::ULong_out</type>
      <name>Flags_out</name>
      <anchor>a153</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_var</type>
      <name>Identifier_var</name>
      <anchor>a154</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_out</type>
      <name>Identifier_out</name>
      <anchor>a155</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_var</type>
      <name>RepositoryId_var</name>
      <anchor>a156</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_out</type>
      <name>RepositoryId_out</name>
      <anchor>a157</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>orb_typesS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>orb__typesS_8h</filename>
  </compound>
  <compound kind="file">
    <name>orbconf.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>orbconf_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_INVALID_PRIORITY</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_REACTOR</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_NULL_LOCK_REACTOR</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYNCH_MUTEX</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYNCH_RECURSIVE_MUTEX</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYNCH_RW_MUTEX</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYNCH_CONDITION</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POA_NO_TIMESTAMP</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_USE_DOTTED_DECIMAL_ADDRESSES</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_SERVER_ACTIVE_OBJECT_MAP_SIZE</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_SERVER_POA_MAP_SIZE</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_SERVICE_RESOLUTION_TIMEOUT</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_SERVER_PORT</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_MAXBUFSIZE</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_MAX_TRANSPORT_REREAD_ATTEMPTS</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_MAXIMUM_NATIVE_TYPE_SIZE</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_CONNECTION_CACHING_STRATEGY</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_CONNECTION_PURGING_STRATEGY</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_PURGE_PERCENT</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_CONNECTION_CACHE_MAXIMUM</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_NAMESPACE_STORAGE_CLASS</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_NAMESPACE_INLINE_FUNCTION</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_NO_COPY_OCTET_SEQUENCES</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_EXCEPTIONS</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_USE_EXCEPTIONS</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_ENCAP_BYTE_ORDER</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RETSIGTYPE</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_VPRINTF</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_NESTED_MACRO</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_ROOTPOA_NAME</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_LANE</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_DIOP</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_UIOP</name>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_SHMIOP</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_NAMED_RT_MUTEXES</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_MINIMUM_POA</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_MINIMUM_POA_MAPS</name>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_CORBA_MESSAGING</name>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DISABLE_CORBA_MESSAGING_POLICIES</name>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_REBIND_POLICY</name>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_SYNC_SCOPE_POLICY</name>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_PRIORITY_POLICIES</name>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_REQUEST_START_TIME_POLICY</name>
      <anchor>a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_REQUEST_END_TIME_POLICY</name>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_REPLY_START_TIME_POLICY</name>
      <anchor>a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_REPLY_END_TIME_POLICY</name>
      <anchor>a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_RELATIVE_REQUEST_TIMEOUT_POLICY</name>
      <anchor>a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_RELATIVE_ROUNDTRIP_TIMEOUT_POLICY</name>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_CONNECTION_TIMEOUT_POLICY</name>
      <anchor>a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_ROUTING_POLICY</name>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_MAX_HOPS_POLICY</name>
      <anchor>a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_QUEUE_ORDER_POLICY</name>
      <anchor>a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_BUFFERING_CONSTRAINT_POLICY</name>
      <anchor>a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_AMI_CALLBACK</name>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_EXTENDED_FT_INTERCEPTORS</name>
      <anchor>a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_RT_SERVER_PROTOCOL_POLICY_TYPE</name>
      <anchor>a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_POLICY_DEFAULT_SCOPE</name>
      <anchor>a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEF_GIOP_MAJOR</name>
      <anchor>a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEF_GIOP_MINOR</name>
      <anchor>a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_CONNECTION_HANDLER_STACK_BUF_SIZE</name>
      <anchor>a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_STD_PROFILE_COMPONENTS</name>
      <anchor>a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_IOR_SIZE</name>
      <anchor>a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_THREAD_PER_CONNECTION_TIMEOUT</name>
      <anchor>a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_USE_MUXED_TRANSPORT_MUX_STRATEGY</name>
      <anchor>a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_INIT_REFERENCE_INITIALIZER</name>
      <anchor>a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_USE_LAZY_RESOURCE_USAGE_STRATEGY</name>
      <anchor>a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_USE_LOCAL_MEMORY_POOL</name>
      <anchor>a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TAO_Cached_Policy_Type</name>
      <anchor>a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_UNCACHED</name>
      <anchor>a97a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_PRIORITY_MODEL</name>
      <anchor>a97a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_THREADPOOL</name>
      <anchor>a97a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_RT_SERVER_PROTOCOL</name>
      <anchor>a97a75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_RT_CLIENT_PROTOCOL</name>
      <anchor>a97a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_RT_PRIVATE_CONNECTION</name>
      <anchor>a97a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_RT_PRIORITY_BANDED_CONNECTION</name>
      <anchor>a97a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_LIFESPAN</name>
      <anchor>a97a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_ID_UNIQUENESS</name>
      <anchor>a97a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_ID_ASSIGNMENT</name>
      <anchor>a97a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_THREAD</name>
      <anchor>a97a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_IMPLICIT_ACTIVATION</name>
      <anchor>a97a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_SERVANT_RETENTION</name>
      <anchor>a97a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_REQUEST_PROCESSING</name>
      <anchor>a97a85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_SYNC_SCOPE</name>
      <anchor>a97a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_RELATIVE_ROUNDTRIP_TIMEOUT</name>
      <anchor>a97a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_BUFFERING_CONSTRAINT</name>
      <anchor>a97a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_CONNECTION_TIMEOUT</name>
      <anchor>a97a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_BIDIRECTIONAL_GIOP</name>
      <anchor>a97a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CACHED_POLICY_MAX_CACHED</name>
      <anchor>a97a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TAO_Policy_Scope</name>
      <anchor>a98</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_POLICY_OBJECT_SCOPE</name>
      <anchor>a98a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_POLICY_THREAD_SCOPE</name>
      <anchor>a98a93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_POLICY_ORB_SCOPE</name>
      <anchor>a98a94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_POLICY_POA_SCOPE</name>
      <anchor>a98a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_POLICY_CLIENT_EXPOSED</name>
      <anchor>a98a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>TAO_DEFAULT_ORB_TABLE_SIZE</name>
      <anchor>a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>TAO_RD_TABLE_SIZE</name>
      <anchor>a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>TAO_DEFAULT_POLICY_FACTORY_REGISTRY_SIZE</name>
      <anchor>a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>TAO_DEFAULT_OBJECT_REF_TABLE_SIZE</name>
      <anchor>a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>TAO_DEFAULT_VALUE_FACTORY_TABLE_SIZE</name>
      <anchor>a71</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ORBInitializer.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORBInitializer_8pidl</filename>
    <namespace>PortableInterceptor</namespace>
    <class kind="interface">PortableInterceptor::ORBInitializer</class>
  </compound>
  <compound kind="file">
    <name>ORBInitializer_Registry.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORBInitializer__Registry_8cpp</filename>
    <includes id="ORBInitializer__Registry_8h" name="ORBInitializer_Registry.h" local="yes" imported="no">ORBInitializer_Registry.h</includes>
    <includes id="PortableInterceptorC_8h" name="PortableInterceptorC.h" local="yes" imported="no">PortableInterceptorC.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">ORB.h</includes>
    <includes id="TAO__Singleton_8h" name="TAO_Singleton.h" local="yes" imported="no">TAO_Singleton.h</includes>
    <includes id="ORB__Constants_8h" name="ORB_Constants.h" local="yes" imported="no">ORB_Constants.h</includes>
    <includes id="TAO__Singleton__Manager_8h" name="TAO_Singleton_Manager.h" local="yes" imported="no">TAO_Singleton_Manager.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
  </compound>
  <compound kind="file">
    <name>ORBInitializer_Registry.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORBInitializer__Registry_8h</filename>
    <includes id="CORBA__methods_8h" name="CORBA_methods.h" local="yes" imported="no">CORBA_methods.h</includes>
    <includes id="Objref__VarOut__T_8h" name="Objref_VarOut_T.h" local="yes" imported="no">Objref_VarOut_T.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">Environment.h</includes>
    <includes id="default__environment_8h" name="default_environment.h" local="yes" imported="no">default_environment.h</includes>
    <namespace>PortableInterceptor</namespace>
    <namespace>TAO</namespace>
    <class kind="class">TAO::ORBInitializer_Registry</class>
    <member kind="typedef">
      <type>ORBInitializer *</type>
      <name>ORBInitializer_ptr</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; ORBInitializer &gt;</type>
      <name>ORBInitializer_var</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ORBInitInfo *</type>
      <name>ORBInitInfo_ptr</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>register_orb_initializer</name>
      <anchor>a86</anchor>
      <arglist>(ORBInitializer_ptr init ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ORBInitializerA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORBInitializerA_8cpp</filename>
    <includes id="ORBInitializerC_8h" name="ORBInitializerC.h" local="yes" imported="no">ORBInitializerC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Objref__TypeCode_8h" name="Objref_TypeCode.h" local="yes" imported="no">tao/Objref_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Impl__T_8h" name="Any_Impl_T.h" local="yes" imported="no">tao/Any_Impl_T.h</includes>
    <namespace>PortableInterceptor</namespace>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ORBInitializer &gt;::to_object</name>
      <anchor>a97</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ORBInitializer &gt;::marshal_value</name>
      <anchor>a98</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ORBInitializer &gt;::demarshal_value</name>
      <anchor>a99</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, PortableInterceptor::ORBInitializer_ptr _tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, PortableInterceptor::ORBInitializer_ptr *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, PortableInterceptor::ORBInitializer_ptr &amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Objref&lt; char const *, CORBA::tk_local_interface, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_PortableInterceptor_ORBInitializer</name>
      <anchor>a0</anchor>
      <arglist>(&quot;IDL:omg.org/PortableInterceptor/ORBInitializer:1.0&quot;,&quot;ORBInitializer&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ORBInitializer</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ORBInitializerC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORBInitializerC_8cpp</filename>
    <includes id="ORBInitializerC_8h" name="ORBInitializerC.h" local="yes" imported="no">ORBInitializerC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>ORBInitializerC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORBInitializerC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">tao/Object.h</includes>
    <includes id="Objref__VarOut__T_8h" name="Objref_VarOut_T.h" local="yes" imported="no">tao/Objref_VarOut_T.h</includes>
    <namespace>PortableInterceptor</namespace>
    <namespace>TAO</namespace>
    <class kind="interface">PortableInterceptor::ORBInitializer</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::PortableInterceptor::ORBInitializer &gt;</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_ORBINITINFO__VAR_OUT_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_ORBINITIALIZER__VAR_OUT_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_ORBINITIALIZER_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_ORBINITIALIZER__TRAITS_CH_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; ORBInitInfo &gt;</type>
      <name>ORBInitInfo_var</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; ORBInitInfo &gt;</type>
      <name>ORBInitInfo_out</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; ORBInitializer &gt;</type>
      <name>ORBInitializer_out</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::ORBInitializer_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::ORBInitializer_ptr *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a10</anchor>
      <arglist>(const CORBA::Any &amp;, PortableInterceptor::ORBInitializer_ptr &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ORBInitializerS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORBInitializerS_8h</filename>
  </compound>
  <compound kind="file">
    <name>ORBInitInfo.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORBInitInfo_8cpp</filename>
    <includes id="ORBInitInfo_8h" name="ORBInitInfo.h" local="yes" imported="no">ORBInitInfo.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">ORB.h</includes>
    <includes id="CodecFactory_8h" name="CodecFactory.h" local="yes" imported="no">CodecFactory.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="PICurrent_8h" name="PICurrent.h" local="yes" imported="no">PICurrent.h</includes>
    <includes id="ORBInitInfo_8inl" name="ORBInitInfo.inl" local="yes" imported="no">ORBInitInfo.inl</includes>
  </compound>
  <compound kind="file">
    <name>ORBInitInfo.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORBInitInfo_8h</filename>
    <includes id="ORBInitInfoC_8h" name="ORBInitInfoC.h" local="yes" imported="no">ORBInitInfoC.h</includes>
    <includes id="LocalObject_8h" name="LocalObject.h" local="yes" imported="no">LocalObject.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO_ORBInitInfo</class>
    <class kind="struct">TAO::Objref_Traits&lt; TAO_ORBInitInfo &gt;</class>
    <member kind="typedef">
      <type>TAO_ORBInitInfo *</type>
      <name>TAO_ORBInitInfo_ptr</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; TAO_ORBInitInfo &gt;</type>
      <name>TAO_ORBInitInfo_var</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; TAO_ORBInitInfo &gt;</type>
      <name>TAO_ORBInitInfo_out</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ORBInitInfo.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORBInitInfo_8inl</filename>
  </compound>
  <compound kind="file">
    <name>ORBInitInfo.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORBInitInfo_8pidl</filename>
    <includes id="StringSeq_8pidl" name="StringSeq.pidl" local="yes" imported="yes">StringSeq.pidl</includes>
    <includes id="IOP__Codec_8pidl" name="IOP_Codec.pidl" local="yes" imported="yes">IOP_Codec.pidl</includes>
    <includes id="PI__Forward_8pidl" name="PI_Forward.pidl" local="yes" imported="yes">PI_Forward.pidl</includes>
    <includes id="Policy_8pidl" name="Policy.pidl" local="yes" imported="yes">Policy.pidl</includes>
    <namespace>PortableInterceptor</namespace>
    <class kind="interface">PortableInterceptor::ORBInitInfo</class>
    <class kind="exception">PortableInterceptor::ORBInitInfo::DuplicateName</class>
    <class kind="exception">PortableInterceptor::ORBInitInfo::InvalidName</class>
  </compound>
  <compound kind="file">
    <name>ORBInitInfoA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORBInitInfoA_8cpp</filename>
    <includes id="ORBInitInfoC_8h" name="ORBInitInfoC.h" local="yes" imported="no">ORBInitInfoC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Objref__TypeCode_8h" name="Objref_TypeCode.h" local="yes" imported="no">tao/Objref_TypeCode.h</includes>
    <includes id="String__TypeCode_8h" name="String_TypeCode.h" local="yes" imported="no">tao/String_TypeCode.h</includes>
    <includes id="Struct__TypeCode_8h" name="Struct_TypeCode.h" local="yes" imported="no">tao/Struct_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Impl__T_8h" name="Any_Impl_T.h" local="yes" imported="no">tao/Any_Impl_T.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>PortableInterceptor</namespace>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ORBInitInfo &gt;::to_object</name>
      <anchor>a100</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ORBInitInfo &gt;::marshal_value</name>
      <anchor>a101</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ORBInitInfo &gt;::demarshal_value</name>
      <anchor>a102</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, PortableInterceptor::ORBInitInfo_ptr _tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, PortableInterceptor::ORBInitInfo_ptr *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a12</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, PortableInterceptor::ORBInitInfo_ptr &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; PortableInterceptor::ORBInitInfo::DuplicateName &gt;::marshal_value</name>
      <anchor>a103</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; PortableInterceptor::ORBInitInfo::DuplicateName &gt;::demarshal_value</name>
      <anchor>a104</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const PortableInterceptor::ORBInitInfo::DuplicateName &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, PortableInterceptor::ORBInitInfo::DuplicateName *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a17</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, PortableInterceptor::ORBInitInfo::DuplicateName *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a18</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const PortableInterceptor::ORBInitInfo::DuplicateName *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; PortableInterceptor::ORBInitInfo::InvalidName &gt;::marshal_value</name>
      <anchor>a105</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; PortableInterceptor::ORBInitInfo::InvalidName &gt;::demarshal_value</name>
      <anchor>a106</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a21</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const PortableInterceptor::ORBInitInfo::InvalidName &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a22</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, PortableInterceptor::ORBInitInfo::InvalidName *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a23</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, PortableInterceptor::ORBInitInfo::InvalidName *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a24</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const PortableInterceptor::ORBInitInfo::InvalidName *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_PortableInterceptor_ORBInitInfo_ObjectId</name>
      <anchor>a0</anchor>
      <arglist>(&quot;IDL:omg.org/PortableInterceptor/ORBInitInfo/ObjectId:1.0&quot;,&quot;ObjectId&quot;,&amp;CORBA::_tc_string)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_fields_PortableInterceptor_ORBInitInfo_DuplicateName</name>
      <anchor>a1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_PortableInterceptor_ORBInitInfo_DuplicateName</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::tk_except,&quot;IDL:omg.org/PortableInterceptor/ORBInitInfo/DuplicateName:1.0&quot;,&quot;DuplicateName&quot;, _tao_fields_PortableInterceptor_ORBInitInfo_DuplicateName, 1)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *const</type>
      <name>_tao_fields_PortableInterceptor_ORBInitInfo_InvalidName</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_PortableInterceptor_ORBInitInfo_InvalidName</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::tk_except,&quot;IDL:omg.org/PortableInterceptor/ORBInitInfo/InvalidName:1.0&quot;,&quot;InvalidName&quot;, _tao_fields_PortableInterceptor_ORBInitInfo_InvalidName, 0)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Objref&lt; char const *, CORBA::tk_local_interface, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_PortableInterceptor_ORBInitInfo</name>
      <anchor>a5</anchor>
      <arglist>(&quot;IDL:omg.org/PortableInterceptor/ORBInitInfo:1.0&quot;,&quot;ORBInitInfo&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ORBInitInfo</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ORBInitInfoC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORBInitInfoC_8cpp</filename>
    <includes id="ORBInitInfoC_8h" name="ORBInitInfoC.h" local="yes" imported="no">ORBInitInfoC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>ORBInitInfoC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORBInitInfoC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">tao/Object.h</includes>
    <includes id="Objref__VarOut__T_8h" name="Objref_VarOut_T.h" local="yes" imported="no">tao/Objref_VarOut_T.h</includes>
    <includes id="StringSeqC_8h" name="StringSeqC.h" local="yes" imported="no">tao/StringSeqC.h</includes>
    <includes id="IOP__CodecC_8h" name="IOP_CodecC.h" local="yes" imported="no">tao/IOP_CodecC.h</includes>
    <includes id="PI__ForwardC_8h" name="PI_ForwardC.h" local="yes" imported="no">tao/PI_ForwardC.h</includes>
    <includes id="PolicyC_8h" name="PolicyC.h" local="yes" imported="no">tao/PolicyC.h</includes>
    <namespace>PortableInterceptor</namespace>
    <namespace>TAO</namespace>
    <class kind="interface">PortableInterceptor::ORBInitInfo</class>
    <class kind="exception">PortableInterceptor::ORBInitInfo::DuplicateName</class>
    <class kind="exception">PortableInterceptor::ORBInitInfo::InvalidName</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::PortableInterceptor::ORBInitInfo &gt;</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_CLIENTREQUESTINTERCEPTOR__VAR_OUT_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_SERVERREQUESTINTERCEPTOR__VAR_OUT_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_IORINTERCEPTOR__VAR_OUT_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_POLICYFACTORY__VAR_OUT_CH_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_ORBINITINFO__VAR_OUT_CH_</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_ORBINITINFO_CH_</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_ORBINITINFO_DUPLICATENAME_CH_</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_ORBINITINFO_INVALIDNAME_CH_</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_ORBINITINFO__TRAITS_CH_</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClientRequestInterceptor *</type>
      <name>ClientRequestInterceptor_ptr</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; ClientRequestInterceptor &gt;</type>
      <name>ClientRequestInterceptor_var</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; ClientRequestInterceptor &gt;</type>
      <name>ClientRequestInterceptor_out</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ServerRequestInterceptor *</type>
      <name>ServerRequestInterceptor_ptr</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; ServerRequestInterceptor &gt;</type>
      <name>ServerRequestInterceptor_var</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; ServerRequestInterceptor &gt;</type>
      <name>ServerRequestInterceptor_out</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; IORInterceptor &gt;</type>
      <name>IORInterceptor_var</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; IORInterceptor &gt;</type>
      <name>IORInterceptor_out</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PolicyFactory *</type>
      <name>PolicyFactory_ptr</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; PolicyFactory &gt;</type>
      <name>PolicyFactory_var</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; PolicyFactory &gt;</type>
      <name>PolicyFactory_out</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a21</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::ORBInitInfo_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a22</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::ORBInitInfo_ptr *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a23</anchor>
      <arglist>(const CORBA::Any &amp;, PortableInterceptor::ORBInitInfo_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a24</anchor>
      <arglist>(CORBA::Any &amp;, const PortableInterceptor::ORBInitInfo::DuplicateName &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a25</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::ORBInitInfo::DuplicateName *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a26</anchor>
      <arglist>(const CORBA::Any &amp;, PortableInterceptor::ORBInitInfo::DuplicateName *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a27</anchor>
      <arglist>(const CORBA::Any &amp;, const PortableInterceptor::ORBInitInfo::DuplicateName *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a28</anchor>
      <arglist>(CORBA::Any &amp;, const PortableInterceptor::ORBInitInfo::InvalidName &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a29</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::ORBInitInfo::InvalidName *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a30</anchor>
      <arglist>(const CORBA::Any &amp;, PortableInterceptor::ORBInitInfo::InvalidName *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a31</anchor>
      <arglist>(const CORBA::Any &amp;, const PortableInterceptor::ORBInitInfo::InvalidName *&amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ORBInitInfoS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ORBInitInfoS_8h</filename>
  </compound>
  <compound kind="file">
    <name>ParameterMode.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ParameterMode_8pidl</filename>
    <namespace>CORBA</namespace>
    <member kind="enumeration">
      <name>ParameterMode</name>
      <anchor>a411</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_IN</name>
      <anchor>a412a158</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_OUT</name>
      <anchor>a412a159</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_INOUT</name>
      <anchor>a412a160</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParameterModeA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ParameterModeA_8cpp</filename>
    <includes id="ParameterModeC_8h" name="ParameterModeC.h" local="yes" imported="no">ParameterModeC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Enum__TypeCode_8h" name="Enum_TypeCode.h" local="yes" imported="no">tao/Enum_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Basic__Impl__T_8h" name="Any_Basic_Impl_T.h" local="yes" imported="no">tao/Any_Basic_Impl_T.h</includes>
    <namespace>CORBA</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::ParameterMode _tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::ParameterMode &amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>char const *const</type>
      <name>_tao_enumerators_CORBA_ParameterMode</name>
      <anchor>a0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Enum&lt; char const *, char const *const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_ParameterMode</name>
      <anchor>a1</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/ParameterMode:1.0&quot;,&quot;ParameterMode&quot;, _tao_enumerators_CORBA_ParameterMode, 3)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ParameterMode</name>
      <anchor>a161</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParameterModeC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ParameterModeC_8cpp</filename>
    <includes id="ParameterModeC_8h" name="ParameterModeC.h" local="yes" imported="no">ParameterModeC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, CORBA::ParameterMode _tao_enumerator)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::ParameterMode &amp;_tao_enumerator)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParameterModeC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ParameterModeC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParameterMode &amp;</type>
      <name>ParameterMode_out</name>
      <anchor>a162</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ParameterMode</name>
      <anchor>a412</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_IN</name>
      <anchor>a412a158</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_OUT</name>
      <anchor>a412a159</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_INOUT</name>
      <anchor>a412a160</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::ParameterMode)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::ParameterMode &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_OutputCDR &amp;, CORBA::ParameterMode)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a5</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::ParameterMode &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParameterModeS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ParameterModeS_8h</filename>
  </compound>
  <compound kind="file">
    <name>params.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>params_8cpp</filename>
    <includes id="params_8h" name="params.h" local="yes" imported="no">tao/params.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <includes id="params_8i" name="params.i" local="yes" imported="no">tao/params.i</includes>
  </compound>
  <compound kind="file">
    <name>params.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>params_8h</filename>
    <includes id="objectid_8h" name="objectid.h" local="yes" imported="no">objectid.h</includes>
    <includes id="CORBA__String_8h" name="CORBA_String.h" local="yes" imported="no">CORBA_String.h</includes>
    <class kind="class">TAO_ORB_Parameters</class>
    <member kind="typedef">
      <type>ACE_Unbounded_Queue&lt; ACE_CString &gt;</type>
      <name>TAO_EndpointSet</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Unbounded_Queue_Const_Iterator&lt; ACE_CString &gt;</type>
      <name>TAO_EndpointSetIterator</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Manager_Ex&lt; ACE_CString, ACE_CString, ACE_Hash&lt; ACE_CString &gt;, ACE_Equal_To&lt; ACE_CString &gt;, ACE_Null_Mutex &gt;</type>
      <name>TAO_EndpointMap</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>params.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>params_8i</filename>
  </compound>
  <compound kind="file">
    <name>Parser_Registry.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Parser__Registry_8cpp</filename>
    <includes id="Parser__Registry_8h" name="Parser_Registry.h" local="yes" imported="no">tao/Parser_Registry.h</includes>
    <includes id="IOR__Parser_8h" name="IOR_Parser.h" local="yes" imported="no">tao/IOR_Parser.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <includes id="Parser__Registry_8i" name="Parser_Registry.i" local="yes" imported="no">tao/Parser_Registry.i</includes>
  </compound>
  <compound kind="file">
    <name>Parser_Registry.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Parser__Registry_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <class kind="class">TAO_Parser_Registry</class>
  </compound>
  <compound kind="file">
    <name>Parser_Registry.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Parser__Registry_8i</filename>
  </compound>
  <compound kind="file">
    <name>PI_Forward.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PI__Forward_8pidl</filename>
    <includes id="OctetSeq_8pidl" name="OctetSeq.pidl" local="yes" imported="yes">OctetSeq.pidl</includes>
    <includes id="StringSeq_8pidl" name="StringSeq.pidl" local="yes" imported="yes">StringSeq.pidl</includes>
    <namespace>PortableInterceptor</namespace>
    <member kind="typedef">
      <type>string</type>
      <name>ServerId</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>string</type>
      <name>ORBId</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::StringSeq</type>
      <name>AdapterName</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::OctetSeq</type>
      <name>ObjectId</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long</type>
      <name>AdapterManagerId</name>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>AdapterState</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>SlotId</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>ReplyStatus</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PI_ForwardC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PI__ForwardC_8cpp</filename>
    <includes id="PI__ForwardC_8h" name="PI_ForwardC.h" local="yes" imported="no">PI_ForwardC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="String__TypeCode_8h" name="String_TypeCode.h" local="yes" imported="no">tao/String_TypeCode.h</includes>
    <namespace>TAO</namespace>
    <namespace>PortableInterceptor</namespace>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_PortableInterceptor_ServerId</name>
      <anchor>a0</anchor>
      <arglist>(&quot;IDL:omg.org/PortableInterceptor/ServerId:1.0&quot;,&quot;ServerId&quot;,&amp;CORBA::_tc_string)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServerId</name>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_PortableInterceptor_ORBId</name>
      <anchor>a2</anchor>
      <arglist>(&quot;IDL:omg.org/PortableInterceptor/ORBId:1.0&quot;,&quot;ORBId&quot;,&amp;CORBA::_tc_string)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ORBId</name>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_PortableInterceptor_AdapterName</name>
      <anchor>a4</anchor>
      <arglist>(&quot;IDL:omg.org/PortableInterceptor/AdapterName:1.0&quot;,&quot;AdapterName&quot;,&amp;CORBA::_tc_StringSeq)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_AdapterName</name>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_PortableInterceptor_ObjectId</name>
      <anchor>a6</anchor>
      <arglist>(&quot;IDL:omg.org/PortableInterceptor/ObjectId:1.0&quot;,&quot;ObjectId&quot;,&amp;CORBA::_tc_OctetSeq)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ObjectId</name>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_PortableInterceptor_AdapterManagerId</name>
      <anchor>a8</anchor>
      <arglist>(&quot;IDL:omg.org/PortableInterceptor/AdapterManagerId:1.0&quot;,&quot;AdapterManagerId&quot;,&amp;CORBA::_tc_long)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_AdapterManagerId</name>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_PortableInterceptor_AdapterState</name>
      <anchor>a10</anchor>
      <arglist>(&quot;IDL:omg.org/PortableInterceptor/AdapterState:1.0&quot;,&quot;AdapterState&quot;,&amp;CORBA::_tc_short)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_AdapterState</name>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_PortableInterceptor_SlotId</name>
      <anchor>a12</anchor>
      <arglist>(&quot;IDL:omg.org/PortableInterceptor/SlotId:1.0&quot;,&quot;SlotId&quot;,&amp;CORBA::_tc_ulong)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_SlotId</name>
      <anchor>a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_PortableInterceptor_ReplyStatus</name>
      <anchor>a14</anchor>
      <arglist>(&quot;IDL:omg.org/PortableInterceptor/ReplyStatus:1.0&quot;,&quot;ReplyStatus&quot;,&amp;CORBA::_tc_short)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ReplyStatus</name>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PI_ForwardC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PI__ForwardC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="OctetSeqC_8h" name="OctetSeqC.h" local="yes" imported="no">tao/OctetSeqC.h</includes>
    <includes id="StringSeqC_8h" name="StringSeqC.h" local="yes" imported="no">tao/StringSeqC.h</includes>
    <namespace>PortableInterceptor</namespace>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_var</type>
      <name>ServerId_var</name>
      <anchor>a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_out</type>
      <name>ServerId_out</name>
      <anchor>a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_var</type>
      <name>ORBId_var</name>
      <anchor>a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_out</type>
      <name>ORBId_out</name>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::StringSeq_var</type>
      <name>AdapterName_var</name>
      <anchor>a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::StringSeq_out</type>
      <name>AdapterName_out</name>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::OctetSeq_var</type>
      <name>ObjectId_var</name>
      <anchor>a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::OctetSeq_out</type>
      <name>ObjectId_out</name>
      <anchor>a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::Long_out</type>
      <name>AdapterManagerId_out</name>
      <anchor>a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::Short_out</type>
      <name>AdapterState_out</name>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::ULong_out</type>
      <name>SlotId_out</name>
      <anchor>a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::Short_out</type>
      <name>ReplyStatus_out</name>
      <anchor>a55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PICurrent.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PICurrent_8cpp</filename>
    <includes id="PICurrent_8h" name="PICurrent.h" local="yes" imported="no">PICurrent.h</includes>
    <includes id="PICurrent_8inl" name="PICurrent.inl" local="yes" imported="no">PICurrent.inl</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="TAO__Server__Request_8h" name="TAO_Server_Request.h" local="yes" imported="no">TAO_Server_Request.h</includes>
    <includes id="PICurrent__Copy__Callback_8h" name="PICurrent_Copy_Callback.h" local="yes" imported="no">PICurrent_Copy_Callback.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
  </compound>
  <compound kind="file">
    <name>PICurrent.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PICurrent_8h</filename>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">orbconf.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">Any.h</includes>
    <includes id="PortableInterceptorC_8h" name="PortableInterceptorC.h" local="yes" imported="no">PortableInterceptorC.h</includes>
    <includes id="LocalObject_8h" name="LocalObject.h" local="yes" imported="no">LocalObject.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::PICurrent</class>
    <class kind="class">TAO::PICurrent_Impl</class>
  </compound>
  <compound kind="file">
    <name>PICurrent.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PICurrent_8inl</filename>
  </compound>
  <compound kind="file">
    <name>PICurrent_Copy_Callback.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PICurrent__Copy__Callback_8cpp</filename>
    <includes id="PICurrent__Copy__Callback_8h" name="PICurrent_Copy_Callback.h" local="yes" imported="no">PICurrent_Copy_Callback.h</includes>
    <includes id="PICurrent_8h" name="PICurrent.h" local="yes" imported="no">PICurrent.h</includes>
  </compound>
  <compound kind="file">
    <name>PICurrent_Copy_Callback.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PICurrent__Copy__Callback_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">TAO_Export.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">orbconf.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::PICurrent_Copy_Callback</class>
  </compound>
  <compound kind="file">
    <name>PICurrent_ORBInitializer.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PICurrent__ORBInitializer_8cpp</filename>
    <includes id="PICurrent__ORBInitializer_8h" name="PICurrent_ORBInitializer.h" local="yes" imported="no">PICurrent_ORBInitializer.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="ORBInitInfo_8h" name="ORBInitInfo.h" local="yes" imported="no">ORBInitInfo.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
  </compound>
  <compound kind="file">
    <name>PICurrent_ORBInitializer.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PICurrent__ORBInitializer_8h</filename>
    <includes id="LocalObject_8h" name="LocalObject.h" local="yes" imported="no">LocalObject.h</includes>
    <includes id="ORBInitializerC_8h" name="ORBInitializerC.h" local="yes" imported="no">ORBInitializerC.h</includes>
    <class kind="class">TAO_PICurrent_ORBInitializer</class>
  </compound>
  <compound kind="file">
    <name>Pluggable_Messaging.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Pluggable__Messaging_8cpp</filename>
    <includes id="Pluggable__Messaging_8h" name="Pluggable_Messaging.h" local="yes" imported="no">Pluggable_Messaging.h</includes>
  </compound>
  <compound kind="file">
    <name>Pluggable_Messaging.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Pluggable__Messaging_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">TAO_Pluggable_Messaging</class>
  </compound>
  <compound kind="file">
    <name>Pluggable_Messaging_Utils.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Pluggable__Messaging__Utils_8cpp</filename>
    <includes id="Pluggable__Messaging__Utils_8h" name="Pluggable_Messaging_Utils.h" local="yes" imported="no">Pluggable_Messaging_Utils.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="Pluggable__Messaging__Utils_8i" name="Pluggable_Messaging_Utils.i" local="yes" imported="no">tao/Pluggable_Messaging_Utils.i</includes>
  </compound>
  <compound kind="file">
    <name>Pluggable_Messaging_Utils.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Pluggable__Messaging__Utils_8h</filename>
    <includes id="IOP__IORC_8h" name="IOP_IORC.h" local="yes" imported="no">tao/IOP_IORC.h</includes>
    <class kind="class">TAO_Pluggable_Reply_Params_Base</class>
    <class kind="class">TAO_Pluggable_Reply_Params</class>
    <member kind="enumeration">
      <name>TAO_Pluggable_Header_Type</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_REQUEST_HEADER</name>
      <anchor>a16a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_LOCATE_REQUEST_HEADER</name>
      <anchor>a16a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TAO_Pluggable_Message_Type</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_REQUEST</name>
      <anchor>a17a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_REPLY</name>
      <anchor>a17a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_CANCELREQUEST</name>
      <anchor>a17a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_LOCATEREQUEST</name>
      <anchor>a17a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_LOCATEREPLY</name>
      <anchor>a17a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_CLOSECONNECTION</name>
      <anchor>a17a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_MESSAGERROR</name>
      <anchor>a17a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_FRAGMENT</name>
      <anchor>a17a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TAO_Pluggable_Message_Exception_Type</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_NO_EXCEPTION</name>
      <anchor>a18a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_USER_EXCEPTION</name>
      <anchor>a18a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_SYSTEM_EXCEPTION</name>
      <anchor>a18a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_LOCATION_FORWARD</name>
      <anchor>a18a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_LOCATION_FORWARD_PERM</name>
      <anchor>a18a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PLUGGABLE_MESSAGE_NEEDS_ADDRESSING_MODE</name>
      <anchor>a18a15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Pluggable_Messaging_Utils.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Pluggable__Messaging__Utils_8i</filename>
  </compound>
  <compound kind="file">
    <name>Policy.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Policy_8pidl</filename>
    <includes id="UShortSeq_8pidl" name="UShortSeq.pidl" local="yes" imported="yes">UShortSeq.pidl</includes>
    <includes id="Current_8pidl" name="Current.pidl" local="yes" imported="yes">Current.pidl</includes>
    <includes id="Policy__Forward_8pidl" name="Policy_Forward.pidl" local="yes" imported="yes">Policy_Forward.pidl</includes>
    <namespace>CORBA</namespace>
    <class kind="exception">CORBA::PolicyError</class>
    <class kind="exception">CORBA::InvalidPolicies</class>
    <class kind="interface">CORBA::Policy</class>
    <class kind="interface">CORBA::PolicyManager</class>
    <class kind="interface">CORBA::PolicyCurrent</class>
    <member kind="typedef">
      <type>short</type>
      <name>PolicyErrorCode</name>
      <anchor>a163</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PolicyErrorCode</type>
      <name>BAD_POLICY</name>
      <anchor>a164</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PolicyErrorCode</type>
      <name>UNSUPPORTED_POLICY</name>
      <anchor>a165</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PolicyErrorCode</type>
      <name>BAD_POLICY_TYPE</name>
      <anchor>a166</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PolicyErrorCode</type>
      <name>BAD_POLICY_VALUE</name>
      <anchor>a167</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PolicyErrorCode</type>
      <name>UNSUPPORTED_POLICY_VALUE</name>
      <anchor>a168</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Policy_Forward.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Policy__Forward_8pidl</filename>
    <namespace>CORBA</namespace>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>PolicyType</name>
      <anchor>a169</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; Policy &gt;</type>
      <name>PolicyList</name>
      <anchor>a170</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; PolicyType &gt;</type>
      <name>PolicyTypeSeq</name>
      <anchor>a171</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SetOverrideType</name>
      <anchor>a413</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SET_OVERRIDE</name>
      <anchor>a414a172</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADD_OVERRIDE</name>
      <anchor>a414a173</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Policy_ForwardA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Policy__ForwardA_8cpp</filename>
    <includes id="Policy__ForwardC_8h" name="Policy_ForwardC.h" local="yes" imported="no">Policy_ForwardC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Enum__TypeCode_8h" name="Enum_TypeCode.h" local="yes" imported="no">tao/Enum_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <includes id="Any__Basic__Impl__T_8h" name="Any_Basic_Impl_T.h" local="yes" imported="no">tao/Any_Basic_Impl_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::PolicyList &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::PolicyList *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a16</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::PolicyList *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a17</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::PolicyList *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::PolicyTypeSeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a19</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::PolicyTypeSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a20</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::PolicyTypeSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a21</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::PolicyTypeSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a22</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::SetOverrideType _tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a23</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::SetOverrideType &amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_PolicyType</name>
      <anchor>a0</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/PolicyType:1.0&quot;,&quot;PolicyType&quot;,&amp;CORBA::_tc_ulong)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_PolicyType</name>
      <anchor>a174</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>extern::CORBA::TypeCode_ptr const</type>
      <name>_tc_Policy</name>
      <anchor>a175</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_PolicyList_0</name>
      <anchor>a44</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_Policy, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_PolicyList_0</name>
      <anchor>a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_PolicyList</name>
      <anchor>a5</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/PolicyList:1.0&quot;,&quot;PolicyList&quot;,&amp;TAO::TypeCode::tc_CORBA_PolicyList_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_PolicyList</name>
      <anchor>a176</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_PolicyTypeSeq_0</name>
      <anchor>a46</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_PolicyType, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_PolicyTypeSeq_0</name>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_PolicyTypeSeq</name>
      <anchor>a9</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/PolicyTypeSeq:1.0&quot;,&quot;PolicyTypeSeq&quot;,&amp;TAO::TypeCode::tc_CORBA_PolicyTypeSeq_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_PolicyTypeSeq</name>
      <anchor>a177</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>char const *const</type>
      <name>_tao_enumerators_CORBA_SetOverrideType</name>
      <anchor>a11</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Enum&lt; char const *, char const *const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_SetOverrideType</name>
      <anchor>a12</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/SetOverrideType:1.0&quot;,&quot;SetOverrideType&quot;, _tao_enumerators_CORBA_SetOverrideType, 2)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_SetOverrideType</name>
      <anchor>a178</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Policy_ForwardC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Policy__ForwardC_8cpp</filename>
    <includes id="Policy__ForwardC_8h" name="Policy_ForwardC.h" local="yes" imported="no">Policy_ForwardC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYLIST_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYTYPESEQ_CS_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::PolicyList &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::PolicyList &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::PolicyTypeSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a5</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::PolicyTypeSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, CORBA::SetOverrideType _tao_enumerator)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::SetOverrideType &amp;_tao_enumerator)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Policy_ForwardC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Policy__ForwardC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Objref__VarOut__T_8h" name="Objref_VarOut_T.h" local="yes" imported="no">tao/Objref_VarOut_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">CORBA::PolicyList</class>
    <class kind="class">CORBA::PolicyTypeSeq</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::CORBA::Policy &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::CORBA::PolicyCurrent &gt;</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICY__VAR_OUT_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYLIST_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYTYPESEQ_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYCURRENT__VAR_OUT_CH_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICY__TRAITS_CH_</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYCURRENT__TRAITS_CH_</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::ULong_out</type>
      <name>PolicyType_out</name>
      <anchor>a179</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Policy *</type>
      <name>Policy_ptr</name>
      <anchor>a180</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; Policy &gt;</type>
      <name>Policy_var</name>
      <anchor>a181</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; Policy &gt;</type>
      <name>Policy_out</name>
      <anchor>a182</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_MngSeq_Var_T&lt; PolicyList, TAO_Object_Manager&lt; Policy, Policy_var &gt; &gt;</type>
      <name>PolicyList_var</name>
      <anchor>a183</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_MngSeq_Out_T&lt; PolicyList, PolicyList_var, TAO_Object_Manager&lt; Policy, Policy_var &gt; &gt;</type>
      <name>PolicyList_out</name>
      <anchor>a184</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; PolicyTypeSeq, PolicyType &gt;</type>
      <name>PolicyTypeSeq_var</name>
      <anchor>a185</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; PolicyTypeSeq, PolicyTypeSeq_var, PolicyType &gt;</type>
      <name>PolicyTypeSeq_out</name>
      <anchor>a186</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PolicyCurrent *</type>
      <name>PolicyCurrent_ptr</name>
      <anchor>a187</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; PolicyCurrent &gt;</type>
      <name>PolicyCurrent_var</name>
      <anchor>a188</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; PolicyCurrent &gt;</type>
      <name>PolicyCurrent_out</name>
      <anchor>a189</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetOverrideType &amp;</type>
      <name>SetOverrideType_out</name>
      <anchor>a190</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SetOverrideType</name>
      <anchor>a414</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SET_OVERRIDE</name>
      <anchor>a414a172</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADD_OVERRIDE</name>
      <anchor>a414a173</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a19</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::Policy_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a20</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::Policy_ptr *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a21</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::Policy *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a22</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::PolicyList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a23</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::PolicyList *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a24</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::PolicyList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a25</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::PolicyList *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a26</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::PolicyTypeSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a27</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::PolicyTypeSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a28</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::PolicyTypeSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a29</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::PolicyTypeSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a30</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::SetOverrideType)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a31</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::SetOverrideType &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a32</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::Policy_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a33</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::Policy_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a34</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::PolicyList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a35</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::PolicyList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a36</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::PolicyTypeSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a37</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::PolicyTypeSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a38</anchor>
      <arglist>(TAO_OutputCDR &amp;, CORBA::SetOverrideType)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a39</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::SetOverrideType &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Policy_ForwardS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Policy__ForwardS_8h</filename>
  </compound>
  <compound kind="file">
    <name>Policy_Manager.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Policy__Manager_8cpp</filename>
    <includes id="Policy__Manager_8h" name="Policy_Manager.h" local="yes" imported="no">Policy_Manager.h</includes>
    <includes id="TSS__Resources_8h" name="TSS_Resources.h" local="yes" imported="no">tao/TSS_Resources.h</includes>
    <includes id="Policy__Manager_8i" name="Policy_Manager.i" local="yes" imported="no">tao/Policy_Manager.i</includes>
  </compound>
  <compound kind="file">
    <name>Policy_Manager.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Policy__Manager_8h</filename>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <includes id="PolicyC_8h" name="PolicyC.h" local="yes" imported="no">tao/PolicyC.h</includes>
    <includes id="LocalObject_8h" name="LocalObject.h" local="yes" imported="no">tao/LocalObject.h</includes>
    <includes id="Policy__Set_8h" name="Policy_Set.h" local="yes" imported="no">tao/Policy_Set.h</includes>
    <class kind="class">TAO_Policy_Manager</class>
    <class kind="class">TAO_Policy_Current_Impl</class>
    <class kind="class">TAO_Policy_Current</class>
  </compound>
  <compound kind="file">
    <name>Policy_Manager.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Policy__Manager_8i</filename>
  </compound>
  <compound kind="file">
    <name>Policy_Set.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Policy__Set_8cpp</filename>
    <includes id="Policy__Set_8h" name="Policy_Set.h" local="yes" imported="no">Policy_Set.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">Environment.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="Policy__Set_8i" name="Policy_Set.i" local="yes" imported="no">Policy_Set.i</includes>
  </compound>
  <compound kind="file">
    <name>Policy_Set.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Policy__Set_8h</filename>
    <includes id="PolicyC_8h" name="PolicyC.h" local="yes" imported="no">tao/PolicyC.h</includes>
    <class kind="class">TAO_Policy_Set</class>
  </compound>
  <compound kind="file">
    <name>Policy_Set.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Policy__Set_8i</filename>
  </compound>
  <compound kind="file">
    <name>Policy_Validator.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Policy__Validator_8cpp</filename>
    <includes id="Policy__Validator_8h" name="Policy_Validator.h" local="yes" imported="no">Policy_Validator.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">Environment.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
  </compound>
  <compound kind="file">
    <name>Policy_Validator.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Policy__Validator_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">TAO_Policy_Validator</class>
  </compound>
  <compound kind="file">
    <name>PolicyA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PolicyA_8cpp</filename>
    <includes id="PolicyC_8h" name="PolicyC.h" local="yes" imported="no">PolicyC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Objref__TypeCode_8h" name="Objref_TypeCode.h" local="yes" imported="no">tao/Objref_TypeCode.h</includes>
    <includes id="Struct__TypeCode_8h" name="Struct_TypeCode.h" local="yes" imported="no">tao/Struct_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Impl__T_8h" name="Any_Impl_T.h" local="yes" imported="no">tao/Any_Impl_T.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; CORBA::PolicyError &gt;::demarshal_value</name>
      <anchor>a107</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::PolicyError &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::PolicyError *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a16</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::PolicyError *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a17</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::PolicyError *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; CORBA::InvalidPolicies &gt;::demarshal_value</name>
      <anchor>a108</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a19</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::InvalidPolicies &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a20</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::InvalidPolicies *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a21</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::InvalidPolicies *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a22</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::InvalidPolicies *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; CORBA::Policy &gt;::to_object</name>
      <anchor>a109</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a24</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::Policy_ptr _tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a25</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::Policy_ptr *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a26</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::Policy_ptr &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; CORBA::PolicyManager &gt;::to_object</name>
      <anchor>a110</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; CORBA::PolicyManager &gt;::marshal_value</name>
      <anchor>a111</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; CORBA::PolicyManager &gt;::demarshal_value</name>
      <anchor>a112</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a30</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::PolicyManager_ptr _tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a31</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::PolicyManager_ptr *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a32</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::PolicyManager_ptr &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; CORBA::PolicyCurrent &gt;::to_object</name>
      <anchor>a113</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; CORBA::PolicyCurrent &gt;::marshal_value</name>
      <anchor>a114</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; CORBA::PolicyCurrent &gt;::demarshal_value</name>
      <anchor>a115</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a36</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::PolicyCurrent_ptr _tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a37</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::PolicyCurrent_ptr *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a38</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::PolicyCurrent_ptr &amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_PolicyErrorCode</name>
      <anchor>a0</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/PolicyErrorCode:1.0&quot;,&quot;PolicyErrorCode&quot;,&amp;CORBA::_tc_short)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_PolicyErrorCode</name>
      <anchor>a191</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_fields_CORBA_PolicyError</name>
      <anchor>a2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_PolicyError</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::tk_except,&quot;IDL:omg.org/CORBA/PolicyError:1.0&quot;,&quot;PolicyError&quot;, _tao_fields_CORBA_PolicyError, 1)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_PolicyError</name>
      <anchor>a192</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_fields_CORBA_InvalidPolicies</name>
      <anchor>a5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_InvalidPolicies</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::tk_except,&quot;IDL:omg.org/CORBA/InvalidPolicies:1.0&quot;,&quot;InvalidPolicies&quot;, _tao_fields_CORBA_InvalidPolicies, 1)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_InvalidPolicies</name>
      <anchor>a193</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Objref&lt; char const *, CORBA::tk_objref, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_Policy</name>
      <anchor>a8</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/Policy:1.0&quot;,&quot;Policy&quot;)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Objref&lt; char const *, CORBA::tk_local_interface, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_PolicyManager</name>
      <anchor>a9</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/PolicyManager:1.0&quot;,&quot;PolicyManager&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_PolicyManager</name>
      <anchor>a194</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Objref&lt; char const *, CORBA::tk_local_interface, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_PolicyCurrent</name>
      <anchor>a11</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/PolicyCurrent:1.0&quot;,&quot;PolicyCurrent&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_PolicyCurrent</name>
      <anchor>a195</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PolicyC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PolicyC_8cpp</filename>
    <includes id="PolicyC_8h" name="PolicyC.h" local="yes" imported="no">PolicyC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Exception__Data_8h" name="Exception_Data.h" local="yes" imported="no">tao/Exception_Data.h</includes>
    <includes id="Invocation__Adapter_8h" name="Invocation_Adapter.h" local="yes" imported="no">tao/Invocation_Adapter.h</includes>
    <includes id="Object__T_8h" name="Object_T.h" local="yes" imported="no">tao/Object_T.h</includes>
    <includes id="Basic__Arguments_8h" name="Basic_Arguments.h" local="yes" imported="no">tao/Basic_Arguments.h</includes>
    <includes id="Object__Argument__T_8h" name="Object_Argument_T.h" local="yes" imported="no">tao/Object_Argument_T.h</includes>
    <includes id="PolicyC_8inl" name="PolicyC.inl" local="yes" imported="no">PolicyC.inl</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::Policy &gt;</class>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICY__ARG_TRAITS_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::PolicyError &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::PolicyError &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::InvalidPolicies &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a5</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::InvalidPolicies &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::Policy_ptr _tao_objref)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::Policy_ptr &amp;_tao_objref)</arglist>
    </member>
    <member kind="variable">
      <type>TAO::Collocation_Proxy_Broker *(*</type>
      <name>CORBA__TAO_Policy_Proxy_Broker_Factory_function_pointer</name>
      <anchor>a1</anchor>
      <arglist>)(CORBA::Object_ptr obj)=0</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PolicyC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PolicyC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">tao/Object.h</includes>
    <includes id="Objref__VarOut__T_8h" name="Objref_VarOut_T.h" local="yes" imported="no">tao/Objref_VarOut_T.h</includes>
    <includes id="UShortSeqC_8h" name="UShortSeqC.h" local="yes" imported="no">tao/UShortSeqC.h</includes>
    <includes id="CurrentC_8h" name="CurrentC.h" local="yes" imported="no">tao/CurrentC.h</includes>
    <includes id="Policy__ForwardC_8h" name="Policy_ForwardC.h" local="yes" imported="no">tao/Policy_ForwardC.h</includes>
    <namespace>TAO</namespace>
    <namespace>CORBA</namespace>
    <class kind="exception">CORBA::PolicyError</class>
    <class kind="exception">CORBA::InvalidPolicies</class>
    <class kind="interface">CORBA::Policy</class>
    <class kind="interface">CORBA::PolicyManager</class>
    <class kind="interface">CORBA::PolicyCurrent</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::CORBA::PolicyManager &gt;</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYERROR_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_INVALIDPOLICIES_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICY_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYMANAGER__VAR_OUT_CH_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYMANAGER_CH_</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYCURRENT_CH_</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICYMANAGER__TRAITS_CH_</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::Short_out</type>
      <name>PolicyErrorCode_out</name>
      <anchor>a196</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PolicyManager *</type>
      <name>PolicyManager_ptr</name>
      <anchor>a197</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; PolicyManager &gt;</type>
      <name>PolicyManager_var</name>
      <anchor>a198</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; PolicyManager &gt;</type>
      <name>PolicyManager_out</name>
      <anchor>a199</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::PolicyError &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::PolicyError *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a15</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::PolicyError *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a16</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::PolicyError *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a17</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::InvalidPolicies &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::InvalidPolicies *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a19</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::InvalidPolicies *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a20</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::InvalidPolicies *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a21</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::Policy_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a22</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::Policy_ptr *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a23</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::Policy_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a24</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::PolicyManager_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a25</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::PolicyManager_ptr *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a26</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::PolicyManager_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a27</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::PolicyCurrent_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a28</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::PolicyCurrent_ptr *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a29</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::PolicyCurrent_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a30</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::PolicyError &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a31</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::PolicyError &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a32</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::InvalidPolicies &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a33</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::InvalidPolicies &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a34</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::Policy_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a35</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::Policy_ptr &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TAO::Collocation_Proxy_Broker *(*</type>
      <name>CORBA__TAO_Policy_Proxy_Broker_Factory_function_pointer</name>
      <anchor>a12</anchor>
      <arglist>)(CORBA::Object_ptr obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PolicyC.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PolicyC_8inl</filename>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLICY___CI_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PolicyFactory.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PolicyFactory_8pidl</filename>
    <includes id="Policy_8pidl" name="Policy.pidl" local="yes" imported="yes">Policy.pidl</includes>
    <namespace>PortableInterceptor</namespace>
    <class kind="interface">PortableInterceptor::PolicyFactory</class>
  </compound>
  <compound kind="file">
    <name>PolicyFactory_Registry.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PolicyFactory__Registry_8cpp</filename>
    <includes id="PolicyFactory__Registry_8h" name="PolicyFactory_Registry.h" local="yes" imported="no">PolicyFactory_Registry.h</includes>
    <includes id="PortableInterceptorC_8h" name="PortableInterceptorC.h" local="yes" imported="no">PortableInterceptorC.h</includes>
    <includes id="ORB__Constants_8h" name="ORB_Constants.h" local="yes" imported="no">ORB_Constants.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="PolicyC_8h" name="PolicyC.h" local="yes" imported="no">PolicyC.h</includes>
  </compound>
  <compound kind="file">
    <name>PolicyFactory_Registry.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PolicyFactory__Registry_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">Basic_Types.h</includes>
    <namespace>CORBA</namespace>
    <namespace>PortableInterceptor</namespace>
    <class kind="class">TAO_PolicyFactory_Registry</class>
  </compound>
  <compound kind="file">
    <name>PolicyFactoryA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PolicyFactoryA_8cpp</filename>
    <includes id="PolicyFactoryC_8h" name="PolicyFactoryC.h" local="yes" imported="no">PolicyFactoryC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Objref__TypeCode_8h" name="Objref_TypeCode.h" local="yes" imported="no">tao/Objref_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Impl__T_8h" name="Any_Impl_T.h" local="yes" imported="no">tao/Any_Impl_T.h</includes>
    <namespace>PortableInterceptor</namespace>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::PolicyFactory &gt;::to_object</name>
      <anchor>a116</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::PolicyFactory &gt;::marshal_value</name>
      <anchor>a117</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::PolicyFactory &gt;::demarshal_value</name>
      <anchor>a118</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, PortableInterceptor::PolicyFactory_ptr _tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, PortableInterceptor::PolicyFactory_ptr *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, PortableInterceptor::PolicyFactory_ptr &amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Objref&lt; char const *, CORBA::tk_local_interface, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_PortableInterceptor_PolicyFactory</name>
      <anchor>a0</anchor>
      <arglist>(&quot;IDL:omg.org/PortableInterceptor/PolicyFactory:1.0&quot;,&quot;PolicyFactory&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_PolicyFactory</name>
      <anchor>a56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PolicyFactoryC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PolicyFactoryC_8cpp</filename>
    <includes id="PolicyFactoryC_8h" name="PolicyFactoryC.h" local="yes" imported="no">PolicyFactoryC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>PolicyFactoryC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PolicyFactoryC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">tao/Object.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Objref__VarOut__T_8h" name="Objref_VarOut_T.h" local="yes" imported="no">tao/Objref_VarOut_T.h</includes>
    <includes id="PolicyC_8h" name="PolicyC.h" local="yes" imported="no">tao/PolicyC.h</includes>
    <namespace>PortableInterceptor</namespace>
    <namespace>TAO</namespace>
    <class kind="interface">PortableInterceptor::PolicyFactory</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::PortableInterceptor::PolicyFactory &gt;</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_POLICYFACTORY__VAR_OUT_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_POLICYFACTORY_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_POLICYFACTORY__TRAITS_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::PolicyFactory_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::PolicyFactory_ptr *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;, PortableInterceptor::PolicyFactory_ptr &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PolicyFactoryS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PolicyFactoryS_8h</filename>
  </compound>
  <compound kind="file">
    <name>PolicyS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PolicyS_8h</filename>
    <includes id="PolicyC_8h" name="PolicyC.h" local="yes" imported="no">tao/PolicyC.h</includes>
  </compound>
  <compound kind="file">
    <name>Pollable.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Pollable_8pidl</filename>
    <namespace>CORBA</namespace>
    <class kind="interface">CORBA::Pollable</class>
    <class kind="interface">CORBA::DIIPollable</class>
    <class kind="interface">CORBA::PollableSet</class>
    <class kind="exception">CORBA::PollableSet::NoPossiblePollable</class>
    <class kind="exception">CORBA::PollableSet::UnknownPollable</class>
  </compound>
  <compound kind="file">
    <name>PollableC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PollableC_8cpp</filename>
    <includes id="PollableC_8h" name="PollableC.h" local="yes" imported="no">PollableC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>PollableC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PollableC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">tao/Object.h</includes>
    <includes id="Objref__VarOut__T_8h" name="Objref_VarOut_T.h" local="yes" imported="no">tao/Objref_VarOut_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="interface">CORBA::Pollable</class>
    <class kind="interface">CORBA::DIIPollable</class>
    <class kind="interface">CORBA::PollableSet</class>
    <class kind="exception">CORBA::PollableSet::NoPossiblePollable</class>
    <class kind="exception">CORBA::PollableSet::UnknownPollable</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::CORBA::PollableSet &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::CORBA::Pollable &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::CORBA::DIIPollable &gt;</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLLABLESET__VAR_OUT_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLLABLE__VAR_OUT_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLLABLE_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_DIIPOLLABLE__VAR_OUT_CH_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_DIIPOLLABLE_CH_</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLLABLESET_CH_</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLLABLESET_NOPOSSIBLEPOLLABLE_CH_</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLLABLESET_UNKNOWNPOLLABLE_CH_</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLLABLESET__TRAITS_CH_</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_POLLABLE__TRAITS_CH_</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_DIIPOLLABLE__TRAITS_CH_</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PollableSet *</type>
      <name>PollableSet_ptr</name>
      <anchor>a200</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; PollableSet &gt;</type>
      <name>PollableSet_var</name>
      <anchor>a201</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; PollableSet &gt;</type>
      <name>PollableSet_out</name>
      <anchor>a202</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pollable *</type>
      <name>Pollable_ptr</name>
      <anchor>a203</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; Pollable &gt;</type>
      <name>Pollable_var</name>
      <anchor>a204</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; Pollable &gt;</type>
      <name>Pollable_out</name>
      <anchor>a205</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DIIPollable *</type>
      <name>DIIPollable_ptr</name>
      <anchor>a206</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; DIIPollable &gt;</type>
      <name>DIIPollable_var</name>
      <anchor>a207</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; DIIPollable &gt;</type>
      <name>DIIPollable_out</name>
      <anchor>a208</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PollableS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PollableS_8h</filename>
  </compound>
  <compound kind="file">
    <name>PortableInterceptor.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PortableInterceptor_8h</filename>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">orbconf.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TAO_INTERCEPTOR</name>
      <anchor>a0</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_INTERCEPTOR_CHECK</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_INTERCEPTOR_CHECK_RETURN</name>
      <anchor>a2</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_INTERCEPTOR_THROW</name>
      <anchor>a3</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_INTERCEPTOR_THROW_RETURN</name>
      <anchor>a4</anchor>
      <arglist>(X, Y)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PortableInterceptor.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PortableInterceptor_8pidl</filename>
    <includes id="PI__Forward_8pidl" name="PI_Forward.pidl" local="yes" imported="yes">PI_Forward.pidl</includes>
    <includes id="Current_8pidl" name="Current.pidl" local="yes" imported="yes">Current.pidl</includes>
    <includes id="Dynamic_8pidl" name="Dynamic.pidl" local="yes" imported="yes">Dynamic.pidl</includes>
    <includes id="Messaging__SyncScope_8pidl" name="Messaging_SyncScope.pidl" local="yes" imported="yes">Messaging_SyncScope.pidl</includes>
    <includes id="ORBInitializer_8pidl" name="ORBInitializer.pidl" local="yes" imported="yes">ORBInitializer.pidl</includes>
    <includes id="ORBInitInfo_8pidl" name="ORBInitInfo.pidl" local="yes" imported="yes">ORBInitInfo.pidl</includes>
    <includes id="InvalidSlot_8pidl" name="InvalidSlot.pidl" local="yes" imported="yes">InvalidSlot.pidl</includes>
    <includes id="ClientRequestInfo_8pidl" name="ClientRequestInfo.pidl" local="yes" imported="yes">ClientRequestInfo.pidl</includes>
    <includes id="ServerRequestInfo_8pidl" name="ServerRequestInfo.pidl" local="yes" imported="yes">ServerRequestInfo.pidl</includes>
    <includes id="PolicyFactory_8pidl" name="PolicyFactory.pidl" local="yes" imported="yes">PolicyFactory.pidl</includes>
    <namespace>PortableInterceptor</namespace>
    <class kind="interface">PortableInterceptor::Interceptor</class>
    <class kind="exception">PortableInterceptor::ForwardRequest</class>
    <class kind="interface">PortableInterceptor::Current</class>
    <class kind="interface">PortableInterceptor::ClientRequestInterceptor</class>
    <class kind="interface">PortableInterceptor::ServerRequestInterceptor</class>
    <member kind="variable">
      <type>const AdapterState</type>
      <name>HOLDING</name>
      <anchor>a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AdapterState</type>
      <name>ACTIVE</name>
      <anchor>a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AdapterState</type>
      <name>DISCARDING</name>
      <anchor>a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AdapterState</type>
      <name>INACTIVE</name>
      <anchor>a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AdapterState</type>
      <name>NON_EXISTENT</name>
      <anchor>a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ReplyStatus</type>
      <name>SUCCESSFUL</name>
      <anchor>a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ReplyStatus</type>
      <name>SYSTEM_EXCEPTION</name>
      <anchor>a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ReplyStatus</type>
      <name>USER_EXCEPTION</name>
      <anchor>a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ReplyStatus</type>
      <name>LOCATION_FORWARD</name>
      <anchor>a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ReplyStatus</type>
      <name>TRANSPORT_RETRY</name>
      <anchor>a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ReplyStatus</type>
      <name>UNKNOWN</name>
      <anchor>a67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PortableInterceptorA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PortableInterceptorA_8cpp</filename>
    <includes id="PortableInterceptorC_8h" name="PortableInterceptorC.h" local="yes" imported="no">PortableInterceptorC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Objref__TypeCode_8h" name="Objref_TypeCode.h" local="yes" imported="no">tao/Objref_TypeCode.h</includes>
    <includes id="String__TypeCode_8h" name="String_TypeCode.h" local="yes" imported="no">tao/String_TypeCode.h</includes>
    <includes id="Struct__TypeCode_8h" name="Struct_TypeCode.h" local="yes" imported="no">tao/Struct_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Impl__T_8h" name="Any_Impl_T.h" local="yes" imported="no">tao/Any_Impl_T.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>PortableInterceptor</namespace>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::Interceptor &gt;::to_object</name>
      <anchor>a119</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::Interceptor &gt;::marshal_value</name>
      <anchor>a120</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::Interceptor &gt;::demarshal_value</name>
      <anchor>a121</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, PortableInterceptor::Interceptor_ptr _tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, PortableInterceptor::Interceptor_ptr *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a16</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, PortableInterceptor::Interceptor_ptr &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; PortableInterceptor::ForwardRequest &gt;::demarshal_value</name>
      <anchor>a122</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const PortableInterceptor::ForwardRequest &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a19</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, PortableInterceptor::ForwardRequest *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a20</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, PortableInterceptor::ForwardRequest *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a21</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const PortableInterceptor::ForwardRequest *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::Current &gt;::to_object</name>
      <anchor>a123</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::Current &gt;::marshal_value</name>
      <anchor>a124</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::Current &gt;::demarshal_value</name>
      <anchor>a125</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a25</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, PortableInterceptor::Current_ptr _tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a26</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, PortableInterceptor::Current_ptr *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a27</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, PortableInterceptor::Current_ptr &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ClientRequestInterceptor &gt;::to_object</name>
      <anchor>a126</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ClientRequestInterceptor &gt;::marshal_value</name>
      <anchor>a127</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ClientRequestInterceptor &gt;::demarshal_value</name>
      <anchor>a128</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a31</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, PortableInterceptor::ClientRequestInterceptor_ptr _tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a32</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, PortableInterceptor::ClientRequestInterceptor_ptr *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a33</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, PortableInterceptor::ClientRequestInterceptor_ptr &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ServerRequestInterceptor &gt;::to_object</name>
      <anchor>a129</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ServerRequestInterceptor &gt;::marshal_value</name>
      <anchor>a130</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ServerRequestInterceptor &gt;::demarshal_value</name>
      <anchor>a131</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a37</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, PortableInterceptor::ServerRequestInterceptor_ptr _tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a38</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, PortableInterceptor::ServerRequestInterceptor_ptr *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a39</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, PortableInterceptor::ServerRequestInterceptor_ptr &amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Objref&lt; char const *, CORBA::tk_local_interface, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_PortableInterceptor_Interceptor</name>
      <anchor>a0</anchor>
      <arglist>(&quot;IDL:omg.org/PortableInterceptor/Interceptor:1.0&quot;,&quot;Interceptor&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_Interceptor</name>
      <anchor>a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_fields_PortableInterceptor_ForwardRequest</name>
      <anchor>a2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_PortableInterceptor_ForwardRequest</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::tk_except,&quot;IDL:omg.org/PortableInterceptor/ForwardRequest:1.0&quot;,&quot;ForwardRequest&quot;, _tao_fields_PortableInterceptor_ForwardRequest, 1)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ForwardRequest</name>
      <anchor>a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Objref&lt; char const *, CORBA::tk_local_interface, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_PortableInterceptor_Current</name>
      <anchor>a5</anchor>
      <arglist>(&quot;IDL:omg.org/PortableInterceptor/Current:1.0&quot;,&quot;Current&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_Current</name>
      <anchor>a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Objref&lt; char const *, CORBA::tk_local_interface, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_PortableInterceptor_ClientRequestInterceptor</name>
      <anchor>a7</anchor>
      <arglist>(&quot;IDL:omg.org/PortableInterceptor/ClientRequestInterceptor:1.0&quot;,&quot;ClientRequestInterceptor&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ClientRequestInterceptor</name>
      <anchor>a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Objref&lt; char const *, CORBA::tk_local_interface, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_PortableInterceptor_ServerRequestInterceptor</name>
      <anchor>a9</anchor>
      <arglist>(&quot;IDL:omg.org/PortableInterceptor/ServerRequestInterceptor:1.0&quot;,&quot;ServerRequestInterceptor&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServerRequestInterceptor</name>
      <anchor>a72</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PortableInterceptorC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PortableInterceptorC_8cpp</filename>
    <includes id="PortableInterceptorC_8h" name="PortableInterceptorC.h" local="yes" imported="no">PortableInterceptorC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const PortableInterceptor::ForwardRequest &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;strm, PortableInterceptor::ForwardRequest &amp;_tao_aggregate)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PortableInterceptorC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PortableInterceptorC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">tao/Object.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Objref__VarOut__T_8h" name="Objref_VarOut_T.h" local="yes" imported="no">tao/Objref_VarOut_T.h</includes>
    <includes id="PI__ForwardC_8h" name="PI_ForwardC.h" local="yes" imported="no">tao/PI_ForwardC.h</includes>
    <includes id="CurrentC_8h" name="CurrentC.h" local="yes" imported="no">tao/CurrentC.h</includes>
    <includes id="DynamicC_8h" name="DynamicC.h" local="yes" imported="no">tao/DynamicC.h</includes>
    <includes id="Messaging__SyncScopeC_8h" name="Messaging_SyncScopeC.h" local="yes" imported="no">tao/Messaging_SyncScopeC.h</includes>
    <includes id="ORBInitializerC_8h" name="ORBInitializerC.h" local="yes" imported="no">tao/ORBInitializerC.h</includes>
    <includes id="ORBInitInfoC_8h" name="ORBInitInfoC.h" local="yes" imported="no">tao/ORBInitInfoC.h</includes>
    <includes id="InvalidSlotC_8h" name="InvalidSlotC.h" local="yes" imported="no">tao/InvalidSlotC.h</includes>
    <includes id="ClientRequestInfoC_8h" name="ClientRequestInfoC.h" local="yes" imported="no">tao/ClientRequestInfoC.h</includes>
    <includes id="ServerRequestInfoC_8h" name="ServerRequestInfoC.h" local="yes" imported="no">tao/ServerRequestInfoC.h</includes>
    <includes id="PolicyFactoryC_8h" name="PolicyFactoryC.h" local="yes" imported="no">tao/PolicyFactoryC.h</includes>
    <includes id="IOP__CodecC_8h" name="IOP_CodecC.h" local="yes" imported="no">tao/IOP_CodecC.h</includes>
    <includes id="PolicyC_8h" name="PolicyC.h" local="yes" imported="no">tao/PolicyC.h</includes>
    <namespace>Dynamic</namespace>
    <namespace>PortableInterceptor</namespace>
    <namespace>TAO</namespace>
    <class kind="interface">PortableInterceptor::Interceptor</class>
    <class kind="exception">PortableInterceptor::ForwardRequest</class>
    <class kind="interface">PortableInterceptor::Current</class>
    <class kind="interface">PortableInterceptor::ClientRequestInterceptor</class>
    <class kind="interface">PortableInterceptor::ServerRequestInterceptor</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::PortableInterceptor::ClientRequestInterceptor &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::PortableInterceptor::ServerRequestInterceptor &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::PortableInterceptor::Interceptor &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::PortableInterceptor::Current &gt;</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_INTERCEPTOR__VAR_OUT_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_INTERCEPTOR_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_FORWARDREQUEST_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_CURRENT__VAR_OUT_CH_</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_CURRENT_CH_</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_CLIENTREQUESTINTERCEPTOR_CH_</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_SERVERREQUESTINTERCEPTOR_CH_</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_CLIENTREQUESTINTERCEPTOR__TRAITS_CH_</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_SERVERREQUESTINTERCEPTOR__TRAITS_CH_</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_INTERCEPTOR__TRAITS_CH_</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_CURRENT__TRAITS_CH_</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; Interceptor &gt;</type>
      <name>Interceptor_var</name>
      <anchor>a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; Interceptor &gt;</type>
      <name>Interceptor_out</name>
      <anchor>a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Current *</type>
      <name>Current_ptr</name>
      <anchor>a75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; Current &gt;</type>
      <name>Current_var</name>
      <anchor>a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; Current &gt;</type>
      <name>Current_out</name>
      <anchor>a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a17</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::Interceptor_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::Interceptor_ptr *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a19</anchor>
      <arglist>(const CORBA::Any &amp;, PortableInterceptor::Interceptor_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a20</anchor>
      <arglist>(CORBA::Any &amp;, const PortableInterceptor::ForwardRequest &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a21</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::ForwardRequest *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a22</anchor>
      <arglist>(const CORBA::Any &amp;, PortableInterceptor::ForwardRequest *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a23</anchor>
      <arglist>(const CORBA::Any &amp;, const PortableInterceptor::ForwardRequest *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a24</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::Current_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a25</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::Current_ptr *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a26</anchor>
      <arglist>(const CORBA::Any &amp;, PortableInterceptor::Current_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a27</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::ClientRequestInterceptor_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a28</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::ClientRequestInterceptor_ptr *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a29</anchor>
      <arglist>(const CORBA::Any &amp;, PortableInterceptor::ClientRequestInterceptor_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a30</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::ServerRequestInterceptor_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a31</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::ServerRequestInterceptor_ptr *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a32</anchor>
      <arglist>(const CORBA::Any &amp;, PortableInterceptor::ServerRequestInterceptor_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a33</anchor>
      <arglist>(TAO_OutputCDR &amp;, const PortableInterceptor::ForwardRequest &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a34</anchor>
      <arglist>(TAO_InputCDR &amp;, PortableInterceptor::ForwardRequest &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PortableInterceptorS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PortableInterceptorS_8h</filename>
  </compound>
  <compound kind="file">
    <name>PP_Memory_Management.txt</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PP__Memory__Management_8txt</filename>
  </compound>
  <compound kind="file">
    <name>PredefinedType_Seq_Tmplinst.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>PredefinedType__Seq__Tmplinst_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>Principal.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Principal_8cpp</filename>
    <includes id="Principal_8h" name="Principal.h" local="yes" imported="no">Principal.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">CDR.h</includes>
    <includes id="Principal_8i" name="Principal.i" local="yes" imported="no">tao/Principal.i</includes>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, CORBA::Principal *x)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;cdr, CORBA::Principal *&amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Principal.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Principal_8h</filename>
    <includes id="OctetSeqC_8h" name="OctetSeqC.h" local="yes" imported="no">OctetSeqC.h</includes>
    <includes id="Pseudo__VarOut__T_8h" name="Pseudo_VarOut_T.h" local="yes" imported="no">Pseudo_VarOut_T.h</includes>
    <includes id="CORBA__methods_8h" name="CORBA_methods.h" local="yes" imported="no">CORBA_methods.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">CORBA::Principal</class>
    <member kind="typedef">
      <type>TAO_Pseudo_Var_T&lt; Principal &gt;</type>
      <name>Principal_var</name>
      <anchor>a209</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Out_T&lt; Principal, Principal_var &gt;</type>
      <name>Principal_out</name>
      <anchor>a210</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;, CORBA::Principal *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::Principal *&amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Principal.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Principal_8i</filename>
  </compound>
  <compound kind="file">
    <name>Profile.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Profile_8cpp</filename>
    <includes id="Profile_8h" name="Profile.h" local="yes" imported="no">tao/Profile.h</includes>
    <includes id="Messaging__PolicyValueC_8h" name="Messaging_PolicyValueC.h" local="yes" imported="no">tao/Messaging_PolicyValueC.h</includes>
    <includes id="Stub_8h" name="Stub.h" local="yes" imported="no">tao/Stub.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <includes id="target__specification_8h" name="target_specification.h" local="yes" imported="no">tao/target_specification.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <includes id="Client__Strategy__Factory_8h" name="Client_Strategy_Factory.h" local="yes" imported="no">tao/Client_Strategy_Factory.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="PolicyC_8h" name="PolicyC.h" local="yes" imported="no">tao/PolicyC.h</includes>
    <includes id="Profile_8i" name="Profile.i" local="yes" imported="no">Profile.i</includes>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, const TAO_opaque &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;cdr, TAO_opaque &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Profile.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Profile_8h</filename>
    <includes id="Tagged__Components_8h" name="Tagged_Components.h" local="yes" imported="no">tao/Tagged_Components.h</includes>
    <includes id="GIOP__Message__Version_8h" name="GIOP_Message_Version.h" local="yes" imported="no">tao/GIOP_Message_Version.h</includes>
    <includes id="Refcounted__ObjectKey_8h" name="Refcounted_ObjectKey.h" local="yes" imported="no">tao/Refcounted_ObjectKey.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">TAO_Profile</class>
    <class kind="class">TAO_Unknown_Profile</class>
    <member kind="typedef">
      <type>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;</type>
      <name>TAO_opaque</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;, const TAO_opaque &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;, TAO_opaque &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Profile.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Profile_8i</filename>
  </compound>
  <compound kind="file">
    <name>Profile_Transport_Resolver.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Profile__Transport__Resolver_8cpp</filename>
    <includes id="Profile__Transport__Resolver_8h" name="Profile_Transport_Resolver.h" local="yes" imported="no">Profile_Transport_Resolver.h</includes>
    <includes id="Profile_8h" name="Profile.h" local="yes" imported="no">Profile.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">Transport.h</includes>
    <includes id="Stub_8h" name="Stub.h" local="yes" imported="no">Stub.h</includes>
    <includes id="Invocation__Endpoint__Selectors_8h" name="Invocation_Endpoint_Selectors.h" local="yes" imported="no">Invocation_Endpoint_Selectors.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="Endpoint__Selector__Factory_8h" name="Endpoint_Selector_Factory.h" local="yes" imported="no">Endpoint_Selector_Factory.h</includes>
    <includes id="Codeset__Manager_8h" name="Codeset_Manager.h" local="yes" imported="no">Codeset_Manager.h</includes>
    <includes id="Connector__Registry_8h" name="Connector_Registry.h" local="yes" imported="no">Connector_Registry.h</includes>
    <includes id="Transport__Connector_8h" name="Transport_Connector.h" local="yes" imported="no">Transport_Connector.h</includes>
    <includes id="Endpoint_8h" name="Endpoint.h" local="yes" imported="no">Endpoint.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="Profile__Transport__Resolver_8inl" name="Profile_Transport_Resolver.inl" local="yes" imported="no">Profile_Transport_Resolver.inl</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>Profile_Transport_Resolver.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Profile__Transport__Resolver_8h</filename>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Profile_Transport_Resolver</class>
  </compound>
  <compound kind="file">
    <name>Profile_Transport_Resolver.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Profile__Transport__Resolver_8inl</filename>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>Protocol_Factory.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Protocol__Factory_8cpp</filename>
    <includes id="Protocol__Factory_8h" name="Protocol_Factory.h" local="yes" imported="no">Protocol_Factory.h</includes>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>prefix_</name>
      <anchor>a0</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Protocol_Factory.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Protocol__Factory_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">Basic_Types.h</includes>
    <class kind="class">TAO_Protocol_Factory</class>
  </compound>
  <compound kind="file">
    <name>Protocols_Hooks.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Protocols__Hooks_8cpp</filename>
    <includes id="Protocols__Hooks_8h" name="Protocols_Hooks.h" local="yes" imported="no">Protocols_Hooks.h</includes>
  </compound>
  <compound kind="file">
    <name>Protocols_Hooks.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Protocols__Hooks_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">Basic_Types.h</includes>
    <includes id="IOP__IORC_8h" name="IOP_IORC.h" local="yes" imported="no">IOP_IORC.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">TAO_IIOP_Protocol_Properties</class>
    <class kind="class">TAO_UIOP_Protocol_Properties</class>
    <class kind="class">TAO_SHMIOP_Protocol_Properties</class>
    <class kind="class">TAO_DIOP_Protocol_Properties</class>
    <class kind="class">TAO_SCIOP_Protocol_Properties</class>
    <class kind="class">TAO_Protocols_Hooks</class>
  </compound>
  <compound kind="file">
    <name>Pseudo_VarOut_T.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Pseudo__VarOut__T_8cpp</filename>
    <includes id="Pseudo__VarOut__T_8h" name="Pseudo_VarOut_T.h" local="yes" imported="no">tao/Pseudo_VarOut_T.h</includes>
    <includes id="Pseudo__VarOut__T_8inl" name="Pseudo_VarOut_T.inl" local="yes" imported="no">tao/Pseudo_VarOut_T.inl</includes>
    <member kind="function">
      <type></type>
      <name>ACE_RCSID</name>
      <anchor>a0</anchor>
      <arglist>(tao, Pseudo_VarOut_T,&quot;$Id$&quot;) template&lt; typename T &gt; TAO_Pseudo_Var_T&lt; T &gt; &amp;TAO_Pseudo_Var_T&lt; T &gt;</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Pseudo_VarOut_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Pseudo__VarOut__T_8h</filename>
    <class kind="class">TAO_Pseudo_Var_T</class>
    <class kind="class">TAO_Pseudo_Out_T</class>
  </compound>
  <compound kind="file">
    <name>Pseudo_VarOut_T.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Pseudo__VarOut__T_8inl</filename>
  </compound>
  <compound kind="file">
    <name>QtResource_Factory.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>QtResource__Factory_8cpp</filename>
    <includes id="QtResource__Factory_8h" name="QtResource_Factory.h" local="yes" imported="no">QtResource_Factory.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>QtResource_Factory.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>QtResource__Factory_8h</filename>
    <includes id="TAO__QtResource__Export_8h" name="TAO_QtResource_Export.h" local="yes" imported="no">tao/TAO_QtResource_Export.h</includes>
    <includes id="GUIResource__Factory_8h" name="GUIResource_Factory.h" local="yes" imported="no">tao/GUIResource_Factory.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::QtResource_Factory</class>
  </compound>
  <compound kind="file">
    <name>QtResource_Loader.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>QtResource__Loader_8cpp</filename>
    <includes id="QtResource__Loader_8h" name="QtResource_Loader.h" local="yes" imported="no">QtResource_Loader.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="QtResource__Factory_8h" name="QtResource_Factory.h" local="yes" imported="no">QtResource_Factory.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>QtResource_Loader.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>QtResource__Loader_8h</filename>
    <includes id="TAO__QtResource__Export_8h" name="TAO_QtResource_Export.h" local="yes" imported="no">tao/TAO_QtResource_Export.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::QtResource_Loader</class>
  </compound>
  <compound kind="file">
    <name>Queued_Message.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Queued__Message_8cpp</filename>
    <includes id="Queued__Message_8h" name="Queued_Message.h" local="yes" imported="no">Queued_Message.h</includes>
    <includes id="Queued__Message_8inl" name="Queued_Message.inl" local="yes" imported="no">Queued_Message.inl</includes>
  </compound>
  <compound kind="file">
    <name>Queued_Message.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Queued__Message_8h</filename>
    <includes id="LF__Invocation__Event_8h" name="LF_Invocation_Event.h" local="yes" imported="no">tao/LF_Invocation_Event.h</includes>
    <class kind="class">TAO_Queued_Message</class>
  </compound>
  <compound kind="file">
    <name>Queued_Message.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Queued__Message_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Reactive_Connect_Strategy.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Reactive__Connect__Strategy_8cpp</filename>
    <includes id="Reactive__Connect__Strategy_8h" name="Reactive_Connect_Strategy.h" local="yes" imported="no">Reactive_Connect_Strategy.h</includes>
    <includes id="Connection__Handler_8h" name="Connection_Handler.h" local="yes" imported="no">Connection_Handler.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">Transport.h</includes>
  </compound>
  <compound kind="file">
    <name>Reactive_Connect_Strategy.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Reactive__Connect__Strategy_8h</filename>
    <includes id="Connect__Strategy_8h" name="Connect_Strategy.h" local="yes" imported="no">Connect_Strategy.h</includes>
    <class kind="class">TAO_Reactive_Connect_Strategy</class>
  </compound>
  <compound kind="file">
    <name>Reactive_Flushing_Strategy.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Reactive__Flushing__Strategy_8cpp</filename>
    <includes id="Reactive__Flushing__Strategy_8h" name="Reactive_Flushing_Strategy.h" local="yes" imported="no">Reactive_Flushing_Strategy.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">Transport.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="Queued__Message_8h" name="Queued_Message.h" local="yes" imported="no">Queued_Message.h</includes>
  </compound>
  <compound kind="file">
    <name>Reactive_Flushing_Strategy.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Reactive__Flushing__Strategy_8h</filename>
    <includes id="Flushing__Strategy_8h" name="Flushing_Strategy.h" local="yes" imported="no">Flushing_Strategy.h</includes>
    <class kind="class">TAO_Reactive_Flushing_Strategy</class>
  </compound>
  <compound kind="file">
    <name>RefCount_Policy_Traits.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>RefCount__Policy__Traits_8h</filename>
    <includes id="CORBA__methods_8h" name="CORBA_methods.h" local="yes" imported="no">tao/CORBA_methods.h</includes>
    <namespace>TAO</namespace>
    <class kind="struct">TAO::RefCount_Policy_Traits&lt; Null_RefCount_Policy, TypePtr &gt;</class>
    <class kind="struct">TAO::RefCount_Policy_Traits&lt; True_RefCount_Policy, TypePtr &gt;</class>
  </compound>
  <compound kind="file">
    <name>Refcounted_ObjectKey.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Refcounted__ObjectKey_8cpp</filename>
    <includes id="Refcounted__ObjectKey_8h" name="Refcounted_ObjectKey.h" local="yes" imported="no">Refcounted_ObjectKey.h</includes>
    <includes id="Refcounted__ObjectKey_8inl" name="Refcounted_ObjectKey.inl" local="yes" imported="no">Refcounted_ObjectKey.inl</includes>
  </compound>
  <compound kind="file">
    <name>Refcounted_ObjectKey.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Refcounted__ObjectKey_8h</filename>
    <includes id="Object__KeyC_8h" name="Object_KeyC.h" local="yes" imported="no">tao/Object_KeyC.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Refcounted_ObjectKey</class>
  </compound>
  <compound kind="file">
    <name>Refcounted_ObjectKey.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Refcounted__ObjectKey_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Remote_Invocation.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Remote__Invocation_8cpp</filename>
    <includes id="Remote__Invocation_8h" name="Remote_Invocation.h" local="yes" imported="no">Remote_Invocation.h</includes>
    <includes id="Profile_8h" name="Profile.h" local="yes" imported="no">Profile.h</includes>
    <includes id="Profile__Transport__Resolver_8h" name="Profile_Transport_Resolver.h" local="yes" imported="no">Profile_Transport_Resolver.h</includes>
    <includes id="Stub_8h" name="Stub.h" local="yes" imported="no">Stub.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">Transport.h</includes>
    <includes id="Connection__Handler_8h" name="Connection_Handler.h" local="yes" imported="no">Connection_Handler.h</includes>
    <includes id="operation__details_8h" name="operation_details.h" local="yes" imported="no">operation_details.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="Protocols__Hooks_8h" name="Protocols_Hooks.h" local="yes" imported="no">Protocols_Hooks.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>Remote_Invocation.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Remote__Invocation_8h</filename>
    <includes id="Invocation__Base_8h" name="Invocation_Base.h" local="yes" imported="no">tao/Invocation_Base.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Remote_Invocation</class>
  </compound>
  <compound kind="file">
    <name>Remote_Object_Proxy_Broker.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Remote__Object__Proxy__Broker_8cpp</filename>
    <includes id="Remote__Object__Proxy__Broker_8h" name="Remote_Object_Proxy_Broker.h" local="yes" imported="no">Remote_Object_Proxy_Broker.h</includes>
    <includes id="UB__String__Arguments_8h" name="UB_String_Arguments.h" local="yes" imported="no">UB_String_Arguments.h</includes>
    <includes id="Special__Basic__Arguments_8h" name="Special_Basic_Arguments.h" local="yes" imported="no">Special_Basic_Arguments.h</includes>
    <includes id="Invocation__Adapter_8h" name="Invocation_Adapter.h" local="yes" imported="no">Invocation_Adapter.h</includes>
    <includes id="IFR__Client__Adapter_8h" name="IFR_Client_Adapter.h" local="yes" imported="no">IFR_Client_Adapter.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>TAO::Remote_Object_Proxy_Broker *</type>
      <name>the_tao_remote_object_proxy_broker</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Remote_Object_Proxy_Broker.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Remote__Object__Proxy__Broker_8h</filename>
    <includes id="Object__Proxy__Broker_8h" name="Object_Proxy_Broker.h" local="yes" imported="no">tao/Object_Proxy_Broker.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Remote_Object_Proxy_Broker</class>
    <member kind="function">
      <type>TAO::Remote_Object_Proxy_Broker *</type>
      <name>the_tao_remote_object_proxy_broker</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Reply_Dispatcher.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Reply__Dispatcher_8cpp</filename>
    <includes id="Reply__Dispatcher_8h" name="Reply_Dispatcher.h" local="yes" imported="no">Reply_Dispatcher.h</includes>
    <includes id="Reply__Dispatcher_8i" name="Reply_Dispatcher.i" local="yes" imported="no">tao/Reply_Dispatcher.i</includes>
  </compound>
  <compound kind="file">
    <name>Reply_Dispatcher.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Reply__Dispatcher_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <class kind="class">TAO_Reply_Dispatcher</class>
  </compound>
  <compound kind="file">
    <name>Reply_Dispatcher.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Reply__Dispatcher_8i</filename>
  </compound>
  <compound kind="file">
    <name>Request_Dispatcher.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Request__Dispatcher_8cpp</filename>
    <includes id="Request__Dispatcher_8h" name="Request_Dispatcher.h" local="yes" imported="no">Request_Dispatcher.h</includes>
    <includes id="TAO__Server__Request_8h" name="TAO_Server_Request.h" local="yes" imported="no">TAO_Server_Request.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
  </compound>
  <compound kind="file">
    <name>Request_Dispatcher.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Request__Dispatcher_8h</filename>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="Objref__VarOut__T_8h" name="Objref_VarOut_T.h" local="yes" imported="no">tao/Objref_VarOut_T.h</includes>
    <includes id="Pseudo__VarOut__T_8h" name="Pseudo_VarOut_T.h" local="yes" imported="no">tao/Pseudo_VarOut_T.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">TAO_Request_Dispatcher</class>
  </compound>
  <compound kind="file">
    <name>RequestInfo.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>RequestInfo_8pidl</filename>
    <includes id="PI__Forward_8pidl" name="PI_Forward.pidl" local="yes" imported="yes">PI_Forward.pidl</includes>
    <includes id="Dynamic_8pidl" name="Dynamic.pidl" local="yes" imported="yes">Dynamic.pidl</includes>
    <includes id="Messaging__SyncScope_8pidl" name="Messaging_SyncScope.pidl" local="yes" imported="yes">Messaging_SyncScope.pidl</includes>
    <includes id="InvalidSlot_8pidl" name="InvalidSlot.pidl" local="yes" imported="yes">InvalidSlot.pidl</includes>
    <includes id="IOP__IOR_8pidl" name="IOP_IOR.pidl" local="yes" imported="yes">IOP_IOR.pidl</includes>
    <namespace>PortableInterceptor</namespace>
    <class kind="interface">PortableInterceptor::RequestInfo</class>
  </compound>
  <compound kind="file">
    <name>RequestInfo_Util.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>RequestInfo__Util_8cpp</filename>
    <includes id="RequestInfo__Util_8h" name="RequestInfo_Util.h" local="yes" imported="no">RequestInfo_Util.h</includes>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">TypeCode.h</includes>
    <includes id="ORB__Constants_8h" name="ORB_Constants.h" local="yes" imported="no">ORB_Constants.h</includes>
    <includes id="StringSeqC_8h" name="StringSeqC.h" local="yes" imported="no">StringSeqC.h</includes>
    <includes id="DynamicC_8h" name="DynamicC.h" local="yes" imported="no">DynamicC.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
  </compound>
  <compound kind="file">
    <name>RequestInfo_Util.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>RequestInfo__Util_8h</filename>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <namespace>CORBA</namespace>
    <namespace>Dynamic</namespace>
    <class kind="class">TAO_RequestInfo_Util</class>
  </compound>
  <compound kind="file">
    <name>RequestInfoA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>RequestInfoA_8cpp</filename>
    <includes id="RequestInfoC_8h" name="RequestInfoC.h" local="yes" imported="no">RequestInfoC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Objref__TypeCode_8h" name="Objref_TypeCode.h" local="yes" imported="no">tao/Objref_TypeCode.h</includes>
    <includes id="String__TypeCode_8h" name="String_TypeCode.h" local="yes" imported="no">tao/String_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Impl__T_8h" name="Any_Impl_T.h" local="yes" imported="no">tao/Any_Impl_T.h</includes>
    <namespace>PortableInterceptor</namespace>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::RequestInfo &gt;::to_object</name>
      <anchor>a132</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::RequestInfo &gt;::marshal_value</name>
      <anchor>a133</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::RequestInfo &gt;::demarshal_value</name>
      <anchor>a134</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, PortableInterceptor::RequestInfo_ptr _tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, PortableInterceptor::RequestInfo_ptr *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, PortableInterceptor::RequestInfo_ptr &amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Objref&lt; char const *, CORBA::tk_local_interface, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_PortableInterceptor_RequestInfo</name>
      <anchor>a0</anchor>
      <arglist>(&quot;IDL:omg.org/PortableInterceptor/RequestInfo:1.0&quot;,&quot;RequestInfo&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_RequestInfo</name>
      <anchor>a78</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RequestInfoC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>RequestInfoC_8cpp</filename>
    <includes id="RequestInfoC_8h" name="RequestInfoC.h" local="yes" imported="no">RequestInfoC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>RequestInfoC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>RequestInfoC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">tao/Object.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Objref__VarOut__T_8h" name="Objref_VarOut_T.h" local="yes" imported="no">tao/Objref_VarOut_T.h</includes>
    <includes id="PI__ForwardC_8h" name="PI_ForwardC.h" local="yes" imported="no">tao/PI_ForwardC.h</includes>
    <includes id="DynamicC_8h" name="DynamicC.h" local="yes" imported="no">tao/DynamicC.h</includes>
    <includes id="Messaging__SyncScopeC_8h" name="Messaging_SyncScopeC.h" local="yes" imported="no">tao/Messaging_SyncScopeC.h</includes>
    <includes id="InvalidSlotC_8h" name="InvalidSlotC.h" local="yes" imported="no">tao/InvalidSlotC.h</includes>
    <includes id="IOP__IORC_8h" name="IOP_IORC.h" local="yes" imported="no">tao/IOP_IORC.h</includes>
    <namespace>PortableInterceptor</namespace>
    <namespace>TAO</namespace>
    <class kind="interface">PortableInterceptor::RequestInfo</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::PortableInterceptor::RequestInfo &gt;</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_REQUESTINFO__VAR_OUT_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_REQUESTINFO_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_REQUESTINFO__TRAITS_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RequestInfo *</type>
      <name>RequestInfo_ptr</name>
      <anchor>a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; RequestInfo &gt;</type>
      <name>RequestInfo_var</name>
      <anchor>a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; RequestInfo &gt;</type>
      <name>RequestInfo_out</name>
      <anchor>a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::RequestInfo_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::RequestInfo_ptr *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a9</anchor>
      <arglist>(const CORBA::Any &amp;, PortableInterceptor::RequestInfo_ptr &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RequestInfoS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>RequestInfoS_8h</filename>
  </compound>
  <compound kind="file">
    <name>Resource_Factory.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Resource__Factory_8cpp</filename>
    <includes id="Resource__Factory_8h" name="Resource_Factory.h" local="yes" imported="no">Resource_Factory.h</includes>
    <includes id="Protocol__Factory_8h" name="Protocol_Factory.h" local="yes" imported="no">Protocol_Factory.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">orbconf.h</includes>
  </compound>
  <compound kind="file">
    <name>Resource_Factory.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Resource__Factory_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <class kind="class">TAO_Protocol_Item</class>
    <class kind="class">TAO_Resource_Factory</class>
    <member kind="typedef">
      <type>ACE_Unbounded_Set&lt; TAO_Protocol_Item * &gt;</type>
      <name>TAO_ProtocolFactorySet</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Unbounded_Set_Iterator&lt; TAO_Protocol_Item * &gt;</type>
      <name>TAO_ProtocolFactorySetItor</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Resume_Handle.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Resume__Handle_8cpp</filename>
    <includes id="Resume__Handle_8h" name="Resume_Handle.h" local="yes" imported="no">Resume_Handle.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="Resume__Handle_8inl" name="Resume_Handle.inl" local="yes" imported="no">Resume_Handle.inl</includes>
  </compound>
  <compound kind="file">
    <name>Resume_Handle.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Resume__Handle_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">TAO_Export.h</includes>
    <class kind="class">TAO_Resume_Handle</class>
  </compound>
  <compound kind="file">
    <name>Resume_Handle.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Resume__Handle_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Seq_Out_T.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Seq__Out__T_8cpp</filename>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">Seq_Out_T.h</includes>
    <includes id="Seq__Out__T_8inl" name="Seq_Out_T.inl" local="yes" imported="no">Seq_Out_T.inl</includes>
  </compound>
  <compound kind="file">
    <name>Seq_Out_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Seq__Out__T_8h</filename>
    <class kind="class">TAO_Seq_Out_T</class>
    <class kind="class">TAO_MngSeq_Out_T</class>
  </compound>
  <compound kind="file">
    <name>Seq_Out_T.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Seq__Out__T_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Seq_Var_T.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Seq__Var__T_8cpp</filename>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Var__T_8inl" name="Seq_Var_T.inl" local="yes" imported="no">tao/Seq_Var_T.inl</includes>
  </compound>
  <compound kind="file">
    <name>Seq_Var_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Seq__Var__T_8h</filename>
    <class kind="class">TAO_Seq_Var_Base_T</class>
    <class kind="class">TAO_FixedSeq_Var_T</class>
    <class kind="class">TAO_VarSeq_Var_T</class>
    <class kind="class">TAO_MngSeq_Var_T</class>
  </compound>
  <compound kind="file">
    <name>Seq_Var_T.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Seq__Var__T_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Sequence.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Sequence_8cpp</filename>
    <includes id="Sequence_8h" name="Sequence.h" local="yes" imported="no">Sequence.h</includes>
    <includes id="Sequence_8i" name="Sequence.i" local="yes" imported="no">tao/Sequence.i</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::TAO_Unbounded_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(const TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::operator=</name>
      <anchor>a1</anchor>
      <arglist>(const TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::TAO_Unbounded_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong length, const ACE_Message_Block *mb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::~TAO_Unbounded_Sequence</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Octet *</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::get_buffer</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Boolean orphan)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::replace</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::ULong length, const ACE_Message_Block *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::_tao_any_destructor</name>
      <anchor>a6</anchor>
      <arglist>(void *x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::_allocate_buffer</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::_deallocate_buffer</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::replace</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::Octet *data, CORBA::Boolean release)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>a10</anchor>
      <arglist>(const TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;lhs, const TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>a11</anchor>
      <arglist>(const TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;lhs, const TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sequence.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Sequence_8h</filename>
    <includes id="Managed__Types_8h" name="Managed_Types.h" local="yes" imported="no">tao/Managed_Types.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <includes id="default__environment_8h" name="default_environment.h" local="yes" imported="no">tao/default_environment.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">TAO_Base_Sequence</class>
    <class kind="class">TAO_Unbounded_Base_Sequence</class>
    <class kind="class">TAO_Bounded_Base_Sequence</class>
    <class kind="class">TAO_Unbounded_String_Sequence</class>
    <class kind="class">TAO_Unbounded_WString_Sequence</class>
    <class kind="class">TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SEQUENCE_ASSERT</name>
      <anchor>a0</anchor>
      <arglist>(TAO_IDX, TAO_MAX)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export bool</type>
      <name>operator==</name>
      <anchor>a1</anchor>
      <arglist>(const TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;l, const TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export bool</type>
      <name>operator!=</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;l, const TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sequence.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Sequence_8i</filename>
    <member kind="function">
      <type>ACE_INLINE CORBA::Octet *</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::allocbuf</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::ULong size)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE void</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::freebuf</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::Octet *buffer)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::TAO_Unbounded_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::TAO_Unbounded_Sequence</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::ULong maximum)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::TAO_Unbounded_Sequence</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::ULong maximum, CORBA::ULong length, CORBA::Octet *data, CORBA::Boolean release)</arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE const CORBA::Octet *</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::get_buffer</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ACE_INLINE CORBA::Octet &amp;</type>
      <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;::operator[]</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong i)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sequence_T.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Sequence__T_8cpp</filename>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">Sequence_T.h</includes>
    <includes id="Array__VarOut__T_8h" name="Array_VarOut_T.h" local="yes" imported="no">Array_VarOut_T.h</includes>
    <includes id="Sequence__T_8i" name="Sequence_T.i" local="yes" imported="no">tao/Sequence_T.i</includes>
  </compound>
  <compound kind="file">
    <name>Sequence_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Sequence__T_8h</filename>
    <includes id="Sequence_8h" name="Sequence.h" local="yes" imported="no">tao/Sequence.h</includes>
    <includes id="Objref__VarOut__T_8h" name="Objref_VarOut_T.h" local="yes" imported="no">tao/Objref_VarOut_T.h</includes>
    <class kind="class">TAO_Unbounded_Sequence</class>
    <class kind="class">TAO_Bounded_Sequence</class>
    <class kind="class">TAO_Object_Manager</class>
    <class kind="class">TAO_Pseudo_Object_Manager</class>
    <class kind="class">TAO_Unbounded_Object_Sequence</class>
    <class kind="class">TAO_Bounded_Object_Sequence</class>
    <class kind="class">TAO_Unbounded_Pseudo_Sequence</class>
    <class kind="class">TAO_Bounded_Pseudo_Sequence</class>
    <class kind="class">TAO_Unbounded_Array_Sequence</class>
    <class kind="class">TAO_Bounded_Array_Sequence</class>
    <class kind="class">TAO_Bounded_String_Sequence</class>
    <class kind="class">TAO_Bounded_WString_Sequence</class>
  </compound>
  <compound kind="file">
    <name>Sequence_T.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Sequence__T_8i</filename>
  </compound>
  <compound kind="file">
    <name>Sequence_TypeCode.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Sequence__TypeCode_8cpp</filename>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8inl" name="Sequence_TypeCode.inl" local="yes" imported="no">tao/Sequence_TypeCode.inl</includes>
  </compound>
  <compound kind="file">
    <name>Sequence_TypeCode.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Sequence__TypeCode_8h</filename>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">tao/TypeCode.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <class kind="class">TAO::TypeCode::Sequence</class>
  </compound>
  <compound kind="file">
    <name>Sequence_TypeCode.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Sequence__TypeCode_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Server_Strategy_Factory.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Server__Strategy__Factory_8cpp</filename>
    <includes id="Server__Strategy__Factory_8h" name="Server_Strategy_Factory.h" local="yes" imported="no">tao/Server_Strategy_Factory.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
  </compound>
  <compound kind="file">
    <name>Server_Strategy_Factory.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Server__Strategy__Factory_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">Basic_Types.h</includes>
    <class kind="class">TAO_Server_Strategy_Factory</class>
    <class kind="struct">TAO_Server_Strategy_Factory::Active_Object_Map_Creation_Parameters</class>
    <member kind="enumeration">
      <name>TAO_Demux_Strategy</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_LINEAR</name>
      <anchor>a4a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_DYNAMIC_HASH</name>
      <anchor>a4a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_ACTIVE_DEMUX</name>
      <anchor>a4a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_USER_DEFINED</name>
      <anchor>a4a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ServerRequestInfo.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ServerRequestInfo_8pidl</filename>
    <includes id="RequestInfo_8pidl" name="RequestInfo.pidl" local="yes" imported="yes">RequestInfo.pidl</includes>
    <includes id="orb__types_8pidl" name="orb_types.pidl" local="yes" imported="yes">orb_types.pidl</includes>
    <includes id="Policy__Forward_8pidl" name="Policy_Forward.pidl" local="yes" imported="yes">Policy_Forward.pidl</includes>
    <namespace>PortableInterceptor</namespace>
    <class kind="interface">PortableInterceptor::ServerRequestInfo</class>
  </compound>
  <compound kind="file">
    <name>ServerRequestInfoA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ServerRequestInfoA_8cpp</filename>
    <includes id="ServerRequestInfoC_8h" name="ServerRequestInfoC.h" local="yes" imported="no">ServerRequestInfoC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Objref__TypeCode_8h" name="Objref_TypeCode.h" local="yes" imported="no">tao/Objref_TypeCode.h</includes>
    <includes id="String__TypeCode_8h" name="String_TypeCode.h" local="yes" imported="no">tao/String_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Impl__T_8h" name="Any_Impl_T.h" local="yes" imported="no">tao/Any_Impl_T.h</includes>
    <namespace>PortableInterceptor</namespace>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ServerRequestInfo &gt;::to_object</name>
      <anchor>a135</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ServerRequestInfo &gt;::marshal_value</name>
      <anchor>a136</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ServerRequestInfo &gt;::demarshal_value</name>
      <anchor>a137</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, PortableInterceptor::ServerRequestInfo_ptr _tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, PortableInterceptor::ServerRequestInfo_ptr *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, PortableInterceptor::ServerRequestInfo_ptr &amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Objref&lt; char const *, CORBA::tk_local_interface, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_PortableInterceptor_ServerRequestInfo</name>
      <anchor>a0</anchor>
      <arglist>(&quot;IDL:omg.org/PortableInterceptor/ServerRequestInfo:1.0&quot;,&quot;ServerRequestInfo&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServerRequestInfo</name>
      <anchor>a82</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ServerRequestInfoC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ServerRequestInfoC_8cpp</filename>
    <includes id="ServerRequestInfoC_8h" name="ServerRequestInfoC.h" local="yes" imported="no">ServerRequestInfoC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>ServerRequestInfoC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ServerRequestInfoC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">tao/Object.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Objref__VarOut__T_8h" name="Objref_VarOut_T.h" local="yes" imported="no">tao/Objref_VarOut_T.h</includes>
    <includes id="RequestInfoC_8h" name="RequestInfoC.h" local="yes" imported="no">tao/RequestInfoC.h</includes>
    <includes id="orb__typesC_8h" name="orb_typesC.h" local="yes" imported="no">tao/orb_typesC.h</includes>
    <includes id="Policy__ForwardC_8h" name="Policy_ForwardC.h" local="yes" imported="no">tao/Policy_ForwardC.h</includes>
    <namespace>PortableInterceptor</namespace>
    <namespace>TAO</namespace>
    <class kind="interface">PortableInterceptor::ServerRequestInfo</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::PortableInterceptor::ServerRequestInfo &gt;</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_SERVERREQUESTINFO__VAR_OUT_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_SERVERREQUESTINFO_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_PORTABLEINTERCEPTOR_SERVERREQUESTINFO__TRAITS_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ServerRequestInfo *</type>
      <name>ServerRequestInfo_ptr</name>
      <anchor>a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; ServerRequestInfo &gt;</type>
      <name>ServerRequestInfo_var</name>
      <anchor>a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; ServerRequestInfo &gt;</type>
      <name>ServerRequestInfo_out</name>
      <anchor>a85</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::ServerRequestInfo_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::Any &amp;, PortableInterceptor::ServerRequestInfo_ptr *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a9</anchor>
      <arglist>(const CORBA::Any &amp;, PortableInterceptor::ServerRequestInfo_ptr &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ServerRequestInfoS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ServerRequestInfoS_8h</filename>
  </compound>
  <compound kind="file">
    <name>Service_Callbacks.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Service__Callbacks_8cpp</filename>
    <includes id="Service__Callbacks_8h" name="Service_Callbacks.h" local="yes" imported="no">Service_Callbacks.h</includes>
    <includes id="ORB__Constants_8h" name="ORB_Constants.h" local="yes" imported="no">ORB_Constants.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">Environment.h</includes>
    <includes id="Invocation__Utils_8h" name="Invocation_Utils.h" local="yes" imported="no">Invocation_Utils.h</includes>
  </compound>
  <compound kind="file">
    <name>Service_Callbacks.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Service__Callbacks_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <includes id="Invocation__Utils_8h" name="Invocation_Utils.h" local="yes" imported="no">tao/Invocation_Utils.h</includes>
    <namespace>CORBA</namespace>
    <namespace>IOP</namespace>
    <class kind="class">TAO_Service_Callbacks</class>
  </compound>
  <compound kind="file">
    <name>Service_Context.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Service__Context_8cpp</filename>
    <includes id="Service__Context_8h" name="Service_Context.h" local="yes" imported="no">tao/Service_Context.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Service__Context_8inl" name="Service_Context.inl" local="yes" imported="no">tao/Service_Context.inl</includes>
  </compound>
  <compound kind="file">
    <name>Service_Context.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Service__Context_8h</filename>
    <includes id="IOPC_8h" name="IOPC.h" local="yes" imported="no">tao/IOPC.h</includes>
    <class kind="class">TAO_Service_Context</class>
  </compound>
  <compound kind="file">
    <name>Service_Context.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Service__Context_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Services.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Services_8pidl</filename>
    <includes id="OctetSeq_8pidl" name="OctetSeq.pidl" local="yes" imported="yes">OctetSeq.pidl</includes>
    <namespace>CORBA</namespace>
    <class kind="struct">CORBA::ServiceDetail</class>
    <class kind="struct">CORBA::ServiceInformation</class>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>ServiceOption</name>
      <anchor>a211</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>ServiceDetailType</name>
      <anchor>a212</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OctetSeq</type>
      <name>ServiceDetailData</name>
      <anchor>a213</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; ServiceOption &gt;</type>
      <name>ServiceOptionSeq</name>
      <anchor>a214</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; ServiceDetail &gt;</type>
      <name>ServiceDetailSeq</name>
      <anchor>a216</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceType</type>
      <name>Security</name>
      <anchor>a215</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Services_Activate.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Services__Activate_8cpp</filename>
    <includes id="Services__Activate_8h" name="Services_Activate.h" local="yes" imported="no">tao/Services_Activate.h</includes>
  </compound>
  <compound kind="file">
    <name>Services_Activate.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Services__Activate_8h</filename>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <class kind="class">TAO_Services_Activate</class>
  </compound>
  <compound kind="file">
    <name>ServicesA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ServicesA_8cpp</filename>
    <includes id="ServicesC_8h" name="ServicesC.h" local="yes" imported="no">ServicesC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="Struct__TypeCode_8h" name="Struct_TypeCode.h" local="yes" imported="no">tao/Struct_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a22</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::ServiceOptionSeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a23</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::ServiceOptionSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a24</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::ServiceOptionSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a25</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::ServiceOptionSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a26</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::ServiceDetail &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a27</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::ServiceDetail *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a28</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::ServiceDetail *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a29</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::ServiceDetail *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a30</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::ServiceDetailSeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a31</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::ServiceDetailSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a32</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::ServiceDetailSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a33</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::ServiceDetailSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a34</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::ServiceInformation &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a35</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::ServiceInformation *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a36</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::ServiceInformation *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a37</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::ServiceInformation *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_ServiceType</name>
      <anchor>a0</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/ServiceType:1.0&quot;,&quot;ServiceType&quot;,&amp;CORBA::_tc_ushort)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServiceType</name>
      <anchor>a217</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_ServiceOption</name>
      <anchor>a2</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/ServiceOption:1.0&quot;,&quot;ServiceOption&quot;,&amp;CORBA::_tc_ulong)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServiceOption</name>
      <anchor>a218</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_ServiceDetailType</name>
      <anchor>a4</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/ServiceDetailType:1.0&quot;,&quot;ServiceDetailType&quot;,&amp;CORBA::_tc_ulong)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServiceDetailType</name>
      <anchor>a219</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_ServiceDetailData</name>
      <anchor>a6</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/ServiceDetailData:1.0&quot;,&quot;ServiceDetailData&quot;,&amp;CORBA::_tc_OctetSeq)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServiceDetailData</name>
      <anchor>a220</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_ServiceOptionSeq_0</name>
      <anchor>a48</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_ServiceOption, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_ServiceOptionSeq_0</name>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_ServiceOptionSeq</name>
      <anchor>a10</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/ServiceOptionSeq:1.0&quot;,&quot;ServiceOptionSeq&quot;,&amp;TAO::TypeCode::tc_CORBA_ServiceOptionSeq_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServiceOptionSeq</name>
      <anchor>a221</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_fields_CORBA_ServiceDetail</name>
      <anchor>a12</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_ServiceDetail</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::tk_struct,&quot;IDL:omg.org/CORBA/ServiceDetail:1.0&quot;,&quot;ServiceDetail&quot;, _tao_fields_CORBA_ServiceDetail, 2)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServiceDetail</name>
      <anchor>a222</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_ServiceDetailSeq_0</name>
      <anchor>a50</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_ServiceDetail, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_ServiceDetailSeq_0</name>
      <anchor>a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_ServiceDetailSeq</name>
      <anchor>a17</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/ServiceDetailSeq:1.0&quot;,&quot;ServiceDetailSeq&quot;,&amp;TAO::TypeCode::tc_CORBA_ServiceDetailSeq_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServiceDetailSeq</name>
      <anchor>a223</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_fields_CORBA_ServiceInformation</name>
      <anchor>a19</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_ServiceInformation</name>
      <anchor>a20</anchor>
      <arglist>(CORBA::tk_struct,&quot;IDL:omg.org/CORBA/ServiceInformation:1.0&quot;,&quot;ServiceInformation&quot;, _tao_fields_CORBA_ServiceInformation, 2)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServiceInformation</name>
      <anchor>a224</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ServicesC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ServicesC_8cpp</filename>
    <includes id="ServicesC_8h" name="ServicesC.h" local="yes" imported="no">ServicesC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_SERVICEOPTIONSEQ_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_SERVICEDETAILSEQ_CS_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::ServiceOptionSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::ServiceOptionSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::ServiceDetail &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a5</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::ServiceDetail &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::ServiceDetailSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::ServiceDetailSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::ServiceInformation &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::ServiceInformation &amp;_tao_aggregate)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ServicesC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ServicesC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <includes id="VarOut__T_8h" name="VarOut_T.h" local="yes" imported="no">tao/VarOut_T.h</includes>
    <includes id="OctetSeqC_8h" name="OctetSeqC.h" local="yes" imported="no">tao/OctetSeqC.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">CORBA::ServiceOptionSeq</class>
    <class kind="struct">CORBA::ServiceDetail</class>
    <class kind="class">CORBA::ServiceDetailSeq</class>
    <class kind="struct">CORBA::ServiceInformation</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_SERVICEOPTIONSEQ_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_SERVICEDETAILSEQ_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::UShort_out</type>
      <name>ServiceType_out</name>
      <anchor>a225</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::ULong_out</type>
      <name>ServiceOption_out</name>
      <anchor>a226</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::ULong_out</type>
      <name>ServiceDetailType_out</name>
      <anchor>a227</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OctetSeq_var</type>
      <name>ServiceDetailData_var</name>
      <anchor>a228</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OctetSeq_out</type>
      <name>ServiceDetailData_out</name>
      <anchor>a229</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; ServiceOptionSeq, ServiceOption &gt;</type>
      <name>ServiceOptionSeq_var</name>
      <anchor>a230</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; ServiceOptionSeq, ServiceOptionSeq_var, ServiceOption &gt;</type>
      <name>ServiceOptionSeq_out</name>
      <anchor>a231</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; ServiceDetail &gt;</type>
      <name>ServiceDetail_var</name>
      <anchor>a232</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; ServiceDetail, ServiceDetail_var &gt;</type>
      <name>ServiceDetail_out</name>
      <anchor>a233</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_VarSeq_Var_T&lt; ServiceDetailSeq, ServiceDetail &gt;</type>
      <name>ServiceDetailSeq_var</name>
      <anchor>a234</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; ServiceDetailSeq, ServiceDetailSeq_var, ServiceDetail &gt;</type>
      <name>ServiceDetailSeq_out</name>
      <anchor>a235</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::ServiceOptionSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::ServiceOptionSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a16</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::ServiceOptionSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a17</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::ServiceOptionSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::ServiceDetail &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a19</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::ServiceDetail *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a20</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::ServiceDetail *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a21</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::ServiceDetail *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a22</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::ServiceDetailSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a23</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::ServiceDetailSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a24</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::ServiceDetailSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a25</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::ServiceDetailSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a26</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::ServiceInformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a27</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::ServiceInformation *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a28</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::ServiceInformation *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a29</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::ServiceInformation *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a30</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::ServiceOptionSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a31</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::ServiceOptionSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a32</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::ServiceDetail &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a33</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::ServiceDetail &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a34</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::ServiceDetailSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a35</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::ServiceDetailSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a36</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::ServiceInformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a37</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::ServiceInformation &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ServicesS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ServicesS_8h</filename>
  </compound>
  <compound kind="file">
    <name>ServicesS_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ServicesS__T_8h</filename>
    <namespace>POA_CORBA</namespace>
  </compound>
  <compound kind="file">
    <name>ShortSeq.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ShortSeq_8pidl</filename>
    <namespace>CORBA</namespace>
    <member kind="typedef">
      <type>sequence&lt; short &gt;</type>
      <name>ShortSeq</name>
      <anchor>a236</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ShortSeqA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ShortSeqA_8cpp</filename>
    <includes id="ShortSeqC_8h" name="ShortSeqC.h" local="yes" imported="no">ShortSeqC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <namespace>CORBA</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::ShortSeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::ShortSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::ShortSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::ShortSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_ShortSeq_0</name>
      <anchor>a52</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_short, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_ShortSeq_0</name>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_ShortSeq</name>
      <anchor>a2</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/ShortSeq:1.0&quot;,&quot;ShortSeq&quot;,&amp;TAO::TypeCode::tc_CORBA_ShortSeq_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ShortSeq</name>
      <anchor>a237</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ShortSeqC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ShortSeqC_8cpp</filename>
    <includes id="ShortSeqC_8h" name="ShortSeqC.h" local="yes" imported="no">ShortSeqC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_SHORTSEQ_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::ShortSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::ShortSeq &amp;_tao_sequence)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ShortSeqC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ShortSeqC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">CORBA::ShortSeq</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_SHORTSEQ_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; ShortSeq, CORBA::Short &gt;</type>
      <name>ShortSeq_var</name>
      <anchor>a238</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; ShortSeq, ShortSeq_var, CORBA::Short &gt;</type>
      <name>ShortSeq_out</name>
      <anchor>a239</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::ShortSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::ShortSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::ShortSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::ShortSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::ShortSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::ShortSeq &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ShortSeqS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ShortSeqS_8h</filename>
  </compound>
  <compound kind="file">
    <name>skip.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>skip_8cpp</filename>
    <includes id="Marshal_8h" name="Marshal.h" local="yes" imported="no">Marshal.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="Valuetype__Adapter_8h" name="Valuetype_Adapter.h" local="yes" imported="no">Valuetype_Adapter.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">TypeCode.h</includes>
    <includes id="Any__Unknown__IDL__Type_8h" name="Any_Unknown_IDL_Type.h" local="yes" imported="no">Any_Unknown_IDL_Type.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
  </compound>
  <compound kind="file">
    <name>Special_Basic_Argument_T.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Special__Basic__Argument__T_8cpp</filename>
    <includes id="Special__Basic__Argument__T_8h" name="Special_Basic_Argument_T.h" local="yes" imported="no">tao/Special_Basic_Argument_T.h</includes>
    <includes id="Dynamic__ParameterC_8h" name="Dynamic_ParameterC.h" local="yes" imported="no">tao/Dynamic_ParameterC.h</includes>
    <includes id="Special__Basic__Argument__T_8inl" name="Special_Basic_Argument_T.inl" local="yes" imported="no">tao/Special_Basic_Argument_T.inl</includes>
  </compound>
  <compound kind="file">
    <name>Special_Basic_Argument_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Special__Basic__Argument__T_8h</filename>
    <includes id="Argument_8h" name="Argument.h" local="yes" imported="no">tao/Argument.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::In_Special_Basic_Argument_T</class>
    <class kind="class">TAO::Inout_Special_Basic_Argument_T</class>
    <class kind="class">TAO::Out_Special_Basic_Argument_T</class>
    <class kind="class">TAO::Ret_Special_Basic_Argument_T</class>
    <class kind="struct">TAO::Special_Basic_Tag</class>
    <class kind="struct">TAO::Special_Basic_Arg_Traits_T</class>
  </compound>
  <compound kind="file">
    <name>Special_Basic_Argument_T.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Special__Basic__Argument__T_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Special_Basic_Arguments.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Special__Basic__Arguments_8cpp</filename>
    <includes id="Special__Basic__Arguments_8h" name="Special_Basic_Arguments.h" local="yes" imported="no">tao/Special_Basic_Arguments.h</includes>
  </compound>
  <compound kind="file">
    <name>Special_Basic_Arguments.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Special__Basic__Arguments_8h</filename>
    <includes id="Special__Basic__Argument__T_8h" name="Special_Basic_Argument_T.h" local="yes" imported="no">tao/Special_Basic_Argument_T.h</includes>
    <includes id="Arg__Traits__T_8h" name="Arg_Traits_T.h" local="yes" imported="no">Arg_Traits_T.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Arg_Traits&lt; ACE_InputCDR::to_char &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; ACE_InputCDR::to_wchar &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; ACE_InputCDR::to_octet &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; ACE_InputCDR::to_boolean &gt;</class>
  </compound>
  <compound kind="file">
    <name>String_TypeCode.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>String__TypeCode_8cpp</filename>
    <includes id="String__TypeCode_8h" name="String_TypeCode.h" local="yes" imported="no">tao/String_TypeCode.h</includes>
    <includes id="String__TypeCode_8inl" name="String_TypeCode.inl" local="yes" imported="no">tao/String_TypeCode.inl</includes>
  </compound>
  <compound kind="file">
    <name>String_TypeCode.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>String__TypeCode_8h</filename>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">tao/TypeCode.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <class kind="class">TAO::TypeCode::String</class>
  </compound>
  <compound kind="file">
    <name>String_TypeCode.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>String__TypeCode_8inl</filename>
  </compound>
  <compound kind="file">
    <name>String_TypeCode_Traits.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>String__TypeCode__Traits_8h</filename>
    <includes id="String__TypeCode_8h" name="String_TypeCode.h" local="yes" imported="no">tao/String_TypeCode.h</includes>
    <includes id="True__RefCount__Policy_8h" name="True_RefCount_Policy.h" local="yes" imported="no">tao/True_RefCount_Policy.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCodeFactory</namespace>
    <class kind="struct">TAO::TypeCodeFactory::String_Traits&lt; CORBA::Any::from_string &gt;</class>
    <class kind="struct">TAO::TypeCodeFactory::String_Traits&lt; CORBA::Any::from_wstring &gt;</class>
  </compound>
  <compound kind="file">
    <name>StringSeq.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>StringSeq_8pidl</filename>
    <namespace>CORBA</namespace>
    <member kind="typedef">
      <type>sequence&lt; string &gt;</type>
      <name>StringSeq</name>
      <anchor>a240</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StringSeqA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>StringSeqA_8cpp</filename>
    <includes id="StringSeqC_8h" name="StringSeqC.h" local="yes" imported="no">StringSeqC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="String__TypeCode_8h" name="String_TypeCode.h" local="yes" imported="no">tao/String_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <namespace>CORBA</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::StringSeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::StringSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::StringSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::StringSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_StringSeq_0</name>
      <anchor>a54</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_string, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_StringSeq_0</name>
      <anchor>a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_StringSeq</name>
      <anchor>a2</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/StringSeq:1.0&quot;,&quot;StringSeq&quot;,&amp;TAO::TypeCode::tc_CORBA_StringSeq_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_StringSeq</name>
      <anchor>a241</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StringSeqC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>StringSeqC_8cpp</filename>
    <includes id="StringSeqC_8h" name="StringSeqC.h" local="yes" imported="no">StringSeqC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_STRINGSEQ_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::StringSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::StringSeq &amp;_tao_sequence)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StringSeqC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>StringSeqC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">CORBA::StringSeq</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_STRINGSEQ_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_MngSeq_Var_T&lt; StringSeq, TAO_SeqElem_String_Manager &gt;</type>
      <name>StringSeq_var</name>
      <anchor>a242</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_MngSeq_Out_T&lt; StringSeq, StringSeq_var, TAO_SeqElem_String_Manager &gt;</type>
      <name>StringSeq_out</name>
      <anchor>a243</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::StringSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::StringSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::StringSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::StringSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::StringSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::StringSeq &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StringSeqS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>StringSeqS_8h</filename>
  </compound>
  <compound kind="file">
    <name>Struct_TypeCode.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Struct__TypeCode_8cpp</filename>
    <includes id="Struct__TypeCode_8h" name="Struct_TypeCode.h" local="yes" imported="no">tao/Struct_TypeCode.h</includes>
    <includes id="TypeCode__Struct__Field_8h" name="TypeCode_Struct_Field.h" local="yes" imported="no">tao/TypeCode_Struct_Field.h</includes>
    <includes id="TypeCode__Traits_8h" name="TypeCode_Traits.h" local="yes" imported="no">tao/TypeCode_Traits.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <includes id="TypeCodeFactory__Adapter_8h" name="TypeCodeFactory_Adapter.h" local="yes" imported="no">tao/TypeCodeFactory_Adapter.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Struct__TypeCode_8inl" name="Struct_TypeCode.inl" local="yes" imported="no">tao/Struct_TypeCode.inl</includes>
  </compound>
  <compound kind="file">
    <name>Struct_TypeCode.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Struct__TypeCode_8h</filename>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">tao/TypeCode.h</includes>
    <includes id="TypeCode__Base__Attributes_8h" name="TypeCode_Base_Attributes.h" local="yes" imported="no">tao/TypeCode_Base_Attributes.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <class kind="class">TAO::TypeCode::Struct</class>
  </compound>
  <compound kind="file">
    <name>Struct_TypeCode.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Struct__TypeCode_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Stub.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Stub_8cpp</filename>
    <includes id="Stub_8h" name="Stub.h" local="yes" imported="no">Stub.h</includes>
    <includes id="Profile_8h" name="Profile.h" local="yes" imported="no">Profile.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="Client__Strategy__Factory_8h" name="Client_Strategy_Factory.h" local="yes" imported="no">Client_Strategy_Factory.h</includes>
    <includes id="Sync__Strategies_8h" name="Sync_Strategies.h" local="yes" imported="no">Sync_Strategies.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="Policy__Manager_8h" name="Policy_Manager.h" local="yes" imported="no">Policy_Manager.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="Stub_8i" name="Stub.i" local="yes" imported="no">Stub.i</includes>
    <class kind="class">TAO_Synchronous_Cancellation_Required</class>
  </compound>
  <compound kind="file">
    <name>Stub.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Stub_8h</filename>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="MProfile_8h" name="MProfile.h" local="yes" imported="no">tao/MProfile.h</includes>
    <includes id="ORB__Core__Auto__Ptr_8h" name="ORB_Core_Auto_Ptr.h" local="yes" imported="no">tao/ORB_Core_Auto_Ptr.h</includes>
    <namespace>TAO</namespace>
    <namespace>IOP</namespace>
    <class kind="class">TAO_Stub</class>
    <class kind="class">TAO_Stub_Auto_Ptr</class>
  </compound>
  <compound kind="file">
    <name>Stub.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Stub_8i</filename>
  </compound>
  <compound kind="file">
    <name>Stub_Factory.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Stub__Factory_8cpp</filename>
    <includes id="Stub__Factory_8h" name="Stub_Factory.h" local="yes" imported="no">Stub_Factory.h</includes>
  </compound>
  <compound kind="file">
    <name>Stub_Factory.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Stub__Factory_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">TAO_Stub_Factory</class>
  </compound>
  <compound kind="file">
    <name>Sync_Strategies.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Sync__Strategies_8cpp</filename>
    <includes id="Sync__Strategies_8h" name="Sync_Strategies.h" local="yes" imported="no">Sync_Strategies.h</includes>
    <includes id="Buffering__Constraint__Policy_8h" name="Buffering_Constraint_Policy.h" local="yes" imported="no">Buffering_Constraint_Policy.h</includes>
    <includes id="Stub_8h" name="Stub.h" local="yes" imported="no">Stub.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
  </compound>
  <compound kind="file">
    <name>Sync_Strategies.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Sync__Strategies_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <namespace>TAO</namespace>
    <namespace>TimeBase</namespace>
    <class kind="class">TAO_Sync_Strategy</class>
    <class kind="class">TAO_Transport_Sync_Strategy</class>
    <class kind="class">TAO_Eager_Buffering_Sync_Strategy</class>
    <class kind="class">TAO_Delayed_Buffering_Sync_Strategy</class>
    <member kind="typedef">
      <type>CORBA::ULongLong</type>
      <name>TimeT</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Synch_Invocation.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Synch__Invocation_8cpp</filename>
    <includes id="Synch__Invocation_8h" name="Synch_Invocation.h" local="yes" imported="no">Synch_Invocation.h</includes>
    <includes id="Profile__Transport__Resolver_8h" name="Profile_Transport_Resolver.h" local="yes" imported="no">Profile_Transport_Resolver.h</includes>
    <includes id="Profile_8h" name="Profile.h" local="yes" imported="no">Profile.h</includes>
    <includes id="Synch__Reply__Dispatcher_8h" name="Synch_Reply_Dispatcher.h" local="yes" imported="no">Synch_Reply_Dispatcher.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">Transport.h</includes>
    <includes id="Stub_8h" name="Stub.h" local="yes" imported="no">Stub.h</includes>
    <includes id="Bind__Dispatcher__Guard_8h" name="Bind_Dispatcher_Guard.h" local="yes" imported="no">Bind_Dispatcher_Guard.h</includes>
    <includes id="operation__details_8h" name="operation_details.h" local="yes" imported="no">operation_details.h</includes>
    <includes id="Wait__Strategy_8h" name="Wait_Strategy.h" local="yes" imported="no">Wait_Strategy.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="ORB__Constants_8h" name="ORB_Constants.h" local="yes" imported="no">ORB_Constants.h</includes>
    <includes id="Messaging__SyncScopeC_8h" name="Messaging_SyncScopeC.h" local="yes" imported="no">Messaging_SyncScopeC.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="Service__Context_8h" name="Service_Context.h" local="yes" imported="no">Service_Context.h</includes>
    <includes id="Synch__Invocation_8inl" name="Synch_Invocation.inl" local="yes" imported="no">Synch_Invocation.inl</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>Synch_Invocation.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Synch__Invocation_8h</filename>
    <includes id="Remote__Invocation_8h" name="Remote_Invocation.h" local="yes" imported="no">tao/Remote_Invocation.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Synch_Twoway_Invocation</class>
    <class kind="class">TAO::Synch_Oneway_Invocation</class>
    <class kind="class">TAO::Reply_Guard</class>
  </compound>
  <compound kind="file">
    <name>Synch_Invocation.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Synch__Invocation_8inl</filename>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>Synch_Queued_Message.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Synch__Queued__Message_8cpp</filename>
    <includes id="Synch__Queued__Message_8h" name="Synch_Queued_Message.h" local="yes" imported="no">Synch_Queued_Message.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
  </compound>
  <compound kind="file">
    <name>Synch_Queued_Message.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Synch__Queued__Message_8h</filename>
    <includes id="Queued__Message_8h" name="Queued_Message.h" local="yes" imported="no">Queued_Message.h</includes>
    <class kind="class">TAO_Synch_Queued_Message</class>
  </compound>
  <compound kind="file">
    <name>Synch_Refcountable.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Synch__Refcountable_8cpp</filename>
    <includes id="Synch__Refcountable_8h" name="Synch_Refcountable.h" local="yes" imported="no">Synch_Refcountable.h</includes>
    <includes id="Synch__Refcountable_8inl" name="Synch_Refcountable.inl" local="yes" imported="no">Synch_Refcountable.inl</includes>
  </compound>
  <compound kind="file">
    <name>Synch_Refcountable.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Synch__Refcountable_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">TAO_Export.h</includes>
    <class kind="class">TAO_Synch_Refcountable</class>
  </compound>
  <compound kind="file">
    <name>Synch_Refcountable.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Synch__Refcountable_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Synch_Reply_Dispatcher.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Synch__Reply__Dispatcher_8cpp</filename>
    <includes id="Synch__Reply__Dispatcher_8h" name="Synch_Reply_Dispatcher.h" local="yes" imported="no">Synch_Reply_Dispatcher.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="Pluggable__Messaging__Utils_8h" name="Pluggable_Messaging_Utils.h" local="yes" imported="no">Pluggable_Messaging_Utils.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
  </compound>
  <compound kind="file">
    <name>Synch_Reply_Dispatcher.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Synch__Reply__Dispatcher_8h</filename>
    <includes id="Reply__Dispatcher_8h" name="Reply_Dispatcher.h" local="yes" imported="no">tao/Reply_Dispatcher.h</includes>
    <includes id="LF__Invocation__Event_8h" name="LF_Invocation_Event.h" local="yes" imported="no">tao/LF_Invocation_Event.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>IOP</namespace>
    <class kind="class">TAO_Synch_Reply_Dispatcher</class>
  </compound>
  <compound kind="file">
    <name>SystemException.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>SystemException_8cpp</filename>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="Any__SystemException_8h" name="Any_SystemException.h" local="yes" imported="no">Any_SystemException.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">Environment.h</includes>
    <includes id="ORB__Constants_8h" name="ORB_Constants.h" local="yes" imported="no">ORB_Constants.h</includes>
    <includes id="CORBA__String_8h" name="CORBA_String.h" local="yes" imported="no">CORBA_String.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">CDR.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="SystemException_8inl" name="SystemException.inl" local="yes" imported="no">tao/SystemException.inl</includes>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_UNSPECIFIED_MINOR_CODE</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_ETIMEDOUT_MINOR_CODE</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_ENFILE_MINOR_CODE</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_EMFILE_MINOR_CODE</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_EPIPE_MINOR_CODE</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_ECONNREFUSED_MINOR_CODE</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_ENOENT_MINOR_CODE</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_EBADF_MINOR_CODE</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_ENOSYS_MINOR_CODE</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_EPERM_MINOR_CODE</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_EAFNOSUPPORT_MINOR_CODE</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_EAGAIN_MINOR_CODE</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_ENOMEM_MINOR_CODE</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_EACCES_MINOR_CODE</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_EFAULT_MINOR_CODE</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_EBUSY_MINOR_CODE</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_EEXIST_MINOR_CODE</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_EINVAL_MINOR_CODE</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_ECOMM_MINOR_CODE</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_ECONNRESET_MINOR_CODE</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_ENOTSUP_MINOR_CODE</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STANDARD_EXCEPTION_LIST</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a1</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a2</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a3</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a4</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a5</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a6</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char *</type>
      <name>repo_id_array</name>
      <anchor>a28</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const CORBA::ULong</type>
      <name>array_sz</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::excp_factory</type>
      <name>excp_array</name>
      <anchor>a30</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SystemException.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>SystemException_8h</filename>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <includes id="Exception_8h" name="Exception.h" local="yes" imported="no">tao/Exception.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">CORBA::SystemException</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a0</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="enumeration">
      <name>CompletionStatus</name>
      <anchor>a415</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMPLETED_YES</name>
      <anchor>a415a244</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMPLETED_NO</name>
      <anchor>a415a245</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMPLETED_MAYBE</name>
      <anchor>a415a246</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a369</anchor>
      <arglist>(UNKNOWN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a370</anchor>
      <arglist>(BAD_PARAM)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a371</anchor>
      <arglist>(NO_MEMORY)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a372</anchor>
      <arglist>(IMP_LIMIT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a373</anchor>
      <arglist>(COMM_FAILURE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a374</anchor>
      <arglist>(INV_OBJREF)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a375</anchor>
      <arglist>(OBJECT_NOT_EXIST)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a376</anchor>
      <arglist>(NO_PERMISSION)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a377</anchor>
      <arglist>(INTERNAL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a378</anchor>
      <arglist>(MARSHAL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a379</anchor>
      <arglist>(INITIALIZE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a380</anchor>
      <arglist>(NO_IMPLEMENT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a381</anchor>
      <arglist>(BAD_TYPECODE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a382</anchor>
      <arglist>(BAD_OPERATION)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a383</anchor>
      <arglist>(NO_RESOURCES)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a384</anchor>
      <arglist>(NO_RESPONSE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a385</anchor>
      <arglist>(PERSIST_STORE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a386</anchor>
      <arglist>(BAD_INV_ORDER)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a387</anchor>
      <arglist>(TRANSIENT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a388</anchor>
      <arglist>(FREE_MEM)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a389</anchor>
      <arglist>(INV_IDENT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a390</anchor>
      <arglist>(INV_FLAG)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a391</anchor>
      <arglist>(INTF_REPOS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a392</anchor>
      <arglist>(BAD_CONTEXT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a393</anchor>
      <arglist>(OBJ_ADAPTER)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a394</anchor>
      <arglist>(DATA_CONVERSION)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a395</anchor>
      <arglist>(INV_POLICY)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a396</anchor>
      <arglist>(REBIND)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a397</anchor>
      <arglist>(TIMEOUT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a398</anchor>
      <arglist>(TRANSACTION_UNAVAILABLE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a399</anchor>
      <arglist>(TRANSACTION_MODE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a400</anchor>
      <arglist>(TRANSACTION_REQUIRED)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a401</anchor>
      <arglist>(TRANSACTION_ROLLEDBACK)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a402</anchor>
      <arglist>(INVALID_TRANSACTION)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a403</anchor>
      <arglist>(CODESET_INCOMPATIBLE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a404</anchor>
      <arglist>(BAD_QOS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a405</anchor>
      <arglist>(INVALID_ACTIVITY)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a406</anchor>
      <arglist>(ACTIVITY_COMPLETED)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a407</anchor>
      <arglist>(ACTIVITY_REQUIRED)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a408</anchor>
      <arglist>(THREAD_CANCELLED)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SystemException.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>SystemException_8inl</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_STANDARD_SYSTEM_EXCEPTION_LIST</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a1</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a2</anchor>
      <arglist>(name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SystemExceptionA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>SystemExceptionA_8cpp</filename>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="Any__SystemException_8h" name="Any_SystemException.h" local="yes" imported="no">Any_SystemException.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">Any_Dual_Impl_T.h</includes>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">TypeCode.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">TypeCode_Constants.h</includes>
    <includes id="Enum__TypeCode_8h" name="Enum_TypeCode.h" local="yes" imported="no">Enum_TypeCode.h</includes>
    <includes id="TypeCode__Struct__Field_8h" name="TypeCode_Struct_Field.h" local="yes" imported="no">TypeCode_Struct_Field.h</includes>
    <includes id="Struct__TypeCode_8h" name="Struct_TypeCode.h" local="yes" imported="no">Struct_TypeCode.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">Null_RefCount_Policy.h</includes>
    <includes id="CORBA__String_8h" name="CORBA_String.h" local="yes" imported="no">CORBA_String.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <namespace>CORBA</namespace>
    <member kind="define">
      <type>#define</type>
      <name>STANDARD_EXCEPTION_LIST</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a1</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a2</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a3</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a4</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a5</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a6</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="typedef">
      <type>Struct&lt; char const *, CORBA::TypeCode_ptr const *, Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>tc_SystemException</name>
      <anchor>a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char const *const</type>
      <name>enumerators_CORBA_CompletionStatus</name>
      <anchor>a56</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>Enum&lt; char const *, char const *const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>tc_CompletionStatus</name>
      <anchor>a57</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/CompletionStatus:1.0&quot;,&quot;CompletionStatus&quot;, enumerators_CORBA_CompletionStatus, 3)</arglist>
    </member>
    <member kind="variable">
      <type>TypeCode_ptr const</type>
      <name>_tc_CompletionStatus</name>
      <anchor>a247</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>fields_CORBA_SystemException</name>
      <anchor>a58</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Tagged_Components.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Tagged__Components_8cpp</filename>
    <includes id="Tagged__Components_8h" name="Tagged_Components.h" local="yes" imported="no">tao/Tagged_Components.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Tagged__Components_8i" name="Tagged_Components.i" local="yes" imported="no">tao/Tagged_Components.i</includes>
  </compound>
  <compound kind="file">
    <name>Tagged_Components.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Tagged__Components_8h</filename>
    <includes id="IOP__IORC_8h" name="IOP_IORC.h" local="yes" imported="no">tao/IOP_IORC.h</includes>
    <includes id="CONV__FRAMEC_8h" name="CONV_FRAMEC.h" local="yes" imported="no">tao/CONV_FRAMEC.h</includes>
    <class kind="class">TAO_Tagged_Components</class>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_TAG_ENDPOINTS</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Tagged_Components.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Tagged__Components_8i</filename>
  </compound>
  <compound kind="file">
    <name>Tagged_Profile.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Tagged__Profile_8cpp</filename>
    <includes id="Tagged__Profile_8h" name="Tagged_Profile.h" local="yes" imported="no">tao/Tagged_Profile.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <includes id="Acceptor__Registry_8h" name="Acceptor_Registry.h" local="yes" imported="no">tao/Acceptor_Registry.h</includes>
    <includes id="Transport__Acceptor_8h" name="Transport_Acceptor.h" local="yes" imported="no">tao/Transport_Acceptor.h</includes>
    <includes id="Thread__Lane__Resources_8h" name="Thread_Lane_Resources.h" local="yes" imported="no">tao/Thread_Lane_Resources.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <includes id="target__specification_8h" name="target_specification.h" local="yes" imported="no">tao/target_specification.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Tagged__Profile_8i" name="Tagged_Profile.i" local="yes" imported="no">tao/Tagged_Profile.i</includes>
  </compound>
  <compound kind="file">
    <name>Tagged_Profile.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Tagged__Profile_8h</filename>
    <includes id="IOPC_8h" name="IOPC.h" local="yes" imported="no">tao/IOPC.h</includes>
    <includes id="Object__KeyC_8h" name="Object_KeyC.h" local="yes" imported="no">tao/Object_KeyC.h</includes>
    <class kind="class">TAO_Tagged_Profile</class>
  </compound>
  <compound kind="file">
    <name>Tagged_Profile.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Tagged__Profile_8i</filename>
  </compound>
  <compound kind="file">
    <name>TAO.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TAO_8pidl</filename>
    <includes id="Policy_8pidl" name="Policy.pidl" local="yes" imported="yes">Policy.pidl</includes>
    <includes id="TimeBase_8pidl" name="TimeBase.pidl" local="yes" imported="yes">TimeBase.pidl</includes>
    <includes id="Messaging__SyncScope_8pidl" name="Messaging_SyncScope.pidl" local="yes" imported="yes">Messaging_SyncScope.pidl</includes>
    <namespace>TAO</namespace>
    <class kind="struct">TAO::BufferingConstraint</class>
    <class kind="interface">TAO::BufferingConstraintPolicy</class>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>BufferingConstraintMode</name>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BufferingConstraintMode</type>
      <name>BUFFER_FLUSH</name>
      <anchor>a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BufferingConstraintMode</type>
      <name>BUFFER_TIMEOUT</name>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BufferingConstraintMode</type>
      <name>BUFFER_MESSAGE_COUNT</name>
      <anchor>a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BufferingConstraintMode</type>
      <name>BUFFER_MESSAGE_BYTES</name>
      <anchor>a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::PolicyType</type>
      <name>BUFFERING_CONSTRAINT_POLICY_TYPE</name>
      <anchor>a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Messaging::SyncScope</type>
      <name>SYNC_EAGER_BUFFERING</name>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Messaging::SyncScope</type>
      <name>SYNC_DELAYED_BUFFERING</name>
      <anchor>a48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TAO_Export.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TAO__Export_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_HAS_DLL</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_Export</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SINGLETON_DECLARATION</name>
      <anchor>a2</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SINGLETON_DECLARE</name>
      <anchor>a3</anchor>
      <arglist>(SINGLETON_TYPE, CLASS, LOCK)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TAO_FlResource_Export.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TAO__FlResource__Export_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_FLRESOURCE_HAS_DLL</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_FlResource_Export</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_FLRESOURCE_SINGLETON_DECLARATION</name>
      <anchor>a2</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_FLRESOURCE_SINGLETON_DECLARE</name>
      <anchor>a3</anchor>
      <arglist>(SINGLETON_TYPE, CLASS, LOCK)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_FLRESOURCE_NTRACE</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_FLRESOURCE_TRACE</name>
      <anchor>a5</anchor>
      <arglist>(X)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TAO_Internal.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TAO__Internal_8cpp</filename>
    <includes id="TAO__Internal_8h" name="TAO_Internal.h" local="yes" imported="no">TAO_Internal.h</includes>
    <includes id="default__server_8h" name="default_server.h" local="yes" imported="no">default_server.h</includes>
    <includes id="default__client_8h" name="default_client.h" local="yes" imported="no">default_client.h</includes>
    <includes id="default__resource_8h" name="default_resource.h" local="yes" imported="no">default_resource.h</includes>
    <includes id="IIOP__Factory_8h" name="IIOP_Factory.h" local="yes" imported="no">IIOP_Factory.h</includes>
    <includes id="MCAST__Parser_8h" name="MCAST_Parser.h" local="yes" imported="no">MCAST_Parser.h</includes>
    <includes id="CORBANAME__Parser_8h" name="CORBANAME_Parser.h" local="yes" imported="no">CORBANAME_Parser.h</includes>
    <includes id="CORBALOC__Parser_8h" name="CORBALOC_Parser.h" local="yes" imported="no">CORBALOC_Parser.h</includes>
    <includes id="FILE__Parser_8h" name="FILE_Parser.h" local="yes" imported="no">FILE_Parser.h</includes>
    <includes id="DLL__Parser_8h" name="DLL_Parser.h" local="yes" imported="no">DLL_Parser.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="Adapter__Factory_8h" name="Adapter_Factory.h" local="yes" imported="no">Adapter_Factory.h</includes>
    <includes id="Default__Stub__Factory_8h" name="Default_Stub_Factory.h" local="yes" imported="no">Default_Stub_Factory.h</includes>
    <includes id="Default__Endpoint__Selector__Factory_8h" name="Default_Endpoint_Selector_Factory.h" local="yes" imported="no">Default_Endpoint_Selector_Factory.h</includes>
    <includes id="Default__Protocols__Hooks_8h" name="Default_Protocols_Hooks.h" local="yes" imported="no">Default_Protocols_Hooks.h</includes>
    <includes id="Default__Thread__Lane__Resources__Manager_8h" name="Default_Thread_Lane_Resources_Manager.h" local="yes" imported="no">Default_Thread_Lane_Resources_Manager.h</includes>
    <includes id="Default__Collocation__Resolver_8h" name="Default_Collocation_Resolver.h" local="yes" imported="no">Default_Collocation_Resolver.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="StringSeqC_8h" name="StringSeqC.h" local="yes" imported="no">StringSeqC.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_RESOURCE_FACTORY_ARGS</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_SERVER_STRATEGY_FACTORY_ARGS</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_DEFAULT_CLIENT_STRATEGY_FACTORY_ARGS</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>open_services_i</name>
      <anchor>a7</anchor>
      <arglist>(int &amp;argc, char **argv, bool ignore_default_svc_conf_file=false, bool skip_service_config_open=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>open_services_i</name>
      <anchor>a8</anchor>
      <arglist>(int &amp;argc, char **argv, bool ignore_default_svc_conf_file, bool skip_service_config_open)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>long</type>
      <name>service_open_count</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>char const *</type>
      <name>resource_factory_args</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>char const *</type>
      <name>server_strategy_factory_args</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>char const *</type>
      <name>client_strategy_factory_args</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TAO_Internal.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TAO__Internal_8h</filename>
    <namespace>TAO</namespace>
    <namespace>ORB</namespace>
    <namespace>TAO::ORB</namespace>
    <member kind="function">
      <type>int</type>
      <name>open_services</name>
      <anchor>a1</anchor>
      <arglist>(int &amp;argc, ACE_TCHAR **argv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close_services</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>default_svc_conf_entries</name>
      <anchor>a3</anchor>
      <arglist>(char const *rf_args, char const *ssf_args, char const *csf_args)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TAO_QtResource_Export.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TAO__QtResource__Export_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_QTRESOURCE_HAS_DLL</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_QtResource_Export</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_QTRESOURCE_SINGLETON_DECLARATION</name>
      <anchor>a2</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_QTRESOURCE_SINGLETON_DECLARE</name>
      <anchor>a3</anchor>
      <arglist>(SINGLETON_TYPE, CLASS, LOCK)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_QTRESOURCE_NTRACE</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_QTRESOURCE_TRACE</name>
      <anchor>a5</anchor>
      <arglist>(X)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TAO_Server_Request.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TAO__Server__Request_8cpp</filename>
    <includes id="TAO__Server__Request_8h" name="TAO_Server_Request.h" local="yes" imported="no">TAO_Server_Request.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="Timeprobe_8h" name="Timeprobe.h" local="yes" imported="no">Timeprobe.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="Pluggable__Messaging_8h" name="Pluggable_Messaging.h" local="yes" imported="no">Pluggable_Messaging.h</includes>
    <includes id="GIOP__Utils_8h" name="GIOP_Utils.h" local="yes" imported="no">GIOP_Utils.h</includes>
    <includes id="Stub_8h" name="Stub.h" local="yes" imported="no">Stub.h</includes>
    <includes id="operation__details_8h" name="operation_details.h" local="yes" imported="no">operation_details.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">Transport.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">CDR.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="TAO__Server__Request_8i" name="TAO_Server_Request.i" local="yes" imported="no">TAO_Server_Request.i</includes>
  </compound>
  <compound kind="file">
    <name>TAO_Server_Request.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TAO__Server__Request_8h</filename>
    <includes id="Tagged__Profile_8h" name="Tagged_Profile.h" local="yes" imported="no">Tagged_Profile.h</includes>
    <includes id="Service__Context_8h" name="Service_Context.h" local="yes" imported="no">Service_Context.h</includes>
    <includes id="PICurrent_8h" name="PICurrent.h" local="yes" imported="no">PICurrent.h</includes>
    <includes id="PICurrent__Copy__Callback_8h" name="PICurrent_Copy_Callback.h" local="yes" imported="no">PICurrent_Copy_Callback.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">TAO_ServerRequest</class>
  </compound>
  <compound kind="file">
    <name>TAO_Server_Request.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TAO__Server__Request_8i</filename>
  </compound>
  <compound kind="file">
    <name>TAO_Singleton.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TAO__Singleton_8cpp</filename>
    <includes id="TAO__Singleton_8h" name="TAO_Singleton.h" local="yes" imported="no">tao/TAO_Singleton.h</includes>
    <includes id="TAO__Singleton__Manager_8h" name="TAO_Singleton_Manager.h" local="yes" imported="no">tao/TAO_Singleton_Manager.h</includes>
    <includes id="TAO__Singleton_8inl" name="TAO_Singleton.inl" local="yes" imported="no">tao/TAO_Singleton.inl</includes>
  </compound>
  <compound kind="file">
    <name>TAO_Singleton.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TAO__Singleton_8h</filename>
    <class kind="class">TAO_Singleton</class>
    <class kind="class">TAO_TSS_Singleton</class>
  </compound>
  <compound kind="file">
    <name>TAO_Singleton.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TAO__Singleton_8inl</filename>
  </compound>
  <compound kind="file">
    <name>TAO_Singleton_Manager.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TAO__Singleton__Manager_8cpp</filename>
    <includes id="TAO__Singleton__Manager_8h" name="TAO_Singleton_Manager.h" local="yes" imported="no">tao/TAO_Singleton_Manager.h</includes>
    <includes id="Exception_8h" name="Exception.h" local="yes" imported="no">tao/Exception.h</includes>
    <includes id="TAO__Singleton__Manager_8inl" name="TAO_Singleton_Manager.inl" local="yes" imported="no">tao/TAO_Singleton_Manager.inl</includes>
    <member kind="function">
      <type>void</type>
      <name>TAO_Singleton_Manager_cleanup_destroyer</name>
      <anchor>a0</anchor>
      <arglist>(void *, void *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TAO_Singleton_Manager.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TAO__Singleton__Manager_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <class kind="class">TAO_Singleton_Manager</class>
    <member kind="typedef">
      <type>void(*</type>
      <name>TAO_unexpected_handler</name>
      <anchor>a0</anchor>
      <arglist>)(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TAO_Singleton_Manager_cleanup_destroyer</name>
      <anchor>a1</anchor>
      <arglist>(void *, void *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TAO_Singleton_Manager.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TAO__Singleton__Manager_8inl</filename>
  </compound>
  <compound kind="file">
    <name>TAO_TkResource_Export.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TAO__TkResource__Export_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_TKRESOURCE_HAS_DLL</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_TkResource_Export</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_TKRESOURCE_SINGLETON_DECLARATION</name>
      <anchor>a2</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_TKRESOURCE_SINGLETON_DECLARE</name>
      <anchor>a3</anchor>
      <arglist>(SINGLETON_TYPE, CLASS, LOCK)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_TKRESOURCE_NTRACE</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_TKRESOURCE_TRACE</name>
      <anchor>a5</anchor>
      <arglist>(X)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TAO_XtResource_Export.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TAO__XtResource__Export_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_XTRESOURCE_HAS_DLL</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_XtResource_Export</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_XTRESOURCE_SINGLETON_DECLARATION</name>
      <anchor>a2</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_XTRESOURCE_SINGLETON_DECLARE</name>
      <anchor>a3</anchor>
      <arglist>(SINGLETON_TYPE, CLASS, LOCK)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_XTRESOURCE_NTRACE</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_XTRESOURCE_TRACE</name>
      <anchor>a5</anchor>
      <arglist>(X)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TAOA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TAOA_8cpp</filename>
    <includes id="TAOC_8h" name="TAOC.h" local="yes" imported="no">TAOC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Objref__TypeCode_8h" name="Objref_TypeCode.h" local="yes" imported="no">tao/Objref_TypeCode.h</includes>
    <includes id="Struct__TypeCode_8h" name="Struct_TypeCode.h" local="yes" imported="no">tao/Struct_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Impl__T_8h" name="Any_Impl_T.h" local="yes" imported="no">tao/Any_Impl_T.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const TAO::BufferingConstraint &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, TAO::BufferingConstraint *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a9</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, TAO::BufferingConstraint *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a10</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const TAO::BufferingConstraint *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; TAO::BufferingConstraintPolicy &gt;::to_object</name>
      <anchor>a138</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; TAO::BufferingConstraintPolicy &gt;::marshal_value</name>
      <anchor>a139</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; TAO::BufferingConstraintPolicy &gt;::demarshal_value</name>
      <anchor>a140</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, TAO::BufferingConstraintPolicy_ptr _tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, TAO::BufferingConstraintPolicy_ptr *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a16</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, TAO::BufferingConstraintPolicy_ptr &amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_TAO_BufferingConstraintMode</name>
      <anchor>a0</anchor>
      <arglist>(&quot;IDL:tao/TAO/BufferingConstraintMode:1.0&quot;,&quot;BufferingConstraintMode&quot;,&amp;CORBA::_tc_ushort)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_BufferingConstraintMode</name>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_fields_TAO_BufferingConstraint</name>
      <anchor>a2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_TAO_BufferingConstraint</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::tk_struct,&quot;IDL:tao/TAO/BufferingConstraint:1.0&quot;,&quot;BufferingConstraint&quot;, _tao_fields_TAO_BufferingConstraint, 4)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_BufferingConstraint</name>
      <anchor>a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Objref&lt; char const *, CORBA::tk_local_interface, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_TAO_BufferingConstraintPolicy</name>
      <anchor>a5</anchor>
      <arglist>(&quot;IDL:tao/TAO/BufferingConstraintPolicy:1.0&quot;,&quot;BufferingConstraintPolicy&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_BufferingConstraintPolicy</name>
      <anchor>a51</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TAOC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TAOC_8cpp</filename>
    <includes id="TAOC_8h" name="TAOC.h" local="yes" imported="no">TAOC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const TAO::BufferingConstraint &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;strm, TAO::BufferingConstraint &amp;_tao_aggregate)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TAOC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TAOC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">tao/Object.h</includes>
    <includes id="Objref__VarOut__T_8h" name="Objref_VarOut_T.h" local="yes" imported="no">tao/Objref_VarOut_T.h</includes>
    <includes id="VarOut__T_8h" name="VarOut_T.h" local="yes" imported="no">tao/VarOut_T.h</includes>
    <includes id="PolicyC_8h" name="PolicyC.h" local="yes" imported="no">tao/PolicyC.h</includes>
    <includes id="TimeBaseC_8h" name="TimeBaseC.h" local="yes" imported="no">tao/TimeBaseC.h</includes>
    <includes id="Messaging__SyncScopeC_8h" name="Messaging_SyncScopeC.h" local="yes" imported="no">tao/Messaging_SyncScopeC.h</includes>
    <namespace>TAO</namespace>
    <class kind="struct">TAO::BufferingConstraint</class>
    <class kind="interface">TAO::BufferingConstraintPolicy</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::TAO::BufferingConstraintPolicy &gt;</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_TAO_BUFFERINGCONSTRAINTPOLICY__VAR_OUT_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_TAO_BUFFERINGCONSTRAINTPOLICY_CH_</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_TAO_BUFFERINGCONSTRAINTPOLICY__TRAITS_CH_</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::UShort_out</type>
      <name>BufferingConstraintMode_out</name>
      <anchor>a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Fixed_Var_T&lt; BufferingConstraint &gt;</type>
      <name>BufferingConstraint_var</name>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BufferingConstraint &amp;</type>
      <name>BufferingConstraint_out</name>
      <anchor>a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BufferingConstraintPolicy *</type>
      <name>BufferingConstraintPolicy_ptr</name>
      <anchor>a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; BufferingConstraintPolicy &gt;</type>
      <name>BufferingConstraintPolicy_var</name>
      <anchor>a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; BufferingConstraintPolicy &gt;</type>
      <name>BufferingConstraintPolicy_out</name>
      <anchor>a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::Any &amp;, const TAO::BufferingConstraint &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::Any &amp;, TAO::BufferingConstraint *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a12</anchor>
      <arglist>(const CORBA::Any &amp;, TAO::BufferingConstraint *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a13</anchor>
      <arglist>(const CORBA::Any &amp;, const TAO::BufferingConstraint *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::Any &amp;, TAO::BufferingConstraintPolicy_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::Any &amp;, TAO::BufferingConstraintPolicy_ptr *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a16</anchor>
      <arglist>(const CORBA::Any &amp;, TAO::BufferingConstraintPolicy_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a17</anchor>
      <arglist>(TAO_OutputCDR &amp;, const TAO::BufferingConstraint &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a18</anchor>
      <arglist>(TAO_InputCDR &amp;, TAO::BufferingConstraint &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TAOS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TAOS_8h</filename>
  </compound>
  <compound kind="file">
    <name>target_specification.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>target__specification_8cpp</filename>
    <includes id="target__specification_8h" name="target_specification.h" local="yes" imported="no">tao/target_specification.h</includes>
    <includes id="target__specification_8i" name="target_specification.i" local="yes" imported="no">target_specification.i</includes>
  </compound>
  <compound kind="file">
    <name>target_specification.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>target__specification_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <namespace>IOP</namespace>
    <namespace>TAO</namespace>
    <class kind="class">TAO_Target_Specification</class>
  </compound>
  <compound kind="file">
    <name>target_specification.i</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>target__specification_8i</filename>
  </compound>
  <compound kind="file">
    <name>TC_Constants_Forward.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TC__Constants__Forward_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <namespace>CORBA</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION_LIST</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a1</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_null</name>
      <anchor>a248</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_void</name>
      <anchor>a249</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_short</name>
      <anchor>a250</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_long</name>
      <anchor>a251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_ushort</name>
      <anchor>a252</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_ulong</name>
      <anchor>a253</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_float</name>
      <anchor>a254</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_double</name>
      <anchor>a255</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_boolean</name>
      <anchor>a256</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_char</name>
      <anchor>a257</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_octet</name>
      <anchor>a258</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_any</name>
      <anchor>a259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_TypeCode</name>
      <anchor>a260</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_Principal</name>
      <anchor>a261</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_Object</name>
      <anchor>a262</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_string</name>
      <anchor>a263</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_longlong</name>
      <anchor>a264</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_ulonglong</name>
      <anchor>a265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_longdouble</name>
      <anchor>a266</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_wchar</name>
      <anchor>a267</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_wstring</name>
      <anchor>a268</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_SYSTEM_EXCEPTION_LIST TAO_Export TypeCode_ptr const</type>
      <name>_tc_UnknownUserException</name>
      <anchor>a269</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_NamedValue</name>
      <anchor>a270</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Thread_Lane_Resources.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Thread__Lane__Resources_8cpp</filename>
    <includes id="Thread__Lane__Resources_8h" name="Thread_Lane_Resources.h" local="yes" imported="no">tao/Thread_Lane_Resources.h</includes>
    <includes id="Acceptor__Registry_8h" name="Acceptor_Registry.h" local="yes" imported="no">tao/Acceptor_Registry.h</includes>
    <includes id="LF__Follower_8h" name="LF_Follower.h" local="yes" imported="no">tao/LF_Follower.h</includes>
    <includes id="Leader__Follower_8h" name="Leader_Follower.h" local="yes" imported="no">tao/Leader_Follower.h</includes>
    <includes id="Connection__Handler_8h" name="Connection_Handler.h" local="yes" imported="no">tao/Connection_Handler.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">tao/Transport.h</includes>
    <includes id="Connector__Registry_8h" name="Connector_Registry.h" local="yes" imported="no">tao/Connector_Registry.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
  </compound>
  <compound kind="file">
    <name>Thread_Lane_Resources.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Thread__Lane__Resources_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <includes id="params_8h" name="params.h" local="yes" imported="no">params.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">TAO_Thread_Lane_Resources</class>
  </compound>
  <compound kind="file">
    <name>Thread_Lane_Resources_Manager.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Thread__Lane__Resources__Manager_8cpp</filename>
    <includes id="Thread__Lane__Resources__Manager_8h" name="Thread_Lane_Resources_Manager.h" local="yes" imported="no">tao/Thread_Lane_Resources_Manager.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <includes id="LF__Strategy_8h" name="LF_Strategy.h" local="yes" imported="no">tao/LF_Strategy.h</includes>
  </compound>
  <compound kind="file">
    <name>Thread_Lane_Resources_Manager.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Thread__Lane__Resources__Manager_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">TAO_Thread_Lane_Resources_Manager</class>
    <class kind="class">TAO_Thread_Lane_Resources_Manager_Factory</class>
  </compound>
  <compound kind="file">
    <name>Thread_Per_Connection_Handler.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Thread__Per__Connection__Handler_8cpp</filename>
    <includes id="Thread__Per__Connection__Handler_8h" name="Thread_Per_Connection_Handler.h" local="yes" imported="no">Thread_Per_Connection_Handler.h</includes>
    <includes id="Connection__Handler_8h" name="Connection_Handler.h" local="yes" imported="no">Connection_Handler.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">Transport.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
  </compound>
  <compound kind="file">
    <name>Thread_Per_Connection_Handler.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Thread__Per__Connection__Handler_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <class kind="class">TAO_Thread_Per_Connection_Handler</class>
    <member kind="typedef">
      <type>ACE_Task&lt; ACE_NULL_SYNCH &gt;</type>
      <name>TAO_TPC_BASE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TimeBase.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TimeBase_8pidl</filename>
    <namespace>TimeBase</namespace>
    <class kind="struct">TimeBase::UtcT</class>
    <class kind="struct">TimeBase::IntervalT</class>
    <member kind="typedef">
      <type>TimeT</type>
      <name>InaccuracyT</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>TdfT</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TimeBaseA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TimeBaseA_8cpp</filename>
    <includes id="TimeBaseC_8h" name="TimeBaseC.h" local="yes" imported="no">TimeBaseC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Struct__TypeCode_8h" name="Struct_TypeCode.h" local="yes" imported="no">tao/Struct_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>TimeBase</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const TimeBase::UtcT &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, TimeBase::UtcT *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a14</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, TimeBase::UtcT *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a15</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const TimeBase::UtcT *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const TimeBase::IntervalT &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a17</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, TimeBase::IntervalT *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a18</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, TimeBase::IntervalT *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a19</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const TimeBase::IntervalT *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_TimeBase_TimeT</name>
      <anchor>a0</anchor>
      <arglist>(&quot;IDL:omg.org/TimeBase/TimeT:1.0&quot;,&quot;TimeT&quot;,&amp;CORBA::_tc_ulonglong)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_TimeT</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_TimeBase_InaccuracyT</name>
      <anchor>a2</anchor>
      <arglist>(&quot;IDL:omg.org/TimeBase/InaccuracyT:1.0&quot;,&quot;InaccuracyT&quot;,&amp;TimeBase::_tc_TimeT)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_InaccuracyT</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_TimeBase_TdfT</name>
      <anchor>a4</anchor>
      <arglist>(&quot;IDL:omg.org/TimeBase/TdfT:1.0&quot;,&quot;TdfT&quot;,&amp;CORBA::_tc_short)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_TdfT</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_fields_TimeBase_UtcT</name>
      <anchor>a6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_TimeBase_UtcT</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::tk_struct,&quot;IDL:omg.org/TimeBase/UtcT:1.0&quot;,&quot;UtcT&quot;, _tao_fields_TimeBase_UtcT, 4)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_UtcT</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>_tao_fields_TimeBase_IntervalT</name>
      <anchor>a9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_TimeBase_IntervalT</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::tk_struct,&quot;IDL:omg.org/TimeBase/IntervalT:1.0&quot;,&quot;IntervalT&quot;, _tao_fields_TimeBase_IntervalT, 2)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_IntervalT</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TimeBaseC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TimeBaseC_8cpp</filename>
    <includes id="TimeBaseC_8h" name="TimeBaseC.h" local="yes" imported="no">TimeBaseC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const TimeBase::UtcT &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;strm, TimeBase::UtcT &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const TimeBase::IntervalT &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_InputCDR &amp;strm, TimeBase::IntervalT &amp;_tao_aggregate)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TimeBaseC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TimeBaseC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="VarOut__T_8h" name="VarOut_T.h" local="yes" imported="no">tao/VarOut_T.h</includes>
    <namespace>TimeBase</namespace>
    <namespace>TAO</namespace>
    <class kind="struct">TimeBase::UtcT</class>
    <class kind="struct">TimeBase::IntervalT</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::ULongLong_out</type>
      <name>TimeT_out</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeT_out</type>
      <name>InaccuracyT_out</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::Short_out</type>
      <name>TdfT_out</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Fixed_Var_T&lt; UtcT &gt;</type>
      <name>UtcT_var</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UtcT &amp;</type>
      <name>UtcT_out</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Fixed_Var_T&lt; IntervalT &gt;</type>
      <name>IntervalT_var</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntervalT &amp;</type>
      <name>IntervalT_out</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::Any &amp;, const TimeBase::UtcT &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::Any &amp;, TimeBase::UtcT *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a10</anchor>
      <arglist>(const CORBA::Any &amp;, TimeBase::UtcT *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a11</anchor>
      <arglist>(const CORBA::Any &amp;, const TimeBase::UtcT *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::Any &amp;, const TimeBase::IntervalT &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::Any &amp;, TimeBase::IntervalT *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a14</anchor>
      <arglist>(const CORBA::Any &amp;, TimeBase::IntervalT *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a15</anchor>
      <arglist>(const CORBA::Any &amp;, const TimeBase::IntervalT *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a16</anchor>
      <arglist>(TAO_OutputCDR &amp;, const TimeBase::UtcT &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a17</anchor>
      <arglist>(TAO_InputCDR &amp;, TimeBase::UtcT &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a18</anchor>
      <arglist>(TAO_OutputCDR &amp;, const TimeBase::IntervalT &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a19</anchor>
      <arglist>(TAO_InputCDR &amp;, TimeBase::IntervalT &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TimeBaseS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TimeBaseS_8h</filename>
  </compound>
  <compound kind="file">
    <name>Timeprobe.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Timeprobe_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_PP_TIMEPROBE</name>
      <anchor>a0</anchor>
      <arglist>(id)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_FUNCTION_PP_TIMEPROBE</name>
      <anchor>a1</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_MINIMAL_TIMEPROBE</name>
      <anchor>a2</anchor>
      <arglist>(id)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TkResource_Factory.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TkResource__Factory_8cpp</filename>
    <includes id="TkResource__Factory_8h" name="TkResource_Factory.h" local="yes" imported="no">tao/TkResource_Factory.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>TkResource_Factory.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TkResource__Factory_8h</filename>
    <includes id="TAO__TkResource__Export_8h" name="TAO_TkResource_Export.h" local="yes" imported="no">tao/TAO_TkResource_Export.h</includes>
    <includes id="GUIResource__Factory_8h" name="GUIResource_Factory.h" local="yes" imported="no">tao/GUIResource_Factory.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::TkResource_Factory</class>
  </compound>
  <compound kind="file">
    <name>TkResource_Loader.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TkResource__Loader_8cpp</filename>
    <includes id="TkResource__Loader_8h" name="TkResource_Loader.h" local="yes" imported="no">TkResource_Loader.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="TkResource__Factory_8h" name="TkResource_Factory.h" local="yes" imported="no">TkResource_Factory.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>TkResource_Loader.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TkResource__Loader_8h</filename>
    <includes id="TAO__TkResource__Export_8h" name="TAO_TkResource_Export.h" local="yes" imported="no">tao/TAO_TkResource_Export.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::TkResource_Loader</class>
  </compound>
  <compound kind="file">
    <name>Transport.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Transport_8cpp</filename>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">Transport.h</includes>
    <includes id="LF__Follower_8h" name="LF_Follower.h" local="yes" imported="no">LF_Follower.h</includes>
    <includes id="Leader__Follower_8h" name="Leader_Follower.h" local="yes" imported="no">Leader_Follower.h</includes>
    <includes id="Client__Strategy__Factory_8h" name="Client_Strategy_Factory.h" local="yes" imported="no">Client_Strategy_Factory.h</includes>
    <includes id="Wait__Strategy_8h" name="Wait_Strategy.h" local="yes" imported="no">Wait_Strategy.h</includes>
    <includes id="Transport__Mux__Strategy_8h" name="Transport_Mux_Strategy.h" local="yes" imported="no">Transport_Mux_Strategy.h</includes>
    <includes id="Stub_8h" name="Stub.h" local="yes" imported="no">Stub.h</includes>
    <includes id="Sync__Strategies_8h" name="Sync_Strategies.h" local="yes" imported="no">Sync_Strategies.h</includes>
    <includes id="Connection__Handler_8h" name="Connection_Handler.h" local="yes" imported="no">Connection_Handler.h</includes>
    <includes id="Pluggable__Messaging_8h" name="Pluggable_Messaging.h" local="yes" imported="no">Pluggable_Messaging.h</includes>
    <includes id="Synch__Queued__Message_8h" name="Synch_Queued_Message.h" local="yes" imported="no">Synch_Queued_Message.h</includes>
    <includes id="Asynch__Queued__Message_8h" name="Asynch_Queued_Message.h" local="yes" imported="no">Asynch_Queued_Message.h</includes>
    <includes id="Flushing__Strategy_8h" name="Flushing_Strategy.h" local="yes" imported="no">Flushing_Strategy.h</includes>
    <includes id="Thread__Lane__Resources_8h" name="Thread_Lane_Resources.h" local="yes" imported="no">Thread_Lane_Resources.h</includes>
    <includes id="Resume__Handle_8h" name="Resume_Handle.h" local="yes" imported="no">Resume_Handle.h</includes>
    <includes id="Codeset__Manager_8h" name="Codeset_Manager.h" local="yes" imported="no">Codeset_Manager.h</includes>
    <includes id="Codeset__Translator__Factory_8h" name="Codeset_Translator_Factory.h" local="yes" imported="no">Codeset_Translator_Factory.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">CDR.h</includes>
    <includes id="Transport_8inl" name="Transport.inl" local="yes" imported="no">Transport.inl</includes>
    <member kind="define">
      <type>#define</type>
      <name>DUMP_IOV_PREFIX</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>dump_iov</name>
      <anchor>a1</anchor>
      <arglist>(iovec *iov, int iovcnt, size_t id, size_t current_transfer, const char *location)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Transport.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Transport_8h</filename>
    <includes id="Transport__Cache__Manager_8h" name="Transport_Cache_Manager.h" local="yes" imported="no">Transport_Cache_Manager.h</includes>
    <includes id="Transport__Timer_8h" name="Transport_Timer.h" local="yes" imported="no">tao/Transport_Timer.h</includes>
    <includes id="Incoming__Message__Queue_8h" name="Incoming_Message_Queue.h" local="yes" imported="no">tao/Incoming_Message_Queue.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO_Transport</class>
    <class kind="class">TAO_Transport_Refcount_Guard</class>
    <member kind="enumeration">
      <name>Connection_Role</name>
      <anchor>a153</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_UNSPECIFIED_ROLE</name>
      <anchor>a153a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_SERVER_ROLE</name>
      <anchor>a153a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CLIENT_ROLE</name>
      <anchor>a153a60</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Transport.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Transport_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Transport_Acceptor.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Transport__Acceptor_8cpp</filename>
    <includes id="Transport__Acceptor_8h" name="Transport_Acceptor.h" local="yes" imported="no">Transport_Acceptor.h</includes>
    <includes id="Transport__Acceptor_8inl" name="Transport_Acceptor.inl" local="yes" imported="no">Transport_Acceptor.inl</includes>
  </compound>
  <compound kind="file">
    <name>Transport_Acceptor.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Transport__Acceptor_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <namespace>IOP</namespace>
    <namespace>TAO</namespace>
    <class kind="class">TAO_Acceptor</class>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>TAO_ORB_TYPE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Transport_Acceptor.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Transport__Acceptor_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Transport_Cache_Manager.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Transport__Cache__Manager_8cpp</filename>
    <includes id="Transport__Cache__Manager_8h" name="Transport_Cache_Manager.h" local="yes" imported="no">tao/Transport_Cache_Manager.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">tao/Transport.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <includes id="Connection__Purging__Strategy_8h" name="Connection_Purging_Strategy.h" local="yes" imported="no">tao/Connection_Purging_Strategy.h</includes>
    <includes id="Condition_8h" name="Condition.h" local="yes" imported="no">tao/Condition.h</includes>
    <includes id="Transport__Cache__Manager_8inl" name="Transport_Cache_Manager.inl" local="yes" imported="no">tao/Transport_Cache_Manager.inl</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>Transport_Cache_Manager.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Transport__Cache__Manager_8h</filename>
    <includes id="Cache__Entries_8h" name="Cache_Entries.h" local="yes" imported="no">tao/Cache_Entries.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Transport_Cache_Manager</class>
    <member kind="define">
      <type>#define</type>
      <name>ACE_LACKS_PRAGMA_ONCE</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Unbounded_Set&lt; TAO_Connection_Handler * &gt;</type>
      <name>Connection_Handler_Set</name>
      <anchor>a61</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Transport_Cache_Manager.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Transport__Cache__Manager_8inl</filename>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>Transport_Connector.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Transport__Connector_8cpp</filename>
    <includes id="Transport__Connector_8h" name="Transport_Connector.h" local="yes" imported="no">Transport_Connector.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">Transport.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="MProfile_8h" name="MProfile.h" local="yes" imported="no">MProfile.h</includes>
    <includes id="Profile_8h" name="Profile.h" local="yes" imported="no">Profile.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">Environment.h</includes>
    <includes id="Thread__Lane__Resources_8h" name="Thread_Lane_Resources.h" local="yes" imported="no">Thread_Lane_Resources.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <includes id="Connect__Strategy_8h" name="Connect_Strategy.h" local="yes" imported="no">Connect_Strategy.h</includes>
    <includes id="Client__Strategy__Factory_8h" name="Client_Strategy_Factory.h" local="yes" imported="no">Client_Strategy_Factory.h</includes>
    <includes id="Connection__Handler_8h" name="Connection_Handler.h" local="yes" imported="no">Connection_Handler.h</includes>
    <includes id="Profile__Transport__Resolver_8h" name="Profile_Transport_Resolver.h" local="yes" imported="no">Profile_Transport_Resolver.h</includes>
    <includes id="Wait__Strategy_8h" name="Wait_Strategy.h" local="yes" imported="no">Wait_Strategy.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="Transport__Connector_8inl" name="Transport_Connector.inl" local="yes" imported="no">Transport_Connector.inl</includes>
  </compound>
  <compound kind="file">
    <name>Transport_Connector.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Transport__Connector_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">Basic_Types.h</includes>
    <namespace>TAO</namespace>
    <namespace>CORBA</namespace>
    <class kind="class">TAO_Connector</class>
  </compound>
  <compound kind="file">
    <name>Transport_Connector.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Transport__Connector_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Transport_Descriptor_Interface.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Transport__Descriptor__Interface_8cpp</filename>
    <includes id="Transport__Descriptor__Interface_8h" name="Transport_Descriptor_Interface.h" local="yes" imported="no">tao/Transport_Descriptor_Interface.h</includes>
    <includes id="Transport__Descriptor__Interface_8inl" name="Transport_Descriptor_Interface.inl" local="yes" imported="no">tao/Transport_Descriptor_Interface.inl</includes>
    <includes id="Endpoint_8h" name="Endpoint.h" local="yes" imported="no">tao/Endpoint.h</includes>
  </compound>
  <compound kind="file">
    <name>Transport_Descriptor_Interface.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Transport__Descriptor__Interface_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <class kind="class">TAO_Transport_Descriptor_Interface</class>
  </compound>
  <compound kind="file">
    <name>Transport_Descriptor_Interface.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Transport__Descriptor__Interface_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Transport_Mux_Strategy.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Transport__Mux__Strategy_8cpp</filename>
    <includes id="Transport__Mux__Strategy_8h" name="Transport_Mux_Strategy.h" local="yes" imported="no">tao/Transport_Mux_Strategy.h</includes>
  </compound>
  <compound kind="file">
    <name>Transport_Mux_Strategy.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Transport__Mux__Strategy_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <class kind="class">TAO_Transport_Mux_Strategy</class>
  </compound>
  <compound kind="file">
    <name>Transport_Timer.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Transport__Timer_8cpp</filename>
    <includes id="Transport__Timer_8h" name="Transport_Timer.h" local="yes" imported="no">Transport_Timer.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">Transport.h</includes>
  </compound>
  <compound kind="file">
    <name>Transport_Timer.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Transport__Timer_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">TAO_Export.h</includes>
    <class kind="class">TAO_Transport_Timer</class>
  </compound>
  <compound kind="file">
    <name>True_RefCount_Policy.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>True__RefCount__Policy_8cpp</filename>
    <includes id="True__RefCount__Policy_8h" name="True_RefCount_Policy.h" local="yes" imported="no">True_RefCount_Policy.h</includes>
    <includes id="True__RefCount__Policy_8inl" name="True_RefCount_Policy.inl" local="yes" imported="no">True_RefCount_Policy.inl</includes>
  </compound>
  <compound kind="file">
    <name>True_RefCount_Policy.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>True__RefCount__Policy_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="orbconf_8h" name="orbconf.h" local="yes" imported="no">tao/orbconf.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::True_RefCount_Policy</class>
  </compound>
  <compound kind="file">
    <name>True_RefCount_Policy.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>True__RefCount__Policy_8inl</filename>
  </compound>
  <compound kind="file">
    <name>TSS_Resources.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TSS__Resources_8cpp</filename>
    <includes id="TSS__Resources_8h" name="TSS_Resources.h" local="yes" imported="no">TSS_Resources.h</includes>
    <includes id="GUIResource__Factory_8h" name="GUIResource_Factory.h" local="yes" imported="no">GUIResource_Factory.h</includes>
  </compound>
  <compound kind="file">
    <name>TSS_Resources.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TSS__Resources_8h</filename>
    <includes id="Policy__Manager_8h" name="Policy_Manager.h" local="yes" imported="no">tao/Policy_Manager.h</includes>
    <includes id="TAO__Singleton_8h" name="TAO_Singleton.h" local="yes" imported="no">tao/TAO_Singleton.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO_TSS_Resources</class>
    <member kind="typedef">
      <type>TAO_TSS_Singleton&lt; TAO_TSS_Resources, TAO_SYNCH_MUTEX &gt;</type>
      <name>TAO_TSS_RESOURCES</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TypeCode.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TypeCode_8cpp</filename>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">TypeCode.h</includes>
    <includes id="TypeCode_8inl" name="TypeCode.inl" local="yes" imported="no">TypeCode.inl</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">SystemException.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">CDR.h</includes>
    <includes id="ORB__Constants_8h" name="ORB_Constants.h" local="yes" imported="no">ORB_Constants.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, CORBA::TypeCode_ptr tc)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>Objref_Traits&lt; CORBA::TypeCode &gt;::duplicate</name>
      <anchor>a141</anchor>
      <arglist>(CORBA::TypeCode_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Objref_Traits&lt; CORBA::TypeCode &gt;::release</name>
      <anchor>a142</anchor>
      <arglist>(CORBA::TypeCode_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>Objref_Traits&lt; CORBA::TypeCode &gt;::nil</name>
      <anchor>a143</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Objref_Traits&lt; CORBA::TypeCode &gt;::marshal</name>
      <anchor>a144</anchor>
      <arglist>(CORBA::TypeCode_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TypeCode.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TypeCode_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="UserException_8h" name="UserException.h" local="yes" imported="no">tao/UserException.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <includes id="ValueModifierC_8h" name="ValueModifierC.h" local="yes" imported="no">tao/ValueModifierC.h</includes>
    <includes id="VisibilityC_8h" name="VisibilityC.h" local="yes" imported="no">tao/VisibilityC.h</includes>
    <includes id="Typecode__typesC_8h" name="Typecode_typesC.h" local="yes" imported="no">tao/Typecode_typesC.h</includes>
    <includes id="CORBA__methods_8h" name="CORBA_methods.h" local="yes" imported="no">tao/CORBA_methods.h</includes>
    <includes id="Pseudo__VarOut__T_8h" name="Pseudo_VarOut_T.h" local="yes" imported="no">tao/Pseudo_VarOut_T.h</includes>
    <includes id="Object__Argument__T_8h" name="Object_Argument_T.h" local="yes" imported="no">tao/Object_Argument_T.h</includes>
    <includes id="Arg__Traits__T_8h" name="Arg_Traits_T.h" local="yes" imported="no">tao/Arg_Traits_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">CORBA::TypeCode</class>
    <class kind="class">CORBA::TypeCode::Bounds</class>
    <class kind="class">CORBA::TypeCode::BadKind</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::TypeCode &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::CORBA::TypeCode &gt;</class>
    <member kind="typedef">
      <type>TAO_Pseudo_Var_T&lt; TypeCode &gt;</type>
      <name>TypeCode_var</name>
      <anchor>a271</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Out_T&lt; TypeCode, TypeCode_var &gt;</type>
      <name>TypeCode_out</name>
      <anchor>a272</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export bool</type>
      <name>operator&lt;&lt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, CORBA::TypeCode_ptr tc)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export bool</type>
      <name>operator&gt;&gt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::TypeCode_ptr</type>
      <name>unaliased_typecode</name>
      <anchor>a145</anchor>
      <arglist>(CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION CORBA::TCKind</type>
      <name>unaliased_kind</name>
      <anchor>a146</anchor>
      <arglist>(CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TypeCode.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TypeCode_8inl</filename>
    <includes id="CORBA__methods_8h" name="CORBA_methods.h" local="yes" imported="no">tao/CORBA_methods.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
  </compound>
  <compound kind="file">
    <name>TypeCode_Base_Attributes.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TypeCode__Base__Attributes_8cpp</filename>
    <includes id="TypeCode__Base__Attributes_8h" name="TypeCode_Base_Attributes.h" local="yes" imported="no">tao/TypeCode_Base_Attributes.h</includes>
    <includes id="TypeCode__Base__Attributes_8inl" name="TypeCode_Base_Attributes.inl" local="yes" imported="no">tao/TypeCode_Base_Attributes.inl</includes>
  </compound>
  <compound kind="file">
    <name>TypeCode_Base_Attributes.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TypeCode__Base__Attributes_8h</filename>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <class kind="class">TAO::TypeCode::Base_Attributes</class>
  </compound>
  <compound kind="file">
    <name>TypeCode_Base_Attributes.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TypeCode__Base__Attributes_8inl</filename>
    <includes id="TypeCode__Traits_8h" name="TypeCode_Traits.h" local="yes" imported="no">tao/TypeCode_Traits.h</includes>
  </compound>
  <compound kind="file">
    <name>TypeCode_Case.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TypeCode__Case_8cpp</filename>
    <includes id="TypeCode__Case_8h" name="TypeCode_Case.h" local="yes" imported="no">TypeCode_Case.h</includes>
    <includes id="TypeCode__Case_8inl" name="TypeCode_Case.inl" local="yes" imported="no">tao/TypeCode_Case.inl</includes>
  </compound>
  <compound kind="file">
    <name>TypeCode_Case.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TypeCode__Case_8h</filename>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <class kind="class">TAO::TypeCode::Case</class>
  </compound>
  <compound kind="file">
    <name>TypeCode_Case.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TypeCode__Case_8inl</filename>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
  </compound>
  <compound kind="file">
    <name>TypeCode_CDR_Extraction.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TypeCode__CDR__Extraction_8cpp</filename>
    <includes id="TypeCode__CDR__Extraction_8h" name="TypeCode_CDR_Extraction.h" local="yes" imported="no">TypeCode_CDR_Extraction.h</includes>
    <includes id="Objref__TypeCode__Factory_8h" name="Objref_TypeCode_Factory.h" local="yes" imported="no">Objref_TypeCode_Factory.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="True__RefCount__Policy_8h" name="True_RefCount_Policy.h" local="yes" imported="no">tao/True_RefCount_Policy.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Enum__TypeCode_8h" name="Enum_TypeCode.h" local="yes" imported="no">tao/Enum_TypeCode.h</includes>
    <includes id="Fixed__TypeCode_8h" name="Fixed_TypeCode.h" local="yes" imported="no">tao/Fixed_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="String__TypeCode_8h" name="String_TypeCode.h" local="yes" imported="no">tao/String_TypeCode.h</includes>
    <includes id="Struct__TypeCode_8h" name="Struct_TypeCode.h" local="yes" imported="no">tao/Struct_TypeCode.h</includes>
    <includes id="Value__TypeCode_8h" name="Value_TypeCode.h" local="yes" imported="no">tao/Value_TypeCode.h</includes>
    <includes id="TypeCode__Struct__Field_8h" name="TypeCode_Struct_Field.h" local="yes" imported="no">tao/TypeCode_Struct_Field.h</includes>
    <includes id="TypeCode__Value__Field_8h" name="TypeCode_Value_Field.h" local="yes" imported="no">tao/TypeCode_Value_Field.h</includes>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;&gt;</name>
      <anchor>a0</anchor>
      <arglist>(TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TypeCode_CDR_Extraction.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TypeCode__CDR__Extraction_8h</filename>
    <includes id="Typecode__typesC_8h" name="Typecode_typesC.h" local="yes" imported="no">tao/Typecode_typesC.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCodeFactory</namespace>
    <member kind="typedef">
      <type>bool(*</type>
      <name>factory</name>
      <anchor>a0</anchor>
      <arglist>)(CORBA::TCKind, TAO_InputCDR &amp;, CORBA::TypeCode_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_null_factory</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_void_factory</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_short_factory</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_long_factory</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_ushort_factory</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_ulong_factory</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_float_factory</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_double_factory</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_boolean_factory</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_char_factory</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_octet_factory</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_any_factory</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_TypeCode_factory</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_Principal_factory</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_objref_factory</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_struct_factory</name>
      <anchor>a17</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_union_factory</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_enum_factory</name>
      <anchor>a19</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_string_factory</name>
      <anchor>a20</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_sequence_factory</name>
      <anchor>a21</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_array_factory</name>
      <anchor>a22</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_alias_factory</name>
      <anchor>a23</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_except_factory</name>
      <anchor>a24</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_longlong_factory</name>
      <anchor>a25</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_ulonglong_factory</name>
      <anchor>a26</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_longdouble_factory</name>
      <anchor>a27</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_wchar_factory</name>
      <anchor>a28</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_wstring_factory</name>
      <anchor>a29</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_fixed_factory</name>
      <anchor>a30</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_value_factory</name>
      <anchor>a31</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_value_box_factory</name>
      <anchor>a32</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_native_factory</name>
      <anchor>a33</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_abstract_interface_factory</name>
      <anchor>a34</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_local_interface_factory</name>
      <anchor>a35</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_component_factory</name>
      <anchor>a36</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_home_factory</name>
      <anchor>a37</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_event_factory</name>
      <anchor>a38</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TypeCode_Constants.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TypeCode__Constants_8cpp</filename>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">TypeCode_Constants.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">Null_RefCount_Policy.h</includes>
    <includes id="Empty__Param__TypeCode_8h" name="Empty_Param_TypeCode.h" local="yes" imported="no">Empty_Param_TypeCode.h</includes>
    <includes id="Objref__TypeCode_8h" name="Objref_TypeCode.h" local="yes" imported="no">Objref_TypeCode.h</includes>
    <includes id="String__TypeCode_8h" name="String_TypeCode.h" local="yes" imported="no">String_TypeCode.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <namespace>CORBA</namespace>
    <member kind="variable">
      <type>TypeCode_ptr const</type>
      <name>_tc_Component</name>
      <anchor>a273</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TypeCode_ptr const</type>
      <name>_tc_Home</name>
      <anchor>a274</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_null</name>
      <anchor>a60</anchor>
      <arglist>(CORBA::tk_null)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_void</name>
      <anchor>a61</anchor>
      <arglist>(CORBA::tk_void)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_boolean</name>
      <anchor>a62</anchor>
      <arglist>(CORBA::tk_boolean)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_char</name>
      <anchor>a63</anchor>
      <arglist>(CORBA::tk_char)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_wchar</name>
      <anchor>a64</anchor>
      <arglist>(CORBA::tk_wchar)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_short</name>
      <anchor>a65</anchor>
      <arglist>(CORBA::tk_short)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_ushort</name>
      <anchor>a66</anchor>
      <arglist>(CORBA::tk_ushort)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_long</name>
      <anchor>a67</anchor>
      <arglist>(CORBA::tk_long)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_ulong</name>
      <anchor>a68</anchor>
      <arglist>(CORBA::tk_ulong)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_longlong</name>
      <anchor>a69</anchor>
      <arglist>(CORBA::tk_longlong)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_ulonglong</name>
      <anchor>a70</anchor>
      <arglist>(CORBA::tk_ulonglong)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_float</name>
      <anchor>a71</anchor>
      <arglist>(CORBA::tk_float)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_double</name>
      <anchor>a72</anchor>
      <arglist>(CORBA::tk_double)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_longdouble</name>
      <anchor>a73</anchor>
      <arglist>(CORBA::tk_longdouble)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_octet</name>
      <anchor>a74</anchor>
      <arglist>(CORBA::tk_octet)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_any</name>
      <anchor>a75</anchor>
      <arglist>(CORBA::tk_any)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_TypeCode</name>
      <anchor>a76</anchor>
      <arglist>(CORBA::tk_TypeCode)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_Principal</name>
      <anchor>a77</anchor>
      <arglist>(CORBA::tk_Principal)</arglist>
    </member>
    <member kind="variable">
      <type>String&lt; TAO::Null_RefCount_Policy &gt;</type>
      <name>tc_string</name>
      <anchor>a78</anchor>
      <arglist>(CORBA::tk_string, 0)</arglist>
    </member>
    <member kind="variable">
      <type>String&lt; TAO::Null_RefCount_Policy &gt;</type>
      <name>tc_wstring</name>
      <anchor>a79</anchor>
      <arglist>(CORBA::tk_wstring, 0)</arglist>
    </member>
    <member kind="variable">
      <type>char const</type>
      <name>tc_object_id</name>
      <anchor>a80</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>char const</type>
      <name>tc_object_name</name>
      <anchor>a81</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>Objref&lt; char const *, CORBA::tk_objref, TAO::Null_RefCount_Policy &gt;</type>
      <name>tc_Object</name>
      <anchor>a82</anchor>
      <arglist>(tc_object_id, tc_object_name)</arglist>
    </member>
    <member kind="variable">
      <type>char const</type>
      <name>tc_component_id</name>
      <anchor>a83</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>char const</type>
      <name>tc_component_name</name>
      <anchor>a84</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>Objref&lt; char const *, CORBA::tk_component, TAO::Null_RefCount_Policy &gt;</type>
      <name>tc_Component</name>
      <anchor>a85</anchor>
      <arglist>(tc_component_id, tc_component_name)</arglist>
    </member>
    <member kind="variable">
      <type>char const</type>
      <name>tc_home_id</name>
      <anchor>a86</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>char const</type>
      <name>tc_home_name</name>
      <anchor>a87</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>Objref&lt; char const *, CORBA::tk_home, TAO::Null_RefCount_Policy &gt;</type>
      <name>tc_Home</name>
      <anchor>a88</anchor>
      <arglist>(tc_home_id, tc_home_name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TypeCode_Constants.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TypeCode__Constants_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <namespace>CORBA</namespace>
  </compound>
  <compound kind="file">
    <name>TypeCode_Default_Case.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TypeCode__Default__Case_8cpp</filename>
    <includes id="TypeCode__Default__Case_8h" name="TypeCode_Default_Case.h" local="yes" imported="no">TypeCode_Default_Case.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="TypeCode__Default__Case_8inl" name="TypeCode_Default_Case.inl" local="yes" imported="no">tao/TypeCode_Default_Case.inl</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <member kind="function" static="yes">
      <type>TAO_OutputCDR::from_octet const</type>
      <name>zero_octet</name>
      <anchor>a107</anchor>
      <arglist>(0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TypeCode_Default_Case.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TypeCode__Default__Case_8h</filename>
    <includes id="TypeCode__Case_8h" name="TypeCode_Case.h" local="yes" imported="no">tao/TypeCode_Case.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <class kind="class">TAO::TypeCode::Default_Case</class>
  </compound>
  <compound kind="file">
    <name>TypeCode_Default_Case.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TypeCode__Default__Case_8inl</filename>
  </compound>
  <compound kind="file">
    <name>TypeCode_Non_Default_Case.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TypeCode__Non__Default__Case_8cpp</filename>
    <includes id="TypeCode__Non__Default__Case_8h" name="TypeCode_Non_Default_Case.h" local="yes" imported="no">TypeCode_Non_Default_Case.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="TypeCode__Non__Default__Case_8inl" name="TypeCode_Non_Default_Case.inl" local="yes" imported="no">tao/TypeCode_Non_Default_Case.inl</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <class kind="struct">TAO::TypeCode::Case_Traits</class>
    <class kind="struct">TAO::TypeCode::Case_Traits&lt; CORBA::Boolean &gt;</class>
    <class kind="struct">TAO::TypeCode::Case_Traits&lt; CORBA::Char &gt;</class>
    <class kind="struct">TAO::TypeCode::Case_Traits&lt; CORBA::WChar &gt;</class>
  </compound>
  <compound kind="file">
    <name>TypeCode_Non_Default_Case.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TypeCode__Non__Default__Case_8h</filename>
    <includes id="TypeCode__Case_8h" name="TypeCode_Case.h" local="yes" imported="no">tao/TypeCode_Case.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <class kind="class">TAO::TypeCode::Non_Default_Case</class>
  </compound>
  <compound kind="file">
    <name>TypeCode_Non_Default_Case.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TypeCode__Non__Default__Case_8inl</filename>
  </compound>
  <compound kind="file">
    <name>TypeCode_Struct_Field.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TypeCode__Struct__Field_8h</filename>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <class kind="struct">TAO::TypeCode::Struct_Field</class>
  </compound>
  <compound kind="file">
    <name>TypeCode_Traits.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TypeCode__Traits_8h</filename>
    <includes id="CORBA__String_8h" name="CORBA_String.h" local="yes" imported="no">tao/CORBA_String.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <class kind="struct">TAO::TypeCode::Traits&lt; STATIC_TYPECODE &gt;</class>
    <class kind="struct">TAO::TypeCode::Traits&lt; DYNAMIC_TYPECODE &gt;</class>
    <class kind="struct">TAO::TypeCode::Traits&lt; Traits&lt; STATIC_TYPECODE &gt;::typecode_type &gt;</class>
    <class kind="struct">TAO::TypeCode::Traits&lt; Traits&lt; DYNAMIC_TYPECODE &gt;::typecode_type &gt;</class>
    <member kind="typedef">
      <type>char const *</type>
      <name>STATIC_TYPECODE</name>
      <anchor>a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_var</type>
      <name>DYNAMIC_TYPECODE</name>
      <anchor>a90</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Typecode_types.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Typecode__types_8pidl</filename>
    <namespace>CORBA</namespace>
    <member kind="enumeration">
      <name>TCKind</name>
      <anchor>a416</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_null</name>
      <anchor>a417a275</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_void</name>
      <anchor>a417a276</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_short</name>
      <anchor>a417a277</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_long</name>
      <anchor>a417a278</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_ushort</name>
      <anchor>a417a279</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_ulong</name>
      <anchor>a417a280</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_float</name>
      <anchor>a417a281</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_double</name>
      <anchor>a417a282</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_boolean</name>
      <anchor>a417a283</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_char</name>
      <anchor>a417a284</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_octet</name>
      <anchor>a417a285</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_any</name>
      <anchor>a417a286</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_TypeCode</name>
      <anchor>a417a287</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_Principal</name>
      <anchor>a417a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_objref</name>
      <anchor>a417a289</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_struct</name>
      <anchor>a417a290</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_union</name>
      <anchor>a417a291</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_enum</name>
      <anchor>a417a292</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_string</name>
      <anchor>a417a293</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_sequence</name>
      <anchor>a417a294</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_array</name>
      <anchor>a417a295</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_alias</name>
      <anchor>a417a296</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_except</name>
      <anchor>a417a297</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_longlong</name>
      <anchor>a417a298</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_ulonglong</name>
      <anchor>a417a299</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_longdouble</name>
      <anchor>a417a300</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_wchar</name>
      <anchor>a417a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_wstring</name>
      <anchor>a417a302</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_fixed</name>
      <anchor>a417a303</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_value</name>
      <anchor>a417a304</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_value_box</name>
      <anchor>a417a305</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_native</name>
      <anchor>a417a306</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_abstract_interface</name>
      <anchor>a417a307</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_local_interface</name>
      <anchor>a417a308</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_component</name>
      <anchor>a417a309</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_home</name>
      <anchor>a417a310</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_event</name>
      <anchor>a417a311</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Typecode_typesC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Typecode__typesC_8cpp</filename>
    <includes id="Typecode__typesC_8h" name="Typecode_typesC.h" local="yes" imported="no">Typecode_typesC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, CORBA::TCKind _tao_enumerator)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::TCKind &amp;_tao_enumerator)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Typecode_typesC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Typecode__typesC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Objref__VarOut__T_8h" name="Objref_VarOut_T.h" local="yes" imported="no">tao/Objref_VarOut_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TCKind &amp;</type>
      <name>TCKind_out</name>
      <anchor>a312</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TCKind</name>
      <anchor>a417</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_null</name>
      <anchor>a417a275</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_void</name>
      <anchor>a417a276</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_short</name>
      <anchor>a417a277</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_long</name>
      <anchor>a417a278</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_ushort</name>
      <anchor>a417a279</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_ulong</name>
      <anchor>a417a280</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_float</name>
      <anchor>a417a281</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_double</name>
      <anchor>a417a282</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_boolean</name>
      <anchor>a417a283</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_char</name>
      <anchor>a417a284</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_octet</name>
      <anchor>a417a285</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_any</name>
      <anchor>a417a286</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_TypeCode</name>
      <anchor>a417a287</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_Principal</name>
      <anchor>a417a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_objref</name>
      <anchor>a417a289</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_struct</name>
      <anchor>a417a290</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_union</name>
      <anchor>a417a291</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_enum</name>
      <anchor>a417a292</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_string</name>
      <anchor>a417a293</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_sequence</name>
      <anchor>a417a294</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_array</name>
      <anchor>a417a295</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_alias</name>
      <anchor>a417a296</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_except</name>
      <anchor>a417a297</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_longlong</name>
      <anchor>a417a298</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_ulonglong</name>
      <anchor>a417a299</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_longdouble</name>
      <anchor>a417a300</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_wchar</name>
      <anchor>a417a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_wstring</name>
      <anchor>a417a302</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_fixed</name>
      <anchor>a417a303</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_value</name>
      <anchor>a417a304</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_value_box</name>
      <anchor>a417a305</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_native</name>
      <anchor>a417a306</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_abstract_interface</name>
      <anchor>a417a307</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_local_interface</name>
      <anchor>a417a308</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_component</name>
      <anchor>a417a309</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_home</name>
      <anchor>a417a310</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_event</name>
      <anchor>a417a311</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_TC_KIND_COUNT</name>
      <anchor>a417a313</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;, CORBA::TCKind)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::TCKind &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Typecode_typesS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Typecode__typesS_8h</filename>
  </compound>
  <compound kind="file">
    <name>TypeCode_Value_Field.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TypeCode__Value__Field_8h</filename>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <class kind="struct">TAO::TypeCode::Value_Field</class>
  </compound>
  <compound kind="file">
    <name>TypeCodeA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TypeCodeA_8cpp</filename>
    <includes id="Struct__TypeCode_8h" name="Struct_TypeCode.h" local="yes" imported="no">Struct_TypeCode.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">Null_RefCount_Policy.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <member kind="variable">
      <type>char const</type>
      <name>tc_bounds_id</name>
      <anchor>a91</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>char const</type>
      <name>tc_bounds_name</name>
      <anchor>a92</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>Struct&lt; char const *, CORBA::TypeCode_ptr const *, Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>tc_Bounds</name>
      <anchor>a93</anchor>
      <arglist>(CORBA::tk_except, tc_bounds_id, tc_bounds_name, 0, 0)</arglist>
    </member>
    <member kind="variable">
      <type>char const</type>
      <name>tc_bad_kind_id</name>
      <anchor>a94</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>char const</type>
      <name>tc_bad_kind_name</name>
      <anchor>a95</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>Struct&lt; char const *, CORBA::TypeCode_ptr const *, Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>tc_BadKind</name>
      <anchor>a96</anchor>
      <arglist>(CORBA::tk_except, tc_bad_kind_id, tc_bad_kind_name, 0, 0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TypeCodeFactory_Adapter.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TypeCodeFactory__Adapter_8cpp</filename>
    <includes id="TypeCodeFactory__Adapter_8h" name="TypeCodeFactory_Adapter.h" local="yes" imported="no">tao/TypeCodeFactory_Adapter.h</includes>
  </compound>
  <compound kind="file">
    <name>TypeCodeFactory_Adapter.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>TypeCodeFactory__Adapter_8h</filename>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="ValueModifierC_8h" name="ValueModifierC.h" local="yes" imported="no">tao/ValueModifierC.h</includes>
    <includes id="Typecode__typesC_8h" name="Typecode_typesC.h" local="yes" imported="no">tao/Typecode_typesC.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <class kind="class">TAO_TypeCodeFactory_Adapter</class>
  </compound>
  <compound kind="file">
    <name>UB_String_Argument_T.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>UB__String__Argument__T_8cpp</filename>
    <includes id="UB__String__Argument__T_8h" name="UB_String_Argument_T.h" local="yes" imported="no">tao/UB_String_Argument_T.h</includes>
    <includes id="Dynamic__ParameterC_8h" name="Dynamic_ParameterC.h" local="yes" imported="no">tao/Dynamic_ParameterC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="UB__String__Argument__T_8inl" name="UB_String_Argument_T.inl" local="yes" imported="no">tao/UB_String_Argument_T.inl</includes>
  </compound>
  <compound kind="file">
    <name>UB_String_Argument_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>UB__String__Argument__T_8h</filename>
    <includes id="Argument_8h" name="Argument.h" local="yes" imported="no">tao/Argument.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::In_UB_String_Argument_T</class>
    <class kind="class">TAO::Inout_UB_String_Argument_T</class>
    <class kind="class">TAO::Out_UB_String_Argument_T</class>
    <class kind="class">TAO::Ret_UB_String_Argument_T</class>
    <class kind="struct">TAO::UB_String_Tag</class>
    <class kind="struct">TAO::UB_String_Arg_Traits_T</class>
  </compound>
  <compound kind="file">
    <name>UB_String_Argument_T.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>UB__String__Argument__T_8inl</filename>
  </compound>
  <compound kind="file">
    <name>UB_String_Arguments.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>UB__String__Arguments_8cpp</filename>
    <includes id="UB__String__Arguments_8h" name="UB_String_Arguments.h" local="yes" imported="no">UB_String_Arguments.h</includes>
  </compound>
  <compound kind="file">
    <name>UB_String_Arguments.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>UB__String__Arguments_8h</filename>
    <includes id="UB__String__Argument__T_8h" name="UB_String_Argument_T.h" local="yes" imported="no">tao/UB_String_Argument_T.h</includes>
    <includes id="Arg__Traits__T_8h" name="Arg_Traits_T.h" local="yes" imported="no">tao/Arg_Traits_T.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::Char * &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::WChar * &gt;</class>
  </compound>
  <compound kind="file">
    <name>ULongLongSeq.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ULongLongSeq_8pidl</filename>
    <namespace>CORBA</namespace>
    <member kind="typedef">
      <type>sequence&lt; unsigned long long &gt;</type>
      <name>ULongLongSeq</name>
      <anchor>a314</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ULongLongSeqA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ULongLongSeqA_8cpp</filename>
    <includes id="ULongLongSeqC_8h" name="ULongLongSeqC.h" local="yes" imported="no">ULongLongSeqC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <namespace>CORBA</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::ULongLongSeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::ULongLongSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::ULongLongSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::ULongLongSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_ULongLongSeq_0</name>
      <anchor>a97</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_ulonglong, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_ULongLongSeq_0</name>
      <anchor>a98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_ULongLongSeq</name>
      <anchor>a2</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/ULongLongSeq:1.0&quot;,&quot;ULongLongSeq&quot;,&amp;TAO::TypeCode::tc_CORBA_ULongLongSeq_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ULongLongSeq</name>
      <anchor>a315</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ULongLongSeqC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ULongLongSeqC_8cpp</filename>
    <includes id="ULongLongSeqC_8h" name="ULongLongSeqC.h" local="yes" imported="no">ULongLongSeqC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_ULONGLONGSEQ_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::ULongLongSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::ULongLongSeq &amp;_tao_sequence)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ULongLongSeqC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ULongLongSeqC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">CORBA::ULongLongSeq</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_ULONGLONGSEQ_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; ULongLongSeq, CORBA::ULongLong &gt;</type>
      <name>ULongLongSeq_var</name>
      <anchor>a316</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; ULongLongSeq, ULongLongSeq_var, CORBA::ULongLong &gt;</type>
      <name>ULongLongSeq_out</name>
      <anchor>a317</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::ULongLongSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::ULongLongSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::ULongLongSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::ULongLongSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::ULongLongSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::ULongLongSeq &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ULongLongSeqS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ULongLongSeqS_8h</filename>
  </compound>
  <compound kind="file">
    <name>ULongSeq.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ULongSeq_8pidl</filename>
    <namespace>CORBA</namespace>
    <member kind="typedef">
      <type>sequence&lt; unsigned long &gt;</type>
      <name>ULongSeq</name>
      <anchor>a318</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ULongSeqA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ULongSeqA_8cpp</filename>
    <includes id="ULongSeqC_8h" name="ULongSeqC.h" local="yes" imported="no">ULongSeqC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <namespace>CORBA</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::ULongSeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::ULongSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::ULongSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::ULongSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_ULongSeq_0</name>
      <anchor>a99</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_ulong, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_ULongSeq_0</name>
      <anchor>a100</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_ULongSeq</name>
      <anchor>a2</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/ULongSeq:1.0&quot;,&quot;ULongSeq&quot;,&amp;TAO::TypeCode::tc_CORBA_ULongSeq_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ULongSeq</name>
      <anchor>a319</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ULongSeqC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ULongSeqC_8cpp</filename>
    <includes id="ULongSeqC_8h" name="ULongSeqC.h" local="yes" imported="no">ULongSeqC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_ULONGSEQ_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::ULongSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::ULongSeq &amp;_tao_sequence)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ULongSeqC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ULongSeqC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">CORBA::ULongSeq</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_ULONGSEQ_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; ULongSeq, CORBA::ULong &gt;</type>
      <name>ULongSeq_var</name>
      <anchor>a320</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; ULongSeq, ULongSeq_var, CORBA::ULong &gt;</type>
      <name>ULongSeq_out</name>
      <anchor>a321</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::ULongSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::ULongSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::ULongSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::ULongSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::ULongSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::ULongSeq &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ULongSeqS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ULongSeqS_8h</filename>
  </compound>
  <compound kind="file">
    <name>Union_TypeCode.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Union__TypeCode_8cpp</filename>
    <includes id="Union__TypeCode_8h" name="Union_TypeCode.h" local="yes" imported="no">tao/Union_TypeCode.h</includes>
    <includes id="TypeCode__Case_8h" name="TypeCode_Case.h" local="yes" imported="no">tao/TypeCode_Case.h</includes>
    <includes id="Union__TypeCode_8inl" name="Union_TypeCode.inl" local="yes" imported="no">tao/Union_TypeCode.inl</includes>
  </compound>
  <compound kind="file">
    <name>Union_TypeCode.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Union__TypeCode_8h</filename>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">tao/TypeCode.h</includes>
    <includes id="TypeCode__Base__Attributes_8h" name="TypeCode_Base_Attributes.h" local="yes" imported="no">tao/TypeCode_Base_Attributes.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <class kind="class">TAO::TypeCode::Union</class>
  </compound>
  <compound kind="file">
    <name>Union_TypeCode.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Union__TypeCode_8inl</filename>
  </compound>
  <compound kind="file">
    <name>UserException.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>UserException_8cpp</filename>
    <includes id="UserException_8h" name="UserException.h" local="yes" imported="no">UserException.h</includes>
    <includes id="UserException_8inl" name="UserException.inl" local="yes" imported="no">tao/UserException.inl</includes>
  </compound>
  <compound kind="file">
    <name>UserException.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>UserException_8h</filename>
    <includes id="Exception_8h" name="Exception.h" local="yes" imported="no">tao/Exception.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">CORBA::UserException</class>
  </compound>
  <compound kind="file">
    <name>UserException.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>UserException_8inl</filename>
  </compound>
  <compound kind="file">
    <name>UShortSeq.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>UShortSeq_8pidl</filename>
    <namespace>CORBA</namespace>
    <member kind="typedef">
      <type>sequence&lt; unsigned short &gt;</type>
      <name>UShortSeq</name>
      <anchor>a322</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UShortSeqA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>UShortSeqA_8cpp</filename>
    <includes id="UShortSeqC_8h" name="UShortSeqC.h" local="yes" imported="no">UShortSeqC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <namespace>CORBA</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::UShortSeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::UShortSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::UShortSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::UShortSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_UShortSeq_0</name>
      <anchor>a101</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_ushort, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_UShortSeq_0</name>
      <anchor>a102</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_UShortSeq</name>
      <anchor>a2</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/UShortSeq:1.0&quot;,&quot;UShortSeq&quot;,&amp;TAO::TypeCode::tc_CORBA_UShortSeq_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_UShortSeq</name>
      <anchor>a323</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UShortSeqC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>UShortSeqC_8cpp</filename>
    <includes id="UShortSeqC_8h" name="UShortSeqC.h" local="yes" imported="no">UShortSeqC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_USHORTSEQ_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::UShortSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::UShortSeq &amp;_tao_sequence)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UShortSeqC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>UShortSeqC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">CORBA::UShortSeq</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_USHORTSEQ_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; UShortSeq, CORBA::UShort &gt;</type>
      <name>UShortSeq_var</name>
      <anchor>a324</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; UShortSeq, UShortSeq_var, CORBA::UShort &gt;</type>
      <name>UShortSeq_out</name>
      <anchor>a325</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::UShortSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::UShortSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::UShortSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::UShortSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::UShortSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::UShortSeq &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UShortSeqS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>UShortSeqS_8h</filename>
  </compound>
  <compound kind="file">
    <name>UTF16_BOM_Factory.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>UTF16__BOM__Factory_8cpp</filename>
    <includes id="UTF16__BOM__Factory_8h" name="UTF16_BOM_Factory.h" local="yes" imported="no">UTF16_BOM_Factory.h</includes>
    <member kind="function">
      <type></type>
      <name>ACE_STATIC_SVC_DEFINE</name>
      <anchor>a0</anchor>
      <arglist>(UTF16_BOM_Factory, ACE_TEXT(&quot;UTF16_BOM_Factory&quot;), ACE_SVC_OBJ_T,&amp;ACE_SVC_NAME(UTF16_BOM_Factory), ACE_Service_Type::DELETE_THIS|ACE_Service_Type::DELETE_OBJ, 0) UTF16_BOM_Factory</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UTF16_BOM_Factory.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>UTF16__BOM__Factory_8h</filename>
    <includes id="Codeset__Translator__Factory_8h" name="Codeset_Translator_Factory.h" local="yes" imported="no">tao/Codeset_Translator_Factory.h</includes>
    <includes id="UTF16__BOM__Translator_8h" name="UTF16_BOM_Translator.h" local="yes" imported="no">UTF16_BOM_Translator.h</includes>
    <class kind="class">UTF16_BOM_Factory</class>
  </compound>
  <compound kind="file">
    <name>UTF16_BOM_Translator.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>UTF16__BOM__Translator_8cpp</filename>
    <includes id="UTF16__BOM__Translator_8h" name="UTF16_BOM_Translator.h" local="yes" imported="no">UTF16_BOM_Translator.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">tao/debug.h</includes>
    <member kind="typedef">
      <type>ACE_CDR::UShort</type>
      <name>ACE_UTF16_T</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const size_t</type>
      <name>ACE_UTF16_CODEPOINT_SIZE</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const unsigned short</type>
      <name>ACE_UNICODE_BOM_CORRECT</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const unsigned short</type>
      <name>ACE_UNICODE_BOM_SWAPPED</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UTF16_BOM_Translator.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>UTF16__BOM__Translator_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">TAO_Export.h</includes>
    <class kind="class">UTF16_BOM_Translator</class>
  </compound>
  <compound kind="file">
    <name>Value_TypeCode.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Value__TypeCode_8cpp</filename>
    <includes id="Value__TypeCode_8h" name="Value_TypeCode.h" local="yes" imported="no">tao/Value_TypeCode.h</includes>
    <includes id="TypeCode__Value__Field_8h" name="TypeCode_Value_Field.h" local="yes" imported="no">tao/TypeCode_Value_Field.h</includes>
    <includes id="Value__TypeCode_8inl" name="Value_TypeCode.inl" local="yes" imported="no">tao/Value_TypeCode.inl</includes>
  </compound>
  <compound kind="file">
    <name>Value_TypeCode.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Value__TypeCode_8h</filename>
    <includes id="TypeCode_8h" name="TypeCode.h" local="yes" imported="no">tao/TypeCode.h</includes>
    <includes id="TypeCode__Base__Attributes_8h" name="TypeCode_Base_Attributes.h" local="yes" imported="no">tao/TypeCode_Base_Attributes.h</includes>
    <includes id="ValueModifierC_8h" name="ValueModifierC.h" local="yes" imported="no">tao/ValueModifierC.h</includes>
    <includes id="VisibilityC_8h" name="VisibilityC.h" local="yes" imported="no">tao/VisibilityC.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <class kind="class">TAO::TypeCode::Value</class>
  </compound>
  <compound kind="file">
    <name>Value_TypeCode.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Value__TypeCode_8inl</filename>
  </compound>
  <compound kind="file">
    <name>ValueModifier.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ValueModifier_8pidl</filename>
    <namespace>CORBA</namespace>
    <member kind="variable">
      <type>const ValueModifier</type>
      <name>VM_NONE</name>
      <anchor>a326</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ValueModifier</type>
      <name>VM_CUSTOM</name>
      <anchor>a327</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ValueModifier</type>
      <name>VM_ABSTRACT</name>
      <anchor>a328</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ValueModifier</type>
      <name>VM_TRUNCATABLE</name>
      <anchor>a329</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ValueModifierC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ValueModifierC_8cpp</filename>
    <includes id="ValueModifierC_8h" name="ValueModifierC.h" local="yes" imported="no">ValueModifierC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>ValueModifierC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ValueModifierC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::Short_out</type>
      <name>ValueModifier_out</name>
      <anchor>a330</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ValueModifierS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>ValueModifierS_8h</filename>
  </compound>
  <compound kind="file">
    <name>Valuetype_Adapter.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Valuetype__Adapter_8cpp</filename>
    <includes id="Valuetype__Adapter_8h" name="Valuetype_Adapter.h" local="yes" imported="no">tao/Valuetype_Adapter.h</includes>
  </compound>
  <compound kind="file">
    <name>Valuetype_Adapter.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Valuetype__Adapter_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="Basic__Types_8h" name="Basic_Types.h" local="yes" imported="no">tao/Basic_Types.h</includes>
    <namespace>CORBA</namespace>
    <class kind="class">TAO_Valuetype_Adapter</class>
  </compound>
  <compound kind="file">
    <name>Var_Array_Argument_T.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Var__Array__Argument__T_8cpp</filename>
    <includes id="Var__Array__Argument__T_8h" name="Var_Array_Argument_T.h" local="yes" imported="no">tao/Var_Array_Argument_T.h</includes>
    <includes id="Dynamic__ParameterC_8h" name="Dynamic_ParameterC.h" local="yes" imported="no">tao/Dynamic_ParameterC.h</includes>
    <includes id="Var__Array__Argument__T_8inl" name="Var_Array_Argument_T.inl" local="yes" imported="no">tao/Var_Array_Argument_T.inl</includes>
  </compound>
  <compound kind="file">
    <name>Var_Array_Argument_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Var__Array__Argument__T_8h</filename>
    <includes id="Argument_8h" name="Argument.h" local="yes" imported="no">tao/Argument.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::In_Var_Array_Argument_T</class>
    <class kind="class">TAO::Inout_Var_Array_Argument_T</class>
    <class kind="class">TAO::Out_Var_Array_Argument_T</class>
    <class kind="class">TAO::Ret_Var_Array_Argument_T</class>
    <class kind="struct">TAO::Var_Array_Tag</class>
    <class kind="struct">TAO::Var_Array_Arg_Traits_T</class>
  </compound>
  <compound kind="file">
    <name>Var_Array_Argument_T.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Var__Array__Argument__T_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Var_Size_Argument_T.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Var__Size__Argument__T_8cpp</filename>
    <includes id="Var__Size__Argument__T_8h" name="Var_Size_Argument_T.h" local="yes" imported="no">tao/Var_Size_Argument_T.h</includes>
    <includes id="Dynamic__ParameterC_8h" name="Dynamic_ParameterC.h" local="yes" imported="no">tao/Dynamic_ParameterC.h</includes>
    <includes id="Var__Size__Argument__T_8inl" name="Var_Size_Argument_T.inl" local="yes" imported="no">tao/Var_Size_Argument_T.inl</includes>
  </compound>
  <compound kind="file">
    <name>Var_Size_Argument_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Var__Size__Argument__T_8h</filename>
    <includes id="Argument_8h" name="Argument.h" local="yes" imported="no">tao/Argument.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::In_Var_Size_Argument_T</class>
    <class kind="class">TAO::Inout_Var_Size_Argument_T</class>
    <class kind="class">TAO::Out_Var_Size_Argument_T</class>
    <class kind="class">TAO::Ret_Var_Size_Argument_T</class>
    <class kind="struct">TAO::Var_Size_Tag</class>
    <class kind="struct">TAO::Var_Size_Arg_Traits_T</class>
  </compound>
  <compound kind="file">
    <name>Var_Size_Argument_T.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Var__Size__Argument__T_8inl</filename>
  </compound>
  <compound kind="file">
    <name>varbase.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>varbase_8h</filename>
    <class kind="class">TAO_Base_var</class>
  </compound>
  <compound kind="file">
    <name>VarOut_T.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>VarOut__T_8cpp</filename>
    <includes id="VarOut__T_8h" name="VarOut_T.h" local="yes" imported="no">tao/VarOut_T.h</includes>
    <includes id="VarOut__T_8inl" name="VarOut_T.inl" local="yes" imported="no">tao/VarOut_T.inl</includes>
  </compound>
  <compound kind="file">
    <name>VarOut_T.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>VarOut__T_8h</filename>
    <class kind="class">TAO_Var_Base_T</class>
    <class kind="class">TAO_Fixed_Var_T</class>
    <class kind="class">TAO_Var_Var_T</class>
    <class kind="class">TAO_Out_T</class>
  </compound>
  <compound kind="file">
    <name>VarOut_T.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>VarOut__T_8inl</filename>
  </compound>
  <compound kind="file">
    <name>Version.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Version_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TAO_MAJOR_VERSION</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_MINOR_VERSION</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_BETA_VERSION</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAO_VERSION</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Visibility.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Visibility_8pidl</filename>
    <namespace>CORBA</namespace>
    <member kind="typedef">
      <type>short</type>
      <name>Visibility</name>
      <anchor>a331</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Visibility</type>
      <name>PRIVATE_MEMBER</name>
      <anchor>a332</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Visibility</type>
      <name>PUBLIC_MEMBER</name>
      <anchor>a333</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VisibilityA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>VisibilityA_8cpp</filename>
    <includes id="VisibilityC_8h" name="VisibilityC.h" local="yes" imported="no">VisibilityC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <namespace>CORBA</namespace>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_Visibility</name>
      <anchor>a0</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/Visibility:1.0&quot;,&quot;Visibility&quot;,&amp;CORBA::_tc_short)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_Visibility</name>
      <anchor>a334</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VisibilityC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>VisibilityC_8cpp</filename>
    <includes id="VisibilityC_8h" name="VisibilityC.h" local="yes" imported="no">VisibilityC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>VisibilityC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>VisibilityC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::Short_out</type>
      <name>Visibility_out</name>
      <anchor>a335</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VisibilityS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>VisibilityS_8h</filename>
  </compound>
  <compound kind="file">
    <name>Wait_On_Leader_Follower.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Wait__On__Leader__Follower_8cpp</filename>
    <includes id="Wait__On__Leader__Follower_8h" name="Wait_On_Leader_Follower.h" local="yes" imported="no">tao/Wait_On_Leader_Follower.h</includes>
    <includes id="LF__Follower_8h" name="LF_Follower.h" local="yes" imported="no">tao/LF_Follower.h</includes>
    <includes id="Leader__Follower_8h" name="Leader_Follower.h" local="yes" imported="no">tao/Leader_Follower.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">tao/Transport.h</includes>
    <includes id="Synch__Reply__Dispatcher_8h" name="Synch_Reply_Dispatcher.h" local="yes" imported="no">tao/Synch_Reply_Dispatcher.h</includes>
  </compound>
  <compound kind="file">
    <name>Wait_On_Leader_Follower.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Wait__On__Leader__Follower_8h</filename>
    <includes id="Wait__Strategy_8h" name="Wait_Strategy.h" local="yes" imported="no">tao/Wait_Strategy.h</includes>
    <class kind="class">TAO_Wait_On_Leader_Follower</class>
  </compound>
  <compound kind="file">
    <name>Wait_On_LF_No_Upcall.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Wait__On__LF__No__Upcall_8cpp</filename>
    <includes id="Wait__On__LF__No__Upcall_8h" name="Wait_On_LF_No_Upcall.h" local="yes" imported="no">tao/Wait_On_LF_No_Upcall.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">tao/Transport.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Nested_Upcall_Guard</class>
  </compound>
  <compound kind="file">
    <name>Wait_On_LF_No_Upcall.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Wait__On__LF__No__Upcall_8h</filename>
    <includes id="Wait__On__Leader__Follower_8h" name="Wait_On_Leader_Follower.h" local="yes" imported="no">tao/Wait_On_Leader_Follower.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::Wait_On_LF_No_Upcall</class>
  </compound>
  <compound kind="file">
    <name>Wait_On_Reactor.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Wait__On__Reactor_8cpp</filename>
    <includes id="Wait__On__Reactor_8h" name="Wait_On_Reactor.h" local="yes" imported="no">tao/Wait_On_Reactor.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">tao/ORB_Core.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">tao/Transport.h</includes>
    <includes id="Synch__Reply__Dispatcher_8h" name="Synch_Reply_Dispatcher.h" local="yes" imported="no">tao/Synch_Reply_Dispatcher.h</includes>
  </compound>
  <compound kind="file">
    <name>Wait_On_Reactor.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Wait__On__Reactor_8h</filename>
    <includes id="Wait__Strategy_8h" name="Wait_Strategy.h" local="yes" imported="no">tao/Wait_Strategy.h</includes>
    <class kind="class">TAO_Wait_On_Reactor</class>
  </compound>
  <compound kind="file">
    <name>Wait_On_Read.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Wait__On__Read_8cpp</filename>
    <includes id="Wait__On__Read_8h" name="Wait_On_Read.h" local="yes" imported="no">tao/Wait_On_Read.h</includes>
    <includes id="Transport_8h" name="Transport.h" local="yes" imported="no">tao/Transport.h</includes>
    <includes id="Resume__Handle_8h" name="Resume_Handle.h" local="yes" imported="no">tao/Resume_Handle.h</includes>
    <includes id="Synch__Reply__Dispatcher_8h" name="Synch_Reply_Dispatcher.h" local="yes" imported="no">tao/Synch_Reply_Dispatcher.h</includes>
  </compound>
  <compound kind="file">
    <name>Wait_On_Read.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Wait__On__Read_8h</filename>
    <includes id="Wait__Strategy_8h" name="Wait_Strategy.h" local="yes" imported="no">tao/Wait_Strategy.h</includes>
    <class kind="class">TAO_Wait_On_Read</class>
  </compound>
  <compound kind="file">
    <name>Wait_Strategy.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Wait__Strategy_8cpp</filename>
    <includes id="Wait__Strategy_8h" name="Wait_Strategy.h" local="yes" imported="no">tao/Wait_Strategy.h</includes>
    <includes id="Wait__Strategy_8inl" name="Wait_Strategy.inl" local="yes" imported="no">Wait_Strategy.inl</includes>
  </compound>
  <compound kind="file">
    <name>Wait_Strategy.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Wait__Strategy_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <class kind="class">TAO_Wait_Strategy</class>
  </compound>
  <compound kind="file">
    <name>Wait_Strategy.inl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>Wait__Strategy_8inl</filename>
  </compound>
  <compound kind="file">
    <name>WCharSeq.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>WCharSeq_8pidl</filename>
    <namespace>CORBA</namespace>
    <member kind="typedef">
      <type>sequence&lt; wchar &gt;</type>
      <name>WCharSeq</name>
      <anchor>a336</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WCharSeqA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>WCharSeqA_8cpp</filename>
    <includes id="WCharSeqC_8h" name="WCharSeqC.h" local="yes" imported="no">WCharSeqC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <namespace>CORBA</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::WCharSeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::WCharSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::WCharSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::WCharSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_WCharSeq_0</name>
      <anchor>a103</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_wchar, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_WCharSeq_0</name>
      <anchor>a104</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_WCharSeq</name>
      <anchor>a2</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/WCharSeq:1.0&quot;,&quot;WCharSeq&quot;,&amp;TAO::TypeCode::tc_CORBA_WCharSeq_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_WCharSeq</name>
      <anchor>a337</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WCharSeqC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>WCharSeqC_8cpp</filename>
    <includes id="WCharSeqC_8h" name="WCharSeqC.h" local="yes" imported="no">WCharSeqC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_WCHARSEQ_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::WCharSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::WCharSeq &amp;_tao_sequence)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WCharSeqC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>WCharSeqC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">CORBA::WCharSeq</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_WCHARSEQ_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; WCharSeq, CORBA::WChar &gt;</type>
      <name>WCharSeq_var</name>
      <anchor>a338</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; WCharSeq, WCharSeq_var, CORBA::WChar &gt;</type>
      <name>WCharSeq_out</name>
      <anchor>a339</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::WCharSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::WCharSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::WCharSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::WCharSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::WCharSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::WCharSeq &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WCharSeqS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>WCharSeqS_8h</filename>
  </compound>
  <compound kind="file">
    <name>WrongTransaction.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>WrongTransaction_8pidl</filename>
    <namespace>CORBA</namespace>
    <class kind="exception">CORBA::WrongTransaction</class>
  </compound>
  <compound kind="file">
    <name>WrongTransactionA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>WrongTransactionA_8cpp</filename>
    <includes id="WrongTransactionC_8h" name="WrongTransactionC.h" local="yes" imported="no">WrongTransactionC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Struct__TypeCode_8h" name="Struct_TypeCode.h" local="yes" imported="no">tao/Struct_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>CORBA</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::WrongTransaction &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::WrongTransaction *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::WrongTransaction *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::WrongTransaction *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *const</type>
      <name>_tao_fields_CORBA_WrongTransaction</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Struct&lt; char const *, CORBA::TypeCode_ptr const *, TAO::TypeCode::Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_WrongTransaction</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::tk_except,&quot;IDL:omg.org/CORBA/WrongTransaction:1.0&quot;,&quot;WrongTransaction&quot;, _tao_fields_CORBA_WrongTransaction, 0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_WrongTransaction</name>
      <anchor>a340</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WrongTransactionC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>WrongTransactionC_8cpp</filename>
    <includes id="WrongTransactionC_8h" name="WrongTransactionC.h" local="yes" imported="no">WrongTransactionC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="SystemException_8h" name="SystemException.h" local="yes" imported="no">tao/SystemException.h</includes>
    <namespace>TAO</namespace>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::WrongTransaction &amp;_tao_aggregate)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::WrongTransaction &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WrongTransactionC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>WrongTransactionC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="exception">CORBA::WrongTransaction</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_WRONGTRANSACTION_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::WrongTransaction &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::WrongTransaction *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::WrongTransaction *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::WrongTransaction *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::WrongTransaction &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::WrongTransaction &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WStringSeq.pidl</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>WStringSeq_8pidl</filename>
    <namespace>CORBA</namespace>
    <member kind="typedef">
      <type>sequence&lt; wstring &gt;</type>
      <name>WStringSeq</name>
      <anchor>a341</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WStringSeqA.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>WStringSeqA_8cpp</filename>
    <includes id="WStringSeqC_8h" name="WStringSeqC.h" local="yes" imported="no">WStringSeqC.h</includes>
    <includes id="Null__RefCount__Policy_8h" name="Null_RefCount_Policy.h" local="yes" imported="no">tao/Null_RefCount_Policy.h</includes>
    <includes id="TypeCode__Constants_8h" name="TypeCode_Constants.h" local="yes" imported="no">tao/TypeCode_Constants.h</includes>
    <includes id="Alias__TypeCode_8h" name="Alias_TypeCode.h" local="yes" imported="no">tao/Alias_TypeCode.h</includes>
    <includes id="Sequence__TypeCode_8h" name="Sequence_TypeCode.h" local="yes" imported="no">tao/Sequence_TypeCode.h</includes>
    <includes id="String__TypeCode_8h" name="String_TypeCode.h" local="yes" imported="no">tao/String_TypeCode.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <includes id="Any_8h" name="Any.h" local="yes" imported="no">tao/Any.h</includes>
    <includes id="Any__Dual__Impl__T_8h" name="Any_Dual_Impl_T.h" local="yes" imported="no">tao/Any_Dual_Impl_T.h</includes>
    <namespace>TAO</namespace>
    <namespace>TAO::TypeCode</namespace>
    <namespace>CORBA</namespace>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, const CORBA::WStringSeq &amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;_tao_any, CORBA::WStringSeq *_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, CORBA::WStringSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;_tao_any, const CORBA::WStringSeq *&amp;_tao_elem)</arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_WStringSeq_0</name>
      <anchor>a105</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_wstring, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_WStringSeq_0</name>
      <anchor>a106</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>TAO::TypeCode::Alias&lt; char const *, CORBA::TypeCode_ptr const *, CORBA::tk_alias, TAO::Null_RefCount_Policy &gt;</type>
      <name>_tao_tc_CORBA_WStringSeq</name>
      <anchor>a2</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/WStringSeq:1.0&quot;,&quot;WStringSeq&quot;,&amp;TAO::TypeCode::tc_CORBA_WStringSeq_0)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_WStringSeq</name>
      <anchor>a342</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WStringSeqC.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>WStringSeqC_8cpp</filename>
    <includes id="WStringSeqC_8h" name="WStringSeqC.h" local="yes" imported="no">WStringSeqC.h</includes>
    <includes id="CDR_8h" name="CDR.h" local="yes" imported="no">tao/CDR.h</includes>
    <namespace>TAO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_WSTRINGSEQ_CS_</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;strm, const CORBA::WStringSeq &amp;_tao_sequence)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;strm, CORBA::WStringSeq &amp;_tao_sequence)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WStringSeqC.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>WStringSeqC_8h</filename>
    <includes id="TAO__Export_8h" name="TAO_Export.h" local="yes" imported="no">tao/TAO_Export.h</includes>
    <includes id="ORB_8h" name="ORB.h" local="yes" imported="no">tao/ORB.h</includes>
    <includes id="Environment_8h" name="Environment.h" local="yes" imported="no">tao/Environment.h</includes>
    <includes id="Sequence__T_8h" name="Sequence_T.h" local="yes" imported="no">tao/Sequence_T.h</includes>
    <includes id="Seq__Var__T_8h" name="Seq_Var_T.h" local="yes" imported="no">tao/Seq_Var_T.h</includes>
    <includes id="Seq__Out__T_8h" name="Seq_Out_T.h" local="yes" imported="no">tao/Seq_Out_T.h</includes>
    <namespace>CORBA</namespace>
    <namespace>TAO</namespace>
    <class kind="class">CORBA::WStringSeq</class>
    <member kind="define">
      <type>#define</type>
      <name>TAO_EXPORT_MACRO</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_CORBA_WSTRINGSEQ_CH_</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_MngSeq_Var_T&lt; WStringSeq, TAO_SeqElem_WString_Manager &gt;</type>
      <name>WStringSeq_var</name>
      <anchor>a343</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_MngSeq_Out_T&lt; WStringSeq, WStringSeq_var, TAO_SeqElem_WString_Manager &gt;</type>
      <name>WStringSeq_out</name>
      <anchor>a344</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Any &amp;, const CORBA::WStringSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::WStringSeq *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::WStringSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a7</anchor>
      <arglist>(const CORBA::Any &amp;, const CORBA::WStringSeq *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&lt;&lt;</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;, const CORBA::WStringSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::Boolean</type>
      <name>operator&gt;&gt;</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::WStringSeq &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WStringSeqS.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>WStringSeqS_8h</filename>
  </compound>
  <compound kind="file">
    <name>XtResource_Factory.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>XtResource__Factory_8cpp</filename>
    <includes id="XtResource__Factory_8h" name="XtResource_Factory.h" local="yes" imported="no">XtResource_Factory.h</includes>
    <includes id="debug_8h" name="debug.h" local="yes" imported="no">debug.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>XtResource_Factory.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>XtResource__Factory_8h</filename>
    <includes id="TAO__XtResource__Export_8h" name="TAO_XtResource_Export.h" local="yes" imported="no">tao/TAO_XtResource_Export.h</includes>
    <includes id="GUIResource__Factory_8h" name="GUIResource_Factory.h" local="yes" imported="no">tao/GUIResource_Factory.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::XtResource_Factory</class>
  </compound>
  <compound kind="file">
    <name>XtResource_Loader.cpp</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>XtResource__Loader_8cpp</filename>
    <includes id="XtResource__Loader_8h" name="XtResource_Loader.h" local="yes" imported="no">XtResource_Loader.h</includes>
    <includes id="ORB__Core_8h" name="ORB_Core.h" local="yes" imported="no">ORB_Core.h</includes>
    <includes id="XtResource__Factory_8h" name="XtResource_Factory.h" local="yes" imported="no">XtResource_Factory.h</includes>
    <namespace>TAO</namespace>
  </compound>
  <compound kind="file">
    <name>XtResource_Loader.h</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>XtResource__Loader_8h</filename>
    <includes id="TAO__XtResource__Export_8h" name="TAO_XtResource_Export.h" local="yes" imported="no">tao/TAO_XtResource_Export.h</includes>
    <namespace>TAO</namespace>
    <class kind="class">TAO::XtResource_Loader</class>
  </compound>
  <compound kind="class">
    <name>TAO_Abstract_ServantBase</name>
    <filename>classTAO__Abstract__ServantBase.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Abstract_ServantBase</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a1</anchor>
      <arglist>(const char *logical_type_id ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>_non_existent</name>
      <anchor>a2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::InterfaceDef_ptr</type>
      <name>_get_interface</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Object_ptr</type>
      <name>_get_component</name>
      <anchor>a4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Stub *</type>
      <name>_create_stub</name>
      <anchor>a5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>_find</name>
      <anchor>a6</anchor>
      <arglist>(const char *opname, TAO_Skeleton &amp;skelfunc, const unsigned int length=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>_find</name>
      <anchor>a7</anchor>
      <arglist>(const char *opname, TAO_Collocated_Skeleton &amp;skelfunc, TAO::Collocation_Strategy s, const unsigned int length=0)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_add_ref</name>
      <anchor>z11_0</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_remove_ref</name>
      <anchor>z11_1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Abstract_ServantBase</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Abstract_ServantBase</name>
      <anchor>b1</anchor>
      <arglist>(const TAO_Abstract_ServantBase &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TAO_Abstract_ServantBase &amp;</type>
      <name>operator=</name>
      <anchor>b2</anchor>
      <arglist>(const TAO_Abstract_ServantBase &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>_dispatch</name>
      <anchor>b3</anchor>
      <arglist>(TAO_ServerRequest &amp;request, void *servant_upcall ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>synchronous_upcall_dispatch</name>
      <anchor>b4</anchor>
      <arglist>(TAO_ServerRequest &amp;req, void *servant_upcall, void *derived_this ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>b5</anchor>
      <arglist>(void) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Accept_Strategy</name>
    <filename>classTAO__Accept__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <templarg></templarg>
    <base>ACE_Accept_Strategy&lt; SVC_HANDLER, ACE_PEER_ACCEPTOR_2 &gt;</base>
    <member kind="function">
      <type></type>
      <name>TAO_Accept_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_PEER_ACCEPTOR_ADDR &amp;local_addr, int restart=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>accept_svc_handler</name>
      <anchor>a2</anchor>
      <arglist>(SVC_HANDLER *svc_handler)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Accept_Strategy&lt; SVC_HANDLER, ACE_PEER_ACCEPTOR_2 &gt;</type>
      <name>ACCEPT_STRATEGY_BASE</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Acceptor</name>
    <filename>classTAO__Acceptor.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Acceptor</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::ULong tag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Acceptor</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>tag</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(TAO_ORB_Core *orb_core, ACE_Reactor *reactor, int version_major, int version_minor, const char *address, const char *options=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>open_default</name>
      <anchor>a4</anchor>
      <arglist>(TAO_ORB_Core *, ACE_Reactor *reactor, int version_major, int version_minor, const char *options=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a5</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>create_profile</name>
      <anchor>a6</anchor>
      <arglist>(const TAO::ObjectKey &amp;object_key, TAO_MProfile &amp;mprofile, CORBA::Short priority)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>is_collocated</name>
      <anchor>a7</anchor>
      <arglist>(const TAO_Endpoint *endpoint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::ULong</type>
      <name>endpoint_count</name>
      <anchor>a8</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>object_key</name>
      <anchor>a9</anchor>
      <arglist>(IOP::TaggedProfile &amp;profile, TAO::ObjectKey &amp;key)=0</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>tag_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Acceptor_Filter</name>
    <filename>classTAO__Acceptor__Filter.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Acceptor_Filter</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>fill_profile</name>
      <anchor>a1</anchor>
      <arglist>(const TAO::ObjectKey &amp;object_key, TAO_MProfile &amp;mprofile, TAO_Acceptor **acceptors_begin, TAO_Acceptor **acceptors_end, CORBA::Short priority=TAO_INVALID_PRIORITY)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>encode_endpoints</name>
      <anchor>a2</anchor>
      <arglist>(TAO_MProfile &amp;mprofile)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Acceptor_Registry</name>
    <filename>classTAO__Acceptor__Registry.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Acceptor_Registry</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Acceptor_Registry</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(TAO_ORB_Core *orb_core, ACE_Reactor *reactor, const TAO_EndpointSet &amp;endpoint_set, bool ignore_address ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close_all</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>endpoint_count</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_collocated</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_MProfile &amp;mprofile)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Acceptor *</type>
      <name>get_acceptor</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong tag)</arglist>
    </member>
    <member kind="function">
      <type>TAO_AcceptorSetIterator</type>
      <name>begin</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_AcceptorSetIterator</type>
      <name>end</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>open_default</name>
      <anchor>d0</anchor>
      <arglist>(TAO_ORB_Core *orb_core, ACE_Reactor *reactor, const char *options)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>open_default</name>
      <anchor>d1</anchor>
      <arglist>(TAO_ORB_Core *orb_core, ACE_Reactor *reactor, int major, int minor, TAO_ProtocolFactorySetItor &amp;factory, const char *options)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>extract_endpoint_options</name>
      <anchor>d2</anchor>
      <arglist>(ACE_CString &amp;addrs, ACE_CString &amp;options, TAO_Protocol_Factory *factory)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>extract_endpoint_version</name>
      <anchor>d3</anchor>
      <arglist>(ACE_CString &amp;address, int &amp;major, int &amp;minor)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>open_i</name>
      <anchor>d4</anchor>
      <arglist>(TAO_ORB_Core *orb_core, ACE_Reactor *reactor, ACE_CString &amp;address, TAO_ProtocolFactorySetItor &amp;factory, bool ignore_address ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_Acceptor_Registry</name>
      <anchor>d5</anchor>
      <arglist>(const TAO_Acceptor_Registry &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d6</anchor>
      <arglist>(const TAO_Acceptor_Registry &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Acceptor **</type>
      <name>acceptors_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>size_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Adapter</name>
    <filename>classTAO__Adapter.html</filename>
    <member kind="enumvalue">
      <name>DS_OK</name>
      <anchor>w4w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DS_FAILED</name>
      <anchor>w4w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DS_MISMATCHED_KEY</name>
      <anchor>w4w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DS_FORWARD</name>
      <anchor>w4w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>open</name>
      <anchor>a1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>close</name>
      <anchor>a2</anchor>
      <arglist>(int wait_for_completion ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>check_close</name>
      <anchor>a3</anchor>
      <arglist>(int wait_for_completion ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>priority</name>
      <anchor>a4</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>dispatch</name>
      <anchor>a5</anchor>
      <arglist>(TAO::ObjectKey &amp;key, TAO_ServerRequest &amp;request, CORBA::Object_out forward_to ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>name</name>
      <anchor>a6</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Object_ptr</type>
      <name>root</name>
      <anchor>a7</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Object_ptr</type>
      <name>create_collocated_object</name>
      <anchor>a8</anchor>
      <arglist>(TAO_Stub *, const TAO_MProfile &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Long</type>
      <name>initialize_collocated_object</name>
      <anchor>a9</anchor>
      <arglist>(TAO_Stub *, CORBA::Object_ptr)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Adapter_Factory</name>
    <filename>classTAO__Adapter__Factory.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Adapter_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Adapter *</type>
      <name>create</name>
      <anchor>a1</anchor>
      <arglist>(TAO_ORB_Core *orb_core)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Adapter_Registry</name>
    <filename>classTAO__Adapter__Registry.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Adapter_Registry</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Adapter_Registry</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchor>a2</anchor>
      <arglist>(int wait_for_completion ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check_close</name>
      <anchor>a3</anchor>
      <arglist>(int wait_for_completion ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Adapter *adapter ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispatch</name>
      <anchor>a5</anchor>
      <arglist>(TAO::ObjectKey &amp;key, TAO_ServerRequest &amp;request, CORBA::Object_out forward_to ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>create_collocated_object</name>
      <anchor>a6</anchor>
      <arglist>(TAO_Stub *, const TAO_MProfile &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Long</type>
      <name>initialize_collocated_object</name>
      <anchor>a7</anchor>
      <arglist>(TAO_Stub *, CORBA::Object_ptr o)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Adapter *</type>
      <name>find_adapter</name>
      <anchor>a8</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>adapters_capacity_</name>
      <anchor>z13_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>adapters_count_</name>
      <anchor>z13_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Adapter **</type>
      <name>adapters_</name>
      <anchor>z13_2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Array_Forany_T</name>
    <filename>classTAO__Array__Forany__T.html</filename>
    <templarg>T</templarg>
    <templarg>T_slice</templarg>
    <templarg>TAG</templarg>
    <member kind="function">
      <type></type>
      <name>TAO_Array_Forany_T</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Array_Forany_T</name>
      <anchor>a1</anchor>
      <arglist>(T_slice *, CORBA::Boolean nocopy=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Array_Forany_T</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Array_Forany_T&lt; T, T_slice, TAG &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Array_Forany_T</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Array_Forany_T &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(T_slice *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Array_Forany_T &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_Array_Forany_T&lt; T, T_slice, TAG &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>T_slice &amp;</type>
      <name>operator[]</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong index)</arglist>
    </member>
    <member kind="function">
      <type>const T_slice &amp;</type>
      <name>operator[]</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::ULong index) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T_slice *const &amp;</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T_slice *&amp;</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T_slice *</type>
      <name>in</name>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>T_slice *</type>
      <name>inout</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T_slice *&amp;</type>
      <name>out</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T_slice *</type>
      <name>_retn</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T_slice *</type>
      <name>ptr</name>
      <anchor>a14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>nocopy</name>
      <anchor>a15</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>T_slice *</type>
      <name>tao_alloc</name>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T_slice *</type>
      <name>ptr_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const CORBA::Boolean</type>
      <name>nocopy_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Array_Out_T</name>
    <filename>classTAO__Array__Out__T.html</filename>
    <templarg>T</templarg>
    <templarg>T_var</templarg>
    <templarg>T_slice</templarg>
    <templarg>TAG</templarg>
    <member kind="function">
      <type></type>
      <name>TAO_Array_Out_T</name>
      <anchor>a0</anchor>
      <arglist>(T_slice *&amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Array_Out_T</name>
      <anchor>a1</anchor>
      <arglist>(T_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Array_Out_T</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Array_Out_T&lt; T, T_var, T_slice, TAG &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Array_Out_T&lt; T, T_var, T_slice, TAG &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Array_Out_T&lt; T, T_var, T_slice, TAG &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Array_Out_T&lt; T, T_var, T_slice, TAG &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(T_slice *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T_slice *&amp;</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T_slice *&amp;</type>
      <name>ptr</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T_slice &amp;</type>
      <name>operator[]</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::ULong index)</arglist>
    </member>
    <member kind="function">
      <type>const T_slice &amp;</type>
      <name>operator[]</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong index) const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>TAO_Array_Out_T&lt; T, T_var, T_slice, TAG &gt;</type>
      <name>THIS_OUT_TYPE</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d0</anchor>
      <arglist>(const T_var &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T_slice *&amp;</type>
      <name>ptr_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Array_Var_Base_T</name>
    <filename>classTAO__Array__Var__Base__T.html</filename>
    <templarg>T</templarg>
    <templarg>T_slice</templarg>
    <templarg>TAG</templarg>
    <member kind="typedef">
      <type>const T_slice *</type>
      <name>_in_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_slice *</type>
      <name>_inout_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_slice *&amp;</type>
      <name>_out_type</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_slice *</type>
      <name>_retn_type</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Array_Var_Base_T</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Array_Var_Base_T</name>
      <anchor>a1</anchor>
      <arglist>(T_slice *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Array_Var_Base_T</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Array_Var_Base_T&lt; T, T_slice, TAG &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Array_Var_Base_T</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T_slice &amp;</type>
      <name>operator[]</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::ULong index)</arglist>
    </member>
    <member kind="function">
      <type>T_slice const &amp;</type>
      <name>operator[]</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::ULong index) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T_slice *const &amp;</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>_in_type</type>
      <name>in</name>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>_inout_type</type>
      <name>inout</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>_out_type</type>
      <name>out</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>_retn_type</type>
      <name>_retn</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>_retn_type</type>
      <name>ptr</name>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T_slice *</type>
      <name>ptr_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Asynch_Queued_Message</name>
    <filename>classTAO__Asynch__Queued__Message.html</filename>
    <base>TAO_Queued_Message</base>
    <member kind="function">
      <type></type>
      <name>TAO_Asynch_Queued_Message</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Message_Block *contents, ACE_Allocator *alloc=0, int is_heap_allocated=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Asynch_Queued_Message</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>message_length</name>
      <anchor>z20_0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>all_data_sent</name>
      <anchor>z20_1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fill_iov</name>
      <anchor>z20_2</anchor>
      <arglist>(int iovcnt_max, int &amp;iovcnt, iovec iov[]) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bytes_transferred</name>
      <anchor>z20_3</anchor>
      <arglist>(size_t &amp;byte_count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Queued_Message *</type>
      <name>clone</name>
      <anchor>z20_4</anchor>
      <arglist>(ACE_Allocator *alloc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchor>z20_5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Asynch_Queued_Message</name>
      <anchor>b0</anchor>
      <arglist>(char *buf, size_t size, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const size_t</type>
      <name>size_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>offset_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>buffer_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Asynch_Reply_Dispatcher_Base</name>
    <filename>classTAO__Asynch__Reply__Dispatcher__Base.html</filename>
    <base>TAO_Reply_Dispatcher</base>
    <member kind="function">
      <type></type>
      <name>TAO_Asynch_Reply_Dispatcher_Base</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core, ACE_Allocator *allocator=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transport</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Transport *t)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reply_timed_out</name>
      <anchor>a2</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>schedule_timer</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::ULong, const ACE_Time_Value &amp;ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_dispatch_reply</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>dispatch_reply</name>
      <anchor>z22_0</anchor>
      <arglist>(TAO_Pluggable_Reply_Params &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connection_closed</name>
      <anchor>z22_1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>incr_refcount</name>
      <anchor>z24_0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>decr_refcount</name>
      <anchor>z24_1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Asynch_Reply_Dispatcher_Base</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IOP::ServiceContextList</type>
      <name>reply_service_info_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>buf_</name>
      <anchor>p1</anchor>
      <arglist>[ACE_CDR::DEFAULT_BUFSIZE]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Data_Block</type>
      <name>db_</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_InputCDR</type>
      <name>reply_cdr_</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Transport *</type>
      <name>transport_</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Lock *</type>
      <name>lock_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long</type>
      <name>refcount_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>is_reply_dispatched_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Allocator *</type>
      <name>allocator_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Base_Sequence</name>
    <filename>classTAO__Base__Sequence.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Base_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>maximum</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong length)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a3</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_shrink_buffer</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::ULong new_length, CORBA::ULong old_length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_downcast</name>
      <anchor>a5</anchor>
      <arglist>(void *target, CORBA::Object *src ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Object *</type>
      <name>_upcast</name>
      <anchor>a6</anchor>
      <arglist>(void *src) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>release</name>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Base_Sequence</name>
      <anchor>a8</anchor>
      <arglist>(const TAO_Base_Sequence &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Base_Sequence &amp;</type>
      <name>operator=</name>
      <anchor>a9</anchor>
      <arglist>(const TAO_Base_Sequence &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Base_Sequence</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Base_Sequence</name>
      <anchor>b1</anchor>
      <arglist>(CORBA::ULong maximum, CORBA::ULong length, void *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Base_Sequence</name>
      <anchor>b2</anchor>
      <arglist>(CORBA::ULong maximum, void *buffer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_bounds</name>
      <anchor>b3</anchor>
      <arglist>(char const *filename, unsigned long lineno, CORBA::ULong tao_idx, CORBA::ULong tao_max) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>maximum_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>length_</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>buffer_</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>release_</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TAO_Marshal_Sequence</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Base_Transport_Property</name>
    <filename>classTAO__Base__Transport__Property.html</filename>
    <base>TAO_Transport_Descriptor_Interface</base>
    <member kind="function">
      <type></type>
      <name>TAO_Base_Transport_Property</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Base_Transport_Property</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Endpoint *endpoint, CORBA::Boolean flag=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Base_Transport_Property</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Base_Transport_Property</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Base_Transport_Property &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Transport_Descriptor_Interface *</type>
      <name>duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>is_equivalent</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_Transport_Descriptor_Interface *other_prop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u_long</type>
      <name>hash</name>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Base_var</name>
    <filename>classTAO__Base__var.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Base_var</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_Base_var</name>
      <anchor>d0</anchor>
      <arglist>(const TAO_Base_var &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TAO_Base_var &amp;</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const TAO_Base_var &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_BiDir_Adapter</name>
    <filename>classTAO__BiDir__Adapter.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_BiDir_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>activate</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ORB_ptr, int argc, ACE_TCHAR *argv[] ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>load_policy_validators</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Policy_Validator &amp;validator ACE_ENV_ARG_DECL)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Bind_Dispatcher_Guard</name>
    <filename>classTAO__Bind__Dispatcher__Guard.html</filename>
    <member kind="enumvalue">
      <name>UNBIND</name>
      <anchor>w2w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_UNBIND</name>
      <anchor>w2w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bind_Dispatcher_Guard</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::ULong request_id, TAO_Reply_Dispatcher *rd, TAO_Transport_Mux_Strategy *tms)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Bind_Dispatcher_Guard</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind_dispatcher</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>status</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchor>a4</anchor>
      <arglist>(int status)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>status_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>request_id_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Reply_Dispatcher *</type>
      <name>rd_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Transport_Mux_Strategy *</type>
      <name>tms_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Block_Flushing_Strategy</name>
    <filename>classTAO__Block__Flushing__Strategy.html</filename>
    <base>TAO_Flushing_Strategy</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>schedule_output</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_output</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>flush_message</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Transport *transport, TAO_Queued_Message *msg, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>flush_transport</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Blocked_Connect_Strategy</name>
    <filename>classTAO__Blocked__Connect__Strategy.html</filename>
    <base>TAO_Connect_Strategy</base>
    <member kind="function">
      <type></type>
      <name>TAO_Blocked_Connect_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Blocked_Connect_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>synch_options</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Time_Value *val, ACE_Synch_Options &amp;opt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>wait</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Connection_Handler *ch, ACE_Time_Value *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>wait</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Transport *t, ACE_Time_Value *val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Bounded_Array_Sequence</name>
    <filename>classTAO__Bounded__Array__Sequence.html</filename>
    <templarg>T</templarg>
    <templarg>T_slice</templarg>
    <templarg>TAG</templarg>
    <templarg>MAX</templarg>
    <base>TAO_Bounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Array_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Array_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong length, T *value, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Array_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Bounded_Array_Sequence&lt; T, T_slice, TAG, MAX &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Bounded_Array_Sequence</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Bounded_Array_Sequence &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const TAO_Bounded_Array_Sequence&lt; T, T_slice, TAG, MAX &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get_buffer</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::Boolean orphan=0)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>get_buffer</name>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, T *data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>T *</type>
      <name>allocbuf</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>e1</anchor>
      <arglist>(T *buffer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Bounded_Base_Sequence</name>
    <filename>classTAO__Bounded__Base__Sequence.html</filename>
    <base>TAO_Base_Sequence</base>
    <member kind="function">
      <type>void</type>
      <name>length</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>length</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Bounded_Base_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Bounded_Base_Sequence</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Bounded_Base_Sequence</name>
      <anchor>b1</anchor>
      <arglist>(CORBA::ULong maximum, CORBA::ULong length, void *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Bounded_Base_Sequence</name>
      <anchor>b2</anchor>
      <arglist>(CORBA::ULong maximum, void *buffer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Bounded_Object_Sequence</name>
    <filename>classTAO__Bounded__Object__Sequence.html</filename>
    <templarg>T</templarg>
    <templarg>T_var</templarg>
    <templarg>MAX</templarg>
    <base>TAO_Bounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Object_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Object_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong length, T **value, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Object_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Bounded_Object_Sequence&lt; T, T_var, MAX &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Bounded_Object_Sequence</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Bounded_Object_Sequence&lt; T, T_var, MAX &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const TAO_Bounded_Object_Sequence&lt; T, T_var, MAX &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Object_Manager&lt; T, T_var &gt;</type>
      <name>operator[]</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::ULong slot) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_shrink_buffer</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong new_length, CORBA::ULong old_length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>T **</type>
      <name>allocbuf</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>e1</anchor>
      <arglist>(T **buffer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Bounded_Pseudo_Sequence</name>
    <filename>classTAO__Bounded__Pseudo__Sequence.html</filename>
    <templarg>T</templarg>
    <templarg>MAX</templarg>
    <base>TAO_Bounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Pseudo_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Pseudo_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong length, T **value, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Pseudo_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Bounded_Pseudo_Sequence&lt; T, MAX &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Bounded_Pseudo_Sequence</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Bounded_Pseudo_Sequence &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const TAO_Bounded_Pseudo_Sequence&lt; T, MAX &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Pseudo_Object_Manager&lt; T &gt;</type>
      <name>operator[]</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::ULong slot) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_shrink_buffer</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong new_length, CORBA::ULong old_length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>T **</type>
      <name>allocbuf</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>e1</anchor>
      <arglist>(T **buffer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Bounded_Sequence</name>
    <filename>classTAO__Bounded__Sequence.html</filename>
    <templarg>T</templarg>
    <templarg>MAX</templarg>
    <base>TAO_Bounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong length, T *data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Bounded_Sequence&lt; T, MAX &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Bounded_Sequence&lt; T, MAX &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Bounded_Sequence&lt; T, MAX &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Bounded_Sequence</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get_buffer</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::Boolean orphan=0)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>get_buffer</name>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, T *data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>T *</type>
      <name>allocbuf</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>e1</anchor>
      <arglist>(T *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Bounded_String_Sequence</name>
    <filename>classTAO__Bounded__String__Sequence.html</filename>
    <templarg>MAX</templarg>
    <base>TAO_Bounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_String_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_String_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong length, char **value, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_String_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Bounded_String_Sequence&lt; MAX &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Bounded_String_Sequence &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Bounded_String_Sequence&lt; MAX &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Bounded_String_Sequence</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_String_Manager</type>
      <name>operator[]</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::ULong slot) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_shrink_buffer</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong new_length, CORBA::ULong old_length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::ULong length, char **value, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char **</type>
      <name>allocbuf</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>e1</anchor>
      <arglist>(char **buffer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Bounded_WString_Sequence</name>
    <filename>classTAO__Bounded__WString__Sequence.html</filename>
    <templarg>MAX</templarg>
    <base>TAO_Bounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_WString_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_WString_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong length, CORBA::WChar **value, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Bounded_WString_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Bounded_WString_Sequence&lt; MAX &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Bounded_WString_Sequence &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Bounded_WString_Sequence&lt; MAX &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Bounded_WString_Sequence</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_WString_Manager</type>
      <name>operator[]</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::ULong slot) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_shrink_buffer</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong new_length, CORBA::ULong old_length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::ULong length, CORBA::WChar **value, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::WChar **</type>
      <name>allocbuf</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::WChar **buffer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Buffering_Constraint_Policy</name>
    <filename>classTAO__Buffering__Constraint__Policy.html</filename>
    <base>TAO::BufferingConstraintPolicy</base>
    <base>TAO_Local_RefCounted_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Buffering_Constraint_Policy</name>
      <anchor>a0</anchor>
      <arglist>(const TAO::BufferingConstraint &amp;buffering_constraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Buffering_Constraint_Policy</name>
      <anchor>a1</anchor>
      <arglist>(const TAO_Buffering_Constraint_Policy &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Buffering_Constraint_Policy *</type>
      <name>clone</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::BufferingConstraint</type>
      <name>buffering_constraint</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_buffering_constraint</name>
      <anchor>a4</anchor>
      <arglist>(TAO::BufferingConstraint &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::PolicyType</type>
      <name>policy_type</name>
      <anchor>a5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Policy_ptr</type>
      <name>copy</name>
      <anchor>a6</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchor>a7</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Cached_Policy_Type</type>
      <name>_tao_cached_type</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Policy_ptr</type>
      <name>create</name>
      <anchor>e0</anchor>
      <arglist>(const CORBA::Any &amp;val ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO::BufferingConstraint</type>
      <name>buffering_constraint_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_CDR_Encaps_Codec</name>
    <filename>classTAO__CDR__Encaps__Codec.html</filename>
    <base virtualness="virtual">IOP::Codec</base>
    <base virtualness="virtual">TAO_Local_RefCounted_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_CDR_Encaps_Codec</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::Octet major, CORBA::Octet minor, TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::OctetSeq *</type>
      <name>encode</name>
      <anchor>a1</anchor>
      <arglist>(const CORBA::Any &amp;data ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Any *</type>
      <name>decode</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA::OctetSeq &amp;data ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::OctetSeq *</type>
      <name>encode_value</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA::Any &amp;data ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Any *</type>
      <name>decode_value</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA::OctetSeq &amp;data, CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~TAO_CDR_Encaps_Codec</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_type_for_encoding</name>
      <anchor>b1</anchor>
      <arglist>(const CORBA::Any &amp;data ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_CDR_Encaps_Codec</name>
      <anchor>d0</anchor>
      <arglist>(const TAO_CDR_Encaps_Codec &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const TAO_CDR_Encaps_Codec &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Octet</type>
      <name>major_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Octet</type>
      <name>minor_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Cleanup_Func_Registry</name>
    <filename>classTAO__Cleanup__Func__Registry.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Cleanup_Func_Registry</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Cleanup_Func_Registry</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>register_cleanup_function</name>
      <anchor>b0</anchor>
      <arglist>(ACE_CLEANUP_FUNC func, size_t &amp;slot_id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cleanup</name>
      <anchor>b1</anchor>
      <arglist>(ACE_Array_Base&lt; void * &gt; &amp;ts_objects)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_Cleanup_Func_Registry</name>
      <anchor>d0</anchor>
      <arglist>(const TAO_Cleanup_Func_Registry &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const TAO_Cleanup_Func_Registry &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Array_Base&lt; ACE_CLEANUP_FUNC &gt;</type>
      <name>cleanup_funcs_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>TAO_ORBInitInfo</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>TAO_ORB_Core_TSS_Resources</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>TAO_ORB_Core</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Client_Strategy_Factory</name>
    <filename>classTAO__Client__Strategy__Factory.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Client_Strategy_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Client_Strategy_Factory</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Lock *</type>
      <name>create_profile_lock</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Transport_Mux_Strategy *</type>
      <name>create_transport_mux_strategy</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Lock *</type>
      <name>create_transport_mux_strategy_lock</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>reply_dispatcher_table_size</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Wait_Strategy *</type>
      <name>create_wait_strategy</name>
      <anchor>a6</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Connect_Strategy *</type>
      <name>create_connect_strategy</name>
      <anchor>a7</anchor>
      <arglist>(TAO_ORB_Core *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>allow_callback</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Lock *</type>
      <name>create_ft_service_retention_id_lock</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ClientRequestInfo</name>
    <filename>classTAO__ClientRequestInfo.html</filename>
    <base virtualness="virtual">PortableInterceptor::ClientRequestInfo</base>
    <base virtualness="virtual">TAO_Local_RefCounted_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_ClientRequestInfo</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>request_id</name>
      <anchor>a1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char *</type>
      <name>operation</name>
      <anchor>a2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Dynamic::ParameterList *</type>
      <name>arguments</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Dynamic::ExceptionList *</type>
      <name>exceptions</name>
      <anchor>a4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Dynamic::ContextList *</type>
      <name>contexts</name>
      <anchor>a5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Dynamic::RequestContext *</type>
      <name>operation_context</name>
      <anchor>a6</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Any *</type>
      <name>result</name>
      <anchor>a7</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>response_expected</name>
      <anchor>a8</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Messaging::SyncScope</type>
      <name>sync_scope</name>
      <anchor>a9</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PortableInterceptor::ReplyStatus</type>
      <name>reply_status</name>
      <anchor>a10</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Object_ptr</type>
      <name>forward_reference</name>
      <anchor>a11</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Any *</type>
      <name>get_slot</name>
      <anchor>a12</anchor>
      <arglist>(PortableInterceptor::SlotId id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IOP::ServiceContext *</type>
      <name>get_request_service_context</name>
      <anchor>a13</anchor>
      <arglist>(IOP::ServiceId id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IOP::ServiceContext *</type>
      <name>get_reply_service_context</name>
      <anchor>a14</anchor>
      <arglist>(IOP::ServiceId id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Object_ptr</type>
      <name>target</name>
      <anchor>a15</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Object_ptr</type>
      <name>effective_target</name>
      <anchor>a16</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IOP::TaggedProfile *</type>
      <name>effective_profile</name>
      <anchor>a17</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Any *</type>
      <name>received_exception</name>
      <anchor>a18</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char *</type>
      <name>received_exception_id</name>
      <anchor>a19</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IOP::TaggedComponent *</type>
      <name>get_effective_component</name>
      <anchor>a20</anchor>
      <arglist>(IOP::ComponentId id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IOP::TaggedComponentSeq *</type>
      <name>get_effective_components</name>
      <anchor>a21</anchor>
      <arglist>(IOP::ComponentId id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Policy_ptr</type>
      <name>get_request_policy</name>
      <anchor>a22</anchor>
      <arglist>(CORBA::PolicyType type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add_request_service_context</name>
      <anchor>a23</anchor>
      <arglist>(const IOP::ServiceContext &amp;service_context, CORBA::Boolean replace ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>info</name>
      <anchor>a24</anchor>
      <arglist>(TAO_ClientRequestInfo_i *info)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ClientRequestInfo_i *</type>
      <name>info</name>
      <anchor>a25</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TAO_GIOP_Invocation *</type>
      <name>invocation</name>
      <anchor>a26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>check_validity</name>
      <anchor>d0</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ClientRequestInfo_i *</type>
      <name>info_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_GIOP_Invocation *</type>
      <name>invocation_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ClientRequestInfo_Guard</name>
    <filename>classTAO__ClientRequestInfo__Guard.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_ClientRequestInfo_Guard</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ClientRequestInfo *info, TAO_ClientRequestInfo_i *ri)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_ClientRequestInfo_Guard</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ClientRequestInfo *</type>
      <name>info_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ClientRequestInfo_i *</type>
      <name>previous_info_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ClientRequestInfo_i</name>
    <filename>classTAO__ClientRequestInfo__i.html</filename>
    <member kind="function">
      <type>void</type>
      <name>response_expected</name>
      <anchor>z29_0</anchor>
      <arglist>(CORBA::Boolean flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reply_status</name>
      <anchor>z29_1</anchor>
      <arglist>(TAO::Invocation_Status s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reply_status</name>
      <anchor>z29_2</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forward_reference</name>
      <anchor>z29_3</anchor>
      <arglist>(PortableInterceptor::ForwardRequest &amp;exc)</arglist>
    </member>
    <member kind="variable">
      <type>void exception CORBA::Exception *</type>
      <name>exception</name>
      <anchor>z29_4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_ClientRequestInfo_i</name>
      <anchor>a0</anchor>
      <arglist>(TAO::Invocation_Base *invocation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_ClientRequestInfo_i</name>
      <anchor>a1</anchor>
      <arglist>(TAO::Invocation_Base *invocation, CORBA::AbstractBase_ptr abstract_target, CORBA::Boolean response_expected=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_ClientRequestInfo_i</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>request_id</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>operation</name>
      <anchor>a4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Dynamic::ParameterList *</type>
      <name>arguments</name>
      <anchor>a5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Dynamic::ExceptionList *</type>
      <name>exceptions</name>
      <anchor>a6</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>Dynamic::ContextList *</type>
      <name>contexts</name>
      <anchor>a7</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>Dynamic::RequestContext *</type>
      <name>operation_context</name>
      <anchor>a8</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Any *</type>
      <name>result</name>
      <anchor>a9</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>response_expected</name>
      <anchor>a10</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>Messaging::SyncScope</type>
      <name>sync_scope</name>
      <anchor>a11</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::ReplyStatus</type>
      <name>reply_status</name>
      <anchor>a12</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>forward_reference</name>
      <anchor>a13</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Any *</type>
      <name>get_slot</name>
      <anchor>a14</anchor>
      <arglist>(PortableInterceptor::SlotId id ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>IOP::ServiceContext *</type>
      <name>get_request_service_context</name>
      <anchor>a15</anchor>
      <arglist>(IOP::ServiceId id ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>IOP::ServiceContext *</type>
      <name>get_reply_service_context</name>
      <anchor>a16</anchor>
      <arglist>(IOP::ServiceId id ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>target</name>
      <anchor>a17</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>effective_target</name>
      <anchor>a18</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>IOP::TaggedProfile *</type>
      <name>effective_profile</name>
      <anchor>a19</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Any *</type>
      <name>received_exception</name>
      <anchor>a20</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>received_exception_id</name>
      <anchor>a21</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>IOP::TaggedComponent *</type>
      <name>get_effective_component</name>
      <anchor>a22</anchor>
      <arglist>(IOP::ComponentId id ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>IOP::TaggedComponentSeq *</type>
      <name>get_effective_components</name>
      <anchor>a23</anchor>
      <arglist>(IOP::ComponentId id ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>get_request_policy</name>
      <anchor>a24</anchor>
      <arglist>(CORBA::PolicyType type ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_request_service_context</name>
      <anchor>a25</anchor>
      <arglist>(const IOP::ServiceContext &amp;service_context, CORBA::Boolean replace ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setup_picurrent</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IOP::ServiceContext *</type>
      <name>get_service_context_i</name>
      <anchor>b1</anchor>
      <arglist>(TAO_Service_Context &amp;service_context_list, IOP::ServiceId id ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TAO_Stub *</type>
      <name>stub</name>
      <anchor>b2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO::Invocation_Base *</type>
      <name>invocation_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Exception *</type>
      <name>caught_exception_</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PortableInterceptor::ReplyStatus</type>
      <name>reply_status_</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO::PICurrent_Impl</type>
      <name>rs_pi_current_</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO::PICurrent_Copy_Callback</type>
      <name>copy_callback_</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ClientRequestInterceptor_List</name>
    <filename>classTAO__ClientRequestInterceptor__List.html</filename>
    <base>TAO_Interceptor_List</base>
    <member kind="typedef">
      <type>ACE_Array_Base&lt; PortableInterceptor::ClientRequestInterceptor_var &gt;</type>
      <name>TYPE</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_ClientRequestInterceptor_List</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_ClientRequestInterceptor_List</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_interceptor</name>
      <anchor>a2</anchor>
      <arglist>(PortableInterceptor::ClientRequestInterceptor_ptr i ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>interceptors</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual size_t</type>
      <name>length</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>length</name>
      <anchor>b1</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual PortableInterceptor::Interceptor_ptr</type>
      <name>interceptor</name>
      <anchor>b2</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TYPE</type>
      <name>interceptors_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_CodecFactory</name>
    <filename>classTAO__CodecFactory.html</filename>
    <base virtualness="virtual">IOP::CodecFactory</base>
    <base virtualness="virtual">TAO_Local_RefCounted_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_CodecFactory</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IOP::Codec_ptr</type>
      <name>create_codec</name>
      <anchor>a1</anchor>
      <arglist>(const IOP::Encoding &amp;enc ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_CodecFactory</name>
      <anchor>d0</anchor>
      <arglist>(const TAO_CodecFactory &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const TAO_CodecFactory &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_CodecFactory_ORBInitializer</name>
    <filename>classTAO__CodecFactory__ORBInitializer.html</filename>
    <base virtualness="virtual">PortableInterceptor::ORBInitializer</base>
    <base virtualness="virtual">TAO_Local_RefCounted_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pre_init</name>
      <anchor>a0</anchor>
      <arglist>(PortableInterceptor::ORBInitInfo_ptr info ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>post_init</name>
      <anchor>a1</anchor>
      <arglist>(PortableInterceptor::ORBInitInfo_ptr info ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Codeset_Item</name>
    <filename>classTAO__Codeset__Item.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Codeset_Item</name>
      <anchor>a0</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Codeset_Item</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>codeset_name</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Codeset_Translator_Factory *</type>
      <name>factory</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factory</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Codeset_Translator_Factory *factory)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_Codeset_Item</name>
      <anchor>d0</anchor>
      <arglist>(const TAO_Codeset_Item &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const TAO_Codeset_Item &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>name_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Codeset_Translator_Factory *</type>
      <name>factory_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TAO_Codeset_Manager</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Codeset_Manager</name>
    <filename>classTAO__Codeset__Manager.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Codeset_Manager</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Codeset_Manager</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_codeset</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Tagged_Components &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_tcs</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Profile &amp;theProfile, TAO_Transport &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>process_service_context</name>
      <anchor>a4</anchor>
      <arglist>(TAO_ServerRequest &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate_service_context</name>
      <anchor>a5</anchor>
      <arglist>(TAO_Operation_Details &amp;, TAO_Transport &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_ncs_c</name>
      <anchor>a6</anchor>
      <arglist>(CONV_FRAME::CodeSetId ncs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_ncs_w</name>
      <anchor>a7</anchor>
      <arglist>(CONV_FRAME::CodeSetId ncs, int maxbytes=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add_char_translator</name>
      <anchor>a8</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add_wchar_translator</name>
      <anchor>a9</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure_codeset_factories</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>CONV_FRAME::CodeSetId</type>
      <name>default_char_codeset</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>CONV_FRAME::CodeSetId</type>
      <name>default_wchar_codeset</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ACE_Unbounded_Set&lt; TAO_Codeset_Item * &gt;</type>
      <name>TAO_CodesetFactorySet</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ACE_Unbounded_Set_Iterator&lt; TAO_Codeset_Item * &gt;</type>
      <name>TAO_CodesetFactorySetItor</name>
      <anchor>y1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>CONV_FRAME::CodeSetId</type>
      <name>computeTCS</name>
      <anchor>d0</anchor>
      <arglist>(CONV_FRAME::CodeSetComponent &amp;, CONV_FRAME::CodeSetComponent &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>isElementOf</name>
      <anchor>d1</anchor>
      <arglist>(CONV_FRAME::CodeSetId, CONV_FRAME::CodeSetComponent &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>CONV_FRAME::CodeSetId</type>
      <name>intersectionOf</name>
      <anchor>d2</anchor>
      <arglist>(CONV_FRAME::CodeSetComponent &amp;, CONV_FRAME::CodeSetComponent &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>isCompatible</name>
      <anchor>d3</anchor>
      <arglist>(CONV_FRAME::CodeSetId, CONV_FRAME::CodeSetId)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>init_codeset_factories_i</name>
      <anchor>d4</anchor>
      <arglist>(TAO_CodesetFactorySet &amp;, CONV_FRAME::CodeSetComponent &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TAO_Codeset_Translator_Factory *</type>
      <name>get_char_trans</name>
      <anchor>d5</anchor>
      <arglist>(CONV_FRAME::CodeSetId)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TAO_Codeset_Translator_Factory *</type>
      <name>get_wchar_trans</name>
      <anchor>d6</anchor>
      <arglist>(CONV_FRAME::CodeSetId)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TAO_Codeset_Translator_Factory *</type>
      <name>get_translator_i</name>
      <anchor>d7</anchor>
      <arglist>(TAO_CodesetFactorySet &amp;, CONV_FRAME::CodeSetId)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CONV_FRAME::CodeSetComponentInfo</type>
      <name>codeset_info_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_CodesetFactorySet</type>
      <name>char_factories_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_CodesetFactorySet</type>
      <name>wchar_factories_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Codeset_Translator_Factory *</type>
      <name>utf16_bom_translator_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Codeset_Translator_Factory</name>
    <filename>classTAO__Codeset__Translator__Factory.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Codeset_Translator_Factory</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Codeset_Translator_Factory</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CONV_FRAME::CodeSetId</type>
      <name>ncs</name>
      <anchor>a3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CONV_FRAME::CodeSetId</type>
      <name>tcs</name>
      <anchor>a4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>assign</name>
      <anchor>a5</anchor>
      <arglist>(TAO_InputCDR *) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>assign</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR *) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assign_i</name>
      <anchor>b0</anchor>
      <arglist>(TAO_InputCDR *, ACE_Char_Codeset_Translator *) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assign_i</name>
      <anchor>b1</anchor>
      <arglist>(TAO_InputCDR *, ACE_WChar_Codeset_Translator *) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assign_i</name>
      <anchor>b2</anchor>
      <arglist>(TAO_OutputCDR *, ACE_Char_Codeset_Translator *) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assign_i</name>
      <anchor>b3</anchor>
      <arglist>(TAO_OutputCDR *, ACE_WChar_Codeset_Translator *) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Codeset_Translator_Factory_T</name>
    <filename>classTAO__Codeset__Translator__Factory__T.html</filename>
    <templarg>NCS_TO_TCS</templarg>
    <base>TAO_Codeset_Translator_Factory</base>
    <member kind="function">
      <type></type>
      <name>TAO_Codeset_Translator_Factory_T</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Codeset_Translator_Factory_T</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function">
      <type>CONV_FRAME::CodeSetId</type>
      <name>ncs</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CONV_FRAME::CodeSetId</type>
      <name>tcs</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchor>a5</anchor>
      <arglist>(TAO_InputCDR *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR *) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NCS_TO_TCS *</type>
      <name>translator_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Collocation_Resolver</name>
    <filename>classTAO__Collocation__Resolver.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Collocation_Resolver</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>is_collocated</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::Object_ptr object ACE_ENV_ARG_DECL) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Concurrency_Strategy</name>
    <filename>classTAO__Concurrency__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <base>ACE_Concurrency_Strategy</base>
    <member kind="function">
      <type></type>
      <name>TAO_Concurrency_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>activate_svc_handler</name>
      <anchor>a1</anchor>
      <arglist>(SVC_HANDLER *svc_handler, void *arg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Condition</name>
    <filename>classTAO__Condition.html</filename>
    <templarg>MUTEX</templarg>
    <member kind="typedef">
      <type>MUTEX</type>
      <name>LOCK</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Condition</name>
      <anchor>a0</anchor>
      <arglist>(MUTEX &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Condition</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Condition</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wait</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_Time_Value *abstime)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wait</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wait</name>
      <anchor>a5</anchor>
      <arglist>(MUTEX &amp;mutex, const ACE_Time_Value *abstime=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>broadcast</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>MUTEX *</type>
      <name>mutex</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d0</anchor>
      <arglist>(const TAO_Condition&lt; MUTEX &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_Condition</name>
      <anchor>d1</anchor>
      <arglist>(const TAO_Condition&lt; MUTEX &gt; &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MUTEX *</type>
      <name>mutex_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>delete_lock_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_SYNCH_CONDITION *</type>
      <name>cond_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Connect_Concurrency_Strategy</name>
    <filename>classTAO__Connect__Concurrency__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <base>ACE_Concurrency_Strategy</base>
    <member kind="function">
      <type></type>
      <name>TAO_Connect_Concurrency_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>activate_svc_handler</name>
      <anchor>a1</anchor>
      <arglist>(SVC_HANDLER *svc_handler, void *arg)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Connect_Creation_Strategy</name>
    <filename>classTAO__Connect__Creation__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <base>ACE_Creation_Strategy</base>
    <member kind="function">
      <type></type>
      <name>TAO_Connect_Creation_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Thread_Manager *=0, TAO_ORB_Core *orb_core=0, CORBA::Boolean flag=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>make_svc_handler</name>
      <anchor>a1</anchor>
      <arglist>(SVC_HANDLER *&amp;sh)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Boolean</type>
      <name>lite_flag_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Connect_Strategy</name>
    <filename>classTAO__Connect__Strategy.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Connect_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Connect_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>synch_options</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Time_Value *val, ACE_Synch_Options &amp;opt)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>wait</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Connection_Handler *ch, ACE_Time_Value *val)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>wait</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Transport *t, ACE_Time_Value *val)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Connection_Handler</name>
    <filename>classTAO__Connection__Handler.html</filename>
    <base>TAO_LF_CH_Event</base>
    <member kind="function">
      <type></type>
      <name>TAO_Connection_Handler</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Connection_Handler</name>
      <anchor>a1</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Connection_Handler</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Transport *</type>
      <name>transport</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transport</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_closed</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_open</name>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_connecting</name>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>close_connection</name>
      <anchor>a8</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>handle_input</name>
      <anchor>a9</anchor>
      <arglist>(ACE_HANDLE fd)=0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>svc_i</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>open_handler</name>
      <anchor>a11</anchor>
      <arglist>(void *)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close_handler</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>set_dscp_codepoint</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::Boolean set_network_priority)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>release_os_resources</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>set_socket_option</name>
      <anchor>b1</anchor>
      <arglist>(ACE_SOCK &amp;sock, int snd_size, int rcv_size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>handle_output_eh</name>
      <anchor>z33_0</anchor>
      <arglist>(ACE_HANDLE h, ACE_Event_Handler *eh)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>handle_input_eh</name>
      <anchor>z33_1</anchor>
      <arglist>(ACE_HANDLE h, ACE_Event_Handler *eh)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>handle_input_internal</name>
      <anchor>z33_2</anchor>
      <arglist>(ACE_HANDLE h, ACE_Event_Handler *eh)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>close_connection_eh</name>
      <anchor>z33_3</anchor>
      <arglist>(ACE_Event_Handler *eh)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>pre_io_hook</name>
      <anchor>z33_4</anchor>
      <arglist>(int &amp;return_value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>pos_io_hook</name>
      <anchor>z33_5</anchor>
      <arglist>(int &amp;return_value)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Transport *</type>
      <name>transport_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Lock *</type>
      <name>lock_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Connection_Purging_Strategy</name>
    <filename>classTAO__Connection__Purging__Strategy.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Connection_Purging_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(int cache_maximum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Connection_Purging_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cache_maximum</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update_item</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Transport *transport)=0</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>cache_maximum_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Connector</name>
    <filename>classTAO__Connector.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Connector</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::ULong tag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Connector</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>tag</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>make_mprofile</name>
      <anchor>a3</anchor>
      <arglist>(const char *ior, TAO_MProfile &amp;mprofile ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Profile *</type>
      <name>corbaloc_scan</name>
      <anchor>a4</anchor>
      <arglist>(const char *ior, size_t &amp;len ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a5</anchor>
      <arglist>(TAO_ORB_Core *orb_core)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a6</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Transport *</type>
      <name>connect</name>
      <anchor>a7</anchor>
      <arglist>(TAO::Profile_Transport_Resolver *r, TAO_Transport_Descriptor_Interface *desc, ACE_Time_Value *timeout ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Profile *</type>
      <name>create_profile</name>
      <anchor>a8</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>check_prefix</name>
      <anchor>a9</anchor>
      <arglist>(const char *endpoint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char</type>
      <name>object_key_delimiter</name>
      <anchor>a10</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual TAO_Profile *</type>
      <name>make_profile</name>
      <anchor>b0</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>set_validate_endpoint</name>
      <anchor>b1</anchor>
      <arglist>(TAO_Endpoint *endpoint)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual TAO_Transport *</type>
      <name>make_connection</name>
      <anchor>b2</anchor>
      <arglist>(TAO::Profile_Transport_Resolver *r, TAO_Transport_Descriptor_Interface &amp;desc, ACE_Time_Value *timeout)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>cancel_svc_handler</name>
      <anchor>b3</anchor>
      <arglist>(TAO_Connection_Handler *svc_handler)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>check_connection_closure</name>
      <anchor>b4</anchor>
      <arglist>(TAO_Connection_Handler *connection_handler)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>wait_for_connection_completion</name>
      <anchor>b5</anchor>
      <arglist>(TAO::Profile_Transport_Resolver *r, TAO_Transport *&amp;transport, ACE_Time_Value *timeout)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>orb_core</name>
      <anchor>b6</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>create_connect_strategy</name>
      <anchor>b7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core</name>
      <anchor>b8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Connect_Strategy *</type>
      <name>active_connect_strategy_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>tag_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Connector_Registry</name>
    <filename>classTAO__Connector__Registry.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Connector_Registry</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Connector_Registry</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Connector *</type>
      <name>get_connector</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong tag)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close_all</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>make_mprofile</name>
      <anchor>a5</anchor>
      <arglist>(const char *ior, TAO_MProfile &amp;mprofile ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Profile *</type>
      <name>create_profile</name>
      <anchor>a6</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>object_key_delimiter</name>
      <anchor>a7</anchor>
      <arglist>(const char *ior)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ConnectorSetIterator</type>
      <name>begin</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ConnectorSetIterator</type>
      <name>end</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_Connector_Registry</name>
      <anchor>d0</anchor>
      <arglist>(const TAO_Connector_Registry &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const TAO_Connector_Registry &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Connector **</type>
      <name>connectors_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>size_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_CORBALOC_Parser</name>
    <filename>classTAO__CORBALOC__Parser.html</filename>
    <base>TAO_IOR_Parser</base>
    <member kind="function">
      <type></type>
      <name>TAO_CORBALOC_Parser</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_CORBALOC_Parser</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>match_prefix</name>
      <anchor>a2</anchor>
      <arglist>(const char *ior_string) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Object_ptr</type>
      <name>parse_string</name>
      <anchor>a3</anchor>
      <arglist>(const char *ior, CORBA::ORB_ptr orb ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>CORBA::Object_ptr</type>
      <name>make_stub_from_mprofile</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::ORB_ptr orb, TAO_MProfile &amp;mprofile ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>CORBA::Object_ptr</type>
      <name>parse_string_rir_helper</name>
      <anchor>d1</anchor>
      <arglist>(const char *corbaloc_name, CORBA::ORB_ptr orb ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>make_canonical</name>
      <anchor>d2</anchor>
      <arglist>(const char *ior, size_t ior_len, ACE_CString &amp;canonical_endpoint ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO_CORBALOC_Parser::parsed_endpoint</name>
    <filename>structTAO__CORBALOC__Parser_1_1parsed__endpoint.html</filename>
    <member kind="function">
      <type></type>
      <name>parsed_endpoint</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~parsed_endpoint</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>TAO_Profile *</type>
      <name>profile_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>obj_key_sep_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_CString</type>
      <name>prot_addr_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_CORBANAME_Parser</name>
    <filename>classTAO__CORBANAME__Parser.html</filename>
    <base>TAO_IOR_Parser</base>
    <member kind="function">
      <type></type>
      <name>TAO_CORBANAME_Parser</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_CORBANAME_Parser</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>match_prefix</name>
      <anchor>a2</anchor>
      <arglist>(const char *ior_string) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Object_ptr</type>
      <name>parse_string</name>
      <anchor>a3</anchor>
      <arglist>(const char *ior, CORBA::ORB_ptr orb ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual CORBA::Object_ptr</type>
      <name>parse_string_dynamic_request_helper</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::Object_ptr naming_context, ACE_CString &amp;key_string ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Creation_Strategy</name>
    <filename>classTAO__Creation__Strategy.html</filename>
    <templarg>SVC_HANDLER</templarg>
    <base>ACE_Creation_Strategy</base>
    <member kind="function">
      <type></type>
      <name>TAO_Creation_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core, CORBA::Boolean flag=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>make_svc_handler</name>
      <anchor>a1</anchor>
      <arglist>(SVC_HANDLER *&amp;sh)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>lite_flag_</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Default_Client_Strategy_Factory</name>
    <filename>classTAO__Default__Client__Strategy__Factory.html</filename>
    <base>TAO_Client_Strategy_Factory</base>
    <member kind="function">
      <type></type>
      <name>TAO_Default_Client_Strategy_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Default_Client_Strategy_Factory</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parse_args</name>
      <anchor>a3</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Lock *</type>
      <name>create_profile_lock</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Transport_Mux_Strategy *</type>
      <name>create_transport_mux_strategy</name>
      <anchor>a5</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Lock *</type>
      <name>create_transport_mux_strategy_lock</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>reply_dispatcher_table_size</name>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>allow_callback</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Wait_Strategy *</type>
      <name>create_wait_strategy</name>
      <anchor>a9</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Connect_Strategy *</type>
      <name>create_connect_strategy</name>
      <anchor>a10</anchor>
      <arglist>(TAO_ORB_Core *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Lock *</type>
      <name>create_ft_service_retention_id_lock</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>report_option_value_error</name>
      <anchor>b0</anchor>
      <arglist>(const ACE_TCHAR *option_name, const ACE_TCHAR *option_value)</arglist>
    </member>
    <member kind="enumeration">
      <name>Lock_Type</name>
      <anchor>y11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_NULL_LOCK</name>
      <anchor>y11y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_THREAD_LOCK</name>
      <anchor>y11y1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Transport_Mux_Strategy</name>
      <anchor>y12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_MUXED_TMS</name>
      <anchor>y12y2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_EXCLUSIVE_TMS</name>
      <anchor>y12y3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Wait_Strategy</name>
      <anchor>y13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_WAIT_ON_LEADER_FOLLOWER</name>
      <anchor>y13y4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_WAIT_ON_REACTOR</name>
      <anchor>y13y5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_WAIT_ON_READ</name>
      <anchor>y13y6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_WAIT_ON_LF_NO_UPCALL</name>
      <anchor>y13y7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Connect_Strategy</name>
      <anchor>y14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_BLOCKED_CONNECT</name>
      <anchor>y14y8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_REACTIVE_CONNECT</name>
      <anchor>y14y9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_LEADER_FOLLOWER_CONNECT</name>
      <anchor>y14y10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Lock_Type</type>
      <name>profile_lock_type_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Transport_Mux_Strategy</type>
      <name>transport_mux_strategy_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Wait_Strategy</type>
      <name>wait_strategy_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Connect_Strategy</type>
      <name>connect_strategy_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>rd_table_size_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Lock_Type</type>
      <name>muxed_strategy_lock_type_</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Default_Collocation_Resolver</name>
    <filename>classTAO__Default__Collocation__Resolver.html</filename>
    <base>TAO_Collocation_Resolver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>is_collocated</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::Object_ptr object ACE_ENV_ARG_DECL) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Default_Endpoint_Selector</name>
    <filename>classTAO__Default__Endpoint__Selector.html</filename>
    <base>TAO_Invocation_Endpoint_Selector</base>
    <member kind="function">
      <type></type>
      <name>TAO_Default_Endpoint_Selector</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Default_Endpoint_Selector</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>select_endpoint</name>
      <anchor>a2</anchor>
      <arglist>(TAO::Profile_Transport_Resolver *r, ACE_Time_Value *val ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Default_Endpoint_Selector_Factory</name>
    <filename>classTAO__Default__Endpoint__Selector__Factory.html</filename>
    <base>TAO_Endpoint_Selector_Factory</base>
    <member kind="function">
      <type></type>
      <name>TAO_Default_Endpoint_Selector_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Default_Endpoint_Selector_Factory</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Invocation_Endpoint_Selector *</type>
      <name>get_selector</name>
      <anchor>a2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Default_Endpoint_Selector *</type>
      <name>default_endpoint_selector_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Default_Protocols_Hooks</name>
    <filename>classTAO__Default__Protocols__Hooks.html</filename>
    <base>TAO_Protocols_Hooks</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Default_Protocols_Hooks</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init_hooks</name>
      <anchor>a1</anchor>
      <arglist>(TAO_ORB_Core *orb_core ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>set_client_network_priority</name>
      <anchor>a2</anchor>
      <arglist>(IOP::ProfileId protocol_tag, TAO_Stub *stub ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>set_server_network_priority</name>
      <anchor>a3</anchor>
      <arglist>(IOP::ProfileId protocol_tag, CORBA::Policy *policy ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>server_protocol_properties_at_orb_level</name>
      <anchor>a4</anchor>
      <arglist>(TAO_IIOP_Protocol_Properties &amp;protocol_properties ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>client_protocol_properties_at_orb_level</name>
      <anchor>a5</anchor>
      <arglist>(TAO_IIOP_Protocol_Properties &amp;protocol_properties ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>server_protocol_properties_at_orb_level</name>
      <anchor>a6</anchor>
      <arglist>(TAO_UIOP_Protocol_Properties &amp;protocol_properties ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>client_protocol_properties_at_orb_level</name>
      <anchor>a7</anchor>
      <arglist>(TAO_UIOP_Protocol_Properties &amp;protocol_properties ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>server_protocol_properties_at_orb_level</name>
      <anchor>a8</anchor>
      <arglist>(TAO_SHMIOP_Protocol_Properties &amp;protocol_properties ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>client_protocol_properties_at_orb_level</name>
      <anchor>a9</anchor>
      <arglist>(TAO_SHMIOP_Protocol_Properties &amp;protocol_properties ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>server_protocol_properties_at_orb_level</name>
      <anchor>a10</anchor>
      <arglist>(TAO_DIOP_Protocol_Properties &amp;protocol_properties ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>client_protocol_properties_at_orb_level</name>
      <anchor>a11</anchor>
      <arglist>(TAO_DIOP_Protocol_Properties &amp;protocol_properties ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>server_protocol_properties_at_orb_level</name>
      <anchor>a12</anchor>
      <arglist>(TAO_SCIOP_Protocol_Properties &amp;protocol_properties ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>client_protocol_properties_at_orb_level</name>
      <anchor>a13</anchor>
      <arglist>(TAO_SCIOP_Protocol_Properties &amp;protocol_properties ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Long</type>
      <name>get_dscp_codepoint</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rt_service_context</name>
      <anchor>a15</anchor>
      <arglist>(TAO_Stub *stub, TAO_Service_Context &amp;service_context, CORBA::Boolean restart ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_rt_service_context_hook</name>
      <anchor>a16</anchor>
      <arglist>(TAO_Service_Context &amp;service_context, CORBA::Policy *model_policy, CORBA::Short &amp;client_priority ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_selector_hook</name>
      <anchor>a17</anchor>
      <arglist>(CORBA::Policy *model_policy, CORBA::Boolean &amp;is_client_propagated, CORBA::Short &amp;server_priority)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_selector_bands_policy_hook</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::Policy *bands_policy, CORBA::Short p, CORBA::Short &amp;min_priority, CORBA::Short &amp;max_priority, int &amp;in_range)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_thread_CORBA_priority</name>
      <anchor>a19</anchor>
      <arglist>(CORBA::Short &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_thread_native_priority</name>
      <anchor>a20</anchor>
      <arglist>(CORBA::Short &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_thread_CORBA_and_native_priority</name>
      <anchor>a21</anchor>
      <arglist>(CORBA::Short &amp;, CORBA::Short &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set_thread_CORBA_priority</name>
      <anchor>a22</anchor>
      <arglist>(CORBA::Short ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set_thread_native_priority</name>
      <anchor>a23</anchor>
      <arglist>(CORBA::Short ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Default_Resource_Factory</name>
    <filename>classTAO__Default__Resource__Factory.html</filename>
    <base>TAO_Resource_Factory</base>
    <member kind="enumvalue">
      <name>TAO_ALLOCATOR_THREAD_LOCK</name>
      <anchor>z43_0w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TRANSLATOR_TYPE</name>
      <anchor>z43_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHAR_TRANSLATOR</name>
      <anchor>z43_1w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WCHAR_TRANSLATOR</name>
      <anchor>z43_1w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_parser_names</name>
      <anchor>z43_2</anchor>
      <arglist>(char **&amp;names, int &amp;number_of_names)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cdr_allocator_source</name>
      <anchor>z43_3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>use_locked_data_blocks</name>
      <anchor>z43_4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Reactor *</type>
      <name>get_reactor</name>
      <anchor>z43_5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reclaim_reactor</name>
      <anchor>z43_6</anchor>
      <arglist>(ACE_Reactor *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Acceptor_Registry *</type>
      <name>get_acceptor_registry</name>
      <anchor>z43_7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Connector_Registry *</type>
      <name>get_connector_registry</name>
      <anchor>z43_8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>input_cdr_dblock_allocator</name>
      <anchor>z43_9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>input_cdr_buffer_allocator</name>
      <anchor>z43_10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>input_cdr_msgblock_allocator</name>
      <anchor>z43_11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>input_cdr_allocator_type_locked</name>
      <anchor>z43_12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>output_cdr_dblock_allocator</name>
      <anchor>z43_13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>output_cdr_buffer_allocator</name>
      <anchor>z43_14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>output_cdr_msgblock_allocator</name>
      <anchor>z43_15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>amh_response_handler_allocator</name>
      <anchor>z43_16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>ami_response_handler_allocator</name>
      <anchor>z43_17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_ProtocolFactorySet *</type>
      <name>get_protocol_factories</name>
      <anchor>z43_18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Codeset_Manager *</type>
      <name>get_codeset_manager</name>
      <anchor>z43_19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init_protocol_factories</name>
      <anchor>z43_20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cache_maximum</name>
      <anchor>z43_21</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>purge_percentage</name>
      <anchor>z43_22</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>max_muxed_connections</name>
      <anchor>z43_23</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Lock *</type>
      <name>create_cached_connection_lock</name>
      <anchor>z43_24</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Lock *</type>
      <name>create_object_key_table_lock</name>
      <anchor>z43_25</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Lock *</type>
      <name>create_corba_object_lock</name>
      <anchor>z43_26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>locked_transport_cache</name>
      <anchor>z43_27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Flushing_Strategy *</type>
      <name>create_flushing_strategy</name>
      <anchor>z43_28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Connection_Purging_Strategy *</type>
      <name>create_purging_strategy</name>
      <anchor>z43_29</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Resource_Factory::Resource_Usage</type>
      <name>resource_usage_strategy</name>
      <anchor>z43_30</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_LF_Strategy *</type>
      <name>create_lf_strategy</name>
      <anchor>z43_31</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disable_factory</name>
      <anchor>z43_32</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>drop_replies_during_shutdown</name>
      <anchor>z43_33</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Default_Resource_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Default_Resource_Factory</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>z41_0</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parse_args</name>
      <anchor>z41_1</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ACE_Reactor_Impl *</type>
      <name>allocate_reactor_impl</name>
      <anchor>b0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>add_to_ior_parser_names</name>
      <anchor>b1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>report_option_value_error</name>
      <anchor>b2</anchor>
      <arglist>(const ACE_TCHAR *option_name, const ACE_TCHAR *option_value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>load_default_protocols</name>
      <anchor>b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>use_locked_data_blocks_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>parser_names_count_</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char **</type>
      <name>parser_names_</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>index_</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ProtocolFactorySet</type>
      <name>protocol_factories_</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Resource_Factory::Purging_Strategy</type>
      <name>connection_purging_type_</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>cache_maximum_</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>purge_percentage_</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>max_muxed_connections_</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>reactor_mask_signals_</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dynamically_allocated_reactor_</name>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>options_processed_</name>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>factory_disabled_</name>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Lock_Type</name>
      <anchor>y5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_NULL_LOCK</name>
      <anchor>y5y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_THREAD_LOCK</name>
      <anchor>y5y1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Flushing_Strategy_Type</name>
      <anchor>y6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_LEADER_FOLLOWER_FLUSHING</name>
      <anchor>y6y2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_REACTIVE_FLUSHING</name>
      <anchor>y6y3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_BLOCKING_FLUSHING</name>
      <anchor>y6y4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Lock_Type</type>
      <name>cached_connection_lock_type_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Lock_Type</type>
      <name>object_key_table_lock_type_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Lock_Type</type>
      <name>corba_object_lock_type_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Flushing_Strategy_Type</type>
      <name>flushing_strategy_type_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Codeset_Manager *</type>
      <name>codeset_manager_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Resource_Usage</type>
      <name>resource_usage_strategy_</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>drop_replies_</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Default_Server_Strategy_Factory</name>
    <filename>classTAO__Default__Server__Strategy__Factory.html</filename>
    <base>TAO_Server_Strategy_Factory</base>
    <member kind="function">
      <type></type>
      <name>TAO_Default_Server_Strategy_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Default_Server_Strategy_Factory</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(TAO_ORB_Core *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>enable_poa_locking</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>activate_server_connections</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>thread_per_connection_timeout</name>
      <anchor>a6</anchor>
      <arglist>(ACE_Time_Value &amp;timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>server_connection_thread_flags</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>server_connection_thread_count</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parse_args</name>
      <anchor>a9</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="enumeration">
      <name>Lock_Type</name>
      <anchor>x2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_NULL_LOCK</name>
      <anchor>x2x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_THREAD_LOCK</name>
      <anchor>x2x1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>tokenize</name>
      <anchor>b0</anchor>
      <arglist>(ACE_TCHAR *flag_string)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>report_option_value_error</name>
      <anchor>b1</anchor>
      <arglist>(const ACE_TCHAR *option_name, const ACE_TCHAR *option_value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>activate_server_connections_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>u_long</type>
      <name>thread_flags_</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Lock_Type</type>
      <name>poa_lock_type_</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>thread_per_connection_use_timeout_</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Time_Value</type>
      <name>thread_per_connection_timeout_</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Default_Stub_Factory</name>
    <filename>classTAO__Default__Stub__Factory.html</filename>
    <base>TAO_Stub_Factory</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Default_Stub_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Stub *</type>
      <name>create_stub</name>
      <anchor>a1</anchor>
      <arglist>(const char *repository_id, const TAO_MProfile &amp;profiles, TAO_ORB_Core *orb_core ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Default_Thread_Lane_Resources_Manager</name>
    <filename>classTAO__Default__Thread__Lane__Resources__Manager.html</filename>
    <base>TAO_Thread_Lane_Resources_Manager</base>
    <member kind="function">
      <type>TAO_Thread_Lane_Resources &amp;</type>
      <name>lane_resources</name>
      <anchor>z45_0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Thread_Lane_Resources &amp;</type>
      <name>default_lane_resources</name>
      <anchor>z45_1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Default_Thread_Lane_Resources_Manager</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core &amp;orb_core)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Default_Thread_Lane_Resources_Manager</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open_default_resources</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown_reactor</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cleanup_rw_transports</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_collocated</name>
      <anchor>a6</anchor>
      <arglist>(const TAO_MProfile &amp;mprofile)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Thread_Lane_Resources *</type>
      <name>lane_resources_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Default_Thread_Lane_Resources_Manager_Factory</name>
    <filename>classTAO__Default__Thread__Lane__Resources__Manager__Factory.html</filename>
    <base>TAO_Thread_Lane_Resources_Manager_Factory</base>
    <member kind="function">
      <type>TAO_Thread_Lane_Resources_Manager *</type>
      <name>create_thread_lane_resources_manager</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core &amp;core)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Delayed_Buffering_Sync_Strategy</name>
    <filename>classTAO__Delayed__Buffering__Sync__Strategy.html</filename>
    <base>TAO_Eager_Buffering_Sync_Strategy</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>must_queue</name>
      <anchor>a0</anchor>
      <arglist>(int queue_empty)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_DIOP_Protocol_Properties</name>
    <filename>classTAO__DIOP__Protocol__Properties.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_DIOP_Protocol_Properties</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Boolean</type>
      <name>enable_network_priority_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_DLL_Parser</name>
    <filename>classTAO__DLL__Parser.html</filename>
    <base>TAO_IOR_Parser</base>
    <member kind="function">
      <type></type>
      <name>TAO_DLL_Parser</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_DLL_Parser</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>match_prefix</name>
      <anchor>a2</anchor>
      <arglist>(const char *ior_string) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Object_ptr</type>
      <name>parse_string</name>
      <anchor>a3</anchor>
      <arglist>(const char *ior, CORBA::ORB_ptr orb ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Dynamic_Adapter</name>
    <filename>classTAO__Dynamic__Adapter.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Dynamic_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>create_request</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::Object_ptr obj, CORBA::ORB_ptr orb, const char *operation, CORBA::NVList_ptr arg_list, CORBA::NamedValue_ptr result, CORBA::ExceptionList_ptr exceptions, CORBA::Request_ptr &amp;request, CORBA::Flags req_flags ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Request_ptr</type>
      <name>request</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Object_ptr obj, CORBA::ORB_ptr orb, const char *op ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>context_is_nil</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::Context_ptr ctx)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>request_is_nil</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Request_ptr req)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>server_request_is_nil</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::ServerRequest_ptr req)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>context_release</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::Context_ptr ctx)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>request_release</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Request_ptr req)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>server_request_release</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ServerRequest_ptr req)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>create_exception_list</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::ExceptionList_ptr &amp;ACE_ENV_ARG_DECL)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Eager_Buffering_Sync_Strategy</name>
    <filename>classTAO__Eager__Buffering__Sync__Strategy.html</filename>
    <base>TAO_Sync_Strategy</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>must_queue</name>
      <anchor>a0</anchor>
      <arglist>(int queue_empty)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>buffering_constraints_reached</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Stub *stub, size_t msg_count, size_t total_bytes, int &amp;must_flush, const ACE_Time_Value &amp;current_deadline, int &amp;set_timer, ACE_Time_Value &amp;new_deadline)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>timer_check</name>
      <anchor>d0</anchor>
      <arglist>(const TAO::BufferingConstraint &amp;buffering_constraint, const ACE_Time_Value &amp;current_deadline, int &amp;set_timer, ACE_Time_Value &amp;new_deadline)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ACE_Time_Value</type>
      <name>time_conversion</name>
      <anchor>d1</anchor>
      <arglist>(const TimeBase::TimeT &amp;time)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Encodable</name>
    <filename>classTAO__Encodable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Encodable</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>_tao_encode</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;out_cdr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>_tao_decode</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;in_cdr)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Endpoint</name>
    <filename>classTAO__Endpoint.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>is_equivalent</name>
      <anchor>z51_0</anchor>
      <arglist>(const TAO_Endpoint *other_endpoint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Endpoint *</type>
      <name>next</name>
      <anchor>z51_1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>addr_to_string</name>
      <anchor>z51_2</anchor>
      <arglist>(char *buffer, size_t length)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Endpoint *</type>
      <name>duplicate</name>
      <anchor>z51_3</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::ULong</type>
      <name>hash</name>
      <anchor>z51_4</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_SYNCH_MUTEX</type>
      <name>addr_lookup_lock_</name>
      <anchor>z51_5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>hash_val_</name>
      <anchor>z51_6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>tag_</name>
      <anchor>z51_7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Short</type>
      <name>priority_</name>
      <anchor>z51_8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_Endpoint</name>
      <anchor>z51_9</anchor>
      <arglist>(const TAO_Endpoint &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>z51_10</anchor>
      <arglist>(const TAO_Endpoint &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Endpoint</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::ULong tag, CORBA::Short priority=TAO_INVALID_PRIORITY)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Endpoint</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>tag</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>priority</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::Short priority)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Short</type>
      <name>priority</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Endpoint_Selector_Factory</name>
    <filename>classTAO__Endpoint__Selector__Factory.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Endpoint_Selector_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Invocation_Endpoint_Selector *</type>
      <name>get_selector</name>
      <anchor>a1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Exceptions</name>
    <filename>classTAO__Exceptions.html</filename>
    <member kind="function" static="yes">
      <type>CORBA::SystemException *</type>
      <name>create_system_exception</name>
      <anchor>e0</anchor>
      <arglist>(const char *id ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Exclusive_TMS</name>
    <filename>classTAO__Exclusive__TMS.html</filename>
    <base>TAO_Transport_Mux_Strategy</base>
    <member kind="function">
      <type></type>
      <name>TAO_Exclusive_TMS</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Exclusive_TMS</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>request_id</name>
      <anchor>z58_0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bind_dispatcher</name>
      <anchor>z58_1</anchor>
      <arglist>(CORBA::ULong request_id, TAO_Reply_Dispatcher *rh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unbind_dispatcher</name>
      <anchor>z58_2</anchor>
      <arglist>(CORBA::ULong request_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dispatch_reply</name>
      <anchor>z58_3</anchor>
      <arglist>(TAO_Pluggable_Reply_Params &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>idle_after_send</name>
      <anchor>z58_4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>idle_after_reply</name>
      <anchor>z58_5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connection_closed</name>
      <anchor>z58_6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>request_id_generator_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>has_request_</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>request_id_</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Reply_Dispatcher *</type>
      <name>rd_</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Fault_Tolerance_Service</name>
    <filename>classTAO__Fault__Tolerance__Service.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Fault_Tolerance_Service</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Fault_Tolerance_Service</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Service_Callbacks *</type>
      <name>service_callback</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_CString &amp;</type>
      <name>client_id</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>client_id</name>
      <anchor>a5</anchor>
      <arglist>(const char *id)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Long</type>
      <name>retention_id</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Service_Callbacks *</type>
      <name>ft_service_callback_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_CString</type>
      <name>ft_object_id_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Long</type>
      <name>ft_object_retention_id_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Lock *</type>
      <name>ft_object_retention_id_lock_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_FILE_Parser</name>
    <filename>classTAO__FILE__Parser.html</filename>
    <base>TAO_IOR_Parser</base>
    <member kind="function">
      <type></type>
      <name>TAO_FILE_Parser</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_FILE_Parser</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>match_prefix</name>
      <anchor>a2</anchor>
      <arglist>(const char *ior_string) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Object_ptr</type>
      <name>parse_string</name>
      <anchor>a3</anchor>
      <arglist>(const char *ior, CORBA::ORB_ptr orb ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Fixed_Var_T</name>
    <filename>classTAO__Fixed__Var__T.html</filename>
    <templarg>T</templarg>
    <base>TAO_Var_Base_T</base>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>_out_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>_retn_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Fixed_Var_T</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Fixed_Var_T</name>
      <anchor>a1</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Fixed_Var_T</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Fixed_Var_T&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Fixed_Var_T</name>
      <anchor>a3</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Fixed_Var_T &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Fixed_Var_T &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_Fixed_Var_T&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Fixed_Var_T &amp;</type>
      <name>operator=</name>
      <anchor>a6</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>_out_type</type>
      <name>out</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>_retn_type</type>
      <name>_retn</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_FixedArray_Var_T</name>
    <filename>classTAO__FixedArray__Var__T.html</filename>
    <templarg>T</templarg>
    <templarg>T_slice</templarg>
    <templarg>TAG</templarg>
    <base>TAO_Array_Var_Base_T</base>
    <member kind="function">
      <type></type>
      <name>TAO_FixedArray_Var_T</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_FixedArray_Var_T</name>
      <anchor>a1</anchor>
      <arglist>(T_slice *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_FixedArray_Var_T</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_FixedArray_Var_T&lt; T, T_slice, TAG &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_FixedArray_Var_T&lt; T, T_slice, TAG &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(T_slice *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_FixedArray_Var_T&lt; T, T_slice, TAG &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const TAO_FixedArray_Var_T&lt; T, T_slice, TAG &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_FixedSeq_Var_T</name>
    <filename>classTAO__FixedSeq__Var__T.html</filename>
    <templarg>T</templarg>
    <templarg>T_elem</templarg>
    <base>TAO_Seq_Var_Base_T</base>
    <member kind="function">
      <type></type>
      <name>TAO_FixedSeq_Var_T</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_FixedSeq_Var_T</name>
      <anchor>a1</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_FixedSeq_Var_T</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_FixedSeq_Var_T&lt; T, T_elem &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_FixedSeq_Var_T</name>
      <anchor>a3</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_FixedSeq_Var_T &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_FixedSeq_Var_T &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_FixedSeq_Var_T&lt; T, T_elem &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>T_elem &amp;</type>
      <name>operator[]</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong index)</arglist>
    </member>
    <member kind="function">
      <type>TAO_FixedSeq_Var_T &amp;</type>
      <name>operator=</name>
      <anchor>a7</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Flushing_Strategy</name>
    <filename>classTAO__Flushing__Strategy.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Flushing_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>schedule_output</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Transport *transport)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>cancel_output</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Transport *transport)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>flush_message</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Transport *transport, TAO_Queued_Message *msg, ACE_Time_Value *max_wait_time)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>flush_transport</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Transport *transport)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Locate_Request_Header</name>
    <filename>classTAO__GIOP__Locate__Request__Header.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_GIOP_Locate_Request_Header</name>
      <anchor>a0</anchor>
      <arglist>(TAO_InputCDR &amp;msg, TAO_ORB_Core *core)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>request_id</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong id)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>request_id</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const TAO::ObjectKey &amp;</type>
      <name>object_key</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TAO::ObjectKey &amp;</type>
      <name>object_key</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Tagged_Profile &amp;</type>
      <name>profile</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_InputCDR &amp;</type>
      <name>incoming_stream</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>request_id_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Tagged_Profile</type>
      <name>profile_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO::ObjectKey</type>
      <name>object_key_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_InputCDR *</type>
      <name>incoming_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Locate_Status_Msg</name>
    <filename>classTAO__GIOP__Locate__Status__Msg.html</filename>
    <member kind="variable">
      <type>CORBA::Object_var</type>
      <name>forward_location_var</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_GIOP_Locate_Status_Type</type>
      <name>status</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Message_Base</name>
    <filename>classTAO__GIOP__Message__Base.html</filename>
    <base>TAO_Pluggable_Messaging</base>
    <member kind="function">
      <type></type>
      <name>TAO_GIOP_Message_Base</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core, size_t input_cdr_size=ACE_CDR::DEFAULT_BUFSIZE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_GIOP_Message_Base</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Octet major, CORBA::Octet minor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>generate_request_header</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Operation_Details &amp;op, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>generate_locate_request_header</name>
      <anchor>a5</anchor>
      <arglist>(TAO_Operation_Details &amp;op, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>generate_reply_header</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, TAO_Pluggable_Reply_Params_Base &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read_message</name>
      <anchor>a7</anchor>
      <arglist>(TAO_Transport *transport, int block=0, ACE_Time_Value *max_wait_time=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>format_message</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_incoming_messages</name>
      <anchor>a9</anchor>
      <arglist>(ACE_Message_Block &amp;message_block)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ssize_t</type>
      <name>missing_data</name>
      <anchor>a10</anchor>
      <arglist>(ACE_Message_Block &amp;message_block)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>extract_next_message</name>
      <anchor>a11</anchor>
      <arglist>(ACE_Message_Block &amp;incoming, TAO_Queued_Data *&amp;qd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>consolidate_node</name>
      <anchor>a12</anchor>
      <arglist>(TAO_Queued_Data *qd, ACE_Message_Block &amp;incoming)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>get_message_data</name>
      <anchor>a13</anchor>
      <arglist>(TAO_Queued_Data *qd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>process_request_message</name>
      <anchor>a14</anchor>
      <arglist>(TAO_Transport *transport, TAO_Queued_Data *qd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>process_reply_message</name>
      <anchor>a15</anchor>
      <arglist>(TAO_Pluggable_Reply_Params &amp;reply_info, TAO_Queued_Data *qd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>generate_exception_reply</name>
      <anchor>a16</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, TAO_Pluggable_Reply_Params_Base &amp;params, CORBA::Exception &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>header_length</name>
      <anchor>a17</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>fragment_header_length</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::Octet major, CORBA::Octet minor) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_OutputCDR &amp;</type>
      <name>out_stream</name>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>process_request</name>
      <anchor>b0</anchor>
      <arglist>(TAO_Transport *transport, TAO_InputCDR &amp;input, TAO_OutputCDR &amp;output, TAO_GIOP_Message_Generator_Parser *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>process_locate_request</name>
      <anchor>b1</anchor>
      <arglist>(TAO_Transport *transport, TAO_InputCDR &amp;input, TAO_OutputCDR &amp;output, TAO_GIOP_Message_Generator_Parser *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_state</name>
      <anchor>b2</anchor>
      <arglist>(CORBA::Octet major, CORBA::Octet minor, TAO_GIOP_Message_Generator_Parser *&amp;) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dump_msg</name>
      <anchor>b3</anchor>
      <arglist>(const char *label, const u_char *ptr, size_t len)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TAO_Pluggable_Message_Type</type>
      <name>message_type</name>
      <anchor>b4</anchor>
      <arglist>(const TAO_GIOP_Message_State &amp;state) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>buffer_</name>
      <anchor>p0</anchor>
      <arglist>[ACE_CDR::DEFAULT_BUFSIZE]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_OutputCDR</type>
      <name>out_stream_</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>write_protocol_header</name>
      <anchor>d0</anchor>
      <arglist>(TAO_GIOP_Message_Type t, TAO_OutputCDR &amp;msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>make_send_locate_reply</name>
      <anchor>d1</anchor>
      <arglist>(TAO_Transport *transport, TAO_GIOP_Locate_Request_Header &amp;request, TAO_GIOP_Locate_Status_Msg &amp;status, TAO_OutputCDR &amp;output, TAO_GIOP_Message_Generator_Parser *)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>send_error</name>
      <anchor>d2</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>send_close_connection</name>
      <anchor>d3</anchor>
      <arglist>(const TAO_GIOP_Message_Version &amp;version, TAO_Transport *transport, void *ctx)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>send_reply_exception</name>
      <anchor>d4</anchor>
      <arglist>(TAO_Transport *transport, TAO_OutputCDR &amp;cdr, CORBA::ULong request_id, IOP::ServiceContextList *svc_info, CORBA::Exception *x)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>generate_locate_reply_header</name>
      <anchor>d5</anchor>
      <arglist>(TAO_OutputCDR &amp;, TAO_Pluggable_Reply_Params_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>is_ready_for_bidirectional</name>
      <anchor>d6</anchor>
      <arglist>(TAO_OutputCDR &amp;msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TAO_Queued_Data *</type>
      <name>make_queued_data</name>
      <anchor>d7</anchor>
      <arglist>(size_t sz)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>init_queued_data</name>
      <anchor>d8</anchor>
      <arglist>(TAO_Queued_Data *qd, const TAO_GIOP_Message_State &amp;state) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_GIOP_Message_State</type>
      <name>message_state_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_GIOP_Message_Generator_Parser_Impl</type>
      <name>tao_giop_impl_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Message_Generator_Parser</name>
    <filename>classTAO__GIOP__Message__Generator__Parser.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_GIOP_Message_Generator_Parser</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>write_request_header</name>
      <anchor>a1</anchor>
      <arglist>(const TAO_Operation_Details &amp;opdetails, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>write_locate_request_header</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong request_id, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>write_reply_header</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;output, TAO_Pluggable_Reply_Params_Base &amp;reply ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>write_locate_reply_mesg</name>
      <anchor>a4</anchor>
      <arglist>(TAO_OutputCDR &amp;output, CORBA::ULong request_id, TAO_GIOP_Locate_Status_Msg &amp;status)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>parse_request_header</name>
      <anchor>a5</anchor>
      <arglist>(TAO_ServerRequest &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>parse_locate_header</name>
      <anchor>a6</anchor>
      <arglist>(TAO_GIOP_Locate_Request_Header &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_reply</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;input, TAO_Pluggable_Reply_Params &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_locate_reply</name>
      <anchor>a8</anchor>
      <arglist>(TAO_InputCDR &amp;input, TAO_Pluggable_Reply_Params &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Octet</type>
      <name>major_version</name>
      <anchor>a9</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Octet</type>
      <name>minor_version</name>
      <anchor>a10</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>is_ready_for_bidirectional</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>fragment_header_length</name>
      <anchor>a12</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>marshal_reply_status</name>
      <anchor>b0</anchor>
      <arglist>(TAO_OutputCDR &amp;output, TAO_Pluggable_Reply_Params_Base &amp;reply)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Message_Generator_Parser_10</name>
    <filename>classTAO__GIOP__Message__Generator__Parser__10.html</filename>
    <base>TAO_GIOP_Message_Generator_Parser</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>write_request_header</name>
      <anchor>a0</anchor>
      <arglist>(const TAO_Operation_Details &amp;opdetails, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>write_locate_request_header</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong request_id, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>write_reply_header</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;output, TAO_Pluggable_Reply_Params_Base &amp;reply ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>write_locate_reply_mesg</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;output, CORBA::ULong request_id, TAO_GIOP_Locate_Status_Msg &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_request_header</name>
      <anchor>a4</anchor>
      <arglist>(TAO_ServerRequest &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_locate_header</name>
      <anchor>a5</anchor>
      <arglist>(TAO_GIOP_Locate_Request_Header &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_reply</name>
      <anchor>a6</anchor>
      <arglist>(TAO_InputCDR &amp;input, TAO_Pluggable_Reply_Params &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_locate_reply</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;input, TAO_Pluggable_Reply_Params &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Octet</type>
      <name>major_version</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Octet</type>
      <name>minor_version</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>fragment_header_length</name>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Message_Generator_Parser_11</name>
    <filename>classTAO__GIOP__Message__Generator__Parser__11.html</filename>
    <base>TAO_GIOP_Message_Generator_Parser_10</base>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Octet</type>
      <name>minor_version</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Message_Generator_Parser_12</name>
    <filename>classTAO__GIOP__Message__Generator__Parser__12.html</filename>
    <base>TAO_GIOP_Message_Generator_Parser</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>write_request_header</name>
      <anchor>a0</anchor>
      <arglist>(const TAO_Operation_Details &amp;opdetails, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>write_locate_request_header</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong request_id, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>write_reply_header</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;output, TAO_Pluggable_Reply_Params_Base &amp;reply ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>write_locate_reply_mesg</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;output, CORBA::ULong request_id, TAO_GIOP_Locate_Status_Msg &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_request_header</name>
      <anchor>a4</anchor>
      <arglist>(TAO_ServerRequest &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_locate_header</name>
      <anchor>a5</anchor>
      <arglist>(TAO_GIOP_Locate_Request_Header &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_reply</name>
      <anchor>a6</anchor>
      <arglist>(TAO_InputCDR &amp;input, TAO_Pluggable_Reply_Params &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_locate_reply</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;input, TAO_Pluggable_Reply_Params &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Octet</type>
      <name>major_version</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Octet</type>
      <name>minor_version</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>is_ready_for_bidirectional</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>fragment_header_length</name>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>marshall_target_spec</name>
      <anchor>d0</anchor>
      <arglist>(TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>check_bidirectional_context</name>
      <anchor>d1</anchor>
      <arglist>(TAO_ServerRequest &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>process_bidir_context</name>
      <anchor>d2</anchor>
      <arglist>(TAO_Service_Context &amp;, TAO_Transport *transport)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Message_Generator_Parser_Impl</name>
    <filename>classTAO__GIOP__Message__Generator__Parser__Impl.html</filename>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>check_revision</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::Octet incoming_major, CORBA::Octet incoming_minor)</arglist>
    </member>
    <member kind="variable">
      <type>TAO_GIOP_Message_Generator_Parser_10</type>
      <name>tao_giop_10</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_GIOP_Message_Generator_Parser_11</type>
      <name>tao_giop_11</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_GIOP_Message_Generator_Parser_12</type>
      <name>tao_giop_12</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Message_Lite</name>
    <filename>classTAO__GIOP__Message__Lite.html</filename>
    <base>TAO_Pluggable_Messaging</base>
    <member kind="function">
      <type></type>
      <name>TAO_GIOP_Message_Lite</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core, size_t input_cdr_size=ACE_CDR::DEFAULT_BUFSIZE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_GIOP_Message_Lite</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Octet, CORBA::Octet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>generate_request_header</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Operation_Details &amp;op, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>generate_locate_request_header</name>
      <anchor>a5</anchor>
      <arglist>(TAO_Operation_Details &amp;op, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>generate_reply_header</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, TAO_Pluggable_Reply_Params_Base &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read_message</name>
      <anchor>a7</anchor>
      <arglist>(TAO_Transport *transport, int block=0, ACE_Time_Value *max_wait_time=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>format_message</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_incoming_messages</name>
      <anchor>a9</anchor>
      <arglist>(ACE_Message_Block &amp;message_block)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Pluggable_Message_Type</type>
      <name>message_type</name>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ssize_t</type>
      <name>missing_data</name>
      <anchor>a11</anchor>
      <arglist>(ACE_Message_Block &amp;message_block)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>extract_next_message</name>
      <anchor>a12</anchor>
      <arglist>(ACE_Message_Block &amp;incoming, TAO_Queued_Data *&amp;qd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>consolidate_node</name>
      <anchor>a13</anchor>
      <arglist>(TAO_Queued_Data *qd, ACE_Message_Block &amp;incoming)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>get_message_data</name>
      <anchor>a14</anchor>
      <arglist>(TAO_Queued_Data *qd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>process_request_message</name>
      <anchor>a15</anchor>
      <arglist>(TAO_Transport *transport, TAO_Queued_Data *qd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>process_reply_message</name>
      <anchor>a16</anchor>
      <arglist>(TAO_Pluggable_Reply_Params &amp;reply_info, TAO_Queued_Data *qd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>generate_exception_reply</name>
      <anchor>a17</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, TAO_Pluggable_Reply_Params_Base &amp;params, CORBA::Exception &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>write_protocol_header</name>
      <anchor>d0</anchor>
      <arglist>(TAO_GIOP_Message_Type t, TAO_OutputCDR &amp;msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>process_request</name>
      <anchor>d1</anchor>
      <arglist>(TAO_Transport *transport, TAO_InputCDR &amp;input, TAO_OutputCDR &amp;output)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>process_locate_request</name>
      <anchor>d2</anchor>
      <arglist>(TAO_Transport *transport, TAO_InputCDR &amp;input, TAO_OutputCDR &amp;output)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>make_send_locate_reply</name>
      <anchor>d3</anchor>
      <arglist>(TAO_Transport *transport, TAO_OutputCDR &amp;output, TAO_GIOP_Locate_Request_Header &amp;request, TAO_GIOP_Locate_Status_Msg &amp;status)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>send_error</name>
      <anchor>d4</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>send_close_connection</name>
      <anchor>d5</anchor>
      <arglist>(const TAO_GIOP_Message_Version &amp;version, TAO_Transport *transport, void *ctx)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>send_reply_exception</name>
      <anchor>d6</anchor>
      <arglist>(TAO_Transport *transport, TAO_ORB_Core *orb_core, CORBA::ULong request_id, IOP::ServiceContextList *svc_info, CORBA::Exception *x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>dump_msg</name>
      <anchor>d7</anchor>
      <arglist>(const char *label, const u_char *ptr, size_t len)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TAO_Queued_Data *</type>
      <name>make_queued_data</name>
      <anchor>d8</anchor>
      <arglist>(size_t sz)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>generate_locate_reply_header</name>
      <anchor>d9</anchor>
      <arglist>(TAO_OutputCDR &amp;, TAO_Pluggable_Reply_Params_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>is_ready_for_bidirectional</name>
      <anchor>d10</anchor>
      <arglist>(TAO_OutputCDR &amp;msg)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual size_t</type>
      <name>header_length</name>
      <anchor>d11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual size_t</type>
      <name>fragment_header_length</name>
      <anchor>d12</anchor>
      <arglist>(CORBA::Octet major, CORBA::Octet minor) const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual TAO_OutputCDR &amp;</type>
      <name>out_stream</name>
      <anchor>d13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>write_request_header</name>
      <anchor>d14</anchor>
      <arglist>(const TAO_Operation_Details &amp;opdetails, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>write_locate_request_header</name>
      <anchor>d15</anchor>
      <arglist>(CORBA::ULong request_id, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>write_reply_header</name>
      <anchor>d16</anchor>
      <arglist>(TAO_OutputCDR &amp;output, TAO_Pluggable_Reply_Params_Base &amp;reply ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>write_locate_reply_mesg</name>
      <anchor>d17</anchor>
      <arglist>(TAO_OutputCDR &amp;output, CORBA::ULong request_id, TAO_GIOP_Locate_Status_Msg &amp;status)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>parse_request_header</name>
      <anchor>d18</anchor>
      <arglist>(TAO_ServerRequest &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>parse_locate_header</name>
      <anchor>d19</anchor>
      <arglist>(TAO_GIOP_Locate_Request_Header &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>parse_reply</name>
      <anchor>d20</anchor>
      <arglist>(TAO_InputCDR &amp;input, TAO_Pluggable_Reply_Params &amp;params)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>parse_locate_reply</name>
      <anchor>d21</anchor>
      <arglist>(TAO_InputCDR &amp;input, TAO_Pluggable_Reply_Params &amp;params)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>init_queued_data</name>
      <anchor>d22</anchor>
      <arglist>(TAO_Queued_Data *qd) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Octet</type>
      <name>message_type_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>message_size_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Octet</type>
      <name>byte_order_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_OutputCDR</type>
      <name>cdr_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Message_State</name>
    <filename>classTAO__GIOP__Message__State.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_GIOP_Message_State</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parse_message_header</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Message_Block &amp;incoming)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>message_size</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>payload_size</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Octet</type>
      <name>byte_order</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>parse_message_header_i</name>
      <anchor>d0</anchor>
      <arglist>(ACE_Message_Block &amp;incoming)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>parse_magic_bytes</name>
      <anchor>d1</anchor>
      <arglist>(char *buf)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>get_version_info</name>
      <anchor>d2</anchor>
      <arglist>(char *buf)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>get_byte_order_info</name>
      <anchor>d3</anchor>
      <arglist>(char *buf)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>get_payload_size</name>
      <anchor>d4</anchor>
      <arglist>(char *buf)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>parse_fragment_header</name>
      <anchor>d5</anchor>
      <arglist>(const char *buf, size_t length)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>CORBA::ULong</type>
      <name>read_ulong</name>
      <anchor>d6</anchor>
      <arglist>(const char *buf)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_GIOP_Message_Version</type>
      <name>giop_version_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Octet</type>
      <name>byte_order_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Octet</type>
      <name>message_type_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>message_size_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>request_id_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Octet</type>
      <name>more_fragments_</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>missing_data_</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>TAO_GIOP_Message_Base</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Message_Version</name>
    <filename>classTAO__GIOP__Message__Version.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_GIOP_Message_Version</name>
      <anchor>a0</anchor>
      <arglist>(const TAO_GIOP_Message_Version &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_GIOP_Message_Version</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::Octet maj=TAO_DEF_GIOP_MAJOR, CORBA::Octet min=TAO_DEF_GIOP_MINOR)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_GIOP_Message_Version</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_version</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::Octet maj, CORBA::Octet min)</arglist>
    </member>
    <member kind="function">
      <type>TAO_GIOP_Message_Version &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const TAO_GIOP_Message_Version &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_GIOP_Message_Version &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>a6</anchor>
      <arglist>(const TAO_GIOP_Message_Version &amp;src)</arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Octet</type>
      <name>major</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Octet</type>
      <name>minor</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_ReplyHeader</name>
    <filename>classTAO__GIOP__ReplyHeader.html</filename>
    <member kind="variable">
      <type>IOP::ServiceContextList</type>
      <name>service_info</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::ULong</type>
      <name>request_id</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_GIOP_Reply_Status_Type</type>
      <name>reply_status</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_GIOP_Utils</name>
    <filename>classTAO__GIOP__Utils.html</filename>
    <member kind="function" static="yes">
      <type>int</type>
      <name>read_bytes_input</name>
      <anchor>e0</anchor>
      <arglist>(TAO_Transport *transport, TAO_InputCDR &amp;cdr, CORBA::ULong buf_size, ACE_Time_Value *value=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ssize_t</type>
      <name>read_buffer</name>
      <anchor>e1</anchor>
      <arglist>(TAO_Transport *transport, char *buf, size_t len, ACE_Time_Value *max_wait_time=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IFR_Client_Adapter</name>
    <filename>classTAO__IFR__Client__Adapter.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>interfacedef_cdr_insert</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, CORBA::InterfaceDef_ptr object_type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>interfacedef_any_insert</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::Any &amp;any, CORBA::InterfaceDef_ptr object_type)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dispose</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::InterfaceDef_ptr orphan)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::InterfaceDef_ptr</type>
      <name>get_interface</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::ORB_ptr orb, const char *repo_id ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::InterfaceDef_ptr</type>
      <name>get_interface_remote</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Object_ptr target ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>create_operation_list</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::ORB_ptr orb, CORBA::OperationDef_ptr, CORBA::NVList_ptr &amp;ACE_ENV_ARG_DECL)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IIOP_Acceptor</name>
    <filename>classTAO__IIOP__Acceptor.html</filename>
    <base>TAO_Acceptor</base>
    <member kind="typedef">
      <type>ACE_Strategy_Acceptor&lt; TAO_IIOP_Connection_Handler, ACE_SOCK_ACCEPTOR &gt;</type>
      <name>BASE_ACCEPTOR</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Creation_Strategy&lt; TAO_IIOP_Connection_Handler &gt;</type>
      <name>CREATION_STRATEGY</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Concurrency_Strategy&lt; TAO_IIOP_Connection_Handler &gt;</type>
      <name>CONCURRENCY_STRATEGY</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Accept_Strategy&lt; TAO_IIOP_Connection_Handler, ACE_SOCK_ACCEPTOR &gt;</type>
      <name>ACCEPT_STRATEGY</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Acceptor</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::Boolean flag=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_IIOP_Acceptor</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_INET_Addr &amp;</type>
      <name>address</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const ACE_INET_Addr *</type>
      <name>endpoints</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a4</anchor>
      <arglist>(TAO_ORB_Core *orb_core, ACE_Reactor *reactor, int version_major, int version_minor, const char *address, const char *options=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open_default</name>
      <anchor>a5</anchor>
      <arglist>(TAO_ORB_Core *orb_core, ACE_Reactor *reactor, int version_major, int version_minor, const char *options=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>create_profile</name>
      <anchor>a7</anchor>
      <arglist>(const TAO::ObjectKey &amp;object_key, TAO_MProfile &amp;mprofile, CORBA::Short priority)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>is_collocated</name>
      <anchor>a8</anchor>
      <arglist>(const TAO_Endpoint *endpoint)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>endpoint_count</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>object_key</name>
      <anchor>a10</anchor>
      <arglist>(IOP::TaggedProfile &amp;profile, TAO::ObjectKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hostname</name>
      <anchor>a11</anchor>
      <arglist>(TAO_ORB_Core *orb_core, ACE_INET_Addr &amp;addr, char *&amp;host, const char *specified_hostname=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dotted_decimal_address</name>
      <anchor>a12</anchor>
      <arglist>(ACE_INET_Addr &amp;addr, char *&amp;host)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>open_i</name>
      <anchor>b0</anchor>
      <arglist>(const ACE_INET_Addr &amp;addr, ACE_Reactor *reactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>probe_interfaces</name>
      <anchor>b1</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>parse_options</name>
      <anchor>b2</anchor>
      <arglist>(const char *options)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>parse_options_i</name>
      <anchor>b3</anchor>
      <arglist>(int &amp;argc, ACE_CString **argv)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>create_new_profile</name>
      <anchor>b4</anchor>
      <arglist>(const TAO::ObjectKey &amp;object_key, TAO_MProfile &amp;mprofile, CORBA::Short priority)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>create_shared_profile</name>
      <anchor>b5</anchor>
      <arglist>(const TAO::ObjectKey &amp;object_key, TAO_MProfile &amp;mprofile, CORBA::Short priority)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_INET_Addr *</type>
      <name>addrs_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>port_span_</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char **</type>
      <name>hosts_</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>hostname_in_ior_</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>endpoint_count_</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_GIOP_Message_Version</type>
      <name>version_</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>lite_flag_</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BASE_ACCEPTOR</type>
      <name>base_acceptor_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CREATION_STRATEGY *</type>
      <name>creation_strategy_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CONCURRENCY_STRATEGY *</type>
      <name>concurrency_strategy_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACCEPT_STRATEGY *</type>
      <name>accept_strategy_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IIOP_Connection_Handler</name>
    <filename>classTAO__IIOP__Connection__Handler.html</filename>
    <base>ACE_Svc_Handler</base>
    <base>TAO_Connection_Handler</base>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Connection_Handler</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Thread_Manager *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Connection_Handler</name>
      <anchor>a1</anchor>
      <arglist>(TAO_ORB_Core *orb_core, CORBA::Boolean flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_IIOP_Connection_Handler</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a3</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a4</anchor>
      <arglist>(u_long=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add_transport_to_cache</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>process_listen_point_list</name>
      <anchor>a6</anchor>
      <arglist>(IIOP::ListenPointList &amp;listen_list)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>enable_network_priority</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set_dscp_codepoint</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::Boolean set_network_priority)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open_handler</name>
      <anchor>a9</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resume_handler</name>
      <anchor>z64_0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close_connection</name>
      <anchor>z64_1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_input</name>
      <anchor>z64_2</anchor>
      <arglist>(ACE_HANDLE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_output</name>
      <anchor>z64_3</anchor>
      <arglist>(ACE_HANDLE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_close</name>
      <anchor>z64_4</anchor>
      <arglist>(ACE_HANDLE, ACE_Reactor_Mask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_timeout</name>
      <anchor>z64_5</anchor>
      <arglist>(const ACE_Time_Value &amp;current_time, const void *act=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_IIOP_Connection_Handler</name>
      <anchor>b0</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>release_os_resources</name>
      <anchor>z66_0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>dscp_codepoint_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IIOP_Connector</name>
    <filename>classTAO__IIOP__Connector.html</filename>
    <base>TAO_Connector</base>
    <member kind="typedef">
      <type>TAO_Connect_Concurrency_Strategy&lt; TAO_IIOP_Connection_Handler &gt;</type>
      <name>TAO_IIOP_CONNECT_CONCURRENCY_STRATEGY</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Connect_Creation_Strategy&lt; TAO_IIOP_Connection_Handler &gt;</type>
      <name>TAO_IIOP_CONNECT_CREATION_STRATEGY</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Connect_Strategy&lt; TAO_IIOP_Connection_Handler, ACE_SOCK_CONNECTOR &gt;</type>
      <name>TAO_IIOP_CONNECT_STRATEGY</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Strategy_Connector&lt; TAO_IIOP_Connection_Handler, ACE_SOCK_CONNECTOR &gt;</type>
      <name>TAO_IIOP_BASE_CONNECTOR</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Connector</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::Boolean flag=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_IIOP_Connector</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Profile *</type>
      <name>create_profile</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>check_prefix</name>
      <anchor>a5</anchor>
      <arglist>(const char *endpoint)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>object_key_delimiter</name>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>set_validate_endpoint</name>
      <anchor>b0</anchor>
      <arglist>(TAO_Endpoint *ep)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TAO_Transport *</type>
      <name>make_connection</name>
      <anchor>b1</anchor>
      <arglist>(TAO::Profile_Transport_Resolver *r, TAO_Transport_Descriptor_Interface &amp;desc, ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TAO_Profile *</type>
      <name>make_profile</name>
      <anchor>b2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_svc_handler</name>
      <anchor>b3</anchor>
      <arglist>(TAO_Connection_Handler *svc_handler)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>lite_flag_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>TAO_IIOP_Endpoint *</type>
      <name>remote_endpoint</name>
      <anchor>d0</anchor>
      <arglist>(TAO_Endpoint *ep)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_IIOP_CONNECT_STRATEGY</type>
      <name>connect_strategy_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_IIOP_BASE_CONNECTOR</type>
      <name>base_connector_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IIOP_Endpoint</name>
    <filename>classTAO__IIOP__Endpoint.html</filename>
    <base>TAO_Endpoint</base>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Endpoint</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Endpoint</name>
      <anchor>a1</anchor>
      <arglist>(const char *host, CORBA::UShort port, const ACE_INET_Addr &amp;addr, CORBA::Short priority=TAO_INVALID_PRIORITY)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Endpoint</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_INET_Addr &amp;addr, int use_dotted_decimal_addresses)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Endpoint</name>
      <anchor>a3</anchor>
      <arglist>(const char *host, CORBA::UShort port, CORBA::Short priority)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_IIOP_Endpoint</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Endpoint *</type>
      <name>next</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>addr_to_string</name>
      <anchor>a6</anchor>
      <arglist>(char *buffer, size_t length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Endpoint *</type>
      <name>duplicate</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>is_equivalent</name>
      <anchor>a8</anchor>
      <arglist>(const TAO_Endpoint *other_endpoint)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>hash</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_INET_Addr &amp;</type>
      <name>object_addr</name>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>host</name>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>host</name>
      <anchor>a12</anchor>
      <arglist>(const char *h)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::UShort</type>
      <name>port</name>
      <anchor>a13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::UShort</type>
      <name>port</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::UShort p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_preferred_network</name>
      <anchor>a15</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>preferred_network</name>
      <anchor>a16</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>set</name>
      <anchor>d0</anchor>
      <arglist>(const ACE_INET_Addr &amp;addr, int use_dotted_decimal_addresses)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>object_addr_i</name>
      <anchor>d1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>CORBA::ULong</type>
      <name>preferred_interfaces</name>
      <anchor>d2</anchor>
      <arglist>(TAO_ORB_Core *oc)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_IIOP_Endpoint</name>
      <anchor>d3</anchor>
      <arglist>(const TAO_IIOP_Endpoint &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::String_var</type>
      <name>host_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::UShort</type>
      <name>port_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>is_encodable_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>object_addr_set_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_INET_Addr</type>
      <name>object_addr_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO::IIOP_Endpoint_Info</type>
      <name>preferred_path_</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_IIOP_Endpoint *</type>
      <name>next_</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TAO_IIOP_Profile</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TAO_SSLIOP_Profile</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IIOP_Lite_Protocol_Factory</name>
    <filename>classTAO__IIOP__Lite__Protocol__Factory.html</filename>
    <base>TAO_Protocol_Factory</base>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Lite_Protocol_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_IIOP_Lite_Protocol_Factory</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>match_prefix</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_CString &amp;prefix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>prefix</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>options_delimiter</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Acceptor *</type>
      <name>make_acceptor</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Connector *</type>
      <name>make_connector</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>requires_explicit_endpoint</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>major_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>minor_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IIOP_Profile</name>
    <filename>classTAO__IIOP__Profile.html</filename>
    <base>TAO_Profile</base>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>object_key_delimiter</name>
      <anchor>a0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Profile</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_INET_Addr &amp;addr, const TAO::ObjectKey &amp;object_key, const TAO_GIOP_Message_Version &amp;version, TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Profile</name>
      <anchor>a2</anchor>
      <arglist>(const char *host, CORBA::UShort port, const TAO::ObjectKey &amp;object_key, const ACE_INET_Addr &amp;addr, const TAO_GIOP_Message_Version &amp;version, TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Profile</name>
      <anchor>a3</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_IIOP_Profile</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char *</type>
      <name>to_string</name>
      <anchor>a5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>encode_endpoints</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Endpoint *</type>
      <name>endpoint</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>endpoint_count</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>hash</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::ULong max ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_endpoint</name>
      <anchor>a10</anchor>
      <arglist>(TAO_IIOP_Endpoint *endp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const char *</type>
      <name>prefix</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>const char</type>
      <name>object_key_delimiter_</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>decode_profile</name>
      <anchor>b0</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>decode_endpoints</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>parse_string_i</name>
      <anchor>b2</anchor>
      <arglist>(const char *string ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>create_profile_body</name>
      <anchor>b3</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>do_is_equivalent</name>
      <anchor>b4</anchor>
      <arglist>(const TAO_Profile *other_profile)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_IIOP_Endpoint</type>
      <name>endpoint_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>count_</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IIOP_Protocol_Factory</name>
    <filename>classTAO__IIOP__Protocol__Factory.html</filename>
    <base>TAO_Protocol_Factory</base>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Protocol_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_IIOP_Protocol_Factory</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>match_prefix</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_CString &amp;prefix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>prefix</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>options_delimiter</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Acceptor *</type>
      <name>make_acceptor</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Connector *</type>
      <name>make_connector</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>requires_explicit_endpoint</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>major_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>minor_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IIOP_Protocol_Properties</name>
    <filename>classTAO__IIOP__Protocol__Properties.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Protocol_Properties</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Long</type>
      <name>send_buffer_size_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Long</type>
      <name>recv_buffer_size_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>keep_alive_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>dont_route_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>no_delay_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Boolean</type>
      <name>enable_network_priority_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IIOP_Transport</name>
    <filename>classTAO__IIOP__Transport.html</filename>
    <base>TAO_Transport</base>
    <member kind="function">
      <type>void</type>
      <name>update_protocol_properties</name>
      <anchor>z68_0</anchor>
      <arglist>(int send_buffer_size, int recv_buffer_size, int no_delay, int enable_network_priority)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>send_request</name>
      <anchor>z68_1</anchor>
      <arglist>(TAO_Stub *stub, TAO_ORB_Core *orb_core, TAO_OutputCDR &amp;stream, int message_semantics, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>send_message</name>
      <anchor>z68_2</anchor>
      <arglist>(TAO_OutputCDR &amp;stream, TAO_Stub *stub=0, int message_semantics=TAO_Transport::TAO_TWOWAY_REQUEST, ACE_Time_Value *max_time_wait=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>generate_request_header</name>
      <anchor>z68_3</anchor>
      <arglist>(TAO_Operation_Details &amp;opdetails, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>messaging_init</name>
      <anchor>z68_4</anchor>
      <arglist>(CORBA::Octet major, CORBA::Octet minor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tear_listen_point_list</name>
      <anchor>z68_5</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Connection_Handler *</type>
      <name>connection_handler_i</name>
      <anchor>z68_6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ACE_Event_Handler *</type>
      <name>event_handler_i</name>
      <anchor>z68_7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TAO_Pluggable_Messaging *</type>
      <name>messaging_object</name>
      <anchor>z68_8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ssize_t</type>
      <name>send</name>
      <anchor>z68_9</anchor>
      <arglist>(iovec *iov, int iovcnt, size_t &amp;bytes_transferred, const ACE_Time_Value *timeout=0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ssize_t</type>
      <name>recv</name>
      <anchor>z68_10</anchor>
      <arglist>(char *buf, size_t len, const ACE_Time_Value *s=0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>send_message_shared</name>
      <anchor>z68_11</anchor>
      <arglist>(TAO_Stub *stub, int message_semantics, const ACE_Message_Block *message_block, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_IIOP_Transport</name>
      <anchor>a0</anchor>
      <arglist>(TAO_IIOP_Connection_Handler *handler, TAO_ORB_Core *orb_core, CORBA::Boolean flag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_IIOP_Transport</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>set_bidir_context_info</name>
      <anchor>d0</anchor>
      <arglist>(TAO_Operation_Details &amp;opdetails)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>get_listen_point</name>
      <anchor>d1</anchor>
      <arglist>(IIOP::ListenPointList &amp;listen_point_list, TAO_Acceptor *acceptor)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_IIOP_Connection_Handler *</type>
      <name>connection_handler_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Pluggable_Messaging *</type>
      <name>messaging_object_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Incoming_Message_Queue</name>
    <filename>classTAO__Incoming__Message__Queue.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Incoming_Message_Queue</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Incoming_Message_Queue</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Queued_Data *</type>
      <name>dequeue_head</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Queued_Data *</type>
      <name>dequeue_tail</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>enqueue_tail</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Queued_Data *nd)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>copy_tail</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Message_Block &amp;block)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>queue_length</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_tail_fragmented</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>missing_data_tail</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TAO_Queued_Data *</type>
      <name>find_fragment_chain</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::Octet major, CORBA::Octet minor) const </arglist>
    </member>
    <member kind="function">
      <type>TAO_Queued_Data *</type>
      <name>find_fragment_chain</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::ULong request_id) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_tail_complete</name>
      <anchor>z70_0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_head_complete</name>
      <anchor>z70_1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Queued_Data *</type>
      <name>last_added_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>size_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>TAO_Transport</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_InputCDR</name>
    <filename>classTAO__InputCDR.html</filename>
    <base>ACE_InputCDR</base>
    <member kind="function">
      <type></type>
      <name>TAO_InputCDR</name>
      <anchor>a0</anchor>
      <arglist>(const char *buf, size_t bufsiz, int byte_order=ACE_CDR_BYTE_ORDER, ACE_CDR::Octet major_version=TAO_DEF_GIOP_MAJOR, ACE_CDR::Octet minor_version=TAO_DEF_GIOP_MINOR, TAO_ORB_Core *orb_core=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_InputCDR</name>
      <anchor>a1</anchor>
      <arglist>(size_t bufsiz, int byte_order=ACE_CDR_BYTE_ORDER, ACE_CDR::Octet major_version=TAO_DEF_GIOP_MAJOR, ACE_CDR::Octet minor_version=TAO_DEF_GIOP_MINOR, TAO_ORB_Core *orb_core=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_InputCDR</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_Message_Block *data, int byte_order=ACE_CDR_BYTE_ORDER, ACE_CDR::Octet major_version=TAO_DEF_GIOP_MAJOR, ACE_CDR::Octet minor_version=TAO_DEF_GIOP_MINOR, TAO_ORB_Core *orb_core=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_InputCDR</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Data_Block *data, ACE_Message_Block::Message_Flags flag=0, int byte_order=ACE_CDR_BYTE_ORDER, ACE_CDR::Octet major_version=TAO_DEF_GIOP_MAJOR, ACE_CDR::Octet minor_version=TAO_DEF_GIOP_MINOR, TAO_ORB_Core *orb_core=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_InputCDR</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Data_Block *data, ACE_Message_Block::Message_Flags flag, size_t read_pointer_position, size_t write_pointer_position, int byte_order=ACE_CDR_BYTE_ORDER, ACE_CDR::Octet major_version=TAO_DEF_GIOP_MAJOR, ACE_CDR::Octet minor_version=TAO_DEF_GIOP_MINOR, TAO_ORB_Core *orb_core=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_InputCDR</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_InputCDR &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_InputCDR</name>
      <anchor>a6</anchor>
      <arglist>(const TAO_InputCDR &amp;rhs, size_t size, ACE_CDR::Long offset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_InputCDR</name>
      <anchor>a7</anchor>
      <arglist>(const TAO_InputCDR &amp;rhs, size_t size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_InputCDR</name>
      <anchor>a8</anchor>
      <arglist>(const TAO_OutputCDR &amp;rhs, ACE_Allocator *buffer_allocator=0, ACE_Allocator *data_block_allocator=0, ACE_Allocator *message_block_allocator=0, TAO_ORB_Core *orb_core=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_InputCDR</name>
      <anchor>a9</anchor>
      <arglist>(ACE_InputCDR::Transfer_Contents rhs, TAO_ORB_Core *orb_core=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_InputCDR</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>orb_core</name>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>throw_stub_exception</name>
      <anchor>e0</anchor>
      <arglist>(int error_num ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>throw_skel_exception</name>
      <anchor>e1</anchor>
      <arglist>(int error_num ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Interceptor_List</name>
    <filename>classTAO__Interceptor__List.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Interceptor_List</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Interceptor_List</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_t</type>
      <name>add_interceptor_i</name>
      <anchor>b0</anchor>
      <arglist>(PortableInterceptor::Interceptor_ptr interceptor ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual size_t</type>
      <name>length</name>
      <anchor>b1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>length</name>
      <anchor>b2</anchor>
      <arglist>(size_t)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual PortableInterceptor::Interceptor_ptr</type>
      <name>interceptor</name>
      <anchor>b3</anchor>
      <arglist>(size_t index)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Invocation_Endpoint_Selector</name>
    <filename>classTAO__Invocation__Endpoint__Selector.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Invocation_Endpoint_Selector</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Invocation_Endpoint_Selector</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>select_endpoint</name>
      <anchor>a2</anchor>
      <arglist>(TAO::Profile_Transport_Resolver *r, ACE_Time_Value *val ACE_ENV_ARG_DECL)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IOR_Parser</name>
    <filename>classTAO__IOR__Parser.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_IOR_Parser</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>match_prefix</name>
      <anchor>a1</anchor>
      <arglist>(const char *ior_string) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Object_ptr</type>
      <name>parse_string</name>
      <anchor>a2</anchor>
      <arglist>(const char *ior, CORBA::ORB_ptr orb ACE_ENV_ARG_DECL_NOT_USED)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IORInterceptor_Adapter</name>
    <filename>classTAO__IORInterceptor__Adapter.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_IORInterceptor_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add_interceptor</name>
      <anchor>a1</anchor>
      <arglist>(PortableInterceptor::IORInterceptor_ptr interceptor ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>destroy_interceptors</name>
      <anchor>a2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_IORInterceptor_List *</type>
      <name>interceptor_list</name>
      <anchor>a3</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>establish_components</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Root_POA *poa ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>components_established</name>
      <anchor>a5</anchor>
      <arglist>(PortableInterceptor::IORInfo_ptr info ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>adapter_state_changed</name>
      <anchor>a6</anchor>
      <arglist>(const TAO_ObjectReferenceTemplate_Array &amp;array_obj_ref_template, PortableInterceptor::AdapterState state ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>adapter_manager_state_changed</name>
      <anchor>a7</anchor>
      <arglist>(PortableInterceptor::AdapterManagerId id, PortableInterceptor::AdapterState state ACE_ENV_ARG_DECL)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_IORInterceptor_Adapter_Factory</name>
    <filename>classTAO__IORInterceptor__Adapter__Factory.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_IORInterceptor_Adapter_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_IORInterceptor_Adapter *</type>
      <name>create</name>
      <anchor>a1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Leader_Follower</name>
    <filename>classTAO__Leader__Follower.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Leader_Follower</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core, TAO_New_Leader_Generator *new_leader_generator=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Leader_Follower</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set_event_loop_thread</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_event_loop_thread</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_upcall_thread</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>leader_available</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_client_thread</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_client_thread</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wait_for_event</name>
      <anchor>a8</anchor>
      <arglist>(TAO_LF_Event *event, TAO_Transport *transport, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_client_leader_thread</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_client_leader_thread</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_client_leader_thread</name>
      <anchor>a11</anchor>
      <arglist>(ACE_thread_t thread_ID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_client_leader_thread</name>
      <anchor>a12</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>elect_new_leader</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SYNCH_MUTEX &amp;</type>
      <name>lock</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Reverse_Lock&lt; TAO_SYNCH_MUTEX &gt; &amp;</type>
      <name>reverse_lock</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>has_clients</name>
      <anchor>a16</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ACE_Reactor *</type>
      <name>reactor</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>no_leaders_available</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_LF_Follower *</type>
      <name>allocate_follower</name>
      <anchor>z79_0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release_follower</name>
      <anchor>z79_1</anchor>
      <arglist>(TAO_LF_Follower *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_follower</name>
      <anchor>z81_0</anchor>
      <arglist>(TAO_LF_Follower *follower)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_follower</name>
      <anchor>z81_1</anchor>
      <arglist>(TAO_LF_Follower *follower)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>follower_available</name>
      <anchor>z81_2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ACE_Intrusive_List&lt; TAO_LF_Follower &gt;</type>
      <name>Follower_Set</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>TAO_ORB_Core_TSS_Resources *</type>
      <name>get_tss_resources</name>
      <anchor>d0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>wait_for_client_leader_to_complete</name>
      <anchor>d1</anchor>
      <arglist>(ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>reset_event_loop_thread_i</name>
      <anchor>d2</anchor>
      <arglist>(TAO_ORB_Core_TSS_Resources *tss)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>elect_new_leader_i</name>
      <anchor>z83_0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_SYNCH_MUTEX</type>
      <name>lock_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Reverse_Lock&lt; TAO_SYNCH_MUTEX &gt;</type>
      <name>reverse_lock_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Follower_Set</type>
      <name>follower_set_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Follower_Set</type>
      <name>follower_free_list_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>leaders_</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>clients_</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Reactor *</type>
      <name>reactor_</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>client_thread_is_leader_</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>event_loop_threads_waiting_</name>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_SYNCH_CONDITION</type>
      <name>event_loop_threads_condition_</name>
      <anchor>r10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_New_Leader_Generator *</type>
      <name>new_leader_generator_</name>
      <anchor>r11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Leader_Follower_Flushing_Strategy</name>
    <filename>classTAO__Leader__Follower__Flushing__Strategy.html</filename>
    <base>TAO_Flushing_Strategy</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>schedule_output</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_output</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>flush_message</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Transport *transport, TAO_Queued_Message *msg, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>flush_transport</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_LF_CH_Event</name>
    <filename>classTAO__LF__CH__Event.html</filename>
    <base>TAO_LF_Event</base>
    <member kind="function">
      <type>int</type>
      <name>successful</name>
      <anchor>z84_0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>error_detected</name>
      <anchor>z84_1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_state</name>
      <anchor>z84_2</anchor>
      <arglist>(int new_state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>is_state_final</name>
      <anchor>z84_3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_LF_CH_Event</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_LF_CH_Event</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>state_changed_i</name>
      <anchor>d0</anchor>
      <arglist>(int new_state)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>set_state</name>
      <anchor>d1</anchor>
      <arglist>(int new_state)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>prev_state_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_LF_Client_Leader_Thread_Helper</name>
    <filename>classTAO__LF__Client__Leader__Thread__Helper.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_LF_Client_Leader_Thread_Helper</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Leader_Follower &amp;leader_follower)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_LF_Client_Leader_Thread_Helper</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Leader_Follower &amp;</type>
      <name>leader_follower_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_LF_Client_Thread_Helper</name>
    <filename>classTAO__LF__Client__Thread__Helper.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_LF_Client_Thread_Helper</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Leader_Follower &amp;leader_follower)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_LF_Client_Thread_Helper</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Leader_Follower &amp;</type>
      <name>leader_follower_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_LF_Connect_Strategy</name>
    <filename>classTAO__LF__Connect__Strategy.html</filename>
    <base>TAO_Connect_Strategy</base>
    <member kind="function">
      <type></type>
      <name>TAO_LF_Connect_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_LF_Connect_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>synch_options</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Time_Value *val, ACE_Synch_Options &amp;opt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>wait</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Connection_Handler *ch, ACE_Time_Value *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>wait</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Transport *ch, ACE_Time_Value *val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_LF_Event</name>
    <filename>classTAO__LF__Event.html</filename>
    <member kind="enumvalue">
      <name>LFS_IDLE</name>
      <anchor>z86_0w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LFS_ACTIVE</name>
      <anchor>z86_0w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LFS_CONNECTION_WAIT</name>
      <anchor>z86_0w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LFS_SUCCESS</name>
      <anchor>z86_0w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LFS_FAILURE</name>
      <anchor>z86_0w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LFS_TIMEOUT</name>
      <anchor>z86_0w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LFS_CONNECTION_CLOSED</name>
      <anchor>z86_0w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>state_changed</name>
      <anchor>z86_1</anchor>
      <arglist>(int new_state)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>successful</name>
      <anchor>z86_2</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>error_detected</name>
      <anchor>z86_3</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>keep_waiting</name>
      <anchor>z86_4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_LF_Event</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_LF_Event</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind</name>
      <anchor>a2</anchor>
      <arglist>(TAO_LF_Follower *follower)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_state</name>
      <anchor>a4</anchor>
      <arglist>(int new_state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>state_changed_i</name>
      <anchor>b0</anchor>
      <arglist>(int new_state)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>is_state_final</name>
      <anchor>b1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>state_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_LF_Follower *</type>
      <name>follower_</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>set_state</name>
      <anchor>d0</anchor>
      <arglist>(int new_state)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TAO_Leader_Follower</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_LF_Event_Binder</name>
    <filename>classTAO__LF__Event__Binder.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_LF_Event_Binder</name>
      <anchor>a0</anchor>
      <arglist>(TAO_LF_Event *event, TAO_LF_Follower *folloer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_LF_Event_Binder</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_LF_Event *</type>
      <name>event_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_LF_Event_Loop_Thread_Helper</name>
    <filename>classTAO__LF__Event__Loop__Thread__Helper.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_LF_Event_Loop_Thread_Helper</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Leader_Follower &amp;leader_follower, TAO_LF_Strategy &amp;lf_strategy, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_LF_Event_Loop_Thread_Helper</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>event_loop_return</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Leader_Follower &amp;</type>
      <name>leader_follower_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_LF_Strategy &amp;</type>
      <name>lf_strategy_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>event_loop_return_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_LF_Follower</name>
    <filename>classTAO__LF__Follower.html</filename>
    <base>ACE_Intrusive_List_Node&lt; TAO_LF_Follower &gt;</base>
    <member kind="function">
      <type></type>
      <name>TAO_LF_Follower</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Leader_Follower &amp;leader_follower)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_LF_Follower</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Leader_Follower &amp;</type>
      <name>leader_follower</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wait</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Time_Value *tv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>signal</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Leader_Follower &amp;</type>
      <name>leader_follower_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_SYNCH_CONDITION</type>
      <name>condition_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_LF_Follower_Auto_Adder</name>
    <filename>classTAO__LF__Follower__Auto__Adder.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_LF_Follower_Auto_Adder</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Leader_Follower &amp;, TAO_LF_Follower *follower)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_LF_Follower_Auto_Adder</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Leader_Follower &amp;</type>
      <name>leader_follower_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_LF_Follower *</type>
      <name>follower_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_LF_Follower_Auto_Ptr</name>
    <filename>classTAO__LF__Follower__Auto__Ptr.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_LF_Follower_Auto_Ptr</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Leader_Follower &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_LF_Follower_Auto_Ptr</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_LF_Follower *</type>
      <name>get</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_LF_Follower *</type>
      <name>operator-&gt;</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator TAO_LF_Follower *</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Leader_Follower &amp;</type>
      <name>leader_follower_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_LF_Follower *</type>
      <name>follower_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_LF_Invocation_Event</name>
    <filename>classTAO__LF__Invocation__Event.html</filename>
    <base>TAO_LF_Event</base>
    <member kind="function">
      <type></type>
      <name>TAO_LF_Invocation_Event</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_LF_Invocation_Event</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>successful</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>error_detected</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>state_changed_i</name>
      <anchor>b0</anchor>
      <arglist>(int new_state)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>is_state_final</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_LF_Strategy</name>
    <filename>classTAO__LF__Strategy.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_LF_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set_upcall_thread</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Leader_Follower &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>set_event_loop_thread</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Time_Value *max_wait_time, TAO_Leader_Follower &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset_event_loop_thread</name>
      <anchor>a3</anchor>
      <arglist>(int call_reset, TAO_Leader_Follower &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_LF_Strategy_Complete</name>
    <filename>classTAO__LF__Strategy__Complete.html</filename>
    <base>TAO_LF_Strategy</base>
    <member kind="function">
      <type></type>
      <name>TAO_LF_Strategy_Complete</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_LF_Strategy_Complete</name>
      <anchor>z88_0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_upcall_thread</name>
      <anchor>z88_1</anchor>
      <arglist>(TAO_Leader_Follower &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>set_event_loop_thread</name>
      <anchor>z88_2</anchor>
      <arglist>(ACE_Time_Value *max_wait_time, TAO_Leader_Follower &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset_event_loop_thread</name>
      <anchor>z88_3</anchor>
      <arglist>(int call_reset, TAO_Leader_Follower &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Local_RefCounted_Object</name>
    <filename>classTAO__Local__RefCounted__Object.html</filename>
    <base virtualness="virtual">CORBA::LocalObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_add_ref</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_remove_ref</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Local_RefCounted_Object</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_SYNCH_MUTEX</type>
      <name>refcount_lock_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>refcount_</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_Local_RefCounted_Object</name>
      <anchor>z92_0</anchor>
      <arglist>(const TAO_Local_RefCounted_Object &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TAO_Local_RefCounted_Object &amp;</type>
      <name>operator=</name>
      <anchor>z92_1</anchor>
      <arglist>(const TAO_Local_RefCounted_Object &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_LRU_Connection_Purging_Strategy</name>
    <filename>classTAO__LRU__Connection__Purging__Strategy.html</filename>
    <base>TAO_Connection_Purging_Strategy</base>
    <member kind="function">
      <type></type>
      <name>TAO_LRU_Connection_Purging_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(int cache_maximum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_LRU_Connection_Purging_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update_item</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long</type>
      <name>order_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_Alias</name>
    <filename>classTAO__Marshal__Alias.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_Alias</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_Any</name>
    <filename>classTAO__Marshal__Any.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_Any</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_Array</name>
    <filename>classTAO__Marshal__Array.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_Array</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_Except</name>
    <filename>classTAO__Marshal__Except.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_Except</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_Object</name>
    <filename>classTAO__Marshal__Object.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_Object</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Marshal_Object</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO::traverse_status</type>
      <name>skip</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO::traverse_status</type>
      <name>append</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TAO::traverse_status</type>
      <name>perform_skip</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TAO::traverse_status</type>
      <name>perform_append</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_ObjRef</name>
    <filename>classTAO__Marshal__ObjRef.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_ObjRef</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_Primitive</name>
    <filename>classTAO__Marshal__Primitive.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_Primitive</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_Principal</name>
    <filename>classTAO__Marshal__Principal.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_Principal</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_Sequence</name>
    <filename>classTAO__Marshal__Sequence.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_String</name>
    <filename>classTAO__Marshal__String.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_String</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_Struct</name>
    <filename>classTAO__Marshal__Struct.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_Struct</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_TypeCode</name>
    <filename>classTAO__Marshal__TypeCode.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_TypeCode</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_Union</name>
    <filename>classTAO__Marshal__Union.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_Union</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_Value</name>
    <filename>classTAO__Marshal__Value.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_Value</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Boolean</type>
      <name>nested_processing_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Marshal_WString</name>
    <filename>classTAO__Marshal__WString.html</filename>
    <base>TAO_Marshal_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Marshal_WString</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>skip</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *context ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::traverse_status</type>
      <name>append</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr tc, TAO_InputCDR *src, TAO_OutputCDR *dest ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_MCAST_Parser</name>
    <filename>classTAO__MCAST__Parser.html</filename>
    <base>TAO_IOR_Parser</base>
    <member kind="function">
      <type></type>
      <name>TAO_MCAST_Parser</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_MCAST_Parser</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>match_prefix</name>
      <anchor>a2</anchor>
      <arglist>(const char *ior_string) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Object_ptr</type>
      <name>parse_string</name>
      <anchor>a3</anchor>
      <arglist>(const char *ior, CORBA::ORB_ptr orb ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>CORBA::Object_ptr</type>
      <name>multicast_to_service</name>
      <anchor>d0</anchor>
      <arglist>(const char *service_name, CORBA::UShort port, const char *mcast_address, const char *mcast_ttl, const char *mcast_nic, CORBA::ORB_ptr orb, ACE_Time_Value *timeout ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>multicast_query</name>
      <anchor>d1</anchor>
      <arglist>(char *&amp;buf, const char *service_name, u_short port, const char *mcast_address, const char *mcast_ttl, const char *mcast_nic, ACE_Time_Value *timeout, CORBA::ORB_ptr orb)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>assign_to_variables</name>
      <anchor>d2</anchor>
      <arglist>(const char *&amp;mcast_name_ptr)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::String_var</type>
      <name>mcast_address_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::String_var</type>
      <name>mcast_port_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::String_var</type>
      <name>mcast_nic_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::String_var</type>
      <name>mcast_ttl_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::String_var</type>
      <name>service_name_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_MngSeq_Out_T</name>
    <filename>classTAO__MngSeq__Out__T.html</filename>
    <templarg>T</templarg>
    <templarg>T_var</templarg>
    <templarg>T_elem</templarg>
    <member kind="function">
      <type></type>
      <name>TAO_MngSeq_Out_T</name>
      <anchor>a0</anchor>
      <arglist>(T *&amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_MngSeq_Out_T</name>
      <anchor>a1</anchor>
      <arglist>(T_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_MngSeq_Out_T</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_MngSeq_Out_T&lt; T, T_var, T_elem &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_MngSeq_Out_T &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_MngSeq_Out_T&lt; T, T_var, T_elem &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_MngSeq_Out_T &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *&amp;</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *&amp;</type>
      <name>ptr</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T_elem</type>
      <name>operator[]</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong index)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>TAO_MngSeq_Out_T&lt; T, T_var, T_elem &gt;</type>
      <name>THIS_OUT_TYPE</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d0</anchor>
      <arglist>(const T_var &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *&amp;</type>
      <name>ptr_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_MngSeq_Var_T</name>
    <filename>classTAO__MngSeq__Var__T.html</filename>
    <templarg>T</templarg>
    <templarg>T_elem</templarg>
    <base>TAO_Seq_Var_Base_T</base>
    <member kind="function">
      <type></type>
      <name>TAO_MngSeq_Var_T</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_MngSeq_Var_T</name>
      <anchor>a1</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_MngSeq_Var_T</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_MngSeq_Var_T&lt; T, T_elem &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_MngSeq_Var_T &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_MngSeq_Var_T &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const TAO_MngSeq_Var_T&lt; T, T_elem &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *&amp;</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T_elem</type>
      <name>operator[]</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong index)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_MProfile</name>
    <filename>classTAO__MProfile.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_MProfile</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::ULong sz=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_MProfile</name>
      <anchor>a1</anchor>
      <arglist>(const TAO_MProfile &amp;mprofiles)</arglist>
    </member>
    <member kind="function">
      <type>TAO_MProfile &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_MProfile &amp;mprofiles)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_MProfile</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::ULong sz)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_MProfile &amp;mprofile)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>grow</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong sz)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Profile *</type>
      <name>get_cnext</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Profile *</type>
      <name>get_next</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Profile *</type>
      <name>get_cprev</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Profile *</type>
      <name>get_prev</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Profile *</type>
      <name>get_current_profile</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Profile *</type>
      <name>get_profile</name>
      <anchor>a12</anchor>
      <arglist>(TAO_PHandle handle)</arglist>
    </member>
    <member kind="function">
      <type>TAO_PHandle</type>
      <name>get_current_handle</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_PHandle</type>
      <name>get_current_handle</name>
      <anchor>a14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>profile_count</name>
      <anchor>a15</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>size</name>
      <anchor>a16</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const TAO_Profile *</type>
      <name>get_profile</name>
      <anchor>a17</anchor>
      <arglist>(CORBA::ULong slot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rewind</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add_profile</name>
      <anchor>a19</anchor>
      <arglist>(TAO_Profile *pfile)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>give_profile</name>
      <anchor>a20</anchor>
      <arglist>(TAO_Profile *pfile)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add_profiles</name>
      <anchor>a21</anchor>
      <arglist>(TAO_MProfile *pfiles)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_profile</name>
      <anchor>a22</anchor>
      <arglist>(const TAO_Profile *pfile)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_profiles</name>
      <anchor>a23</anchor>
      <arglist>(const TAO_MProfile *pfiles)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forward_from</name>
      <anchor>a24</anchor>
      <arglist>(TAO_MProfile *mprofiles)</arglist>
    </member>
    <member kind="function">
      <type>TAO_MProfile *</type>
      <name>forward_from</name>
      <anchor>a25</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>is_equivalent</name>
      <anchor>a26</anchor>
      <arglist>(const TAO_MProfile *rhs)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>hash</name>
      <anchor>a27</anchor>
      <arglist>(CORBA::ULong max ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>policy_list</name>
      <anchor>a28</anchor>
      <arglist>(CORBA::PolicyList *policy_list)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::PolicyList *</type>
      <name>policy_list</name>
      <anchor>a29</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>create_policy_list</name>
      <anchor>b0</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init_policy_list</name>
      <anchor>b1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TAO_Profile **</type>
      <name>pfiles</name>
      <anchor>b2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::PolicyList *</type>
      <name>policy_list_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>is_policy_list_initialized_</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_SYNCH_RECURSIVE_MUTEX</type>
      <name>mutex_</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cleanup</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_MProfile *</type>
      <name>forward_from_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Profile **</type>
      <name>pfiles_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_PHandle</type>
      <name>current_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_PHandle</type>
      <name>size_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_PHandle</type>
      <name>last_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>TAO_Profile</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Muxed_TMS</name>
    <filename>classTAO__Muxed__TMS.html</filename>
    <base>TAO_Transport_Mux_Strategy</base>
    <member kind="function">
      <type></type>
      <name>TAO_Muxed_TMS</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Muxed_TMS</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>request_id</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bind_dispatcher</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::ULong request_id, TAO_Reply_Dispatcher *rh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unbind_dispatcher</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::ULong request_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dispatch_reply</name>
      <anchor>a5</anchor>
      <arglist>(TAO_Pluggable_Reply_Params &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>idle_after_send</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>idle_after_reply</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connection_closed</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ACE_Hash_Map_Manager_Ex&lt; CORBA::ULong, TAO_Reply_Dispatcher *, ACE_Hash&lt; CORBA::ULong &gt;, ACE_Equal_To&lt; CORBA::ULong &gt;, ACE_Null_Mutex &gt;</type>
      <name>REQUEST_DISPATCHER_TABLE</name>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>clear_cache</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>request_id_generator_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>REQUEST_DISPATCHER_TABLE</type>
      <name>dispatcher_table_</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_New_Leader_Generator</name>
    <filename>classTAO__New__Leader__Generator.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_New_Leader_Generator</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>no_leaders_available</name>
      <anchor>a1</anchor>
      <arglist>(void)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Object_Loader</name>
    <filename>classTAO__Object__Loader.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Object_Loader</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Object_ptr</type>
      <name>create_object</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ORB_ptr orb, int argc, ACE_TCHAR *argv[] ACE_ENV_ARG_DECL_NOT_USED)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Object_Manager</name>
    <filename>classTAO__Object__Manager.html</filename>
    <templarg>T</templarg>
    <templarg>T_var</templarg>
    <member kind="function">
      <type></type>
      <name>TAO_Object_Manager</name>
      <anchor>a0</anchor>
      <arglist>(const TAO_Object_Manager&lt; T, T_var &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Object_Manager</name>
      <anchor>a1</anchor>
      <arglist>(T **, CORBA::Boolean release)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Object_Manager</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Object_Manager&lt; T, T_var &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Object_Manager&lt; T, T_var &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Object_Manager&lt; T, T_var &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Object_Manager&lt; T, T_var &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const T_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T *</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *&amp;</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T_var</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>in</name>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>T *&amp;</type>
      <name>inout</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *&amp;</type>
      <name>out</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>_retn</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T **</type>
      <name>ptr_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Boolean</type>
      <name>release_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Object_Proxy_Impl</name>
    <filename>classTAO__Object__Proxy__Impl.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Object_Proxy_Impl</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a1</anchor>
      <arglist>(const CORBA::Object_ptr target, const char *logical_type_id ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>_non_existent</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA::Object_ptr target ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::InterfaceDef_ptr</type>
      <name>_get_interface</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA::Object_ptr target ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Object_ptr</type>
      <name>_get_component</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA::Object_ptr target ACE_ENV_ARG_DECL)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Object_Ref_Table</name>
    <filename>classTAO__Object__Ref__Table.html</filename>
    <member kind="typedef">
      <type>ACE_Hash_Map_Manager_Ex&lt; const char *, CORBA::Object_ptr, ACE_Hash&lt; const char * &gt;, ACE_Equal_To&lt; const char * &gt;, TAO_SYNCH_MUTEX &gt;</type>
      <name>Table</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Table::iterator</type>
      <name>Iterator</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Object_Ref_Table</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Object_Ref_Table</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>register_initial_reference</name>
      <anchor>a2</anchor>
      <arglist>(const char *id, CORBA::Object_ptr obj ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>resolve_initial_references</name>
      <anchor>a3</anchor>
      <arglist>(const char *id ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>current_size</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchor>z99_0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchor>z99_1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_Object_Ref_Table</name>
      <anchor>d0</anchor>
      <arglist>(const TAO_Object_Ref_Table &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const TAO_Object_Ref_Table &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>bind</name>
      <anchor>z101_0</anchor>
      <arglist>(const char *orb_id, CORBA::Object_ptr obj)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>CORBA::Object_ptr</type>
      <name>find</name>
      <anchor>z101_1</anchor>
      <arglist>(const char *orb_id)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>unbind</name>
      <anchor>z101_2</anchor>
      <arglist>(const char *orb_id)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Table</type>
      <name>table_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Objref_Out_T</name>
    <filename>classTAO__Objref__Out__T.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>TAO_Objref_Out_T</name>
      <anchor>a0</anchor>
      <arglist>(T *&amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Objref_Out_T</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Objref_Var_T&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Objref_Out_T</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Objref_Out_T&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Objref_Out_T &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Objref_Out_T&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Objref_Out_T &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const TAO_Objref_Var_T&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Objref_Out_T &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *&amp;</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *&amp;</type>
      <name>ptr</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>TAO_Objref_Out_T&lt; T &gt;</type>
      <name>THIS_OUT_TYPE</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *&amp;</type>
      <name>ptr_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Objref_Var_T</name>
    <filename>classTAO__Objref__Var__T.html</filename>
    <templarg>T</templarg>
    <base protection="private">TAO_Base_var</base>
    <member kind="typedef">
      <type>T</type>
      <name>_obj_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>_in_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *&amp;</type>
      <name>_inout_type</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *&amp;</type>
      <name>_out_type</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>_retn_type</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Objref_Var_T</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Objref_Var_T</name>
      <anchor>a1</anchor>
      <arglist>(T *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Objref_Var_T</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Objref_Var_T&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Objref_Var_T</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Objref_Var_T&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Objref_Var_T&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_Objref_Var_T&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *const &amp;</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *&amp;</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>_in_type</type>
      <name>in</name>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>_inout_type</type>
      <name>inout</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>_out_type</type>
      <name>out</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>_retn_type</type>
      <name>_retn</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>_retn_type</type>
      <name>ptr</name>
      <anchor>a13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>free</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset</name>
      <anchor>b1</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>ptr_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_Objref_Var_T</name>
      <anchor>d0</anchor>
      <arglist>(const TAO_Base_var &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const TAO_Base_var &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Operation_Details</name>
    <filename>classTAO__Operation__Details.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Operation_Details</name>
      <anchor>a0</anchor>
      <arglist>(const char *name, CORBA::ULong len, CORBA::Boolean argument_flag, TAO::Argument **args=0, CORBA::ULong num_args=0, TAO::Exception_Data *ex_data=0, CORBA::Long ex_count=0)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>opname</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>opname_len</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>argument_flag</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>response_flags</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Octet flags)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Octet</type>
      <name>response_flags</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Octet</type>
      <name>response_flags</name>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>IOP::ServiceContextList &amp;</type>
      <name>request_service_info</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const IOP::ServiceContextList &amp;</type>
      <name>request_service_info</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>IOP::ServiceContextList &amp;</type>
      <name>reply_service_info</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const IOP::ServiceContextList &amp;</type>
      <name>reply_service_info</name>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TAO_Service_Context &amp;</type>
      <name>request_service_context</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const TAO_Service_Context &amp;</type>
      <name>request_service_context</name>
      <anchor>a12</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TAO_Service_Context &amp;</type>
      <name>reply_service_context</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const TAO_Service_Context &amp;</type>
      <name>reply_service_context</name>
      <anchor>a14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_request_service_info</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_reply_service_info</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>request_id</name>
      <anchor>a17</anchor>
      <arglist>(CORBA::ULong id)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>request_id</name>
      <anchor>a18</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TAO_Target_Specification::TAO_Target_Address</type>
      <name>addressing_mode</name>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Target_Specification::TAO_Target_Address</type>
      <name>addressing_mode</name>
      <anchor>a20</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addressing_mode</name>
      <anchor>a21</anchor>
      <arglist>(CORBA::Short addr)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Exception *</type>
      <name>corba_exception</name>
      <anchor>a22</anchor>
      <arglist>(const char *ex ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TAO::Argument **</type>
      <name>args</name>
      <anchor>a23</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>args_num</name>
      <anchor>a24</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>marshal_args</name>
      <anchor>z107_0</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>demarshal_args</name>
      <anchor>z107_1</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exception_list</name>
      <anchor>z107_2</anchor>
      <arglist>(Dynamic::ExceptionList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parameter_list</name>
      <anchor>z107_3</anchor>
      <arglist>(Dynamic::ParameterList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>result</name>
      <anchor>z107_4</anchor>
      <arglist>(CORBA::Any *)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>opname_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>opname_len_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>request_id_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Boolean</type>
      <name>argument_flag_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Octet</type>
      <name>response_flags_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Service_Context</type>
      <name>request_service_info_</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Service_Context</type>
      <name>reply_service_info_</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Target_Specification::TAO_Target_Address</type>
      <name>addressing_mode_</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO::Argument **</type>
      <name>args_</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>num_args_</name>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO::Exception_Data *</type>
      <name>ex_data_</name>
      <anchor>r10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>ex_count_</name>
      <anchor>r11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ORB_Core</name>
    <filename>classTAO__ORB__Core.html</filename>
    <member kind="enumvalue">
      <name>ORB_CONTROL</name>
      <anchor>z110_0w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THRU_POA</name>
      <anchor>z110_0w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIRECT</name>
      <anchor>z110_0w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>TAO::Collocation_Strategy</type>
      <name>collocation_strategy</name>
      <anchor>z110_1</anchor>
      <arglist>(CORBA::Object_ptr object ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>Timeout_Hook</name>
      <anchor>w0</anchor>
      <arglist>)(TAO_ORB_Core *, TAO_Stub *, bool &amp;, ACE_Time_Value &amp;)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>Sync_Scope_Hook</name>
      <anchor>w1</anchor>
      <arglist>)(TAO_ORB_Core *, TAO_Stub *, bool &amp;, Messaging::SyncScope &amp;)</arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Manager_Ex&lt; ACE_CString, ACE_CString, ACE_Hash&lt; ACE_CString &gt;, ACE_Equal_To&lt; ACE_CString &gt;, ACE_Null_Mutex &gt;</type>
      <name>InitRefMap</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_ORB_Core</name>
      <anchor>a0</anchor>
      <arglist>(const char *id)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Parameters *</type>
      <name>orb_params</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Connector_Registry *</type>
      <name>connector_registry</name>
      <anchor>a2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Parser_Registry *</type>
      <name>parser_registry</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_PolicyFactory_Registry *</type>
      <name>policy_factory_registry</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ProtocolFactorySet *</type>
      <name>protocol_factories</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ORB_ptr</type>
      <name>orb</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Reactor *</type>
      <name>reactor</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Thread_Manager *</type>
      <name>thr_mgr</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>root_poa</name>
      <anchor>a9</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Adapter_Registry *</type>
      <name>adapter_registry</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Adapter *</type>
      <name>poa_adapter</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Protocols_Hooks *</type>
      <name>get_protocols_hooks</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_collocated</name>
      <anchor>a13</anchor>
      <arglist>(const TAO_MProfile &amp;mprofile)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>output_cdr_dblock_allocator</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>output_cdr_buffer_allocator</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>output_cdr_msgblock_allocator</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>input_cdr_dblock_allocator</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>input_cdr_buffer_allocator</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>input_cdr_msgblock_allocator</name>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>transport_message_buffer_allocator</name>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Data_Block *</type>
      <name>create_input_cdr_data_block</name>
      <anchor>a21</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Lock *</type>
      <name>locking_strategy</name>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Policy_Set *</type>
      <name>get_default_policies</name>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>get_policy</name>
      <anchor>a24</anchor>
      <arglist>(CORBA::PolicyType type ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>get_policy_including_current</name>
      <anchor>a25</anchor>
      <arglist>(CORBA::PolicyType type ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>get_cached_policy</name>
      <anchor>a26</anchor>
      <arglist>(TAO_Cached_Policy_Type type ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>get_cached_policy_including_current</name>
      <anchor>a27</anchor>
      <arglist>(TAO_Cached_Policy_Type type ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Policy_Manager *</type>
      <name>policy_manager</name>
      <anchor>a28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Policy_Current &amp;</type>
      <name>policy_current</name>
      <anchor>a29</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call_timeout_hook</name>
      <anchor>a30</anchor>
      <arglist>(TAO_Stub *stub, bool &amp;has_timeout, ACE_Time_Value &amp;time_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connection_timeout</name>
      <anchor>a31</anchor>
      <arglist>(TAO_Stub *stub, bool &amp;has_timeout, ACE_Time_Value &amp;time_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call_sync_scope_hook</name>
      <anchor>a32</anchor>
      <arglist>(TAO_Stub *stub, bool &amp;has_synchronization, Messaging::SyncScope &amp;scope)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Sync_Strategy &amp;</type>
      <name>get_sync_strategy</name>
      <anchor>a33</anchor>
      <arglist>(TAO_Stub *stub, Messaging::SyncScope &amp;scope)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Transport_Sync_Strategy &amp;</type>
      <name>transport_sync_strategy</name>
      <anchor>a34</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core_TSS_Resources *</type>
      <name>get_tss_resources</name>
      <anchor>a35</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>get_tss_resource</name>
      <anchor>a36</anchor>
      <arglist>(size_t slot_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set_tss_resource</name>
      <anchor>a37</anchor>
      <arglist>(size_t slot_id, void *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add_tss_cleanup_func</name>
      <anchor>a38</anchor>
      <arglist>(ACE_CLEANUP_FUNC cleanup, size_t &amp;slot_id)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Cleanup_Func_Registry *</type>
      <name>tss_cleanup_funcs</name>
      <anchor>a39</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Leader_Follower &amp;</type>
      <name>leader_follower</name>
      <anchor>a40</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_LF_Strategy &amp;</type>
      <name>lf_strategy</name>
      <anchor>a41</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Thread_Lane_Resources &amp;</type>
      <name>lane_resources</name>
      <anchor>a42</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>run</name>
      <anchor>a43</anchor>
      <arglist>(ACE_Time_Value *tv, int perform_work ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown</name>
      <anchor>a44</anchor>
      <arglist>(CORBA::Boolean wait_for_completion ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>has_shutdown</name>
      <anchor>a45</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchor>a46</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check_shutdown</name>
      <anchor>a47</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>thread_per_connection_timeout</name>
      <anchor>a48</anchor>
      <arglist>(ACE_Time_Value &amp;timeout) const </arglist>
    </member>
    <member kind="function">
      <type>TAO_Stub *</type>
      <name>create_stub_object</name>
      <anchor>a49</anchor>
      <arglist>(TAO_MProfile &amp;mprofile, const char *type_id, CORBA::PolicyList *policy_list ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Stub *</type>
      <name>create_stub</name>
      <anchor>a50</anchor>
      <arglist>(const char *repository_id, const TAO_MProfile &amp;profiles ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>create_object</name>
      <anchor>a51</anchor>
      <arglist>(TAO_Stub *the_stub)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Long</type>
      <name>initialize_object</name>
      <anchor>a52</anchor>
      <arglist>(TAO_Stub *the_stub, CORBA::Object_ptr obj)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>orbid</name>
      <anchor>a53</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>resolve_typecodefactory</name>
      <anchor>a54</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>resolve_dynanyfactory</name>
      <anchor>a55</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>resolve_ior_manipulation</name>
      <anchor>a56</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>resolve_ior_table</name>
      <anchor>a57</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>resolve_rir</name>
      <anchor>a58</anchor>
      <arglist>(const char *name ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>resolve_rt_orb</name>
      <anchor>a59</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>server_id</name>
      <anchor>a60</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>resolve_rt_current</name>
      <anchor>a61</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ORB_ObjectIdList *</type>
      <name>list_initial_references</name>
      <anchor>a62</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_incr_refcnt</name>
      <anchor>a63</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_decr_refcnt</name>
      <anchor>a64</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>register_handle</name>
      <anchor>a65</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_handle</name>
      <anchor>a66</anchor>
      <arglist>(ACE_HANDLE handle)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Valuetype_Adapter *&amp;</type>
      <name>valuetype_adapter</name>
      <anchor>a67</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_IORInterceptor_Adapter *</type>
      <name>ior_interceptor_adapter</name>
      <anchor>a68</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>bidir_giop_policy</name>
      <anchor>a69</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bidir_giop_policy</name>
      <anchor>a70</anchor>
      <arglist>(CORBA::Boolean)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Object_Ref_Table &amp;</type>
      <name>object_ref_table</name>
      <anchor>a71</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO::ObjectKey_Table &amp;</type>
      <name>object_key_table</name>
      <anchor>a72</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Request_Dispatcher *</type>
      <name>request_dispatcher</name>
      <anchor>a73</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>request_dispatcher</name>
      <anchor>a74</anchor>
      <arglist>(TAO_Request_Dispatcher *rd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_policy_validators</name>
      <anchor>a75</anchor>
      <arglist>(TAO_Policy_Validator &amp;validator ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Flushing_Strategy *</type>
      <name>flushing_strategy</name>
      <anchor>a76</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Codeset_Manager *</type>
      <name>codeset_manager</name>
      <anchor>a77</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>InitRefMap *</type>
      <name>init_ref_map</name>
      <anchor>a78</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_default</name>
      <anchor>a79</anchor>
      <arglist>(const char *orb_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>not_default</name>
      <anchor>a80</anchor>
      <arglist>(const char *orb_id)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>poa_current</name>
      <anchor>z108_0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>poa_current</name>
      <anchor>z108_1</anchor>
      <arglist>(CORBA::Object_ptr poa_current)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Char_Codeset_Translator *</type>
      <name>from_iso8859</name>
      <anchor>z112_0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ACE_Char_Codeset_Translator *</type>
      <name>to_iso8859</name>
      <anchor>z112_1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ACE_WChar_Codeset_Translator *</type>
      <name>from_unicode</name>
      <anchor>z112_2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ACE_WChar_Codeset_Translator *</type>
      <name>to_unicode</name>
      <anchor>z112_3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>optimize_collocation_objects</name>
      <anchor>z113_0</anchor>
      <arglist>(CORBA::Boolean opt)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>optimize_collocation_objects</name>
      <anchor>z113_1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>use_global_collocation</name>
      <anchor>z113_2</anchor>
      <arglist>(CORBA::Boolean opt)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>use_global_collocation</name>
      <anchor>z113_3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>get_collocation_strategy</name>
      <anchor>z113_4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TAO_Resource_Factory *</type>
      <name>resource_factory</name>
      <anchor>z115_0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO::GUIResource_Factory *</type>
      <name>gui_resource_factory</name>
      <anchor>z115_1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Client_Strategy_Factory *</type>
      <name>client_factory</name>
      <anchor>z115_2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Server_Strategy_Factory *</type>
      <name>server_factory</name>
      <anchor>z115_3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Protocols_Hooks *</type>
      <name>protocols_hooks</name>
      <anchor>z115_4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Thread_Lane_Resources_Manager &amp;</type>
      <name>thread_lane_resources_manager</name>
      <anchor>z115_5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Collocation_Resolver &amp;</type>
      <name>collocation_resolver</name>
      <anchor>z115_6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Stub_Factory *</type>
      <name>stub_factory</name>
      <anchor>z115_7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Endpoint_Selector_Factory *</type>
      <name>endpoint_selector_factory</name>
      <anchor>z115_8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Environment *</type>
      <name>default_environment</name>
      <anchor>z116_0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>default_environment</name>
      <anchor>z116_1</anchor>
      <arglist>(CORBA::Environment *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Eager_Buffering_Sync_Strategy &amp;</type>
      <name>eager_buffering_sync_strategy</name>
      <anchor>z117_0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Delayed_Buffering_Sync_Strategy &amp;</type>
      <name>delayed_buffering_sync_strategy</name>
      <anchor>z117_1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>implrepo_service</name>
      <anchor>z118_0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>implrepo_service</name>
      <anchor>z118_1</anchor>
      <arglist>(const CORBA::Object_ptr ir)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>service_profile_selection</name>
      <anchor>z120_0</anchor>
      <arglist>(TAO_MProfile &amp;mprofile, TAO_Profile *&amp;profile)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>service_profile_reselection</name>
      <anchor>z120_1</anchor>
      <arglist>(TAO_Stub *stub, TAO_Profile *&amp;profile)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_service_profile_flags</name>
      <anchor>z120_2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>object_is_nil</name>
      <anchor>z120_3</anchor>
      <arglist>(CORBA::Object_ptr object)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>is_profile_equivalent</name>
      <anchor>z120_4</anchor>
      <arglist>(const TAO_Profile *this_p, const TAO_Profile *that_p)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>hash_service</name>
      <anchor>z120_5</anchor>
      <arglist>(TAO_Profile *this_p, CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>service_context_list</name>
      <anchor>z120_6</anchor>
      <arglist>(TAO_Stub *stub, TAO_Service_Context &amp;service_context, CORBA::Boolean retstart ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Fault_Tolerance_Service &amp;</type>
      <name>fault_tolerance_service</name>
      <anchor>z120_7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO::Invocation_Status</type>
      <name>service_raise_comm_failure</name>
      <anchor>z120_8</anchor>
      <arglist>(IOP::ServiceContextList &amp;clist, TAO_Profile *profile ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TAO::Invocation_Status</type>
      <name>service_raise_transient_failure</name>
      <anchor>z120_9</anchor>
      <arglist>(IOP::ServiceContextList &amp;clist, TAO_Profile *profile ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TAO::PICurrent *</type>
      <name>pi_current</name>
      <anchor>z122_0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pi_current</name>
      <anchor>z122_1</anchor>
      <arglist>(TAO::PICurrent *current)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_interceptor</name>
      <anchor>z122_2</anchor>
      <arglist>(PortableInterceptor::ClientRequestInterceptor_ptr interceptor ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_interceptor</name>
      <anchor>z122_3</anchor>
      <arglist>(PortableInterceptor::ServerRequestInterceptor_ptr interceptor ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ClientRequestInterceptor_List::TYPE &amp;</type>
      <name>client_request_interceptors</name>
      <anchor>z122_4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ServerRequestInterceptor_List::TYPE &amp;</type>
      <name>server_request_interceptors</name>
      <anchor>z122_5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_interceptor</name>
      <anchor>z122_6</anchor>
      <arglist>(PortableInterceptor::IORInterceptor_ptr interceptor ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>set_thread_lane_resources_manager_factory</name>
      <anchor>e0</anchor>
      <arglist>(const char *thread_lane_resources_manager_factory_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>set_collocation_resolver</name>
      <anchor>e1</anchor>
      <arglist>(const char *collocation_resolver_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>set_stub_factory</name>
      <anchor>e2</anchor>
      <arglist>(const char *stub_factory_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>set_resource_factory</name>
      <anchor>e3</anchor>
      <arglist>(const char *resource_factory_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>set_gui_resource_factory</name>
      <anchor>e4</anchor>
      <arglist>(TAO::GUIResource_Factory *gui_resource_factory)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>set_protocols_hooks</name>
      <anchor>e5</anchor>
      <arglist>(const char *protocols_hooks_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>set_endpoint_selector_factory</name>
      <anchor>e6</anchor>
      <arglist>(const char *endpoint_selector_factory_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>set_poa_factory</name>
      <anchor>e7</anchor>
      <arglist>(const char *poa_factory_name, const char *poa_factory_directive)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const ACE_CString &amp;</type>
      <name>poa_factory_name</name>
      <anchor>e8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>dynamic_adapter_name</name>
      <anchor>e9</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const char *</type>
      <name>dynamic_adapter_name</name>
      <anchor>e10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>ifr_client_adapter_name</name>
      <anchor>e11</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const char *</type>
      <name>ifr_client_adapter_name</name>
      <anchor>e12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>typecodefactory_adapter_name</name>
      <anchor>e13</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const char *</type>
      <name>typecodefactory_adapter_name</name>
      <anchor>e14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>iorinterceptor_adapter_factory_name</name>
      <anchor>e15</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const char *</type>
      <name>iorinterceptor_adapter_factory_name</name>
      <anchor>e16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>valuetype_adapter_name</name>
      <anchor>e17</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const char *</type>
      <name>valuetype_adapter_name</name>
      <anchor>e18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>set_timeout_hook</name>
      <anchor>e19</anchor>
      <arglist>(Timeout_Hook hook)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>connection_timeout_hook</name>
      <anchor>e20</anchor>
      <arglist>(Timeout_Hook hook)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>set_sync_scope_hook</name>
      <anchor>e21</anchor>
      <arglist>(Sync_Scope_Hook hook)</arglist>
    </member>
    <member kind="variable">
      <type>TAO_Protocols_Hooks *</type>
      <name>protocols_hooks_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~TAO_ORB_Core</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>init</name>
      <anchor>b1</anchor>
      <arglist>(int &amp;argc, char **argv ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>fini</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ACE_Data_Block *</type>
      <name>create_data_block_i</name>
      <anchor>b3</anchor>
      <arglist>(size_t size, ACE_Allocator *buffer_allocator, ACE_Allocator *dblock_allocator, ACE_Lock *lock)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resolve_typecodefactory_i</name>
      <anchor>b4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resolve_dynanyfactory_i</name>
      <anchor>b5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resolve_iormanipulation_i</name>
      <anchor>b6</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>bidirectional_giop_init</name>
      <anchor>b7</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>services_callbacks_init</name>
      <anchor>b8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>destroy_interceptors</name>
      <anchor>b9</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>set_endpoint_helper</name>
      <anchor>b10</anchor>
      <arglist>(const ACE_CString &amp;lane, const ACE_CString &amp;endpoints ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_TSS_TYPE</name>
      <anchor>b11</anchor>
      <arglist>(TAO_ORB_Core_TSS_Resources) tss_resources_</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_SYNCH_MUTEX</type>
      <name>lock_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Thread_Lane_Resources_Manager *</type>
      <name>thread_lane_resources_manager_</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Collocation_Resolver *</type>
      <name>collocation_resolver_</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Stub_Factory *</type>
      <name>stub_factory_</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ProtocolFactorySet *</type>
      <name>protocol_factories_</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Object_ptr</type>
      <name>implrepo_service_</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>use_implrepo_</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Object_ptr</type>
      <name>typecode_factory_</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Object_ptr</type>
      <name>dynany_factory_</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Object_ptr</type>
      <name>ior_manip_factory_</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Object_ptr</type>
      <name>ior_table_</name>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Object_var</type>
      <name>rt_orb_</name>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Object_var</type>
      <name>rt_current_</name>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ORB_ptr</type>
      <name>orb_</name>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Object_var</type>
      <name>root_poa_</name>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Parameters</type>
      <name>orb_params_</name>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InitRefMap</type>
      <name>init_ref_map_</name>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Object_Ref_Table</type>
      <name>object_ref_table_</name>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO::ObjectKey_Table</type>
      <name>object_key_table_</name>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>orbid_</name>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Resource_Factory *</type>
      <name>resource_factory_</name>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_CString</type>
      <name>server_id_</name>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Client_Strategy_Factory *</type>
      <name>client_factory_</name>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Server_Strategy_Factory *</type>
      <name>server_factory_</name>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>opt_for_collocation_</name>
      <anchor>p24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>use_global_collocation_</name>
      <anchor>p25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>collocation_strategy_</name>
      <anchor>p26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Policy_Manager *</type>
      <name>policy_manager_</name>
      <anchor>p27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Policy_Set *</type>
      <name>default_policies_</name>
      <anchor>p28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Policy_Current *</type>
      <name>policy_current_</name>
      <anchor>p29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Request_Dispatcher *</type>
      <name>request_dispatcher_</name>
      <anchor>p30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Object_var</type>
      <name>poa_current_</name>
      <anchor>p31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Adapter_Registry</type>
      <name>adapter_registry_</name>
      <anchor>p32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Adapter *</type>
      <name>poa_adapter_</name>
      <anchor>p33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Thread_Manager</type>
      <name>tm_</name>
      <anchor>p34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Lock_Adapter&lt; TAO_SYNCH_MUTEX &gt;</type>
      <name>data_block_lock_</name>
      <anchor>p35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Cleanup_Func_Registry</type>
      <name>tss_cleanup_funcs_</name>
      <anchor>p36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>has_shutdown_</name>
      <anchor>p37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_SYNCH_MUTEX</type>
      <name>open_lock_</name>
      <anchor>p38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>open_called_</name>
      <anchor>p39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Endpoint_Selector_Factory *</type>
      <name>endpoint_selector_factory_</name>
      <anchor>p40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Eager_Buffering_Sync_Strategy *</type>
      <name>eager_buffering_sync_strategy_</name>
      <anchor>p41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Delayed_Buffering_Sync_Strategy *</type>
      <name>delayed_buffering_sync_strategy_</name>
      <anchor>p42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Transport_Sync_Strategy *</type>
      <name>transport_sync_strategy_</name>
      <anchor>p43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>refcount_</name>
      <anchor>p44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_PolicyFactory_Registry</type>
      <name>policy_factory_registry_</name>
      <anchor>p45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO::PICurrent *</type>
      <name>pi_current_</name>
      <anchor>p46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ClientRequestInterceptor_List</type>
      <name>client_request_interceptors_</name>
      <anchor>p47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ServerRequestInterceptor_List</type>
      <name>server_request_interceptors_</name>
      <anchor>p48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_IORInterceptor_Adapter *</type>
      <name>ior_interceptor_adapter_</name>
      <anchor>p49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Valuetype_Adapter *</type>
      <name>valuetype_adapter_</name>
      <anchor>p50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Parser_Registry</type>
      <name>parser_registry_</name>
      <anchor>p51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_BiDir_Adapter *</type>
      <name>bidir_adapter_</name>
      <anchor>p52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>bidir_giop_policy_</name>
      <anchor>p53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Flushing_Strategy *</type>
      <name>flushing_strategy_</name>
      <anchor>p54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Codeset_Manager *</type>
      <name>codeset_manager_</name>
      <anchor>p55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Fault_Tolerance_Service</type>
      <name>ft_service_</name>
      <anchor>z125_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>thread_per_connection_use_timeout_</name>
      <anchor>z126_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Time_Value</type>
      <name>thread_per_connection_timeout_</name>
      <anchor>z126_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resolve_ior_table_i</name>
      <anchor>d0</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>CORBA::Boolean</type>
      <name>is_collocation_enabled</name>
      <anchor>d1</anchor>
      <arglist>(TAO_ORB_Core *other_orb, const TAO_MProfile &amp;mp)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_ORB_Core</name>
      <anchor>z123_0</anchor>
      <arglist>(const TAO_ORB_Core &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>z123_1</anchor>
      <arglist>(const TAO_ORB_Core &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>TAO_ORB_Core_Auto_Ptr</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend CORBA::ORB_ptr</type>
      <name>CORBA::ORB_init</name>
      <anchor>n1</anchor>
      <arglist>(int &amp;, char *argv[], const char *, CORBA::Environment &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ORB_Core_Auto_Ptr</name>
    <filename>classTAO__ORB__Core__Auto__Ptr.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_ORB_Core_Auto_Ptr</name>
      <anchor>z127_0</anchor>
      <arglist>(TAO_ORB_Core *p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_ORB_Core_Auto_Ptr</name>
      <anchor>z127_1</anchor>
      <arglist>(TAO_ORB_Core_Auto_Ptr &amp;ap)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core_Auto_Ptr &amp;</type>
      <name>operator=</name>
      <anchor>z127_2</anchor>
      <arglist>(TAO_ORB_Core_Auto_Ptr &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_ORB_Core_Auto_Ptr</name>
      <anchor>z127_3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core &amp;</type>
      <name>operator *</name>
      <anchor>z128_0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>get</name>
      <anchor>z128_1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>release</name>
      <anchor>z128_2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>z128_3</anchor>
      <arglist>(TAO_ORB_Core *p=0)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>operator-&gt;</name>
      <anchor>z128_4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>p_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ORB_Core_Static_Resources</name>
    <filename>classTAO__ORB__Core__Static__Resources.html</filename>
    <member kind="function" static="yes">
      <type>TAO_ORB_Core_Static_Resources *</type>
      <name>instance</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>TAO_ORB_Core::Sync_Scope_Hook</type>
      <name>sync_scope_hook_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_CString</type>
      <name>protocols_hooks_name_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_ORB_Core::Timeout_Hook</type>
      <name>timeout_hook_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_ORB_Core::Timeout_Hook</type>
      <name>connection_timeout_hook_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_CString</type>
      <name>endpoint_selector_factory_name_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_CString</type>
      <name>thread_lane_resources_manager_factory_name_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_CString</type>
      <name>collocation_resolver_name_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_CString</type>
      <name>stub_factory_name_</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_CString</type>
      <name>resource_factory_name_</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_CString</type>
      <name>dynamic_adapter_name_</name>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_CString</type>
      <name>ifr_client_adapter_name_</name>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_CString</type>
      <name>typecodefactory_adapter_name_</name>
      <anchor>o11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_CString</type>
      <name>iorinterceptor_adapter_factory_name_</name>
      <anchor>o12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_CString</type>
      <name>valuetype_adapter_name_</name>
      <anchor>o13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_CString</type>
      <name>poa_factory_name_</name>
      <anchor>o14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_CString</type>
      <name>poa_factory_directive_</name>
      <anchor>o15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_ORB_Core_Static_Resources</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>TAO_ORB_Core_Static_Resources *</type>
      <name>instance_</name>
      <anchor>v0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>TAO_ORB_Core_Static_Resources *</type>
      <name>initialization_reference_</name>
      <anchor>v1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ORB_Core_TSS_Resources</name>
    <filename>classTAO__ORB__Core__TSS__Resources.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_ORB_Core_TSS_Resources</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_ORB_Core_TSS_Resources</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>event_loop_thread_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>client_leader_thread_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>lane_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_Array_Base&lt; void * &gt;</type>
      <name>ts_objects_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>upcalls_temporarily_suspended_on_this_thread_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::PICurrent_Impl</type>
      <name>pi_current_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_ClientRequestInfo *</type>
      <name>client_request_info_</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_ORB_Core_TSS_Resources</name>
      <anchor>d0</anchor>
      <arglist>(const TAO_ORB_Core_TSS_Resources &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const TAO_ORB_Core_TSS_Resources &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ORB_Parameters</name>
    <filename>classTAO__ORB__Parameters.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_ORB_Parameters</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_ORB_Parameters</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add_endpoints</name>
      <anchor>a2</anchor>
      <arglist>(const ACE_CString &amp;lane, const ACE_CString &amp;endpoints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_endpoint_set</name>
      <anchor>a3</anchor>
      <arglist>(const ACE_CString &amp;lane, TAO_EndpointSet &amp;endpoint_set)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::UShort</type>
      <name>service_port</name>
      <anchor>a4</anchor>
      <arglist>(TAO_MCAST_SERVICEID service_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>service_port</name>
      <anchor>a5</anchor>
      <arglist>(TAO_MCAST_SERVICEID service_id, CORBA::UShort port)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>mcast_discovery_endpoint</name>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mcast_discovery_endpoint</name>
      <anchor>a7</anchor>
      <arglist>(const char *mde)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sock_rcvbuf_size</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sock_rcvbuf_size</name>
      <anchor>a9</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sock_sndbuf_size</name>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sock_sndbuf_size</name>
      <anchor>a11</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nodelay</name>
      <anchor>a12</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nodelay</name>
      <anchor>a13</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cdr_memcpy_tradeoff</name>
      <anchor>a14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cdr_memcpy_tradeoff</name>
      <anchor>a15</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>use_dotted_decimal_addresses</name>
      <anchor>a16</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>use_dotted_decimal_addresses</name>
      <anchor>a17</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>linger</name>
      <anchor>a18</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linger</name>
      <anchor>a19</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>default_init_ref</name>
      <anchor>a20</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>default_init_ref</name>
      <anchor>a21</anchor>
      <arglist>(const char *default_init_ref)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>std_profile_components</name>
      <anchor>a22</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>std_profile_components</name>
      <anchor>a23</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ace_sched_policy</name>
      <anchor>a24</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ace_sched_policy</name>
      <anchor>a25</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>sched_policy</name>
      <anchor>a26</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sched_policy</name>
      <anchor>a27</anchor>
      <arglist>(long x)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>scope_policy</name>
      <anchor>a28</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scope_policy</name>
      <anchor>a29</anchor>
      <arglist>(long x)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>thread_creation_flags</name>
      <anchor>a30</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>single_read_optimization</name>
      <anchor>a31</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>single_read_optimization</name>
      <anchor>a32</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>disable_rt_collocation_resolver</name>
      <anchor>a33</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable_rt_collocation_resolver</name>
      <anchor>a34</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>preferred_interfaces</name>
      <anchor>a35</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>preferred_interfaces</name>
      <anchor>a36</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforce_pref_interfaces</name>
      <anchor>a37</anchor>
      <arglist>(bool p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enforce_pref_interfaces</name>
      <anchor>a38</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>parse_and_add_endpoints</name>
      <anchor>d0</anchor>
      <arglist>(const ACE_CString &amp;endpoints, TAO_EndpointSet &amp;endpoint_set)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_EndpointMap</type>
      <name>endpoints_map_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::UShort</type>
      <name>service_port_</name>
      <anchor>r1</anchor>
      <arglist>[TAO_NO_OF_MCAST_SERVICES]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::String_var</type>
      <name>mcast_discovery_endpoint_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_CString</type>
      <name>default_init_ref_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>sock_rcvbuf_size_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>sock_sndbuf_size_</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nodelay_</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>cdr_memcpy_tradeoff_</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>use_lite_protocol_</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>use_dotted_decimal_addresses_</name>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>linger_</name>
      <anchor>r10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>std_profile_components_</name>
      <anchor>r11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ace_sched_policy_</name>
      <anchor>r12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long</type>
      <name>sched_policy_</name>
      <anchor>r13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long</type>
      <name>scope_policy_</name>
      <anchor>r14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>single_read_optimization_</name>
      <anchor>r15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_CString</type>
      <name>pref_network_</name>
      <anchor>r16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>disable_rt_collocation_resolver_</name>
      <anchor>r17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>enforce_preferred_interfaces_</name>
      <anchor>r18</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ORBInitInfo</name>
    <filename>classTAO__ORBInitInfo.html</filename>
    <base virtualness="virtual">PortableInterceptor::ORBInitInfo</base>
    <base virtualness="virtual">TAO_Local_RefCounted_Object</base>
    <member kind="typedef">
      <type>TAO_ORBInitInfo_ptr</type>
      <name>_ptr_type</name>
      <anchor>z135_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_ORBInitInfo_var</type>
      <name>_var_type</name>
      <anchor>z135_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>TAO_ORBInitInfo_ptr</type>
      <name>_duplicate</name>
      <anchor>z135_2</anchor>
      <arglist>(TAO_ORBInitInfo_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TAO_ORBInitInfo_ptr</type>
      <name>_narrow</name>
      <anchor>z135_3</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TAO_ORBInitInfo_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>z135_4</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TAO_ORBInitInfo_ptr</type>
      <name>_nil</name>
      <anchor>z135_5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_ORBInitInfo</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core, int argc, char *argv[])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::StringSeq *</type>
      <name>arguments</name>
      <anchor>z131_0</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char *</type>
      <name>orb_id</name>
      <anchor>z131_1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IOP::CodecFactory_ptr</type>
      <name>codec_factory</name>
      <anchor>z131_2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>register_initial_reference</name>
      <anchor>z131_3</anchor>
      <arglist>(const char *id, CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Object_ptr</type>
      <name>resolve_initial_references</name>
      <anchor>z131_4</anchor>
      <arglist>(const char *id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add_client_request_interceptor</name>
      <anchor>z131_5</anchor>
      <arglist>(PortableInterceptor::ClientRequestInterceptor_ptr interceptor ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add_server_request_interceptor</name>
      <anchor>z131_6</anchor>
      <arglist>(PortableInterceptor::ServerRequestInterceptor_ptr interceptor ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add_ior_interceptor</name>
      <anchor>z131_7</anchor>
      <arglist>(PortableInterceptor::IORInterceptor_ptr interceptor ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PortableInterceptor::SlotId</type>
      <name>allocate_slot_id</name>
      <anchor>z131_8</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>register_policy_factory</name>
      <anchor>z131_9</anchor>
      <arglist>(CORBA::PolicyType type, PortableInterceptor::PolicyFactory_ptr policy_factory ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>allocate_tss_slot_id</name>
      <anchor>z133_0</anchor>
      <arglist>(ACE_CLEANUP_FUNC cleanup ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>orb_core</name>
      <anchor>z133_1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchor>z133_2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::SlotId</type>
      <name>slot_count</name>
      <anchor>z133_3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~TAO_ORBInitInfo</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_validity</name>
      <anchor>b1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_ORBInitInfo</name>
      <anchor>d0</anchor>
      <arglist>(const TAO_ORBInitInfo &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const TAO_ORBInitInfo &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>argc_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char **</type>
      <name>argv_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IOP::CodecFactory_var</type>
      <name>codec_factory_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PortableInterceptor::SlotId</type>
      <name>slot_count_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Out_T</name>
    <filename>classTAO__Out__T.html</filename>
    <templarg>T</templarg>
    <templarg>T_var</templarg>
    <member kind="function">
      <type></type>
      <name>TAO_Out_T</name>
      <anchor>a0</anchor>
      <arglist>(T *&amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Out_T</name>
      <anchor>a1</anchor>
      <arglist>(T_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Out_T</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Out_T&lt; T, T_var &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Out_T &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Out_T&lt; T, T_var &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Out_T &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *&amp;</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *&amp;</type>
      <name>ptr</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>TAO_Out_T&lt; T, T_var &gt;</type>
      <name>THIS_OUT_TYPE</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d0</anchor>
      <arglist>(const T_var &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *&amp;</type>
      <name>ptr_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_OutputCDR</name>
    <filename>classTAO__OutputCDR.html</filename>
    <base>ACE_OutputCDR</base>
    <member kind="function">
      <type></type>
      <name>TAO_OutputCDR</name>
      <anchor>a0</anchor>
      <arglist>(size_t size=0, int byte_order=ACE_CDR_BYTE_ORDER, ACE_Allocator *buffer_allocator=0, ACE_Allocator *data_block_allocator=0, ACE_Allocator *message_block_allocator=0, size_t memcpy_tradeoff=0, ACE_CDR::Octet major_version=TAO_DEF_GIOP_MAJOR, ACE_CDR::Octet minor_version=TAO_DEF_GIOP_MINOR)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_OutputCDR</name>
      <anchor>a1</anchor>
      <arglist>(char *data, size_t size, int byte_order=ACE_CDR_BYTE_ORDER, ACE_Allocator *buffer_allocator=0, ACE_Allocator *data_block_allocator=0, ACE_Allocator *message_block_allocator=0, size_t memcpy_tradeoff=0, ACE_CDR::Octet major_version=TAO_DEF_GIOP_MAJOR, ACE_CDR::Octet minor_version=TAO_DEF_GIOP_MINOR)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_OutputCDR</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Message_Block *data, int byte_order=ACE_CDR_BYTE_ORDER, size_t memcpy_tradeoff=0, ACE_CDR::Octet major_version=TAO_DEF_GIOP_MAJOR, ACE_CDR::Octet minor_version=TAO_DEF_GIOP_MINOR)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_OutputCDR</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>throw_stub_exception</name>
      <anchor>e0</anchor>
      <arglist>(int error_num ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>throw_skel_exception</name>
      <anchor>e1</anchor>
      <arglist>(int error_num ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_OutputCDR</name>
      <anchor>d0</anchor>
      <arglist>(const TAO_OutputCDR &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TAO_OutputCDR &amp;</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const TAO_OutputCDR &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TAO_InputCDR</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Parser_Registry</name>
    <filename>classTAO__Parser__Registry.html</filename>
    <member kind="typedef">
      <type>TAO_IOR_Parser **</type>
      <name>Parser_Iterator</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Parser_Registry</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Parser_Registry</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type>TAO_IOR_Parser *</type>
      <name>match_parser</name>
      <anchor>a3</anchor>
      <arglist>(const char *ior_string)</arglist>
    </member>
    <member kind="function">
      <type>Parser_Iterator</type>
      <name>begin</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Parser_Iterator</type>
      <name>end</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_Parser_Registry</name>
      <anchor>d0</anchor>
      <arglist>(const TAO_Parser_Registry &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const TAO_Parser_Registry &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_IOR_Parser **</type>
      <name>parsers_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>size_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_PICurrent_ORBInitializer</name>
    <filename>classTAO__PICurrent__ORBInitializer.html</filename>
    <base virtualness="virtual">PortableInterceptor::ORBInitializer</base>
    <base virtualness="virtual">TAO_Local_RefCounted_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pre_init</name>
      <anchor>z141_0</anchor>
      <arglist>(PortableInterceptor::ORBInitInfo_ptr info ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>post_init</name>
      <anchor>z141_1</anchor>
      <arglist>(PortableInterceptor::ORBInitInfo_ptr info ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Pluggable_Messaging</name>
    <filename>classTAO__Pluggable__Messaging.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Pluggable_Messaging</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>generate_request_header</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Operation_Details &amp;op, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;cdr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>generate_locate_request_header</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Operation_Details &amp;op, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;cdr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>generate_reply_header</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, TAO_Pluggable_Reply_Params_Base &amp;params)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>generate_locate_reply_header</name>
      <anchor>a4</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, TAO_Pluggable_Reply_Params_Base &amp;params)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>read_message</name>
      <anchor>a5</anchor>
      <arglist>(TAO_Transport *transport, int block=0, ACE_Time_Value *max_wait_time=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>format_message</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Octet major, CORBA::Octet minor)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>parse_incoming_messages</name>
      <anchor>a8</anchor>
      <arglist>(ACE_Message_Block &amp;message_block)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ssize_t</type>
      <name>missing_data</name>
      <anchor>a9</anchor>
      <arglist>(ACE_Message_Block &amp;incoming)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>get_message_data</name>
      <anchor>a10</anchor>
      <arglist>(TAO_Queued_Data *qd)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>extract_next_message</name>
      <anchor>a11</anchor>
      <arglist>(ACE_Message_Block &amp;incoming, TAO_Queued_Data *&amp;qd)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>consolidate_node</name>
      <anchor>a12</anchor>
      <arglist>(TAO_Queued_Data *qd, ACE_Message_Block &amp;incoming)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>process_request_message</name>
      <anchor>a13</anchor>
      <arglist>(TAO_Transport *transport, TAO_Queued_Data *qd)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>process_reply_message</name>
      <anchor>a14</anchor>
      <arglist>(TAO_Pluggable_Reply_Params &amp;reply_info, TAO_Queued_Data *qd)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>generate_exception_reply</name>
      <anchor>a15</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, TAO_Pluggable_Reply_Params_Base &amp;params, CORBA::Exception &amp;ex)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>is_ready_for_bidirectional</name>
      <anchor>a16</anchor>
      <arglist>(TAO_OutputCDR &amp;msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a17</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>header_length</name>
      <anchor>a18</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>fragment_header_length</name>
      <anchor>a19</anchor>
      <arglist>(CORBA::Octet major, CORBA::Octet minor) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_OutputCDR &amp;</type>
      <name>out_stream</name>
      <anchor>a20</anchor>
      <arglist>(void)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Pluggable_Reply_Params</name>
    <filename>classTAO__Pluggable__Reply__Params.html</filename>
    <base>TAO_Pluggable_Reply_Params_Base</base>
    <member kind="function">
      <type></type>
      <name>TAO_Pluggable_Reply_Params</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Transport *t)</arglist>
    </member>
    <member kind="variable">
      <type>TAO_InputCDR *</type>
      <name>input_cdr_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Transport *</type>
      <name>transport_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Pluggable_Reply_Params_Base</name>
    <filename>classTAO__Pluggable__Reply__Params__Base.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Pluggable_Reply_Params_Base</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>IOP::ServiceContextList &amp;</type>
      <name>service_context_notowned</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>service_context_notowned</name>
      <anchor>a2</anchor>
      <arglist>(IOP::ServiceContextList *svc)</arglist>
    </member>
    <member kind="variable">
      <type>IOP::ServiceContextList</type>
      <name>svc_ctx_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::ULong</type>
      <name>request_id_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::ULong</type>
      <name>reply_status_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Boolean</type>
      <name>is_dsi_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ptrdiff_t</type>
      <name>dsi_nvlist_align_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Boolean</type>
      <name>argument_flag_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IOP::ServiceContextList *</type>
      <name>service_context_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Policy_Current</name>
    <filename>classTAO__Policy__Current.html</filename>
    <base>CORBA::PolicyCurrent</base>
    <base>TAO_Local_RefCounted_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Policy_Current</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>get_policy</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::PolicyType policy ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>get_cached_policy</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Cached_Policy_Type type ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::PolicyList *</type>
      <name>get_policy_overrides</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA::PolicyTypeSeq &amp;ts ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_policy_overrides</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA::PolicyList &amp;policies, CORBA::SetOverrideType set_add ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Policy_Current_Impl &amp;</type>
      <name>implementation</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TAO_Policy_Current_Impl &amp;</type>
      <name>implementation</name>
      <anchor>a6</anchor>
      <arglist>(TAO_Policy_Current_Impl &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Policy_Current_Impl</name>
    <filename>classTAO__Policy__Current__Impl.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Policy_Current_Impl</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>get_policy</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::PolicyType policy ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>get_cached_policy</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Cached_Policy_Type type ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::PolicyList *</type>
      <name>get_policy_overrides</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA::PolicyTypeSeq &amp;ts ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_policy_overrides</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA::PolicyList &amp;policies, CORBA::SetOverrideType set_add ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Policy_Set</type>
      <name>manager_impl_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Policy_Manager</name>
    <filename>classTAO__Policy__Manager.html</filename>
    <base>CORBA::PolicyManager</base>
    <base>TAO_Local_RefCounted_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Policy_Manager</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>get_policy</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::PolicyType policy ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>get_cached_policy</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Cached_Policy_Type type ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::PolicyList *</type>
      <name>get_policy_overrides</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA::PolicyTypeSeq &amp;ts ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_policy_overrides</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA::PolicyList &amp;policies, CORBA::SetOverrideType set_add ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_SYNCH_MUTEX</type>
      <name>mutex_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Policy_Set</type>
      <name>impl_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Policy_Set</name>
    <filename>classTAO__Policy__Set.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Policy_Set</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Policy_Scope scope)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Policy_Set</name>
      <anchor>a1</anchor>
      <arglist>(const TAO_Policy_Set &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Policy_Set</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_from</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Policy_Set *source ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_policy_overrides</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA::PolicyList &amp;policies, CORBA::SetOverrideType set_add ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::PolicyList *</type>
      <name>get_policy_overrides</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA::PolicyTypeSeq &amp;types ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>get_policy</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::PolicyType policy ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>get_cached_const_policy</name>
      <anchor>a7</anchor>
      <arglist>(TAO_Cached_Policy_Type type) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>get_cached_policy</name>
      <anchor>a8</anchor>
      <arglist>(TAO_Cached_Policy_Type type ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_policy</name>
      <anchor>a9</anchor>
      <arglist>(const CORBA::Policy_ptr policy ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy *</type>
      <name>get_policy_by_index</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::ULong index)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>num_policies</name>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>TAO_Policy_Set</type>
      <name>operator=</name>
      <anchor>d0</anchor>
      <arglist>(const TAO_Policy_Set &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cleanup_i</name>
      <anchor>d1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>CORBA::Boolean</type>
      <name>compatible_scope</name>
      <anchor>d2</anchor>
      <arglist>(TAO_Policy_Scope policy_scope) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::PolicyList</type>
      <name>policy_list_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Policy *</type>
      <name>cached_policies_</name>
      <anchor>r1</anchor>
      <arglist>[TAO_CACHED_POLICY_MAX_CACHED]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Policy_Scope</type>
      <name>scope_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Policy_Validator</name>
    <filename>classTAO__Policy__Validator.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Policy_Validator</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core &amp;orb_core)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Policy_Validator</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validate</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Policy_Set &amp;policies ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge_policies</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Policy_Set &amp;policies ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>legal_policy</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::PolicyType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_validator</name>
      <anchor>a5</anchor>
      <arglist>(TAO_Policy_Validator *validator)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core &amp;</type>
      <name>orb_core</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validate_impl</name>
      <anchor>b0</anchor>
      <arglist>(TAO_Policy_Set &amp;policies ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>merge_policies_impl</name>
      <anchor>b1</anchor>
      <arglist>(TAO_Policy_Set &amp;policies ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>legal_policy_impl</name>
      <anchor>b2</anchor>
      <arglist>(CORBA::PolicyType type)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core &amp;</type>
      <name>orb_core_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Policy_Validator *</type>
      <name>next_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_PolicyFactory_Registry</name>
    <filename>classTAO__PolicyFactory__Registry.html</filename>
    <member kind="typedef">
      <type>ACE_Map_Manager&lt; CORBA::PolicyType, PortableInterceptor::PolicyFactory_ptr, ACE_Null_Mutex &gt;</type>
      <name>TABLE</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_PolicyFactory_Registry</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_PolicyFactory_Registry</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>register_policy_factory</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::PolicyType type, PortableInterceptor::PolicyFactory_ptr policy_factory ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>create_policy</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::PolicyType type, const CORBA::Any &amp;value ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>_create_policy</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::PolicyType type ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>factory_exists</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::PolicyType &amp;type) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TABLE</type>
      <name>factories_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Profile</name>
    <filename>classTAO__Profile.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Profile</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::ULong tag, TAO_ORB_Core *orb_core, const TAO_GIOP_Message_Version &amp;version)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Profile</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>tag</name>
      <anchor>z143_0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const TAO_GIOP_Message_Version &amp;</type>
      <name>version</name>
      <anchor>z143_1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>orb_core</name>
      <anchor>z143_2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_incr_refcnt</name>
      <anchor>z143_3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_decr_refcnt</name>
      <anchor>z143_4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forward_to</name>
      <anchor>z143_5</anchor>
      <arglist>(TAO_MProfile *mprofiles)</arglist>
    </member>
    <member kind="function">
      <type>TAO_MProfile *</type>
      <name>forward_to</name>
      <anchor>z143_6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const TAO_Tagged_Components &amp;</type>
      <name>tagged_components</name>
      <anchor>z143_7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TAO_Tagged_Components &amp;</type>
      <name>tagged_components</name>
      <anchor>z143_8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_tagged_component</name>
      <anchor>z143_9</anchor>
      <arglist>(const IOP::TaggedComponent &amp;component ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Short</type>
      <name>addressing_mode</name>
      <anchor>z143_10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const TAO::ObjectKey &amp;</type>
      <name>object_key</name>
      <anchor>z143_11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TAO::ObjectKey *</type>
      <name>_key</name>
      <anchor>z143_12</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>encode</name>
      <anchor>z145_0</anchor>
      <arglist>(TAO_OutputCDR &amp;stream) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>decode</name>
      <anchor>z145_1</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>IOP::TaggedProfile *</type>
      <name>create_tagged_profile</name>
      <anchor>z145_2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>policies</name>
      <anchor>z145_3</anchor>
      <arglist>(CORBA::PolicyList *policy_list ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::PolicyList &amp;</type>
      <name>policies</name>
      <anchor>z145_4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>the_stub</name>
      <anchor>z145_5</anchor>
      <arglist>(TAO_Stub *stub)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Stub *</type>
      <name>the_stub</name>
      <anchor>z145_6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>supports_multicast</name>
      <anchor>z145_7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supports_non_blocking_oneways</name>
      <anchor>z145_8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addressing_mode</name>
      <anchor>z145_9</anchor>
      <arglist>(CORBA::Short addr_mode ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char</type>
      <name>object_key_delimiter</name>
      <anchor>z145_10</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse_string</name>
      <anchor>z145_11</anchor>
      <arglist>(const char *string ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char *</type>
      <name>to_string</name>
      <anchor>z145_12</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>encode_endpoints</name>
      <anchor>z145_13</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Endpoint *</type>
      <name>endpoint</name>
      <anchor>z145_14</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::ULong</type>
      <name>endpoint_count</name>
      <anchor>z145_15</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>is_equivalent</name>
      <anchor>z145_16</anchor>
      <arglist>(const TAO_Profile *other_profile)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::ULong</type>
      <name>hash</name>
      <anchor>z145_17</anchor>
      <arglist>(CORBA::ULong max ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Profile</name>
      <anchor>b0</anchor>
      <arglist>(CORBA::ULong tag, TAO_ORB_Core *orb_core, const TAO::ObjectKey &amp;key, const TAO_GIOP_Message_Version &amp;version)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_tagged_components</name>
      <anchor>b1</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>do_is_equivalent</name>
      <anchor>b2</anchor>
      <arglist>(const TAO_Profile *other)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>is_equivalent_hook</name>
      <anchor>b3</anchor>
      <arglist>(const TAO_Profile *other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::ULong</type>
      <name>hash_service_i</name>
      <anchor>b4</anchor>
      <arglist>(CORBA::ULong m)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>decode_profile</name>
      <anchor>z147_0</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>create_profile_body</name>
      <anchor>z147_1</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>decode_endpoints</name>
      <anchor>z147_2</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>parse_string_i</name>
      <anchor>z147_3</anchor>
      <arglist>(const char *string ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_GIOP_Message_Version</type>
      <name>version_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Tagged_Components</type>
      <name>tagged_components_</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Stub *</type>
      <name>stub_</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::PolicyList *</type>
      <name>policy_list_</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>are_policies_parsed_</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Short</type>
      <name>addressing_mode_</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IOP::TaggedProfile *</type>
      <name>tagged_profile_</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO::Refcounted_ObjectKey *</type>
      <name>ref_object_key_</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>TAO_MProfile *</type>
      <name>forward_to_i</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>verify_orb_configuration</name>
      <anchor>d1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>verify_profile_version</name>
      <anchor>d2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_Profile</name>
      <anchor>d3</anchor>
      <arglist>(const TAO_Profile &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d4</anchor>
      <arglist>(const TAO_Profile &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>tag_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_MProfile *</type>
      <name>forward_to_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Lock *</type>
      <name>refcount_lock_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>refcount_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Protocol_Factory</name>
    <filename>classTAO__Protocol__Factory.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Protocol_Factory</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::ULong tag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Protocol_Factory</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>tag</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>match_prefix</name>
      <anchor>a4</anchor>
      <arglist>(const ACE_CString &amp;prefix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>prefix</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>options_delimiter</name>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Acceptor *</type>
      <name>make_acceptor</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Connector *</type>
      <name>make_connector</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>requires_explicit_endpoint</name>
      <anchor>a9</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>tag_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Protocol_Item</name>
    <filename>classTAO__Protocol__Item.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Protocol_Item</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_CString &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Protocol_Item</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_CString &amp;</type>
      <name>protocol_name</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Protocol_Factory *</type>
      <name>factory</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factory</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Protocol_Factory *factory, int owner=0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_Protocol_Item</name>
      <anchor>d0</anchor>
      <arglist>(const TAO_Protocol_Item &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const TAO_Protocol_Item &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_CString</type>
      <name>name_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Protocol_Factory *</type>
      <name>factory_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>factory_owner_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Protocols_Hooks</name>
    <filename>classTAO__Protocols__Hooks.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Protocols_Hooks</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init_hooks</name>
      <anchor>a1</anchor>
      <arglist>(TAO_ORB_Core *orb_core ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>set_client_network_priority</name>
      <anchor>a2</anchor>
      <arglist>(IOP::ProfileId protocol_tag, TAO_Stub *stub ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>set_server_network_priority</name>
      <anchor>a3</anchor>
      <arglist>(IOP::ProfileId protocol_tag, CORBA::Policy *policy ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>server_protocol_properties_at_orb_level</name>
      <anchor>a4</anchor>
      <arglist>(TAO_IIOP_Protocol_Properties &amp;protocol_properties ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>client_protocol_properties_at_orb_level</name>
      <anchor>a5</anchor>
      <arglist>(TAO_IIOP_Protocol_Properties &amp;protocol_properties ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>server_protocol_properties_at_orb_level</name>
      <anchor>a6</anchor>
      <arglist>(TAO_UIOP_Protocol_Properties &amp;protocol_properties ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>client_protocol_properties_at_orb_level</name>
      <anchor>a7</anchor>
      <arglist>(TAO_UIOP_Protocol_Properties &amp;protocol_properties ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>server_protocol_properties_at_orb_level</name>
      <anchor>a8</anchor>
      <arglist>(TAO_SHMIOP_Protocol_Properties &amp;protocol_properties ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>client_protocol_properties_at_orb_level</name>
      <anchor>a9</anchor>
      <arglist>(TAO_SHMIOP_Protocol_Properties &amp;protocol_properties ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>server_protocol_properties_at_orb_level</name>
      <anchor>a10</anchor>
      <arglist>(TAO_DIOP_Protocol_Properties &amp;protocol_properties ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>client_protocol_properties_at_orb_level</name>
      <anchor>a11</anchor>
      <arglist>(TAO_DIOP_Protocol_Properties &amp;protocol_properties ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>server_protocol_properties_at_orb_level</name>
      <anchor>a12</anchor>
      <arglist>(TAO_SCIOP_Protocol_Properties &amp;protocol_properties ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>client_protocol_properties_at_orb_level</name>
      <anchor>a13</anchor>
      <arglist>(TAO_SCIOP_Protocol_Properties &amp;protocol_properties ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Long</type>
      <name>get_dscp_codepoint</name>
      <anchor>a14</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>rt_service_context</name>
      <anchor>a15</anchor>
      <arglist>(TAO_Stub *stub, TAO_Service_Context &amp;service_context, CORBA::Boolean restart ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add_rt_service_context_hook</name>
      <anchor>a16</anchor>
      <arglist>(TAO_Service_Context &amp;service_context, CORBA::Policy *model_policy, CORBA::Short &amp;client_priority ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>get_selector_hook</name>
      <anchor>a17</anchor>
      <arglist>(CORBA::Policy *model_policy, CORBA::Boolean &amp;is_client_propagated, CORBA::Short &amp;server_priority)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>get_selector_bands_policy_hook</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::Policy *bands_policy, CORBA::Short priority, CORBA::Short &amp;min_priority, CORBA::Short &amp;max_priority, int &amp;in_range)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>get_thread_CORBA_priority</name>
      <anchor>z149_0</anchor>
      <arglist>(CORBA::Short &amp;ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>get_thread_native_priority</name>
      <anchor>z149_1</anchor>
      <arglist>(CORBA::Short &amp;ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>get_thread_CORBA_and_native_priority</name>
      <anchor>z149_2</anchor>
      <arglist>(CORBA::Short &amp;, CORBA::Short &amp;ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>set_thread_CORBA_priority</name>
      <anchor>z149_3</anchor>
      <arglist>(CORBA::Short ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>set_thread_native_priority</name>
      <anchor>z149_4</anchor>
      <arglist>(CORBA::Short ACE_ENV_ARG_DECL)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Pseudo_Object_Manager</name>
    <filename>classTAO__Pseudo__Object__Manager.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T::_var_type</type>
      <name>T_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Pseudo_Object_Manager</name>
      <anchor>a0</anchor>
      <arglist>(const TAO_Pseudo_Object_Manager&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Pseudo_Object_Manager</name>
      <anchor>a1</anchor>
      <arglist>(T **, CORBA::Boolean release)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Pseudo_Object_Manager</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Pseudo_Object_Manager&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Pseudo_Object_Manager&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Pseudo_Object_Manager&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Pseudo_Object_Manager&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const T_var_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T *</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *&amp;</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>in</name>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>T *&amp;</type>
      <name>inout</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *&amp;</type>
      <name>out</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>_retn</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T **</type>
      <name>ptr_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Boolean</type>
      <name>release_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>TAO_Unbounded_Pseudo_Sequence&lt;T&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Pseudo_Out_T</name>
    <filename>classTAO__Pseudo__Out__T.html</filename>
    <templarg>T</templarg>
    <templarg>T_var</templarg>
    <member kind="function">
      <type></type>
      <name>TAO_Pseudo_Out_T</name>
      <anchor>a0</anchor>
      <arglist>(T *&amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Pseudo_Out_T</name>
      <anchor>a1</anchor>
      <arglist>(T_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Pseudo_Out_T</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Pseudo_Out_T&lt; T, T_var &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Pseudo_Out_T&lt; T, T_var &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Pseudo_Out_T&lt; T, T_var &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Pseudo_Out_T&lt; T, T_var &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *&amp;</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *&amp;</type>
      <name>ptr</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TAO_Pseudo_Out_T&lt; T, T_var &gt; &amp;</type>
      <name>operator=</name>
      <anchor>d0</anchor>
      <arglist>(const T_var &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *&amp;</type>
      <name>ptr_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Pseudo_Var_T</name>
    <filename>classTAO__Pseudo__Var__T.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T *</type>
      <name>_in_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *&amp;</type>
      <name>_inout_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *&amp;</type>
      <name>_out_type</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>_retn_type</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Pseudo_Var_T</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Pseudo_Var_T</name>
      <anchor>a1</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Pseudo_Var_T</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Pseudo_Var_T&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Pseudo_Var_T</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Pseudo_Var_T&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Pseudo_Var_T&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_Pseudo_Var_T&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *const &amp;</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *&amp;</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>_in_type</type>
      <name>in</name>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>_inout_type</type>
      <name>inout</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>_out_type</type>
      <name>out</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>_retn_type</type>
      <name>_retn</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>_retn_type</type>
      <name>ptr</name>
      <anchor>a13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>ptr_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Queued_Data</name>
    <filename>classTAO__Queued__Data.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Queued_Data</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Queued_Data</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Message_Block *mb, ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Queued_Data</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Queued_Data &amp;qd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>consolidate</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TAO_Queued_Data *</type>
      <name>make_queued_data</name>
      <anchor>e0</anchor>
      <arglist>(ACE_Allocator *alloc=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(TAO_Queued_Data *qd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TAO_Queued_Data *</type>
      <name>duplicate</name>
      <anchor>e2</anchor>
      <arglist>(TAO_Queued_Data &amp;qd)</arglist>
    </member>
    <member kind="variable">
      <type>ACE_Message_Block *</type>
      <name>msg_block_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Octet</type>
      <name>byte_order_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Octet</type>
      <name>major_version_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Octet</type>
      <name>minor_version_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Octet</type>
      <name>more_fragments_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::ULong</type>
      <name>request_id_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Pluggable_Message_Type</type>
      <name>msg_type_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Queued_Data *</type>
      <name>next_</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Long</type>
      <name>missing_data_</name>
      <anchor>z72_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>void</type>
      <name>replace_data_block</name>
      <anchor>h0</anchor>
      <arglist>(ACE_Message_Block &amp;mb)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Allocator *</type>
      <name>allocator_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Queued_Message</name>
    <filename>classTAO__Queued__Message.html</filename>
    <base>TAO_LF_Invocation_Event</base>
    <member kind="function">
      <type></type>
      <name>TAO_Queued_Message</name>
      <anchor>a0</anchor>
      <arglist>(ACE_Allocator *alloc=0, int is_heap_allocated=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Queued_Message</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Queued_Message *</type>
      <name>next</name>
      <anchor>z151_0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Queued_Message *</type>
      <name>prev</name>
      <anchor>z151_1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remove_from_list</name>
      <anchor>z151_2</anchor>
      <arglist>(TAO_Queued_Message *&amp;head, TAO_Queued_Message *&amp;tail)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push_back</name>
      <anchor>z151_3</anchor>
      <arglist>(TAO_Queued_Message *&amp;head, TAO_Queued_Message *&amp;tail)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push_front</name>
      <anchor>z151_4</anchor>
      <arglist>(TAO_Queued_Message *&amp;head, TAO_Queued_Message *&amp;tail)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>message_length</name>
      <anchor>z153_0</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>all_data_sent</name>
      <anchor>z153_1</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>fill_iov</name>
      <anchor>z153_2</anchor>
      <arglist>(int iovcnt_max, int &amp;iovcnt, iovec iov[]) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>bytes_transferred</name>
      <anchor>z153_3</anchor>
      <arglist>(size_t &amp;byte_count)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Queued_Message *</type>
      <name>clone</name>
      <anchor>z153_4</anchor>
      <arglist>(ACE_Allocator *allocator)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>destroy</name>
      <anchor>z153_5</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Allocator *</type>
      <name>allocator_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>is_heap_created_</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Queued_Message *</type>
      <name>next_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Queued_Message *</type>
      <name>prev_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Reactive_Connect_Strategy</name>
    <filename>classTAO__Reactive__Connect__Strategy.html</filename>
    <base>TAO_Connect_Strategy</base>
    <member kind="function">
      <type></type>
      <name>TAO_Reactive_Connect_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Reactive_Connect_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>synch_options</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Time_Value *val, ACE_Synch_Options &amp;opt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>wait</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Connection_Handler *ch, ACE_Time_Value *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>wait</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Transport *t, ACE_Time_Value *val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Reactive_Flushing_Strategy</name>
    <filename>classTAO__Reactive__Flushing__Strategy.html</filename>
    <base>TAO_Flushing_Strategy</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>schedule_output</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cancel_output</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>flush_message</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Transport *transport, TAO_Queued_Message *msg, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>flush_transport</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Reply_Dispatcher</name>
    <filename>classTAO__Reply__Dispatcher.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Reply_Dispatcher</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Reply_Dispatcher</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>dispatch_reply</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Pluggable_Reply_Params &amp;params)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connection_closed</name>
      <anchor>a3</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>reply_status</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>reply_status_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Request_Dispatcher</name>
    <filename>classTAO__Request__Dispatcher.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Request_Dispatcher</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dispatch</name>
      <anchor>a1</anchor>
      <arglist>(TAO_ORB_Core *orb_core, TAO_ServerRequest &amp;request, CORBA::Object_out forward_to ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_RequestInfo_Util</name>
    <filename>classTAO__RequestInfo__Util.html</filename>
    <member kind="function" static="yes">
      <type>Dynamic::ParameterList *</type>
      <name>make_parameter_list</name>
      <anchor>z155_0</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Dynamic::ExceptionList *</type>
      <name>make_exception_list</name>
      <anchor>z155_1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Dynamic::ContextList *</type>
      <name>make_context_list</name>
      <anchor>z155_2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Dynamic::RequestContext *</type>
      <name>make_request_context</name>
      <anchor>z155_3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Any *</type>
      <name>make_any</name>
      <anchor>z155_4</anchor>
      <arglist>(CORBA::Boolean tk_void_any ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Resource_Factory</name>
    <filename>classTAO__Resource__Factory.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="enumeration">
      <name>Purging_Strategy</name>
      <anchor>w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LRU</name>
      <anchor>w6w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LFU</name>
      <anchor>w6w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FIFO</name>
      <anchor>w6w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOOP</name>
      <anchor>w6w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Resource_Usage</name>
      <anchor>w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_EAGER</name>
      <anchor>w7w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_LAZY</name>
      <anchor>w7w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Resource_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Resource_Factory</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>use_locked_data_blocks</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Reactor *</type>
      <name>get_reactor</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reclaim_reactor</name>
      <anchor>a4</anchor>
      <arglist>(ACE_Reactor *reactor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Acceptor_Registry *</type>
      <name>get_acceptor_registry</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Connector_Registry *</type>
      <name>get_connector_registry</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>input_cdr_allocator_type_locked</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>amh_response_handler_allocator</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>ami_response_handler_allocator</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_ProtocolFactorySet *</type>
      <name>get_protocol_factories</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Codeset_Manager *</type>
      <name>get_codeset_manager</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init_protocol_factories</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cache_maximum</name>
      <anchor>a13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>purge_percentage</name>
      <anchor>a14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>max_muxed_connections</name>
      <anchor>a15</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_parser_names</name>
      <anchor>a16</anchor>
      <arglist>(char **&amp;names, int &amp;number_of_names)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Lock *</type>
      <name>create_cached_connection_lock</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>locked_transport_cache</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Lock *</type>
      <name>create_object_key_table_lock</name>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Lock *</type>
      <name>create_corba_object_lock</name>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Flushing_Strategy *</type>
      <name>create_flushing_strategy</name>
      <anchor>a21</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Connection_Purging_Strategy *</type>
      <name>create_purging_strategy</name>
      <anchor>a22</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_LF_Strategy *</type>
      <name>create_lf_strategy</name>
      <anchor>a23</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>disable_factory</name>
      <anchor>a24</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Resource_Factory::Resource_Usage</type>
      <name>resource_usage_strategy</name>
      <anchor>a25</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>drop_replies_during_shutdown</name>
      <anchor>a26</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>input_cdr_dblock_allocator</name>
      <anchor>z157_0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>input_cdr_buffer_allocator</name>
      <anchor>z157_1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>input_cdr_msgblock_allocator</name>
      <anchor>z157_2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>output_cdr_dblock_allocator</name>
      <anchor>z159_0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>output_cdr_buffer_allocator</name>
      <anchor>z159_1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Allocator *</type>
      <name>output_cdr_msgblock_allocator</name>
      <anchor>z159_2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>load_default_protocols</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Resume_Handle</name>
    <filename>classTAO__Resume__Handle.html</filename>
    <member kind="enumeration">
      <name>TAO_Handle_Resume_Flag</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_HANDLE_RESUMABLE</name>
      <anchor>w3w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_HANDLE_ALREADY_RESUMED</name>
      <anchor>w3w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_HANDLE_LEAVE_SUSPENDED</name>
      <anchor>w3w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Resume_Handle</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core=0, ACE_HANDLE h=ACE_INVALID_HANDLE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Resume_Handle</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_flag</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Handle_Resume_Flag fl)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Resume_Handle &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Resume_Handle &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resume_handle</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_HANDLE</type>
      <name>handle_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Handle_Resume_Flag</type>
      <name>flag_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_RT_New_Leader_Generator</name>
    <filename>classTAO__RT__New__Leader__Generator.html</filename>
  </compound>
  <compound kind="class">
    <name>TAO_SCIOP_Protocol_Properties</name>
    <filename>classTAO__SCIOP__Protocol__Properties.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_SCIOP_Protocol_Properties</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Long</type>
      <name>send_buffer_size_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Long</type>
      <name>recv_buffer_size_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>keep_alive_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>dont_route_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>no_delay_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Boolean</type>
      <name>enable_network_priority_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Seq_Out_T</name>
    <filename>classTAO__Seq__Out__T.html</filename>
    <templarg>T</templarg>
    <templarg>T_var</templarg>
    <templarg>T_elem</templarg>
    <member kind="function">
      <type></type>
      <name>TAO_Seq_Out_T</name>
      <anchor>a0</anchor>
      <arglist>(T *&amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Seq_Out_T</name>
      <anchor>a1</anchor>
      <arglist>(T_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Seq_Out_T</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Seq_Out_T&lt; T, T_var, T_elem &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Seq_Out_T &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Seq_Out_T&lt; T, T_var, T_elem &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Seq_Out_T &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *&amp;</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *&amp;</type>
      <name>ptr</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T_elem &amp;</type>
      <name>operator[]</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong index)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>TAO_Seq_Out_T&lt; T, T_var, T_elem &gt;</type>
      <name>THIS_OUT_TYPE</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d0</anchor>
      <arglist>(const T_var &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *&amp;</type>
      <name>ptr_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Seq_Var_Base_T</name>
    <filename>classTAO__Seq__Var__Base__T.html</filename>
    <templarg>T</templarg>
    <templarg>T_elem</templarg>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>_in_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>_inout_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *&amp;</type>
      <name>_out_type</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>_retn_type</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Seq_Var_Base_T</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Seq_Var_Base_T</name>
      <anchor>a1</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Seq_Var_Base_T</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Seq_Var_Base_T&lt; T, T_elem &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Seq_Var_Base_T</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>operator-&gt;</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T &amp;</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T &amp;</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T &amp;</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>_in_type</type>
      <name>in</name>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>_inout_type</type>
      <name>inout</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>_out_type</type>
      <name>out</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>_retn_type</type>
      <name>_retn</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>_retn_type</type>
      <name>ptr</name>
      <anchor>a13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>ptr_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_SeqElem_String_Manager</name>
    <filename>classTAO__SeqElem__String__Manager.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_SeqElem_String_Manager</name>
      <anchor>a0</anchor>
      <arglist>(const TAO_SeqElem_String_Manager &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SeqElem_String_Manager</name>
      <anchor>a1</anchor>
      <arglist>(char **buffer, CORBA::Boolean release)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_SeqElem_String_Manager</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_String_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_SeqElem_String_Manager &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_String_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA::String_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_String_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_String_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a6</anchor>
      <arglist>(char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>in</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>char *&amp;</type>
      <name>inout</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>char *&amp;</type>
      <name>out</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>_retn</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_SeqElem_String_Manager</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char **</type>
      <name>ptr_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Boolean</type>
      <name>release_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TAO_Unbounded_String_Sequence</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_SeqElem_WString_Manager</name>
    <filename>classTAO__SeqElem__WString__Manager.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_SeqElem_WString_Manager</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::WChar **buffer, CORBA::Boolean release)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SeqElem_WString_Manager</name>
      <anchor>a1</anchor>
      <arglist>(const TAO_SeqElem_WString_Manager &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_SeqElem_WString_Manager</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_WString_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_SeqElem_WString_Manager &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_WString_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA::WString_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_WString_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA::WChar *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_WString_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::WChar *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CORBA::WChar *</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CORBA::WChar *</type>
      <name>in</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar *&amp;</type>
      <name>inout</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar *&amp;</type>
      <name>out</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar *</type>
      <name>_retn</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_SeqElem_WString_Manager</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::WChar **</type>
      <name>ptr_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Boolean</type>
      <name>release_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TAO_Unbounded_WString_Sequence</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Server_Strategy_Factory</name>
    <filename>classTAO__Server__Strategy__Factory.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function">
      <type></type>
      <name>TAO_Server_Strategy_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Server_Strategy_Factory</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a2</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>enable_poa_locking</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>activate_server_connections</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>thread_per_connection_timeout</name>
      <anchor>a5</anchor>
      <arglist>(ACE_Time_Value &amp;timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>server_connection_thread_flags</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>server_connection_thread_count</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Active_Object_Map_Creation_Parameters &amp;</type>
      <name>active_object_map_creation_parameters</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Active_Object_Map_Creation_Parameters</type>
      <name>active_object_map_creation_parameters_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO_Server_Strategy_Factory::Active_Object_Map_Creation_Parameters</name>
    <filename>structTAO__Server__Strategy__Factory_1_1Active__Object__Map__Creation__Parameters.html</filename>
    <member kind="function">
      <type></type>
      <name>Active_Object_Map_Creation_Parameters</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>CORBA::ULong</type>
      <name>active_object_map_size_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Demux_Strategy</type>
      <name>object_lookup_strategy_for_user_id_policy_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Demux_Strategy</type>
      <name>object_lookup_strategy_for_system_id_policy_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Demux_Strategy</type>
      <name>reverse_object_lookup_strategy_for_unique_id_policy_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>use_active_hint_in_ids_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>allow_reactivation_of_system_ids_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::ULong</type>
      <name>poa_map_size_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Demux_Strategy</type>
      <name>poa_lookup_strategy_for_transient_id_policy_</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Demux_Strategy</type>
      <name>poa_lookup_strategy_for_persistent_id_policy_</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>use_active_hint_in_poa_names_</name>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ServerRequest</name>
    <filename>classTAO__ServerRequest.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_ServerRequest</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Pluggable_Messaging *mesg_base, TAO_InputCDR &amp;input, TAO_OutputCDR &amp;output, TAO_Transport *transport, TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_ServerRequest</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Pluggable_Messaging *mesg_base, CORBA::ULong request_id, CORBA::Boolean response_expected, CORBA::Boolean deferred_flag, TAO::ObjectKey &amp;object_key, const char *operation, TAO_OutputCDR &amp;output, TAO_Transport *transport, TAO_ORB_Core *orb_core, int &amp;parse_error)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_ServerRequest</name>
      <anchor>a2</anchor>
      <arglist>(TAO_ORB_Core *orb_core, TAO_Operation_Details const &amp;details, CORBA::Object_ptr target)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_ServerRequest</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ORB_ptr</type>
      <name>orb</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>orb_core</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init_reply</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_InputCDR *</type>
      <name>incoming</name>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TAO_OutputCDR *</type>
      <name>outgoing</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>response_expected</name>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>deferred_reply</name>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>response_expected</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::Boolean response)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>sync_with_server</name>
      <anchor>a12</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sync_with_server</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::Boolean sync_flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_no_exception_reply</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO::ObjectKey &amp;</type>
      <name>object_key</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Service_Context &amp;</type>
      <name>request_service_context</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Service_Context &amp;</type>
      <name>reply_service_context</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>IOP::ServiceContextList &amp;</type>
      <name>reply_service_info</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>IOP::ServiceContextList &amp;</type>
      <name>request_service_info</name>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Transport *</type>
      <name>transport</name>
      <anchor>a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forward_location</name>
      <anchor>a21</anchor>
      <arglist>(CORBA::Object_ptr forward_reference)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>forward_location</name>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>exception_type</name>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exception_type</name>
      <anchor>a24</anchor>
      <arglist>(CORBA::ULong except_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>requesting_principal</name>
      <anchor>a25</anchor>
      <arglist>(const CORBA::OctetSeq &amp;principal)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Tagged_Profile &amp;</type>
      <name>profile</name>
      <anchor>a26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_send_reply</name>
      <anchor>a27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_send_reply_exception</name>
      <anchor>a28</anchor>
      <arglist>(CORBA::Exception &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>is_dsi</name>
      <anchor>a29</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dsi_nvlist_align</name>
      <anchor>a30</anchor>
      <arglist>(ptrdiff_t alignment)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Operation_Details const *</type>
      <name>operation_details</name>
      <anchor>a31</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>argument_flag</name>
      <anchor>a32</anchor>
      <arglist>(CORBA::Boolean flag)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>argument_flag</name>
      <anchor>a33</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>collocated</name>
      <anchor>a34</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_cached_reply</name>
      <anchor>a35</anchor>
      <arglist>(CORBA::OctetSeq &amp;ocs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>result_seq</name>
      <anchor>a36</anchor>
      <arglist>(CORBA::OctetSeq &amp;ocs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>got_result</name>
      <anchor>a37</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>size_t &amp;</type>
      <name>interceptor_count</name>
      <anchor>a38</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO::PICurrent_Impl &amp;</type>
      <name>rs_pi_current</name>
      <anchor>a39</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO::PICurrent_Copy_Callback &amp;</type>
      <name>pi_current_copy_callback</name>
      <anchor>a40</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>operation</name>
      <anchor>z175_0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operation</name>
      <anchor>z175_1</anchor>
      <arglist>(const char *operation, size_t length, int release)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>operation_length</name>
      <anchor>z175_2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>request_id</name>
      <anchor>z176_0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>request_id</name>
      <anchor>z176_1</anchor>
      <arglist>(CORBA::ULong req)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Pluggable_Messaging *</type>
      <name>mesg_base_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_CString</type>
      <name>operation_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Object_var</type>
      <name>forward_location_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_InputCDR *</type>
      <name>incoming_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_OutputCDR *</type>
      <name>outgoing_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Transport *</type>
      <name>transport_</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Boolean</type>
      <name>response_expected_</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Boolean</type>
      <name>deferred_reply_</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Boolean</type>
      <name>sync_with_server_</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Boolean</type>
      <name>is_dsi_</name>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>exception_type_</name>
      <anchor>r10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>r11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Service_Context</type>
      <name>request_service_context_</name>
      <anchor>r12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Service_Context</type>
      <name>reply_service_context_</name>
      <anchor>r13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>request_id_</name>
      <anchor>r14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Tagged_Profile</type>
      <name>profile_</name>
      <anchor>r15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::OctetSeq_var</type>
      <name>requesting_principal_</name>
      <anchor>r16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ptrdiff_t</type>
      <name>dsi_nvlist_align_</name>
      <anchor>r17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Operation_Details const *const</type>
      <name>operation_details_</name>
      <anchor>r18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Boolean</type>
      <name>argument_flag_</name>
      <anchor>r19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>interceptor_count_</name>
      <anchor>r20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO::PICurrent_Impl</type>
      <name>rs_pi_current_</name>
      <anchor>r21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO::PICurrent_Copy_Callback</type>
      <name>pi_current_copy_callback_</name>
      <anchor>r22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::OctetSeq_var</type>
      <name>result_seq_</name>
      <anchor>r23</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TAO_AMH_Response_Handler</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_ServerRequestInterceptor_List</name>
    <filename>classTAO__ServerRequestInterceptor__List.html</filename>
    <base>TAO_Interceptor_List</base>
    <member kind="typedef">
      <type>ACE_Array_Base&lt; PortableInterceptor::ServerRequestInterceptor_var &gt;</type>
      <name>TYPE</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_ServerRequestInterceptor_List</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_ServerRequestInterceptor_List</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_interceptor</name>
      <anchor>a2</anchor>
      <arglist>(PortableInterceptor::ServerRequestInterceptor_ptr i ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>interceptors</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual size_t</type>
      <name>length</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>length</name>
      <anchor>b1</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual PortableInterceptor::Interceptor_ptr</type>
      <name>interceptor</name>
      <anchor>b2</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TYPE</type>
      <name>interceptors_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Service_Callbacks</name>
    <filename>classTAO__Service__Callbacks.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Service_Callbacks</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>select_profile</name>
      <anchor>a1</anchor>
      <arglist>(TAO_MProfile *mprofile, TAO_Profile *&amp;pfile)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>reselect_profile</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Stub *stub, TAO_Profile *&amp;pfile)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset_profile_flags</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>object_is_nil</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Object_ptr obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>is_profile_equivalent</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_Profile *, const TAO_Profile *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>hash_ft</name>
      <anchor>a6</anchor>
      <arglist>(TAO_Profile *p, CORBA::ULong m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::Invocation_Status</type>
      <name>raise_comm_failure</name>
      <anchor>a7</anchor>
      <arglist>(IOP::ServiceContextList &amp;clist, TAO_Profile *profile ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::Invocation_Status</type>
      <name>raise_transient_failure</name>
      <anchor>a8</anchor>
      <arglist>(IOP::ServiceContextList &amp;clist, TAO_Profile *profile ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Service_Context</name>
    <filename>classTAO__Service__Context.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Service_Context</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_context</name>
      <anchor>a1</anchor>
      <arglist>(const IOP::ServiceContext &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set_context</name>
      <anchor>a2</anchor>
      <arglist>(const IOP::ServiceContext &amp;context, CORBA::Boolean replace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_context</name>
      <anchor>a3</anchor>
      <arglist>(IOP::ServiceContext &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_context</name>
      <anchor>a4</anchor>
      <arglist>(IOP::ServiceContext &amp;context) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_context</name>
      <anchor>a5</anchor>
      <arglist>(IOP::ServiceId id, const IOP::ServiceContext **context) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_context</name>
      <anchor>a6</anchor>
      <arglist>(IOP::ServiceId id, IOP::ServiceContext_out context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_context</name>
      <anchor>a7</anchor>
      <arglist>(IOP::ServiceId id, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_context</name>
      <anchor>a8</anchor>
      <arglist>(IOP::ServiceContext &amp;context, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_service_id</name>
      <anchor>a9</anchor>
      <arglist>(IOP::ServiceId id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>encode</name>
      <anchor>a10</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>decode</name>
      <anchor>a11</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>IOP::ServiceContextList &amp;</type>
      <name>service_info</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const IOP::ServiceContextList &amp;</type>
      <name>service_info</name>
      <anchor>a13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>set_context_i</name>
      <anchor>d0</anchor>
      <arglist>(const IOP::ServiceContext &amp;context)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>set_context_i</name>
      <anchor>d1</anchor>
      <arglist>(IOP::ServiceContext &amp;context)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>add_context_i</name>
      <anchor>d2</anchor>
      <arglist>(const IOP::ServiceContext &amp;context)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>add_context_i</name>
      <anchor>d3</anchor>
      <arglist>(IOP::ServiceContext &amp;context)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>set_context_i</name>
      <anchor>d4</anchor>
      <arglist>(IOP::ServiceId id, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>set_context_i</name>
      <anchor>d5</anchor>
      <arglist>(IOP::ServiceContext &amp;context, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>get_context_i</name>
      <anchor>d6</anchor>
      <arglist>(IOP::ServiceContext &amp;context) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_Service_Context</name>
      <anchor>d7</anchor>
      <arglist>(const TAO_Service_Context &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TAO_Service_Context &amp;</type>
      <name>operator=</name>
      <anchor>d8</anchor>
      <arglist>(const TAO_Service_Context &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IOP::ServiceContextList</type>
      <name>service_context_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Services_Activate</name>
    <filename>classTAO__Services__Activate.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Services_Activate</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Service_Callbacks *</type>
      <name>activate_services</name>
      <anchor>a1</anchor>
      <arglist>(TAO_ORB_Core *orb)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_SHMIOP_Protocol_Properties</name>
    <filename>classTAO__SHMIOP__Protocol__Properties.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_SHMIOP_Protocol_Properties</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Long</type>
      <name>send_buffer_size_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Long</type>
      <name>recv_buffer_size_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>keep_alive_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>dont_route_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>no_delay_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Long</type>
      <name>preallocate_buffer_size_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_CString</type>
      <name>mmap_filename_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ACE_CString</type>
      <name>mmap_lockname_</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Singleton</name>
    <filename>classTAO__Singleton.html</filename>
    <templarg>TYPE</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Cleanup</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cleanup</name>
      <anchor>a0</anchor>
      <arglist>(void *param=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TYPE *</type>
      <name>instance</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>dump</name>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Singleton</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>TAO_Singleton&lt; TYPE, ACE_LOCK &gt; *&amp;</type>
      <name>instance_i</name>
      <anchor>f0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TYPE</type>
      <name>instance_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>TAO_Singleton&lt; TYPE, ACE_LOCK &gt; *</type>
      <name>singleton_</name>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Singleton_Manager</name>
    <filename>classTAO__Singleton__Manager.html</filename>
    <base>ACE_Object_Manager_Base</base>
    <member kind="enumeration">
      <name>Preallocated_Object</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_EMPTY_PREALLOCATED_OBJECT</name>
      <anchor>w2w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_PREALLOCATED_OBJECTS</name>
      <anchor>w2w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init</name>
      <anchor>a1</anchor>
      <arglist>(int register_with_object_manager)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>fini</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_set_unexpected</name>
      <anchor>a3</anchor>
      <arglist>(TAO_unexpected_handler u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>starting_up</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>shutting_down</name>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>sigset_t *</type>
      <name>default_mask</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Thread_Hook *</type>
      <name>thread_hook</name>
      <anchor>e3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ACE_Thread_Hook *</type>
      <name>thread_hook</name>
      <anchor>e4</anchor>
      <arglist>(ACE_Thread_Hook *new_thread_hook)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TAO_Singleton_Manager *</type>
      <name>instance</name>
      <anchor>e5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>at_exit</name>
      <anchor>e6</anchor>
      <arglist>(ACE_Cleanup *object, void *param=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>at_exit</name>
      <anchor>e7</anchor>
      <arglist>(void *object, ACE_CLEANUP_FUNC cleanup_hook, void *param)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>at_exit_i</name>
      <anchor>d0</anchor>
      <arglist>(void *object, ACE_CLEANUP_FUNC cleanup_hook, void *param)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_Singleton_Manager</name>
      <anchor>z177_0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>~TAO_Singleton_Manager</name>
      <anchor>z177_1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_Singleton_Manager</name>
      <anchor>z178_0</anchor>
      <arglist>(const TAO_Singleton_Manager &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TAO_Singleton_Manager &amp;</type>
      <name>operator=</name>
      <anchor>z178_1</anchor>
      <arglist>(const TAO_Singleton_Manager &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>sigset_t *</type>
      <name>default_mask_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Thread_Hook *</type>
      <name>thread_hook_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_OS_Exit_Info</type>
      <name>exit_info_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>registered_with_object_manager_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_unexpected_handler</type>
      <name>old_unexpected_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>TAO_Singleton_Manager *</type>
      <name>instance_</name>
      <anchor>v0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>void *</type>
      <name>preallocated_object</name>
      <anchor>v1</anchor>
      <arglist>[TAO_PREALLOCATED_OBJECTS]</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>TAO_Singleton_Manager_cleanup_destroyer</name>
      <anchor>n0</anchor>
      <arglist>(void *, void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_String_Manager</name>
    <filename>classTAO__String__Manager.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_String_Manager</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_String_Manager</name>
      <anchor>a1</anchor>
      <arglist>(const TAO_String_Manager &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_String_Manager</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_String_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_String_Manager &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_String_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA::String_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_String_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_String_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a6</anchor>
      <arglist>(char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>in</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>char *&amp;</type>
      <name>inout</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>char *&amp;</type>
      <name>out</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>_retn</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>ptr_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Stub</name>
    <filename>classTAO__Stub.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Policy_ptr</type>
      <name>get_policy</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::PolicyType type ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Policy_ptr</type>
      <name>get_cached_policy</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Cached_Policy_Type type ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Stub *</type>
      <name>set_policy_overrides</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA::PolicyList &amp;policies, CORBA::SetOverrideType set_add ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::PolicyList *</type>
      <name>get_policy_overrides</name>
      <anchor>a3</anchor>
      <arglist>(const CORBA::PolicyTypeSeq &amp;types ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Sync_Strategy &amp;</type>
      <name>sync_strategy</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>hash</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::ULong maximum ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>is_equivalent</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::Object_ptr other_obj)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Stub</name>
      <anchor>a7</anchor>
      <arglist>(const char *repository_id, const TAO_MProfile &amp;profiles, TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_incr_refcnt</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_decr_refcnt</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Lock *</type>
      <name>profile_lock</name>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TAO_Profile *</type>
      <name>profile_in_use</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const TAO::ObjectKey &amp;</type>
      <name>object_key</name>
      <anchor>a12</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TAO_MProfile *</type>
      <name>make_profiles</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const TAO_MProfile &amp;</type>
      <name>base_profiles</name>
      <anchor>a14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TAO_MProfile &amp;</type>
      <name>base_profiles</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const TAO_MProfile *</type>
      <name>forward_profiles</name>
      <anchor>a16</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TAO_Profile *</type>
      <name>next_profile</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Profile *</type>
      <name>next_profile_i</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_profiles</name>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_profiles_i</name>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>valid_forward_profile</name>
      <anchor>a21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_valid_profile</name>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>valid_profile</name>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Profile *</type>
      <name>base_profiles</name>
      <anchor>a24</anchor>
      <arglist>(const TAO_MProfile &amp;mprofiles)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_forward_profiles</name>
      <anchor>a25</anchor>
      <arglist>(const TAO_MProfile &amp;mprofiles)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>next_profile_retry</name>
      <anchor>a26</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>orb_core</name>
      <anchor>a27</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::ORB_ptr</type>
      <name>servant_orb_ptr</name>
      <anchor>a28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ORB_var &amp;</type>
      <name>servant_orb_var</name>
      <anchor>a29</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>servant_orb</name>
      <anchor>a30</anchor>
      <arglist>(CORBA::ORB_ptr orb)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>service_profile_selection</name>
      <anchor>a31</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>create_ior_info</name>
      <anchor>a32</anchor>
      <arglist>(IOP::IOR *&amp;ior_info, CORBA::ULong &amp;index ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SYNCH_MUTEX &amp;</type>
      <name>refcount_lock</name>
      <anchor>a33</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong &amp;</type>
      <name>refcount</name>
      <anchor>a34</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchor>a35</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>optimize_collocation_objects</name>
      <anchor>a36</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>CORBA::String_var</type>
      <name>type_id</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Stub</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core_Auto_Ptr</type>
      <name>orb_core_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ORB_var</type>
      <name>orb_</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ORB_var</type>
      <name>servant_orb_</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_MProfile</type>
      <name>base_profiles_</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_MProfile *</type>
      <name>forward_profiles_</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Profile *</type>
      <name>profile_in_use_</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Lock *</type>
      <name>profile_lock_ptr_</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>profile_success_</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_SYNCH_MUTEX</type>
      <name>refcount_lock_</name>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>refcount_</name>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Policy_Set *</type>
      <name>policies_</name>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IOP::IOR *</type>
      <name>ior_info_</name>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IOP::IOR *</type>
      <name>forwarded_ior_info_</name>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const CORBA::Boolean</type>
      <name>collocation_opt_</name>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>TAO_Profile *</type>
      <name>set_profile_in_use_i</name>
      <anchor>d0</anchor>
      <arglist>(TAO_Profile *pfile)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>reset_base</name>
      <anchor>d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>forward_back_one</name>
      <anchor>d2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>reset_forward</name>
      <anchor>d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TAO_Profile *</type>
      <name>next_forward_profile</name>
      <anchor>d4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>get_profile_ior_info</name>
      <anchor>d5</anchor>
      <arglist>(TAO_MProfile &amp;profile, IOP::IOR *&amp;ior_info ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_Stub</name>
      <anchor>d6</anchor>
      <arglist>(const TAO_Stub &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TAO_Stub &amp;</type>
      <name>operator=</name>
      <anchor>d7</anchor>
      <arglist>(const TAO_Stub &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Stub_Auto_Ptr</name>
    <filename>classTAO__Stub__Auto__Ptr.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Stub_Auto_Ptr</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Stub *p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Stub_Auto_Ptr</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Stub_Auto_Ptr &amp;ap)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Stub_Auto_Ptr &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Stub_Auto_Ptr &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Stub_Auto_Ptr</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Stub &amp;</type>
      <name>operator *</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TAO_Stub *</type>
      <name>get</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TAO_Stub *</type>
      <name>release</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a7</anchor>
      <arglist>(TAO_Stub *p=0)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Stub *</type>
      <name>operator-&gt;</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Stub *</type>
      <name>p_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Stub_Factory</name>
    <filename>classTAO__Stub__Factory.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Stub_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Stub *</type>
      <name>create_stub</name>
      <anchor>a1</anchor>
      <arglist>(const char *repository_id, const TAO_MProfile &amp;profiles, TAO_ORB_Core *orb_core ACE_ENV_ARG_DECL)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Sync_Strategy</name>
    <filename>classTAO__Sync__Strategy.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Sync_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>must_queue</name>
      <anchor>a1</anchor>
      <arglist>(int queue_empty)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>buffering_constraints_reached</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Stub *stub, size_t msg_count, size_t total_bytes, int &amp;must_flush, const ACE_Time_Value &amp;current_deadline, int &amp;set_timer, ACE_Time_Value &amp;interval)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Synch_Queued_Message</name>
    <filename>classTAO__Synch__Queued__Message.html</filename>
    <base>TAO_Queued_Message</base>
    <member kind="function">
      <type></type>
      <name>TAO_Synch_Queued_Message</name>
      <anchor>a0</anchor>
      <arglist>(const ACE_Message_Block *contents, ACE_Allocator *alloc=0, int is_heap_allocated=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Synch_Queued_Message</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const ACE_Message_Block *</type>
      <name>current_block</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>message_length</name>
      <anchor>z173_0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>all_data_sent</name>
      <anchor>z173_1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fill_iov</name>
      <anchor>z173_2</anchor>
      <arglist>(int iovcnt_max, int &amp;iovcnt, iovec iov[]) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bytes_transferred</name>
      <anchor>z173_3</anchor>
      <arglist>(size_t &amp;byte_count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Queued_Message *</type>
      <name>clone</name>
      <anchor>z173_4</anchor>
      <arglist>(ACE_Allocator *alloc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchor>z173_5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Message_Block *</type>
      <name>contents_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Message_Block *</type>
      <name>current_block_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Synch_Refcountable</name>
    <filename>classTAO__Synch__Refcountable.html</filename>
    <base protection="private">ACE_Refcountable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Synch_Refcountable</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>increment</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>decrement</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>refcount</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Synch_Refcountable</name>
      <anchor>b0</anchor>
      <arglist>(ACE_Lock *lock, int refcount)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Lock *</type>
      <name>refcount_lock_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Synch_Reply_Dispatcher</name>
    <filename>classTAO__Synch__Reply__Dispatcher.html</filename>
    <base>TAO_Reply_Dispatcher</base>
    <base>TAO_LF_Invocation_Event</base>
    <member kind="function">
      <type></type>
      <name>TAO_Synch_Reply_Dispatcher</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core, IOP::ServiceContextList &amp;sc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Synch_Reply_Dispatcher</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_InputCDR &amp;</type>
      <name>reply_cdr</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dispatch_reply</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Pluggable_Reply_Params &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connection_closed</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IOP::ServiceContextList &amp;</type>
      <name>reply_service_info_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char</type>
      <name>buf_</name>
      <anchor>r1</anchor>
      <arglist>[ACE_CDR::DEFAULT_BUFSIZE]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Data_Block</type>
      <name>db_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_InputCDR</type>
      <name>reply_cdr_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Synchronous_Cancellation_Required</name>
    <filename>classTAO__Synchronous__Cancellation__Required.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Synchronous_Cancellation_Required</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Synchronous_Cancellation_Required</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>old_type_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Tagged_Components</name>
    <filename>classTAO__Tagged__Components.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Tagged_Components</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_orb_type</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong orb_type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_orb_type</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong &amp;orb_type) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_code_sets</name>
      <anchor>a3</anchor>
      <arglist>(const CONV_FRAME::CodeSetComponentInfo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_code_sets</name>
      <anchor>a4</anchor>
      <arglist>(CONV_FRAME::CodeSetComponentInfo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_code_sets</name>
      <anchor>a5</anchor>
      <arglist>(const CONV_FRAME::CodeSetComponentInfo *&amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_code_sets</name>
      <anchor>a6</anchor>
      <arglist>(CONV_FRAME::CodeSetComponentInfo &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_component</name>
      <anchor>a7</anchor>
      <arglist>(const IOP::TaggedComponent &amp;component)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_component</name>
      <anchor>a8</anchor>
      <arglist>(IOP::TaggedComponent &amp;component)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_component</name>
      <anchor>a9</anchor>
      <arglist>(IOP::TaggedComponent &amp;component) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_component</name>
      <anchor>a10</anchor>
      <arglist>(IOP::ComponentId id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>encode</name>
      <anchor>a11</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>decode</name>
      <anchor>a12</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>IOP::MultipleComponentProfile &amp;</type>
      <name>components</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>set_code_sets_i</name>
      <anchor>d0</anchor>
      <arglist>(CONV_FRAME::CodeSetComponent &amp;lhs, CONV_FRAME::CodeSetComponent &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>set_known_component_i</name>
      <anchor>d1</anchor>
      <arglist>(const IOP::TaggedComponent &amp;component)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>set_component_i</name>
      <anchor>d2</anchor>
      <arglist>(const IOP::TaggedComponent &amp;component)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>set_component_i</name>
      <anchor>d3</anchor>
      <arglist>(IOP::TaggedComponent &amp;component)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>add_component_i</name>
      <anchor>d4</anchor>
      <arglist>(const IOP::TaggedComponent &amp;component)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>add_component_i</name>
      <anchor>d5</anchor>
      <arglist>(IOP::TaggedComponent &amp;component)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>set_component_i</name>
      <anchor>d6</anchor>
      <arglist>(IOP::ComponentId tag, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>remove_known_component_i</name>
      <anchor>d7</anchor>
      <arglist>(IOP::ComponentId tag)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>remove_component_i</name>
      <anchor>d8</anchor>
      <arglist>(IOP::ComponentId tag)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>get_known_component_i</name>
      <anchor>d9</anchor>
      <arglist>(IOP::TaggedComponent &amp;component) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>get_component_i</name>
      <anchor>d10</anchor>
      <arglist>(IOP::TaggedComponent &amp;component) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>known_tag</name>
      <anchor>d11</anchor>
      <arglist>(IOP::ComponentId tag) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>unique_tag</name>
      <anchor>d12</anchor>
      <arglist>(IOP::ComponentId tag) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>orb_type_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CONV_FRAME::CodeSetComponentInfo</type>
      <name>code_sets_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IOP::MultipleComponentProfile</type>
      <name>components_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Octet</type>
      <name>orb_type_set_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Octet</type>
      <name>code_sets_set_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Tagged_Profile</name>
    <filename>classTAO__Tagged__Profile.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Tagged_Profile</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>unmarshall_target_address</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>unmarshall_object_key</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>TAO::ObjectKey &amp;</type>
      <name>object_key</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>object_key</name>
      <anchor>a4</anchor>
      <arglist>(TAO::ObjectKey &amp;object_key)</arglist>
    </member>
    <member kind="function">
      <type>const TAO::ObjectKey &amp;</type>
      <name>object_key</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const IOP::TaggedProfile &amp;</type>
      <name>tagged_profile</name>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>profile_index</name>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const ACE_CString &amp;</type>
      <name>type_id</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Short</type>
      <name>discriminator</name>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>CORBA::Boolean</type>
      <name>extract_object_key</name>
      <anchor>d0</anchor>
      <arglist>(IOP::TaggedProfile &amp;profile)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>CORBA::Boolean</type>
      <name>unmarshall_object_key_i</name>
      <anchor>d1</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>CORBA::Boolean</type>
      <name>unmarshall_iop_profile_i</name>
      <anchor>d2</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>CORBA::Boolean</type>
      <name>unmarshall_ref_addr_i</name>
      <anchor>d3</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Short</type>
      <name>discriminator_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Boolean</type>
      <name>object_key_extracted_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO::ObjectKey</type>
      <name>object_key_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IOP::TaggedProfile</type>
      <name>profile_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>profile_index_</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_CString</type>
      <name>type_id_</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Target_Specification</name>
    <filename>classTAO__Target__Specification.html</filename>
    <member kind="enumeration">
      <name>TAO_Target_Address</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Key_Addr</name>
      <anchor>w3w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Profile_Addr</name>
      <anchor>w3w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reference_Addr</name>
      <anchor>w3w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Target_Specification</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target_specifier</name>
      <anchor>a1</anchor>
      <arglist>(const TAO::ObjectKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target_specifier</name>
      <anchor>a2</anchor>
      <arglist>(IOP::TaggedProfile &amp;profile)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target_specifier</name>
      <anchor>a3</anchor>
      <arglist>(IOP::IOR &amp;ior, CORBA::ULong prof_index)</arglist>
    </member>
    <member kind="function">
      <type>const TAO::ObjectKey *</type>
      <name>object_key</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const IOP::TaggedProfile *</type>
      <name>profile</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>iop_ior</name>
      <anchor>a6</anchor>
      <arglist>(IOP::IOR *&amp;ior)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Target_Address</type>
      <name>specifier</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Target_Specification::@11</type>
      <name>u_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO::ObjectKey *</type>
      <name>object_key_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IOP::TaggedProfile *</type>
      <name>profile_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IOP::IOR *</type>
      <name>ior_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Target_Address</type>
      <name>specifier_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>profile_index_</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Thread_Lane_Resources</name>
    <filename>classTAO__Thread__Lane__Resources.html</filename>
    <member kind="function">
      <type>TAO_Acceptor_Registry &amp;</type>
      <name>acceptor_registry</name>
      <anchor>z182_0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Connector_Registry *</type>
      <name>connector_registry</name>
      <anchor>z182_1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TAO::Transport_Cache_Manager &amp;</type>
      <name>transport_cache</name>
      <anchor>z182_2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Leader_Follower &amp;</type>
      <name>leader_follower</name>
      <anchor>z182_3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>input_cdr_dblock_allocator</name>
      <anchor>z182_4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>input_cdr_buffer_allocator</name>
      <anchor>z182_5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>input_cdr_msgblock_allocator</name>
      <anchor>z182_6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>transport_message_buffer_allocator</name>
      <anchor>z182_7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>output_cdr_dblock_allocator</name>
      <anchor>z182_8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>output_cdr_buffer_allocator</name>
      <anchor>z182_9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>output_cdr_msgblock_allocator</name>
      <anchor>z182_10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>amh_response_handler_allocator</name>
      <anchor>z182_11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Allocator *</type>
      <name>ami_response_handler_allocator</name>
      <anchor>z182_12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Allocator *</type>
      <name>input_cdr_dblock_allocator_</name>
      <anchor>z184_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Allocator *</type>
      <name>input_cdr_buffer_allocator_</name>
      <anchor>z184_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Allocator *</type>
      <name>input_cdr_msgblock_allocator_</name>
      <anchor>z184_2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Allocator *</type>
      <name>transport_message_buffer_allocator_</name>
      <anchor>z186_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Allocator *</type>
      <name>output_cdr_dblock_allocator_</name>
      <anchor>z188_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Allocator *</type>
      <name>output_cdr_buffer_allocator_</name>
      <anchor>z188_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Allocator *</type>
      <name>output_cdr_msgblock_allocator_</name>
      <anchor>z188_2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Allocator *</type>
      <name>amh_response_handler_allocator_</name>
      <anchor>z190_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Allocator *</type>
      <name>ami_response_handler_allocator_</name>
      <anchor>z192_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Thread_Lane_Resources</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core &amp;orb_core, TAO_New_Leader_Generator *new_leader_generator=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Thread_Lane_Resources</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_collocated</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_MProfile &amp;mprofile)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open_acceptor_registry</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_EndpointSet &amp;endpoint_set, bool ignore_address ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown_reactor</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanup_rw_transports</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>has_acceptor_registry_been_created</name>
      <anchor>d0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>TAO_Resource_Factory *</type>
      <name>resource_factory</name>
      <anchor>d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ORB_Core &amp;</type>
      <name>orb_core_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Acceptor_Registry *</type>
      <name>acceptor_registry_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Connector_Registry *</type>
      <name>connector_registry_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO::Transport_Cache_Manager *</type>
      <name>transport_cache_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Leader_Follower *</type>
      <name>leader_follower_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_SYNCH_MUTEX</type>
      <name>lock_</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_New_Leader_Generator *</type>
      <name>new_leader_generator_</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Thread_Lane_Resources_Manager</name>
    <filename>classTAO__Thread__Lane__Resources__Manager.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Thread_Lane_Resources &amp;</type>
      <name>lane_resources</name>
      <anchor>z194_0</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Thread_Lane_Resources &amp;</type>
      <name>default_lane_resources</name>
      <anchor>z194_1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <type>TAO_LF_Strategy &amp;</type>
      <name>lf_strategy</name>
      <anchor>z194_2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Thread_Lane_Resources_Manager</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core &amp;orb_core)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Thread_Lane_Resources_Manager</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>finalize</name>
      <anchor>a2</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>open_default_resources</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>shutdown_reactor</name>
      <anchor>a4</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>cleanup_rw_transports</name>
      <anchor>a5</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>is_collocated</name>
      <anchor>a6</anchor>
      <arglist>(const TAO_MProfile &amp;mprofile)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_LF_Strategy *</type>
      <name>lf_strategy_</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Thread_Lane_Resources_Manager_Factory</name>
    <filename>classTAO__Thread__Lane__Resources__Manager__Factory.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Thread_Lane_Resources_Manager_Factory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Thread_Lane_Resources_Manager *</type>
      <name>create_thread_lane_resources_manager</name>
      <anchor>a1</anchor>
      <arglist>(TAO_ORB_Core &amp;core)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Thread_Per_Connection_Handler</name>
    <filename>classTAO__Thread__Per__Connection__Handler.html</filename>
    <base>ACE_Task&lt; ACE_NULL_SYNCH &gt;</base>
    <member kind="function">
      <type></type>
      <name>TAO_Thread_Per_Connection_Handler</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Connection_Handler *ch, TAO_ORB_Core *oc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Thread_Per_Connection_Handler</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>activate</name>
      <anchor>a2</anchor>
      <arglist>(long flags=THR_NEW_LWP, int n_threads=1, int force_active=0, long priority=ACE_DEFAULT_THREAD_PRIORITY, int grp_id=-1, ACE_Task_Base *task=0, ACE_hthread_t thread_handles[]=0, void *stack[]=0, size_t stack_size[]=0, ACE_thread_t thread_names[]=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>svc</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchor>a4</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchor>a5</anchor>
      <arglist>(u_long)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Connection_Handler *</type>
      <name>ch_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Transport</name>
    <filename>classTAO__Transport.html</filename>
    <member kind="enumvalue">
      <name>TAO_ONEWAY_REQUEST</name>
      <anchor>z199_0w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_TWOWAY_REQUEST</name>
      <anchor>z199_0w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_REPLY</name>
      <anchor>z199_0w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_Event_Handler *</type>
      <name>event_handler_i</name>
      <anchor>z199_1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_connected</name>
      <anchor>z199_2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>post_open</name>
      <anchor>z199_3</anchor>
      <arglist>(size_t id)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Connection_Handler *</type>
      <name>connection_handler</name>
      <anchor>z199_4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_OutputCDR &amp;</type>
      <name>out_stream</name>
      <anchor>z199_5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>generate_locate_request</name>
      <anchor>z199_6</anchor>
      <arglist>(TAO_Target_Specification &amp;spec, TAO_Operation_Details &amp;opdetails, TAO_OutputCDR &amp;output)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>generate_request_header</name>
      <anchor>z199_7</anchor>
      <arglist>(TAO_Operation_Details &amp;opd, TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recache_transport</name>
      <anchor>z199_8</anchor>
      <arglist>(TAO_Transport_Descriptor_Interface *desc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_input</name>
      <anchor>z199_9</anchor>
      <arglist>(TAO_Resume_Handle &amp;rh, ACE_Time_Value *max_wait_time=0, int block=0)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>send_request</name>
      <anchor>z199_10</anchor>
      <arglist>(TAO_Stub *stub, TAO_ORB_Core *orb_core, TAO_OutputCDR &amp;stream, int message_semantics, ACE_Time_Value *max_time_wait)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>send_message</name>
      <anchor>z199_11</anchor>
      <arglist>(TAO_OutputCDR &amp;stream, TAO_Stub *stub=0, int message_semantics=TAO_Transport::TAO_TWOWAY_REQUEST, ACE_Time_Value *max_time_wait=0)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>send_message_shared</name>
      <anchor>z199_12</anchor>
      <arglist>(TAO_Stub *stub, int message_semantics, const ACE_Message_Block *message_block, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>format_queue_message</name>
      <anchor>z199_13</anchor>
      <arglist>(TAO_OutputCDR &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>send_message_block_chain</name>
      <anchor>z199_14</anchor>
      <arglist>(const ACE_Message_Block *message_block, size_t &amp;bytes_transferred, ACE_Time_Value *max_wait_time=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>send_message_block_chain_i</name>
      <anchor>z199_15</anchor>
      <arglist>(const ACE_Message_Block *message_block, size_t &amp;bytes_transferred, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>purge_entry</name>
      <anchor>z199_16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>make_idle</name>
      <anchor>z199_17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>update_transport</name>
      <anchor>z199_18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>handle_timeout</name>
      <anchor>z199_19</anchor>
      <arglist>(const ACE_Time_Value &amp;current_time, const void *act)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>recv_buffer_size</name>
      <anchor>z199_20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>sent_byte_count</name>
      <anchor>z199_21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Codeset_Translator_Factory *</type>
      <name>char_translator</name>
      <anchor>z199_22</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TAO_Codeset_Translator_Factory *</type>
      <name>wchar_translator</name>
      <anchor>z199_23</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>char_translator</name>
      <anchor>z199_24</anchor>
      <arglist>(TAO_Codeset_Translator_Factory *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wchar_translator</name>
      <anchor>z199_25</anchor>
      <arglist>(TAO_Codeset_Translator_Factory *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_translators</name>
      <anchor>z199_26</anchor>
      <arglist>(TAO_InputCDR *, TAO_OutputCDR *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_translators</name>
      <anchor>z199_27</anchor>
      <arglist>(TAO_InputCDR *, TAO_OutputCDR *)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>is_tcs_set</name>
      <anchor>z199_28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first_request_sent</name>
      <anchor>z199_29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_connection_closed_notifications</name>
      <anchor>z199_30</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual TAO_Connection_Handler *</type>
      <name>connection_handler_i</name>
      <anchor>z199_31</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>parse_consolidate_messages</name>
      <anchor>z199_32</anchor>
      <arglist>(ACE_Message_Block &amp;bl, TAO_Resume_Handle &amp;rh, ACE_Time_Value *time=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>parse_incoming_messages</name>
      <anchor>z199_33</anchor>
      <arglist>(ACE_Message_Block &amp;message_block)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_t</type>
      <name>missing_data</name>
      <anchor>z199_34</anchor>
      <arglist>(ACE_Message_Block &amp;message_block)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>consolidate_message</name>
      <anchor>z199_35</anchor>
      <arglist>(ACE_Message_Block &amp;incoming, ssize_t missing_data, TAO_Resume_Handle &amp;rh, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>consolidate_fragments</name>
      <anchor>z199_36</anchor>
      <arglist>(TAO_Queued_Data *qd, TAO_Resume_Handle &amp;rh)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>consolidate_message_queue</name>
      <anchor>z199_37</anchor>
      <arglist>(ACE_Message_Block &amp;incoming, ssize_t missing_data, TAO_Resume_Handle &amp;rh, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>consolidate_extra_messages</name>
      <anchor>z199_38</anchor>
      <arglist>(ACE_Message_Block &amp;incoming, TAO_Resume_Handle &amp;rh)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>process_parsed_messages</name>
      <anchor>z199_39</anchor>
      <arglist>(TAO_Queued_Data *qd, TAO_Resume_Handle &amp;rh)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TAO_Queued_Data *</type>
      <name>make_queued_data</name>
      <anchor>z199_40</anchor>
      <arglist>(ACE_Message_Block &amp;incoming)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>send_message_shared_i</name>
      <anchor>z199_41</anchor>
      <arglist>(TAO_Stub *stub, int message_semantics, const ACE_Message_Block *message_block, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>queue_message_i</name>
      <anchor>z199_42</anchor>
      <arglist>(const ACE_Message_Block *message_block)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::ULong</type>
      <name>tag_</name>
      <anchor>z199_43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>z199_44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO::Transport_Cache_Manager::HASH_MAP_ENTRY *</type>
      <name>cache_map_entry_</name>
      <anchor>z199_45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Transport_Mux_Strategy *</type>
      <name>tms_</name>
      <anchor>z199_46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Wait_Strategy *</type>
      <name>ws_</name>
      <anchor>z199_47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bidirectional_flag_</name>
      <anchor>z199_48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO::Connection_Role</type>
      <name>opening_connection_role_</name>
      <anchor>z199_49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Queued_Message *</type>
      <name>head_</name>
      <anchor>z199_50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Queued_Message *</type>
      <name>tail_</name>
      <anchor>z199_51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Incoming_Message_Queue</type>
      <name>incoming_message_queue_</name>
      <anchor>z199_52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Time_Value</type>
      <name>current_deadline_</name>
      <anchor>z199_53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>flush_timer_id_</name>
      <anchor>z199_54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Transport_Timer</type>
      <name>transport_timer_</name>
      <anchor>z199_55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Lock *</type>
      <name>handler_lock_</name>
      <anchor>z199_56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>id_</name>
      <anchor>z199_57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>purging_order_</name>
      <anchor>z199_58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>recv_buffer_size_</name>
      <anchor>z199_59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>sent_byte_count_</name>
      <anchor>z199_60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>is_connected_</name>
      <anchor>z199_61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>TAO::Transport_Cache_Manager &amp;</type>
      <name>transport_cache_manager</name>
      <anchor>z199_62</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>drain_queue</name>
      <anchor>z199_63</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>drain_queue_i</name>
      <anchor>z199_64</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>queue_is_empty_i</name>
      <anchor>z199_65</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>drain_queue_helper</name>
      <anchor>z199_66</anchor>
      <arglist>(int &amp;iovcnt, iovec iov[])</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>schedule_output_i</name>
      <anchor>z199_67</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>cancel_output_i</name>
      <anchor>z199_68</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cleanup_queue</name>
      <anchor>z199_69</anchor>
      <arglist>(size_t byte_count)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cleanup_queue_i</name>
      <anchor>z199_70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>check_buffering_constraints_i</name>
      <anchor>z199_71</anchor>
      <arglist>(TAO_Stub *stub, int &amp;must_flush)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>send_synchronous_message_i</name>
      <anchor>z199_72</anchor>
      <arglist>(const ACE_Message_Block *message_block, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>send_reply_message_i</name>
      <anchor>z199_73</anchor>
      <arglist>(const ACE_Message_Block *message_block, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>send_synch_message_helper_i</name>
      <anchor>z199_74</anchor>
      <arglist>(TAO_Synch_Queued_Message &amp;s, ACE_Time_Value *max_wait_time)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>flush_timer_pending</name>
      <anchor>z199_75</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>reset_flush_timer</name>
      <anchor>z199_76</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>report_invalid_event_handler</name>
      <anchor>z199_77</anchor>
      <arglist>(const char *caller)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>process_queue_head</name>
      <anchor>z199_78</anchor>
      <arglist>(TAO_Resume_Handle &amp;rh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>notify_reactor</name>
      <anchor>z199_79</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>send_connection_closed_notifications_i</name>
      <anchor>z199_80</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>process_fragment</name>
      <anchor>z199_81</anchor>
      <arglist>(TAO_Queued_Data *fragment_message, TAO_Queued_Data *queueable_message, CORBA::Octet major, CORBA::Octet minor, TAO_Resume_Handle &amp;rh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>allocate_partial_message_block</name>
      <anchor>z199_82</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_Transport</name>
      <anchor>z199_83</anchor>
      <arglist>(const TAO_Transport &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>z199_84</anchor>
      <arglist>(const TAO_Transport &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Codeset_Translator_Factory *</type>
      <name>char_translator_</name>
      <anchor>z199_85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Codeset_Translator_Factory *</type>
      <name>wchar_translator_</name>
      <anchor>z199_86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Boolean</type>
      <name>tcs_set_</name>
      <anchor>z199_87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Boolean</type>
      <name>first_request_</name>
      <anchor>z199_88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Message_Block *</type>
      <name>partial_message_</name>
      <anchor>z199_89</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>TAO_Block_Flushing_Strategy</name>
      <anchor>z199_90</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>TAO_Reactive_Flushing_Strategy</name>
      <anchor>z199_91</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>TAO_Leader_Follower_Flushing_Strategy</name>
      <anchor>z199_92</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>TAO_Thread_Per_Connection_Handler</name>
      <anchor>z199_93</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Transport</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::ULong tag, TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Transport</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>tag</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>orb_core</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TAO_Transport_Mux_Strategy *</type>
      <name>tms</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TAO_Wait_Strategy *</type>
      <name>wait_strategy</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>handle_output</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bidirectional_flag</name>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bidirectional_flag</name>
      <anchor>a8</anchor>
      <arglist>(int flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cache_map_entry</name>
      <anchor>a9</anchor>
      <arglist>(TAO::Transport_Cache_Manager::HASH_MAP_ENTRY *entry)</arglist>
    </member>
    <member kind="function">
      <type>TAO::Transport_Cache_Manager::HASH_MAP_ENTRY *</type>
      <name>cache_map_entry</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>id</name>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>id</name>
      <anchor>a12</anchor>
      <arglist>(size_t id)</arglist>
    </member>
    <member kind="function">
      <type>TAO::Connection_Role</type>
      <name>opened_as</name>
      <anchor>a13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>opened_as</name>
      <anchor>a14</anchor>
      <arglist>(TAO::Connection_Role)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>purging_order</name>
      <anchor>a15</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>purging_order</name>
      <anchor>a16</anchor>
      <arglist>(unsigned long value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queue_is_empty</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>provide_handler</name>
      <anchor>a18</anchor>
      <arglist>(TAO::Connection_Handler_Set &amp;handlers)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>provide_blockable_handler</name>
      <anchor>a19</anchor>
      <arglist>(TAO::Connection_Handler_Set &amp;handlers)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ssize_t</type>
      <name>send</name>
      <anchor>a21</anchor>
      <arglist>(iovec *iov, int iovcnt, size_t &amp;bytes_transferred, const ACE_Time_Value *timeout=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ssize_t</type>
      <name>recv</name>
      <anchor>a22</anchor>
      <arglist>(char *buffer, size_t len, const ACE_Time_Value *timeout=0)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>idle_after_send</name>
      <anchor>z196_0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>idle_after_reply</name>
      <anchor>z196_1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close_connection</name>
      <anchor>z196_2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>messaging_init</name>
      <anchor>z197_0</anchor>
      <arglist>(CORBA::Octet major, CORBA::Octet minor)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tear_listen_point_list</name>
      <anchor>z197_1</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Event_Handler::Reference_Count</type>
      <name>add_reference</name>
      <anchor>z197_2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Event_Handler::Reference_Count</type>
      <name>remove_reference</name>
      <anchor>z197_3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Pluggable_Messaging *</type>
      <name>messaging_object</name>
      <anchor>z197_4</anchor>
      <arglist>(void)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Transport_Descriptor_Interface</name>
    <filename>classTAO__Transport__Descriptor__Interface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Transport_Descriptor_Interface</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TAO_Transport_Descriptor_Interface *</type>
      <name>duplicate</name>
      <anchor>a1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>is_equivalent</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Transport_Descriptor_Interface *other_prop)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual u_long</type>
      <name>hash</name>
      <anchor>a3</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function">
      <type>TAO_Endpoint *</type>
      <name>endpoint</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_bidir_flag</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Boolean flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Transport_Descriptor_Interface</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Transport_Descriptor_Interface</name>
      <anchor>b1</anchor>
      <arglist>(TAO_Endpoint *endpoint, CORBA::Boolean flag=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Endpoint *</type>
      <name>endpoint_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>bidir_flag_</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Boolean</type>
      <name>endpoint_from_heap_</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Transport_Mux_Strategy</name>
    <filename>classTAO__Transport__Mux__Strategy.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Transport_Mux_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Transport_Mux_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::ULong</type>
      <name>request_id</name>
      <anchor>a2</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>bind_dispatcher</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::ULong request_id, TAO_Reply_Dispatcher *rd)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>unbind_dispatcher</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::ULong request_id)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>dispatch_reply</name>
      <anchor>a5</anchor>
      <arglist>(TAO_Pluggable_Reply_Params &amp;params)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>idle_after_send</name>
      <anchor>a6</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>idle_after_reply</name>
      <anchor>a7</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connection_closed</name>
      <anchor>a8</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Transport *</type>
      <name>transport_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ACE_Lock *</type>
      <name>lock_</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Transport_Refcount_Guard</name>
    <filename>classTAO__Transport__Refcount__Guard.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Transport_Refcount_Guard</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Transport *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Transport_Refcount_Guard</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Transport *</type>
      <name>tr_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Transport_Sync_Strategy</name>
    <filename>classTAO__Transport__Sync__Strategy.html</filename>
    <base>TAO_Sync_Strategy</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>must_queue</name>
      <anchor>a0</anchor>
      <arglist>(int queue_empty)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>buffering_constraints_reached</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Stub *stub, size_t msg_count, size_t total_bytes, int &amp;must_flush, const ACE_Time_Value &amp;current_deadline, int &amp;set_timer, ACE_Time_Value &amp;interval)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Transport_Timer</name>
    <filename>classTAO__Transport__Timer.html</filename>
    <base>ACE_Event_Handler</base>
    <member kind="function">
      <type></type>
      <name>TAO_Transport_Timer</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>handle_timeout</name>
      <anchor>a1</anchor>
      <arglist>(const ACE_Time_Value &amp;current_time, const void *act)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Transport *</type>
      <name>transport_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_TSS_Resources</name>
    <filename>classTAO__TSS__Resources.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_TSS_Resources</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_TSS_Resources</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>poa_current_impl_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>rtscheduler_current_impl_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>rtscheduler_previous_current_impl_</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Environment *</type>
      <name>default_environment_</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Environment</type>
      <name>tss_environment_</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Policy_Current_Impl</type>
      <name>initial_policy_current_</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Policy_Current_Impl *</type>
      <name>policy_current_</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::GUIResource_Factory *</type>
      <name>gui_resource_factory_</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_TSS_Resources</name>
      <anchor>z200_0</anchor>
      <arglist>(const TAO_TSS_Resources &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>z200_1</anchor>
      <arglist>(const TAO_TSS_Resources &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_TSS_Singleton</name>
    <filename>classTAO__TSS__Singleton.html</filename>
    <templarg>TYPE</templarg>
    <templarg>ACE_LOCK</templarg>
    <base>ACE_Cleanup</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cleanup</name>
      <anchor>a0</anchor>
      <arglist>(void *param=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TYPE *</type>
      <name>instance</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>dump</name>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_TSS_Singleton</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ACE_TSS_TYPE</name>
      <anchor>b1</anchor>
      <arglist>(TYPE) instance_</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>TAO_TSS_Singleton&lt; TYPE, ACE_LOCK &gt; *&amp;</type>
      <name>instance_i</name>
      <anchor>f0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>TAO_TSS_Singleton&lt; TYPE, ACE_LOCK &gt; *</type>
      <name>singleton_</name>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d0</anchor>
      <arglist>(const TAO_TSS_Singleton&lt; TYPE, ACE_LOCK &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TAO_TSS_Singleton</name>
      <anchor>d1</anchor>
      <arglist>(const TAO_TSS_Singleton&lt; TYPE, ACE_LOCK &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_TypeCodeFactory_Adapter</name>
    <filename>classTAO__TypeCodeFactory__Adapter.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_TypeCodeFactory_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_struct_tc</name>
      <anchor>a1</anchor>
      <arglist>(const char *id, const char *name, const CORBA::StructMemberSeq &amp;members ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_union_tc</name>
      <anchor>a2</anchor>
      <arglist>(const char *id, const char *name, CORBA::TypeCode_ptr discriminator_type, const CORBA::UnionMemberSeq &amp;members ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_enum_tc</name>
      <anchor>a3</anchor>
      <arglist>(const char *id, const char *name, const CORBA::EnumMemberSeq &amp;members ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_alias_tc</name>
      <anchor>a4</anchor>
      <arglist>(const char *id, const char *name, CORBA::TypeCode_ptr original_type ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_exception_tc</name>
      <anchor>a5</anchor>
      <arglist>(const char *id, const char *name, const CORBA::StructMemberSeq &amp;members ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_interface_tc</name>
      <anchor>a6</anchor>
      <arglist>(const char *id, const char *name ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_string_tc</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::ULong bound ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_wstring_tc</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong bound ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_fixed_tc</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::UShort digits, CORBA::UShort scale ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_sequence_tc</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::ULong bound, CORBA::TypeCode_ptr element_type ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_array_tc</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::ULong length, CORBA::TypeCode_ptr element_type ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_value_tc</name>
      <anchor>a12</anchor>
      <arglist>(const char *id, const char *name, CORBA::ValueModifier type_modifier, CORBA::TypeCode_ptr concrete_base, const CORBA::ValueMemberSeq &amp;members ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_value_box_tc</name>
      <anchor>a13</anchor>
      <arglist>(const char *id, const char *name, CORBA::TypeCode_ptr boxed_type ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_native_tc</name>
      <anchor>a14</anchor>
      <arglist>(const char *id, const char *name ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_recursive_tc</name>
      <anchor>a15</anchor>
      <arglist>(const char *id ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_abstract_interface_tc</name>
      <anchor>a16</anchor>
      <arglist>(const char *id, const char *name ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_local_interface_tc</name>
      <anchor>a17</anchor>
      <arglist>(const char *id, const char *name ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_component_tc</name>
      <anchor>a18</anchor>
      <arglist>(const char *id, const char *name ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_home_tc</name>
      <anchor>a19</anchor>
      <arglist>(const char *id, const char *name ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_event_tc</name>
      <anchor>a20</anchor>
      <arglist>(const char *id, const char *name, CORBA::ValueModifier type_modifier, CORBA::TypeCode_ptr concrete_base, const CORBA::ValueMemberSeq &amp;members ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_enum_tc</name>
      <anchor>z212_0</anchor>
      <arglist>(char const *id, char const *name, ACE_Array_Base&lt; CORBA::String_var &gt; const &amp;enumerators, CORBA::ULong ncases ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_struct_except_tc</name>
      <anchor>z212_1</anchor>
      <arglist>(CORBA::TCKind, char const *id, char const *name, ACE_Array_Base&lt; TAO::TypeCode::Struct_Field&lt; CORBA::String_var, CORBA::TypeCode_var &gt; &gt; const &amp;fields, CORBA::ULong nfields ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_union_tc</name>
      <anchor>z212_2</anchor>
      <arglist>(char const *id, char const *name, CORBA::TypeCode_ptr discriminant_type, ACE_Array_Base&lt; TAO::TypeCode::Case&lt; CORBA::String_var, CORBA::TypeCode_var &gt; &gt; const &amp;cases, CORBA::ULong ncases, CORBA::Long default_index, char const *default_case_name, CORBA::TypeCode_ptr default_case_type ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>create_value_event_tc</name>
      <anchor>z212_3</anchor>
      <arglist>(CORBA::TCKind, char const *id, char const *name, CORBA::ValueModifier modifier, CORBA::TypeCode_ptr concrete_base, ACE_Array_Base&lt; TAO::TypeCode::Value_Field&lt; CORBA::String_var, CORBA::TypeCode_var &gt; &gt; const &amp;fields, CORBA::ULong nfields ACE_ENV_ARG_DECL)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_UIOP_Protocol_Properties</name>
    <filename>classTAO__UIOP__Protocol__Properties.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_UIOP_Protocol_Properties</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Long</type>
      <name>send_buffer_size_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Long</type>
      <name>recv_buffer_size_</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Unbounded_Array_Sequence</name>
    <filename>classTAO__Unbounded__Array__Sequence.html</filename>
    <templarg>T</templarg>
    <templarg>T_slice</templarg>
    <templarg>TAG</templarg>
    <base>TAO_Unbounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Array_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Array_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Array_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong maximum, CORBA::ULong length, T *data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Array_Sequence</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Unbounded_Array_Sequence&lt; T, T_slice, TAG &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Unbounded_Array_Sequence</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Unbounded_Array_Sequence&lt; T, T_slice, TAG &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_Unbounded_Array_Sequence&lt; T, T_slice, TAG &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::ULong) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get_buffer</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::Boolean orphan=0)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>get_buffer</name>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, T *data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>T *</type>
      <name>allocbuf</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>e1</anchor>
      <arglist>(T *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Unbounded_Base_Sequence</name>
    <filename>classTAO__Unbounded__Base__Sequence.html</filename>
    <base>TAO_Base_Sequence</base>
    <member kind="function">
      <type>void</type>
      <name>length</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>length</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Unbounded_Base_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Unbounded_Base_Sequence</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Unbounded_Base_Sequence</name>
      <anchor>b1</anchor>
      <arglist>(CORBA::ULong maximum, CORBA::ULong length, void *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TAO_Unbounded_Base_Sequence</name>
      <anchor>b2</anchor>
      <arglist>(CORBA::ULong maximum, void *buffer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Unbounded_Object_Sequence</name>
    <filename>classTAO__Unbounded__Object__Sequence.html</filename>
    <templarg>T</templarg>
    <templarg>T_var</templarg>
    <base>TAO_Unbounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Object_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Object_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Object_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong maximum, CORBA::ULong length, T **data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Object_Sequence</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Unbounded_Object_Sequence&lt; T, T_var &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Unbounded_Object_Sequence</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Unbounded_Object_Sequence&lt; T, T_var &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_Unbounded_Object_Sequence&lt; T, T_var &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Object_Manager&lt; T, T_var &gt;</type>
      <name>operator[]</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong slot) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_shrink_buffer</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::ULong new_length, CORBA::ULong old_length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>T **</type>
      <name>allocbuf</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>e1</anchor>
      <arglist>(T **)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Unbounded_Pseudo_Sequence</name>
    <filename>classTAO__Unbounded__Pseudo__Sequence.html</filename>
    <templarg>T</templarg>
    <base>TAO_Unbounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Pseudo_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Pseudo_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Pseudo_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong maximum, CORBA::ULong length, T **data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Pseudo_Sequence</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Unbounded_Pseudo_Sequence&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Unbounded_Pseudo_Sequence</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Unbounded_Pseudo_Sequence&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_Unbounded_Pseudo_Sequence&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Pseudo_Object_Manager&lt; T &gt;</type>
      <name>operator[]</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong slot) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_shrink_buffer</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::ULong new_length, CORBA::ULong old_length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>T **</type>
      <name>allocbuf</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>e1</anchor>
      <arglist>(T **)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Unbounded_Sequence</name>
    <filename>classTAO__Unbounded__Sequence.html</filename>
    <templarg>T</templarg>
    <base>TAO_Unbounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, T *data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Sequence</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Unbounded_Sequence&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Unbounded_Sequence&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const TAO_Unbounded_Sequence&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Unbounded_Sequence</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::ULong) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get_buffer</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::Boolean orphan=0)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>get_buffer</name>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, T *data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>T *</type>
      <name>allocbuf</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>e1</anchor>
      <arglist>(T *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;</name>
    <filename>classTAO__Unbounded__Sequence_3_01CORBA_1_1Octet_01_4.html</filename>
    <base>TAO_Unbounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::Octet *data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Unbounded_Sequence</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Sequence</name>
      <anchor>a4</anchor>
      <arglist>(const TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Octet &amp;</type>
      <name>operator[]</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function">
      <type>const CORBA::Octet &amp;</type>
      <name>operator[]</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::ULong) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Octet *</type>
      <name>get_buffer</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::Boolean orphan=0)</arglist>
    </member>
    <member kind="function">
      <type>const CORBA::Octet *</type>
      <name>get_buffer</name>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::Octet *data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Message_Block *</type>
      <name>mb</name>
      <anchor>a13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_Sequence</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::ULong length, const ACE_Message_Block *mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::ULong length, const ACE_Message_Block *mb)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Octet *</type>
      <name>allocbuf</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Octet *)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Message_Block *</type>
      <name>mb_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TAO_Marshal_Sequence</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Unbounded_String_Sequence</name>
    <filename>classTAO__Unbounded__String__Sequence.html</filename>
    <base>TAO_Unbounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_String_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_String_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong maximum)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_String_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong maximum, CORBA::ULong length, char **data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_String_Sequence</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Unbounded_String_Sequence &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Unbounded_String_Sequence</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Unbounded_String_Sequence &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_Unbounded_String_Sequence &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_String_Manager</type>
      <name>operator[]</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong slot) const </arglist>
    </member>
    <member kind="function">
      <type>char **</type>
      <name>get_buffer</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Boolean orphan=0)</arglist>
    </member>
    <member kind="function">
      <type>const char **</type>
      <name>get_buffer</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_shrink_buffer</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::ULong new_length, CORBA::ULong old_length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::ULong maximum, CORBA::ULong length, char **data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>char **</type>
      <name>allocbuf</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>e1</anchor>
      <arglist>(char **)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e2</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Unbounded_WString_Sequence</name>
    <filename>classTAO__Unbounded__WString__Sequence.html</filename>
    <base>TAO_Unbounded_Base_Sequence</base>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_WString_Sequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_WString_Sequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong maximum)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_WString_Sequence</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong maximum, CORBA::ULong length, CORBA::WChar **data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Unbounded_WString_Sequence</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_Unbounded_WString_Sequence &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Unbounded_WString_Sequence</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Unbounded_WString_Sequence &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const TAO_Unbounded_WString_Sequence &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_SeqElem_WString_Manager</type>
      <name>operator[]</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong slot) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar **</type>
      <name>get_buffer</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::Boolean orphan=0)</arglist>
    </member>
    <member kind="function">
      <type>const CORBA::WChar **</type>
      <name>get_buffer</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_allocate_buffer</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_deallocate_buffer</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_shrink_buffer</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::ULong new_length, CORBA::ULong old_length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::ULong maximum, CORBA::ULong length, CORBA::WChar **data, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::WChar **</type>
      <name>allocbuf</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::ULong)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>freebuf</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::WChar **)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e2</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Unknown_Profile</name>
    <filename>classTAO__Unknown__Profile.html</filename>
    <base>TAO_Profile</base>
    <member kind="function">
      <type></type>
      <name>TAO_Unknown_Profile</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::ULong tag, TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse_string</name>
      <anchor>a1</anchor>
      <arglist>(const char *string ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>object_key_delimiter</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char *</type>
      <name>to_string</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>decode</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>encode</name>
      <anchor>a5</anchor>
      <arglist>(TAO_OutputCDR &amp;stream) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>encode_endpoints</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TAO::ObjectKey &amp;</type>
      <name>object_key</name>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::ObjectKey *</type>
      <name>_key</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Endpoint *</type>
      <name>endpoint</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>endpoint_count</name>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>hash</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::ULong max ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>decode_profile</name>
      <anchor>a12</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>decode_endpoints</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>do_is_equivalent</name>
      <anchor>b0</anchor>
      <arglist>(const TAO_Profile *other_profile)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>is_equivalent_hook</name>
      <anchor>b1</anchor>
      <arglist>(const TAO_Profile *other_profile)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>create_profile_body</name>
      <anchor>d0</anchor>
      <arglist>(TAO_OutputCDR &amp;encap) const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>parse_string_i</name>
      <anchor>d1</anchor>
      <arglist>(const char *string ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_opaque</type>
      <name>body_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Valuetype_Adapter</name>
    <filename>classTAO__Valuetype__Adapter.html</filename>
    <base>ACE_Service_Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Valuetype_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Object_ptr</type>
      <name>abstractbase_to_object</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::AbstractBase_ptr p)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>stream_to_value</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::ValueBase *&amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>stream_to_abstract_base</name>
      <anchor>a3</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::AbstractBase_ptr &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::ULong</type>
      <name>type_info_single</name>
      <anchor>a4</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>vf_map_rebind</name>
      <anchor>a5</anchor>
      <arglist>(const char *, CORBA::ValueFactory &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>vf_map_unbind</name>
      <anchor>a6</anchor>
      <arglist>(const char *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::ValueFactory</type>
      <name>vf_map_find</name>
      <anchor>a7</anchor>
      <arglist>(const char *)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Var_Base_T</name>
    <filename>classTAO__Var__Base__T.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>_in_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>_inout_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Var_Base_T</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Var_Base_T</name>
      <anchor>a1</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Var_Base_T</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Var_Base_T&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_Var_Base_T</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>operator-&gt;</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T &amp;</name>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T &amp;</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T &amp;</name>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>_in_type</type>
      <name>in</name>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>_inout_type</type>
      <name>inout</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>ptr</name>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>ptr_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Var_Var_T</name>
    <filename>classTAO__Var__Var__T.html</filename>
    <templarg>T</templarg>
    <base>TAO_Var_Base_T</base>
    <member kind="typedef">
      <type>T *&amp;</type>
      <name>_out_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>_retn_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Var_Var_T</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Var_Var_T</name>
      <anchor>a1</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Var_Var_T</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_Var_Var_T&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Var_Var_T &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Var_Var_T &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const TAO_Var_Var_T&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *&amp;</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>_out_type</type>
      <name>out</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>_retn_type</type>
      <name>_retn</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_VarArray_Var_T</name>
    <filename>classTAO__VarArray__Var__T.html</filename>
    <templarg>T</templarg>
    <templarg>T_slice</templarg>
    <templarg>TAG</templarg>
    <base>TAO_Array_Var_Base_T</base>
    <member kind="function">
      <type></type>
      <name>TAO_VarArray_Var_T</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_VarArray_Var_T</name>
      <anchor>a1</anchor>
      <arglist>(T_slice *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_VarArray_Var_T</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_VarArray_Var_T&lt; T, T_slice, TAG &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_VarArray_Var_T&lt; T, T_slice, TAG &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(T_slice *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_VarArray_Var_T&lt; T, T_slice, TAG &gt; &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const TAO_VarArray_Var_T&lt; T, T_slice, TAG &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T_slice *&amp;</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_VarSeq_Var_T</name>
    <filename>classTAO__VarSeq__Var__T.html</filename>
    <templarg>T</templarg>
    <templarg>T_elem</templarg>
    <base>TAO_Seq_Var_Base_T</base>
    <member kind="function">
      <type></type>
      <name>TAO_VarSeq_Var_T</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_VarSeq_Var_T</name>
      <anchor>a1</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_VarSeq_Var_T</name>
      <anchor>a2</anchor>
      <arglist>(const TAO_VarSeq_Var_T&lt; T, T_elem &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_VarSeq_Var_T &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_VarSeq_Var_T &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const TAO_VarSeq_Var_T&lt; T, T_elem &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>T_elem &amp;</type>
      <name>operator[]</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::ULong index)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *&amp;</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Wait_On_Leader_Follower</name>
    <filename>classTAO__Wait__On__Leader__Follower.html</filename>
    <base>TAO_Wait_Strategy</base>
    <member kind="function">
      <type></type>
      <name>TAO_Wait_On_Leader_Follower</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Wait_On_Leader_Follower</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sending_request</name>
      <anchor>a2</anchor>
      <arglist>(TAO_ORB_Core *orb_core, int two_way)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>wait</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Time_Value *max_wait_time, TAO_Synch_Reply_Dispatcher &amp;rd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>non_blocking</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>can_process_upcalls</name>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Wait_On_Reactor</name>
    <filename>classTAO__Wait__On__Reactor.html</filename>
    <base>TAO_Wait_Strategy</base>
    <member kind="function">
      <type></type>
      <name>TAO_Wait_On_Reactor</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Wait_On_Reactor</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>wait</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Time_Value *max_wait_time, TAO_Synch_Reply_Dispatcher &amp;rd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>non_blocking</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>can_process_upcalls</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Wait_On_Read</name>
    <filename>classTAO__Wait__On__Read.html</filename>
    <base>TAO_Wait_Strategy</base>
    <member kind="function">
      <type></type>
      <name>TAO_Wait_On_Read</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Wait_On_Read</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>wait</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Time_Value *max_wait_time, TAO_Synch_Reply_Dispatcher &amp;rd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>non_blocking</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>can_process_upcalls</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_Wait_Strategy</name>
    <filename>classTAO__Wait__Strategy.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_Wait_Strategy</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Wait_Strategy</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sending_request</name>
      <anchor>a2</anchor>
      <arglist>(TAO_ORB_Core *orb_core, int two_way)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>wait</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Time_Value *max_wait_time, TAO_Synch_Reply_Dispatcher &amp;rd)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>register_handler</name>
      <anchor>a4</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>non_blocking</name>
      <anchor>a5</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>can_process_upcalls</name>
      <anchor>a6</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_registered</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>is_registered</name>
      <anchor>a8</anchor>
      <arglist>(int flag)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Transport *</type>
      <name>transport_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>is_registered_</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO_WString_Manager</name>
    <filename>classTAO__WString__Manager.html</filename>
    <member kind="function">
      <type></type>
      <name>TAO_WString_Manager</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_WString_Manager</name>
      <anchor>a1</anchor>
      <arglist>(const TAO_WString_Manager &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TAO_WString_Manager</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_WString_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TAO_WString_Manager &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_WString_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const CORBA::WString_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO_WString_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const CORBA::WChar *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_WString_Manager &amp;</type>
      <name>operator=</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::WChar *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CORBA::WChar *</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CORBA::WChar *</type>
      <name>in</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar *&amp;</type>
      <name>inout</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar *&amp;</type>
      <name>out</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar *</type>
      <name>_retn</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::WChar *</type>
      <name>ptr_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UTF16_BOM_Factory</name>
    <filename>classUTF16__BOM__Factory.html</filename>
    <base>TAO_Codeset_Translator_Factory</base>
    <member kind="function">
      <type></type>
      <name>UTF16_BOM_Factory</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UTF16_BOM_Factory</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="function">
      <type>CONV_FRAME::CodeSetId</type>
      <name>ncs</name>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CONV_FRAME::CodeSetId</type>
      <name>tcs</name>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchor>a5</anchor>
      <arglist>(TAO_InputCDR *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR *) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>create_translator</name>
      <anchor>d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>parse_one_arg</name>
      <anchor>d1</anchor>
      <arglist>(int argc, ACE_TCHAR *argv[])</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>UTF16_BOM_Translator *</type>
      <name>translator_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>forceBE_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UTF16_BOM_Translator</name>
    <filename>classUTF16__BOM__Translator.html</filename>
    <base>ACE_WChar_Codeset_Translator</base>
    <member kind="function">
      <type></type>
      <name>UTF16_BOM_Translator</name>
      <anchor>a0</anchor>
      <arglist>(bool forceBE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UTF16_BOM_Translator</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_CDR::Boolean</type>
      <name>read_wchar</name>
      <anchor>a2</anchor>
      <arglist>(ACE_InputCDR &amp;, ACE_CDR::WChar &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_CDR::Boolean</type>
      <name>read_wstring</name>
      <anchor>a3</anchor>
      <arglist>(ACE_InputCDR &amp;, ACE_CDR::WChar *&amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_CDR::Boolean</type>
      <name>read_wchar_array</name>
      <anchor>a4</anchor>
      <arglist>(ACE_InputCDR &amp;, ACE_CDR::WChar *, ACE_CDR::ULong)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_CDR::Boolean</type>
      <name>write_wchar</name>
      <anchor>a5</anchor>
      <arglist>(ACE_OutputCDR &amp;, ACE_CDR::WChar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_CDR::Boolean</type>
      <name>write_wstring</name>
      <anchor>a6</anchor>
      <arglist>(ACE_OutputCDR &amp;, ACE_CDR::ULong, const ACE_CDR::WChar *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_CDR::Boolean</type>
      <name>write_wchar_array</name>
      <anchor>a7</anchor>
      <arglist>(ACE_OutputCDR &amp;, const ACE_CDR::WChar *, ACE_CDR::ULong)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_CDR::ULong</type>
      <name>ncs</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_CDR::ULong</type>
      <name>tcs</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ACE_CDR::Boolean</type>
      <name>read_wchar_array_i</name>
      <anchor>d0</anchor>
      <arglist>(ACE_InputCDR &amp;, ACE_CDR::WChar *, ACE_CDR::ULong &amp;, int adjust_len=0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ACE_CDR::Boolean</type>
      <name>write_wchar_array_i</name>
      <anchor>d1</anchor>
      <arglist>(ACE_OutputCDR &amp;, const ACE_CDR::WChar *, ACE_CDR::ULong)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ACE_CDR::Boolean</type>
      <name>write_swapped_wchar_array_i</name>
      <anchor>d2</anchor>
      <arglist>(ACE_OutputCDR &amp;cdr, const ACE_CDR::WChar *x, ACE_CDR::ULong length)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ACE_CDR::Boolean</type>
      <name>write_wchar_i</name>
      <anchor>d3</anchor>
      <arglist>(ACE_OutputCDR &amp;, ACE_CDR::WChar, bool allow_BOM)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>forceBE_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>PP_Memory_Management</name>
    <title>Memory Management Rules for TAO&apos;s Pluggable Protocol Framework</title>
    <filename>PP_Memory_Management</filename>
    <docanchor file="PP_Memory_Management">rules</docanchor>
    <docanchor file="PP_Memory_Management">requirements</docanchor>
    <docanchor file="PP_Memory_Management">background</docanchor>
    <docanchor file="PP_Memory_Management">data</docanchor>
  </compound>
  <compound kind="dir">
    <name>TAO/tao/</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/tao/</path>
    <filename>dir_000001.html</filename>
    <file>Abstract_Servant_Base.cpp</file>
    <file>Abstract_Servant_Base.h</file>
    <file>Acceptor_Filter.cpp</file>
    <file>Acceptor_Filter.h</file>
    <file>Acceptor_Impl.cpp</file>
    <file>Acceptor_Impl.h</file>
    <file>Acceptor_Registry.cpp</file>
    <file>Acceptor_Registry.h</file>
    <file>Acceptor_Registry.i</file>
    <file>Adapter.cpp</file>
    <file>Adapter.h</file>
    <file>Adapter_Factory.cpp</file>
    <file>Adapter_Factory.h</file>
    <file>Adapter_Registry.cpp</file>
    <file>Adapter_Registry.h</file>
    <file>Alias_TypeCode.cpp</file>
    <file>Alias_TypeCode.h</file>
    <file>Alias_TypeCode.inl</file>
    <file>Allocator.h</file>
    <file>Any.cpp</file>
    <file>Any.h</file>
    <file>Any.i</file>
    <file>Any_Arg_Traits.h</file>
    <file>Any_Array_Impl_T.cpp</file>
    <file>Any_Array_Impl_T.h</file>
    <file>Any_Array_Impl_T.inl</file>
    <file>Any_Basic_Impl.cpp</file>
    <file>Any_Basic_Impl.h</file>
    <file>Any_Basic_Impl_T.cpp</file>
    <file>Any_Basic_Impl_T.h</file>
    <file>Any_Basic_Impl_T.inl</file>
    <file>Any_Dual_Impl_T.cpp</file>
    <file>Any_Dual_Impl_T.h</file>
    <file>Any_Dual_Impl_T.inl</file>
    <file>Any_Impl.cpp</file>
    <file>Any_Impl.h</file>
    <file>Any_Impl_T.cpp</file>
    <file>Any_Impl_T.h</file>
    <file>Any_Impl_T.inl</file>
    <file>Any_Special_Impl_T.cpp</file>
    <file>Any_Special_Impl_T.h</file>
    <file>Any_Special_Impl_T.inl</file>
    <file>Any_SystemException.cpp</file>
    <file>Any_SystemException.h</file>
    <file>Any_Unknown_IDL_Type.cpp</file>
    <file>Any_Unknown_IDL_Type.h</file>
    <file>AnySeq.pidl</file>
    <file>AnySeqA.cpp</file>
    <file>AnySeqC.cpp</file>
    <file>AnySeqC.h</file>
    <file>AnySeqS.h</file>
    <file>append.cpp</file>
    <file>Arg_Traits_T.h</file>
    <file>Argument.cpp</file>
    <file>Argument.h</file>
    <file>Array_VarOut_T.cpp</file>
    <file>Array_VarOut_T.h</file>
    <file>Array_VarOut_T.inl</file>
    <file>Asynch_Queued_Message.cpp</file>
    <file>Asynch_Queued_Message.h</file>
    <file>Asynch_Reply_Dispatcher_Base.cpp</file>
    <file>Asynch_Reply_Dispatcher_Base.h</file>
    <file>Asynch_Reply_Dispatcher_Base.i</file>
    <file>Auto_Functor.h</file>
    <file>Base_Transport_Property.cpp</file>
    <file>Base_Transport_Property.h</file>
    <file>Base_Transport_Property.inl</file>
    <file>Basic_Argument_T.cpp</file>
    <file>Basic_Argument_T.h</file>
    <file>Basic_Argument_T.inl</file>
    <file>Basic_Arguments.cpp</file>
    <file>Basic_Arguments.h</file>
    <file>Basic_Types.h</file>
    <file>BD_String_Argument_T.cpp</file>
    <file>BD_String_Argument_T.h</file>
    <file>BD_String_Argument_T.inl</file>
    <file>BiDir_Adapter.cpp</file>
    <file>BiDir_Adapter.h</file>
    <file>Bind_Dispatcher_Guard.cpp</file>
    <file>Bind_Dispatcher_Guard.h</file>
    <file>Bind_Dispatcher_Guard.i</file>
    <file>Block_Flushing_Strategy.cpp</file>
    <file>Block_Flushing_Strategy.h</file>
    <file>Blocked_Connect_Strategy.cpp</file>
    <file>Blocked_Connect_Strategy.h</file>
    <file>BooleanSeq.pidl</file>
    <file>BooleanSeqA.cpp</file>
    <file>BooleanSeqC.cpp</file>
    <file>BooleanSeqC.h</file>
    <file>BooleanSeqS.h</file>
    <file>Bounds.pidl</file>
    <file>BoundsA.cpp</file>
    <file>BoundsC.cpp</file>
    <file>BoundsC.h</file>
    <file>Buffer_Allocator_T.cpp</file>
    <file>Buffer_Allocator_T.h</file>
    <file>Buffering_Constraint_Policy.cpp</file>
    <file>Buffering_Constraint_Policy.h</file>
    <file>Buffering_Constraint_Policy.i</file>
    <file>Cache_Entries.cpp</file>
    <file>Cache_Entries.h</file>
    <file>Cache_Entries.inl</file>
    <file>CDR.cpp</file>
    <file>CDR.h</file>
    <file>CDR.i</file>
    <file>CDR_Encaps_Codec.cpp</file>
    <file>CDR_Encaps_Codec.h</file>
    <file>CharSeq.pidl</file>
    <file>CharSeqA.cpp</file>
    <file>CharSeqC.cpp</file>
    <file>CharSeqC.h</file>
    <file>CharSeqS.h</file>
    <file>Cleanup_Func_Registry.cpp</file>
    <file>Cleanup_Func_Registry.h</file>
    <file>Cleanup_Func_Registry.inl</file>
    <file>Client_Strategy_Factory.cpp</file>
    <file>Client_Strategy_Factory.h</file>
    <file>ClientRequestInfo.cpp</file>
    <file>ClientRequestInfo.h</file>
    <file>ClientRequestInfo.inl</file>
    <file>ClientRequestInfo.pidl</file>
    <file>ClientRequestInfo_i.cpp</file>
    <file>ClientRequestInfo_i.h</file>
    <file>ClientRequestInfo_i.inl</file>
    <file>ClientRequestInfoA.cpp</file>
    <file>ClientRequestInfoC.cpp</file>
    <file>ClientRequestInfoC.h</file>
    <file>ClientRequestInfoS.h</file>
    <file>ClientRequestInterceptor_Adapter.cpp</file>
    <file>ClientRequestInterceptor_Adapter.h</file>
    <file>ClientRequestInterceptor_Adapter.inl</file>
    <file>CodecFactory.cpp</file>
    <file>CodecFactory.h</file>
    <file>CodecFactory_ORBInitializer.cpp</file>
    <file>CodecFactory_ORBInitializer.h</file>
    <file>Codeset_Manager.cpp</file>
    <file>Codeset_Manager.h</file>
    <file>Codeset_Translator_Factory.cpp</file>
    <file>Codeset_Translator_Factory.h</file>
    <file>Codeset_Translator_Factory_T.cpp</file>
    <file>Codeset_Translator_Factory_T.h</file>
    <file>Collocated_Invocation.cpp</file>
    <file>Collocated_Invocation.h</file>
    <file>Collocation_Proxy_Broker.h</file>
    <file>Collocation_Resolver.cpp</file>
    <file>Collocation_Resolver.h</file>
    <file>Collocation_Strategy.h</file>
    <file>Condition.cpp</file>
    <file>Condition.h</file>
    <file>Condition.inl</file>
    <file>Connect_Strategy.cpp</file>
    <file>Connect_Strategy.h</file>
    <file>Connection_Handler.cpp</file>
    <file>Connection_Handler.h</file>
    <file>Connection_Handler.inl</file>
    <file>Connection_Purging_Strategy.cpp</file>
    <file>Connection_Purging_Strategy.h</file>
    <file>Connection_Purging_Strategy.inl</file>
    <file>Connector_Impl.cpp</file>
    <file>Connector_Impl.h</file>
    <file>Connector_Registry.cpp</file>
    <file>Connector_Registry.h</file>
    <file>Connector_Registry.i</file>
    <file>CONV_FRAME.pidl</file>
    <file>CONV_FRAMEA.cpp</file>
    <file>CONV_FRAMEC.cpp</file>
    <file>CONV_FRAMEC.h</file>
    <file>CONV_FRAMES.h</file>
    <file>CONV_FRAMES_T.h</file>
    <file>corba.h</file>
    <file>CORBA_methods.h</file>
    <file>CORBA_String.cpp</file>
    <file>CORBA_String.h</file>
    <file>CORBA_String.inl</file>
    <file>corbafwd.cpp</file>
    <file>corbafwd.h</file>
    <file>CORBALOC_Parser.cpp</file>
    <file>CORBALOC_Parser.h</file>
    <file>CORBALOC_Parser.i</file>
    <file>CORBANAME_Parser.cpp</file>
    <file>CORBANAME_Parser.h</file>
    <file>CORBANAME_Parser.i</file>
    <file>Current.pidl</file>
    <file>CurrentA.cpp</file>
    <file>CurrentC.cpp</file>
    <file>CurrentC.h</file>
    <file>CurrentS.h</file>
    <file>debug.cpp</file>
    <file>debug.h</file>
    <file>default_client.cpp</file>
    <file>default_client.h</file>
    <file>Default_Collocation_Resolver.cpp</file>
    <file>Default_Collocation_Resolver.h</file>
    <file>Default_Endpoint_Selector_Factory.cpp</file>
    <file>Default_Endpoint_Selector_Factory.h</file>
    <file>default_environment.h</file>
    <file>default_ports.h</file>
    <file>Default_Protocols_Hooks.cpp</file>
    <file>Default_Protocols_Hooks.h</file>
    <file>default_resource.cpp</file>
    <file>default_resource.h</file>
    <file>default_server.cpp</file>
    <file>default_server.h</file>
    <file>Default_Stub_Factory.cpp</file>
    <file>Default_Stub_Factory.h</file>
    <file>Default_Thread_Lane_Resources_Manager.cpp</file>
    <file>Default_Thread_Lane_Resources_Manager.h</file>
    <file>DLL_Parser.cpp</file>
    <file>DLL_Parser.h</file>
    <file>DLL_Parser.i</file>
    <file>Domain.pidl</file>
    <file>DomainA.cpp</file>
    <file>DomainC.cpp</file>
    <file>DomainC.h</file>
    <file>DomainC.inl</file>
    <file>DoubleSeq.pidl</file>
    <file>DoubleSeqA.cpp</file>
    <file>DoubleSeqC.cpp</file>
    <file>DoubleSeqC.h</file>
    <file>DoubleSeqS.h</file>
    <file>Dynamic.pidl</file>
    <file>Dynamic_Adapter.cpp</file>
    <file>Dynamic_Adapter.h</file>
    <file>Dynamic_Parameter.pidl</file>
    <file>Dynamic_ParameterA.cpp</file>
    <file>Dynamic_ParameterC.cpp</file>
    <file>Dynamic_ParameterC.h</file>
    <file>DynamicA.cpp</file>
    <file>DynamicC.cpp</file>
    <file>DynamicC.h</file>
    <file>DynamicS.h</file>
    <file>Empty_Param_TypeCode.cpp</file>
    <file>Empty_Param_TypeCode.h</file>
    <file>Empty_Param_TypeCode.inl</file>
    <file>Encodable.cpp</file>
    <file>Encodable.h</file>
    <file>Endpoint.cpp</file>
    <file>Endpoint.h</file>
    <file>Endpoint.i</file>
    <file>Endpoint_Selector_Factory.cpp</file>
    <file>Endpoint_Selector_Factory.h</file>
    <file>Enum_TypeCode.cpp</file>
    <file>Enum_TypeCode.h</file>
    <file>Enum_TypeCode.inl</file>
    <file>Environment.cpp</file>
    <file>Environment.h</file>
    <file>Environment.i</file>
    <file>Exception.cpp</file>
    <file>Exception.h</file>
    <file>Exception.i</file>
    <file>Exception_Data.h</file>
    <file>Exclusive_TMS.cpp</file>
    <file>Exclusive_TMS.h</file>
    <file>Fault_Tolerance_Service.cpp</file>
    <file>Fault_Tolerance_Service.h</file>
    <file>Fault_Tolerance_Service.i</file>
    <file>FILE_Parser.cpp</file>
    <file>FILE_Parser.h</file>
    <file>FILE_Parser.i</file>
    <file>Fixed_Array_Argument_T.cpp</file>
    <file>Fixed_Array_Argument_T.h</file>
    <file>Fixed_Array_Argument_T.inl</file>
    <file>Fixed_Size_Argument_T.cpp</file>
    <file>Fixed_Size_Argument_T.h</file>
    <file>Fixed_Size_Argument_T.inl</file>
    <file>Fixed_TypeCode.cpp</file>
    <file>Fixed_TypeCode.h</file>
    <file>Fixed_TypeCode.inl</file>
    <file>FloatSeq.pidl</file>
    <file>FloatSeqA.cpp</file>
    <file>FloatSeqC.cpp</file>
    <file>FloatSeqC.h</file>
    <file>FloatSeqS.h</file>
    <file>FlResource_Factory.cpp</file>
    <file>FlResource_Factory.h</file>
    <file>FlResource_Loader.cpp</file>
    <file>FlResource_Loader.h</file>
    <file>Flushing_Strategy.cpp</file>
    <file>Flushing_Strategy.h</file>
    <file>GIOP.pidl</file>
    <file>GIOP_Message_Base.cpp</file>
    <file>GIOP_Message_Base.h</file>
    <file>GIOP_Message_Generator_Parser.cpp</file>
    <file>GIOP_Message_Generator_Parser.h</file>
    <file>GIOP_Message_Generator_Parser_10.cpp</file>
    <file>GIOP_Message_Generator_Parser_10.h</file>
    <file>GIOP_Message_Generator_Parser_11.cpp</file>
    <file>GIOP_Message_Generator_Parser_11.h</file>
    <file>GIOP_Message_Generator_Parser_12.cpp</file>
    <file>GIOP_Message_Generator_Parser_12.h</file>
    <file>GIOP_Message_Generator_Parser_Impl.cpp</file>
    <file>GIOP_Message_Generator_Parser_Impl.h</file>
    <file>GIOP_Message_Generator_Parser_Impl.inl</file>
    <file>GIOP_Message_Lite.cpp</file>
    <file>GIOP_Message_Lite.h</file>
    <file>GIOP_Message_Locate_Header.cpp</file>
    <file>GIOP_Message_Locate_Header.h</file>
    <file>GIOP_Message_Locate_Header.i</file>
    <file>GIOP_Message_State.cpp</file>
    <file>GIOP_Message_State.h</file>
    <file>GIOP_Message_State.inl</file>
    <file>GIOP_Message_Version.cpp</file>
    <file>GIOP_Message_Version.h</file>
    <file>GIOP_Message_Version.inl</file>
    <file>GIOP_Utils.cpp</file>
    <file>GIOP_Utils.h</file>
    <file>GIOPA.cpp</file>
    <file>GIOPC.cpp</file>
    <file>GIOPC.h</file>
    <file>GIOPC.inl</file>
    <file>GIOPS.h</file>
    <file>GIOPS_T.h</file>
    <file>GUIResource_Factory.cpp</file>
    <file>GUIResource_Factory.h</file>
    <file>IFR_Client_Adapter.cpp</file>
    <file>IFR_Client_Adapter.h</file>
    <file>IIOP.pidl</file>
    <file>IIOP_Acceptor.cpp</file>
    <file>IIOP_Acceptor.h</file>
    <file>IIOP_Acceptor.i</file>
    <file>IIOP_Connection_Handler.cpp</file>
    <file>IIOP_Connection_Handler.h</file>
    <file>IIOP_Connector.cpp</file>
    <file>IIOP_Connector.h</file>
    <file>IIOP_Endpoint.cpp</file>
    <file>IIOP_Endpoint.h</file>
    <file>IIOP_Endpoint.i</file>
    <file>IIOP_Endpoints.pidl</file>
    <file>IIOP_EndpointsA.cpp</file>
    <file>IIOP_EndpointsC.cpp</file>
    <file>IIOP_EndpointsC.h</file>
    <file>IIOP_Factory.cpp</file>
    <file>IIOP_Factory.h</file>
    <file>IIOP_Lite_Factory.cpp</file>
    <file>IIOP_Lite_Factory.h</file>
    <file>IIOP_Profile.cpp</file>
    <file>IIOP_Profile.h</file>
    <file>IIOP_Transport.cpp</file>
    <file>IIOP_Transport.h</file>
    <file>IIOPA.cpp</file>
    <file>IIOPC.cpp</file>
    <file>IIOPC.h</file>
    <file>Incoming_Message_Queue.cpp</file>
    <file>Incoming_Message_Queue.h</file>
    <file>Incoming_Message_Queue.inl</file>
    <file>Interceptor_List.cpp</file>
    <file>Interceptor_List.h</file>
    <file>Interceptor_List.inl</file>
    <file>InterfaceDef.pidl</file>
    <file>InvalidName.pidl</file>
    <file>InvalidSlot.pidl</file>
    <file>InvalidSlotA.cpp</file>
    <file>InvalidSlotC.cpp</file>
    <file>InvalidSlotC.h</file>
    <file>InvalidSlotS.h</file>
    <file>Invocation_Adapter.cpp</file>
    <file>Invocation_Adapter.h</file>
    <file>Invocation_Adapter.inl</file>
    <file>Invocation_Base.cpp</file>
    <file>Invocation_Base.h</file>
    <file>Invocation_Base.inl</file>
    <file>Invocation_Endpoint_Selectors.cpp</file>
    <file>Invocation_Endpoint_Selectors.h</file>
    <file>Invocation_Utils.h</file>
    <file>IOP.pidl</file>
    <file>IOP_Codec.pidl</file>
    <file>IOP_CodecA.cpp</file>
    <file>IOP_CodecC.cpp</file>
    <file>IOP_CodecC.h</file>
    <file>IOP_CodecS.h</file>
    <file>IOP_IOR.pidl</file>
    <file>IOP_IORA.cpp</file>
    <file>IOP_IORC.cpp</file>
    <file>IOP_IORC.h</file>
    <file>IOP_IORS.h</file>
    <file>IOPC.cpp</file>
    <file>IOPC.h</file>
    <file>IOPS.h</file>
    <file>IOPS_T.h</file>
    <file>IOR_Parser.cpp</file>
    <file>IOR_Parser.h</file>
    <file>IORInterceptor_Adapter.cpp</file>
    <file>IORInterceptor_Adapter.h</file>
    <file>IORInterceptor_Adapter_Factory.cpp</file>
    <file>IORInterceptor_Adapter_Factory.h</file>
    <file>Leader_Follower.cpp</file>
    <file>Leader_Follower.h</file>
    <file>Leader_Follower.i</file>
    <file>Leader_Follower_Flushing_Strategy.cpp</file>
    <file>Leader_Follower_Flushing_Strategy.h</file>
    <file>LF_CH_Event.cpp</file>
    <file>LF_CH_Event.h</file>
    <file>LF_Connect_Strategy.cpp</file>
    <file>LF_Connect_Strategy.h</file>
    <file>LF_Event.cpp</file>
    <file>LF_Event.h</file>
    <file>LF_Event.inl</file>
    <file>LF_Event_Binder.cpp</file>
    <file>LF_Event_Binder.h</file>
    <file>LF_Event_Binder.inl</file>
    <file>LF_Event_Loop_Thread_Helper.cpp</file>
    <file>LF_Event_Loop_Thread_Helper.h</file>
    <file>LF_Event_Loop_Thread_Helper.inl</file>
    <file>LF_Follower.cpp</file>
    <file>LF_Follower.h</file>
    <file>LF_Follower.inl</file>
    <file>LF_Follower_Auto_Adder.cpp</file>
    <file>LF_Follower_Auto_Adder.h</file>
    <file>LF_Follower_Auto_Adder.inl</file>
    <file>LF_Follower_Auto_Ptr.cpp</file>
    <file>LF_Follower_Auto_Ptr.h</file>
    <file>LF_Follower_Auto_Ptr.inl</file>
    <file>LF_Invocation_Event.cpp</file>
    <file>LF_Invocation_Event.h</file>
    <file>LF_Strategy.cpp</file>
    <file>LF_Strategy.h</file>
    <file>LF_Strategy_Complete.cpp</file>
    <file>LF_Strategy_Complete.h</file>
    <file>LF_Strategy_Complete.inl</file>
    <file>LocalObject.cpp</file>
    <file>LocalObject.h</file>
    <file>LocalObject.i</file>
    <file>LocateRequest_Invocation.cpp</file>
    <file>LocateRequest_Invocation.h</file>
    <file>LocateRequest_Invocation_Adapter.cpp</file>
    <file>LocateRequest_Invocation_Adapter.h</file>
    <file>LongDoubleSeq.pidl</file>
    <file>LongDoubleSeqA.cpp</file>
    <file>LongDoubleSeqC.cpp</file>
    <file>LongDoubleSeqC.h</file>
    <file>LongDoubleSeqS.h</file>
    <file>LongLongSeq.pidl</file>
    <file>LongLongSeqA.cpp</file>
    <file>LongLongSeqC.cpp</file>
    <file>LongLongSeqC.h</file>
    <file>LongLongSeqS.h</file>
    <file>LongSeq.pidl</file>
    <file>LongSeqA.cpp</file>
    <file>LongSeqC.cpp</file>
    <file>LongSeqC.h</file>
    <file>LongSeqS.h</file>
    <file>LRU_Connection_Purging_Strategy.cpp</file>
    <file>LRU_Connection_Purging_Strategy.h</file>
    <file>Managed_Types.cpp</file>
    <file>Managed_Types.h</file>
    <file>Managed_Types.i</file>
    <file>Marshal.cpp</file>
    <file>Marshal.h</file>
    <file>Marshal.i</file>
    <file>MCAST_Parser.cpp</file>
    <file>MCAST_Parser.h</file>
    <file>MCAST_Parser.i</file>
    <file>Messaging_PolicyValue.pidl</file>
    <file>Messaging_PolicyValueA.cpp</file>
    <file>Messaging_PolicyValueC.cpp</file>
    <file>Messaging_PolicyValueC.h</file>
    <file>Messaging_SyncScope.pidl</file>
    <file>Messaging_SyncScopeC.cpp</file>
    <file>Messaging_SyncScopeC.h</file>
    <file>MProfile.cpp</file>
    <file>MProfile.h</file>
    <file>MProfile.i</file>
    <file>Muxed_TMS.cpp</file>
    <file>Muxed_TMS.h</file>
    <file>New_Leader_Generator.h</file>
    <file>Null_RefCount_Policy.h</file>
    <file>NVList.cpp</file>
    <file>NVList.h</file>
    <file>NVList.i</file>
    <file>Object.cpp</file>
    <file>Object.h</file>
    <file>Object.i</file>
    <file>Object_Argument_T.cpp</file>
    <file>Object_Argument_T.h</file>
    <file>Object_Argument_T.inl</file>
    <file>Object_Key.pidl</file>
    <file>Object_KeyC.cpp</file>
    <file>Object_KeyC.h</file>
    <file>Object_Loader.cpp</file>
    <file>Object_Loader.h</file>
    <file>Object_Proxy_Broker.cpp</file>
    <file>Object_Proxy_Broker.h</file>
    <file>Object_Proxy_Impl.cpp</file>
    <file>Object_Proxy_Impl.h</file>
    <file>Object_Ref_Table.cpp</file>
    <file>Object_Ref_Table.h</file>
    <file>Object_T.cpp</file>
    <file>Object_T.h</file>
    <file>objectid.h</file>
    <file>ObjectIdList.pidl</file>
    <file>ObjectIdListA.cpp</file>
    <file>ObjectIdListC.cpp</file>
    <file>ObjectIdListC.h</file>
    <file>ObjectKey_Table.cpp</file>
    <file>ObjectKey_Table.h</file>
    <file>Objref_TypeCode.cpp</file>
    <file>Objref_TypeCode.h</file>
    <file>Objref_TypeCode.inl</file>
    <file>Objref_TypeCode_Base.cpp</file>
    <file>Objref_TypeCode_Base.h</file>
    <file>Objref_TypeCode_Base.inl</file>
    <file>Objref_TypeCode_Factory.h</file>
    <file>Objref_VarOut_T.cpp</file>
    <file>Objref_VarOut_T.h</file>
    <file>OctetSeq.pidl</file>
    <file>OctetSeqA.cpp</file>
    <file>OctetSeqC.cpp</file>
    <file>OctetSeqC.h</file>
    <file>OctetSeqS.h</file>
    <file>operation_details.cpp</file>
    <file>operation_details.h</file>
    <file>operation_details.i</file>
    <file>ORB.cpp</file>
    <file>ORB.h</file>
    <file>ORB.i</file>
    <file>ORB_Constants.h</file>
    <file>ORB_Core.cpp</file>
    <file>ORB_Core.h</file>
    <file>ORB_Core.i</file>
    <file>ORB_Core_Auto_Ptr.cpp</file>
    <file>ORB_Core_Auto_Ptr.h</file>
    <file>ORB_Core_Auto_Ptr.inl</file>
    <file>ORB_Table.cpp</file>
    <file>ORB_Table.h</file>
    <file>ORB_Table.inl</file>
    <file>orb_types.pidl</file>
    <file>orb_typesA.cpp</file>
    <file>orb_typesC.cpp</file>
    <file>orb_typesC.h</file>
    <file>orb_typesS.h</file>
    <file>orbconf.h</file>
    <file>ORBInitializer.pidl</file>
    <file>ORBInitializer_Registry.cpp</file>
    <file>ORBInitializer_Registry.h</file>
    <file>ORBInitializerA.cpp</file>
    <file>ORBInitializerC.cpp</file>
    <file>ORBInitializerC.h</file>
    <file>ORBInitializerS.h</file>
    <file>ORBInitInfo.cpp</file>
    <file>ORBInitInfo.h</file>
    <file>ORBInitInfo.inl</file>
    <file>ORBInitInfo.pidl</file>
    <file>ORBInitInfoA.cpp</file>
    <file>ORBInitInfoC.cpp</file>
    <file>ORBInitInfoC.h</file>
    <file>ORBInitInfoS.h</file>
    <file>ParameterMode.pidl</file>
    <file>ParameterModeA.cpp</file>
    <file>ParameterModeC.cpp</file>
    <file>ParameterModeC.h</file>
    <file>ParameterModeS.h</file>
    <file>params.cpp</file>
    <file>params.h</file>
    <file>params.i</file>
    <file>Parser_Registry.cpp</file>
    <file>Parser_Registry.h</file>
    <file>Parser_Registry.i</file>
    <file>PI_Forward.pidl</file>
    <file>PI_ForwardC.cpp</file>
    <file>PI_ForwardC.h</file>
    <file>PICurrent.cpp</file>
    <file>PICurrent.h</file>
    <file>PICurrent.inl</file>
    <file>PICurrent_Copy_Callback.cpp</file>
    <file>PICurrent_Copy_Callback.h</file>
    <file>PICurrent_ORBInitializer.cpp</file>
    <file>PICurrent_ORBInitializer.h</file>
    <file>Pluggable_Messaging.cpp</file>
    <file>Pluggable_Messaging.h</file>
    <file>Pluggable_Messaging_Utils.cpp</file>
    <file>Pluggable_Messaging_Utils.h</file>
    <file>Pluggable_Messaging_Utils.i</file>
    <file>Policy.pidl</file>
    <file>Policy_Forward.pidl</file>
    <file>Policy_ForwardA.cpp</file>
    <file>Policy_ForwardC.cpp</file>
    <file>Policy_ForwardC.h</file>
    <file>Policy_ForwardS.h</file>
    <file>Policy_Manager.cpp</file>
    <file>Policy_Manager.h</file>
    <file>Policy_Manager.i</file>
    <file>Policy_Set.cpp</file>
    <file>Policy_Set.h</file>
    <file>Policy_Set.i</file>
    <file>Policy_Validator.cpp</file>
    <file>Policy_Validator.h</file>
    <file>PolicyA.cpp</file>
    <file>PolicyC.cpp</file>
    <file>PolicyC.h</file>
    <file>PolicyC.inl</file>
    <file>PolicyFactory.pidl</file>
    <file>PolicyFactory_Registry.cpp</file>
    <file>PolicyFactory_Registry.h</file>
    <file>PolicyFactoryA.cpp</file>
    <file>PolicyFactoryC.cpp</file>
    <file>PolicyFactoryC.h</file>
    <file>PolicyFactoryS.h</file>
    <file>PolicyS.h</file>
    <file>Pollable.pidl</file>
    <file>PollableC.cpp</file>
    <file>PollableC.h</file>
    <file>PollableS.h</file>
    <file>PortableInterceptor.h</file>
    <file>PortableInterceptor.pidl</file>
    <file>PortableInterceptorA.cpp</file>
    <file>PortableInterceptorC.cpp</file>
    <file>PortableInterceptorC.h</file>
    <file>PortableInterceptorS.h</file>
    <file>PredefinedType_Seq_Tmplinst.cpp</file>
    <file>Principal.cpp</file>
    <file>Principal.h</file>
    <file>Principal.i</file>
    <file>Profile.cpp</file>
    <file>Profile.h</file>
    <file>Profile.i</file>
    <file>Profile_Transport_Resolver.cpp</file>
    <file>Profile_Transport_Resolver.h</file>
    <file>Profile_Transport_Resolver.inl</file>
    <file>Protocol_Factory.cpp</file>
    <file>Protocol_Factory.h</file>
    <file>Protocols_Hooks.cpp</file>
    <file>Protocols_Hooks.h</file>
    <file>Pseudo_VarOut_T.cpp</file>
    <file>Pseudo_VarOut_T.h</file>
    <file>Pseudo_VarOut_T.inl</file>
    <file>QtResource_Factory.cpp</file>
    <file>QtResource_Factory.h</file>
    <file>QtResource_Loader.cpp</file>
    <file>QtResource_Loader.h</file>
    <file>Queued_Message.cpp</file>
    <file>Queued_Message.h</file>
    <file>Queued_Message.inl</file>
    <file>Reactive_Connect_Strategy.cpp</file>
    <file>Reactive_Connect_Strategy.h</file>
    <file>Reactive_Flushing_Strategy.cpp</file>
    <file>Reactive_Flushing_Strategy.h</file>
    <file>RefCount_Policy_Traits.h</file>
    <file>Refcounted_ObjectKey.cpp</file>
    <file>Refcounted_ObjectKey.h</file>
    <file>Refcounted_ObjectKey.inl</file>
    <file>Remote_Invocation.cpp</file>
    <file>Remote_Invocation.h</file>
    <file>Remote_Object_Proxy_Broker.cpp</file>
    <file>Remote_Object_Proxy_Broker.h</file>
    <file>Reply_Dispatcher.cpp</file>
    <file>Reply_Dispatcher.h</file>
    <file>Reply_Dispatcher.i</file>
    <file>Request_Dispatcher.cpp</file>
    <file>Request_Dispatcher.h</file>
    <file>RequestInfo.pidl</file>
    <file>RequestInfo_Util.cpp</file>
    <file>RequestInfo_Util.h</file>
    <file>RequestInfoA.cpp</file>
    <file>RequestInfoC.cpp</file>
    <file>RequestInfoC.h</file>
    <file>RequestInfoS.h</file>
    <file>Resource_Factory.cpp</file>
    <file>Resource_Factory.h</file>
    <file>Resume_Handle.cpp</file>
    <file>Resume_Handle.h</file>
    <file>Resume_Handle.inl</file>
    <file>Seq_Out_T.cpp</file>
    <file>Seq_Out_T.h</file>
    <file>Seq_Out_T.inl</file>
    <file>Seq_Var_T.cpp</file>
    <file>Seq_Var_T.h</file>
    <file>Seq_Var_T.inl</file>
    <file>Sequence.cpp</file>
    <file>Sequence.h</file>
    <file>Sequence.i</file>
    <file>Sequence_T.cpp</file>
    <file>Sequence_T.h</file>
    <file>Sequence_T.i</file>
    <file>Sequence_TypeCode.cpp</file>
    <file>Sequence_TypeCode.h</file>
    <file>Sequence_TypeCode.inl</file>
    <file>Server_Strategy_Factory.cpp</file>
    <file>Server_Strategy_Factory.h</file>
    <file>ServerRequestInfo.pidl</file>
    <file>ServerRequestInfoA.cpp</file>
    <file>ServerRequestInfoC.cpp</file>
    <file>ServerRequestInfoC.h</file>
    <file>ServerRequestInfoS.h</file>
    <file>Service_Callbacks.cpp</file>
    <file>Service_Callbacks.h</file>
    <file>Service_Context.cpp</file>
    <file>Service_Context.h</file>
    <file>Service_Context.inl</file>
    <file>Services.pidl</file>
    <file>Services_Activate.cpp</file>
    <file>Services_Activate.h</file>
    <file>ServicesA.cpp</file>
    <file>ServicesC.cpp</file>
    <file>ServicesC.h</file>
    <file>ServicesS.h</file>
    <file>ServicesS_T.h</file>
    <file>ShortSeq.pidl</file>
    <file>ShortSeqA.cpp</file>
    <file>ShortSeqC.cpp</file>
    <file>ShortSeqC.h</file>
    <file>ShortSeqS.h</file>
    <file>skip.cpp</file>
    <file>Special_Basic_Argument_T.cpp</file>
    <file>Special_Basic_Argument_T.h</file>
    <file>Special_Basic_Argument_T.inl</file>
    <file>Special_Basic_Arguments.cpp</file>
    <file>Special_Basic_Arguments.h</file>
    <file>String_TypeCode.cpp</file>
    <file>String_TypeCode.h</file>
    <file>String_TypeCode.inl</file>
    <file>String_TypeCode_Traits.h</file>
    <file>StringSeq.pidl</file>
    <file>StringSeqA.cpp</file>
    <file>StringSeqC.cpp</file>
    <file>StringSeqC.h</file>
    <file>StringSeqS.h</file>
    <file>Struct_TypeCode.cpp</file>
    <file>Struct_TypeCode.h</file>
    <file>Struct_TypeCode.inl</file>
    <file>Stub.cpp</file>
    <file>Stub.h</file>
    <file>Stub.i</file>
    <file>Stub_Factory.cpp</file>
    <file>Stub_Factory.h</file>
    <file>Sync_Strategies.cpp</file>
    <file>Sync_Strategies.h</file>
    <file>Synch_Invocation.cpp</file>
    <file>Synch_Invocation.h</file>
    <file>Synch_Invocation.inl</file>
    <file>Synch_Queued_Message.cpp</file>
    <file>Synch_Queued_Message.h</file>
    <file>Synch_Refcountable.cpp</file>
    <file>Synch_Refcountable.h</file>
    <file>Synch_Refcountable.inl</file>
    <file>Synch_Reply_Dispatcher.cpp</file>
    <file>Synch_Reply_Dispatcher.h</file>
    <file>SystemException.cpp</file>
    <file>SystemException.h</file>
    <file>SystemException.inl</file>
    <file>SystemExceptionA.cpp</file>
    <file>Tagged_Components.cpp</file>
    <file>Tagged_Components.h</file>
    <file>Tagged_Components.i</file>
    <file>Tagged_Profile.cpp</file>
    <file>Tagged_Profile.h</file>
    <file>Tagged_Profile.i</file>
    <file>TAO.pidl</file>
    <file>TAO_Export.h</file>
    <file>TAO_FlResource_Export.h</file>
    <file>TAO_Internal.cpp</file>
    <file>TAO_Internal.h</file>
    <file>TAO_QtResource_Export.h</file>
    <file>TAO_Server_Request.cpp</file>
    <file>TAO_Server_Request.h</file>
    <file>TAO_Server_Request.i</file>
    <file>TAO_Singleton.cpp</file>
    <file>TAO_Singleton.h</file>
    <file>TAO_Singleton.inl</file>
    <file>TAO_Singleton_Manager.cpp</file>
    <file>TAO_Singleton_Manager.h</file>
    <file>TAO_Singleton_Manager.inl</file>
    <file>TAO_TkResource_Export.h</file>
    <file>TAO_XtResource_Export.h</file>
    <file>TAOA.cpp</file>
    <file>TAOC.cpp</file>
    <file>TAOC.h</file>
    <file>TAOS.h</file>
    <file>target_specification.cpp</file>
    <file>target_specification.h</file>
    <file>target_specification.i</file>
    <file>TC_Constants_Forward.h</file>
    <file>Thread_Lane_Resources.cpp</file>
    <file>Thread_Lane_Resources.h</file>
    <file>Thread_Lane_Resources_Manager.cpp</file>
    <file>Thread_Lane_Resources_Manager.h</file>
    <file>Thread_Per_Connection_Handler.cpp</file>
    <file>Thread_Per_Connection_Handler.h</file>
    <file>TimeBase.pidl</file>
    <file>TimeBaseA.cpp</file>
    <file>TimeBaseC.cpp</file>
    <file>TimeBaseC.h</file>
    <file>TimeBaseS.h</file>
    <file>Timeprobe.h</file>
    <file>TkResource_Factory.cpp</file>
    <file>TkResource_Factory.h</file>
    <file>TkResource_Loader.cpp</file>
    <file>TkResource_Loader.h</file>
    <file>Transport.cpp</file>
    <file>Transport.h</file>
    <file>Transport.inl</file>
    <file>Transport_Acceptor.cpp</file>
    <file>Transport_Acceptor.h</file>
    <file>Transport_Acceptor.inl</file>
    <file>Transport_Cache_Manager.cpp</file>
    <file>Transport_Cache_Manager.h</file>
    <file>Transport_Cache_Manager.inl</file>
    <file>Transport_Connector.cpp</file>
    <file>Transport_Connector.h</file>
    <file>Transport_Connector.inl</file>
    <file>Transport_Descriptor_Interface.cpp</file>
    <file>Transport_Descriptor_Interface.h</file>
    <file>Transport_Descriptor_Interface.inl</file>
    <file>Transport_Mux_Strategy.cpp</file>
    <file>Transport_Mux_Strategy.h</file>
    <file>Transport_Timer.cpp</file>
    <file>Transport_Timer.h</file>
    <file>True_RefCount_Policy.cpp</file>
    <file>True_RefCount_Policy.h</file>
    <file>True_RefCount_Policy.inl</file>
    <file>TSS_Resources.cpp</file>
    <file>TSS_Resources.h</file>
    <file>TypeCode.cpp</file>
    <file>TypeCode.h</file>
    <file>TypeCode.inl</file>
    <file>TypeCode_Base_Attributes.cpp</file>
    <file>TypeCode_Base_Attributes.h</file>
    <file>TypeCode_Base_Attributes.inl</file>
    <file>TypeCode_Case.cpp</file>
    <file>TypeCode_Case.h</file>
    <file>TypeCode_Case.inl</file>
    <file>TypeCode_CDR_Extraction.cpp</file>
    <file>TypeCode_CDR_Extraction.h</file>
    <file>TypeCode_Constants.cpp</file>
    <file>TypeCode_Constants.h</file>
    <file>TypeCode_Default_Case.cpp</file>
    <file>TypeCode_Default_Case.h</file>
    <file>TypeCode_Default_Case.inl</file>
    <file>TypeCode_Non_Default_Case.cpp</file>
    <file>TypeCode_Non_Default_Case.h</file>
    <file>TypeCode_Non_Default_Case.inl</file>
    <file>TypeCode_Struct_Field.h</file>
    <file>TypeCode_Traits.h</file>
    <file>Typecode_types.pidl</file>
    <file>Typecode_typesC.cpp</file>
    <file>Typecode_typesC.h</file>
    <file>Typecode_typesS.h</file>
    <file>TypeCode_Value_Field.h</file>
    <file>TypeCodeA.cpp</file>
    <file>TypeCodeFactory_Adapter.cpp</file>
    <file>TypeCodeFactory_Adapter.h</file>
    <file>UB_String_Argument_T.cpp</file>
    <file>UB_String_Argument_T.h</file>
    <file>UB_String_Argument_T.inl</file>
    <file>UB_String_Arguments.cpp</file>
    <file>UB_String_Arguments.h</file>
    <file>ULongLongSeq.pidl</file>
    <file>ULongLongSeqA.cpp</file>
    <file>ULongLongSeqC.cpp</file>
    <file>ULongLongSeqC.h</file>
    <file>ULongLongSeqS.h</file>
    <file>ULongSeq.pidl</file>
    <file>ULongSeqA.cpp</file>
    <file>ULongSeqC.cpp</file>
    <file>ULongSeqC.h</file>
    <file>ULongSeqS.h</file>
    <file>Union_TypeCode.cpp</file>
    <file>Union_TypeCode.h</file>
    <file>Union_TypeCode.inl</file>
    <file>UserException.cpp</file>
    <file>UserException.h</file>
    <file>UserException.inl</file>
    <file>UShortSeq.pidl</file>
    <file>UShortSeqA.cpp</file>
    <file>UShortSeqC.cpp</file>
    <file>UShortSeqC.h</file>
    <file>UShortSeqS.h</file>
    <file>UTF16_BOM_Factory.cpp</file>
    <file>UTF16_BOM_Factory.h</file>
    <file>UTF16_BOM_Translator.cpp</file>
    <file>UTF16_BOM_Translator.h</file>
    <file>Value_TypeCode.cpp</file>
    <file>Value_TypeCode.h</file>
    <file>Value_TypeCode.inl</file>
    <file>ValueModifier.pidl</file>
    <file>ValueModifierC.cpp</file>
    <file>ValueModifierC.h</file>
    <file>ValueModifierS.h</file>
    <file>Valuetype_Adapter.cpp</file>
    <file>Valuetype_Adapter.h</file>
    <file>Var_Array_Argument_T.cpp</file>
    <file>Var_Array_Argument_T.h</file>
    <file>Var_Array_Argument_T.inl</file>
    <file>Var_Size_Argument_T.cpp</file>
    <file>Var_Size_Argument_T.h</file>
    <file>Var_Size_Argument_T.inl</file>
    <file>varbase.h</file>
    <file>VarOut_T.cpp</file>
    <file>VarOut_T.h</file>
    <file>VarOut_T.inl</file>
    <file>Version.h</file>
    <file>Visibility.pidl</file>
    <file>VisibilityA.cpp</file>
    <file>VisibilityC.cpp</file>
    <file>VisibilityC.h</file>
    <file>VisibilityS.h</file>
    <file>Wait_On_Leader_Follower.cpp</file>
    <file>Wait_On_Leader_Follower.h</file>
    <file>Wait_On_LF_No_Upcall.cpp</file>
    <file>Wait_On_LF_No_Upcall.h</file>
    <file>Wait_On_Reactor.cpp</file>
    <file>Wait_On_Reactor.h</file>
    <file>Wait_On_Read.cpp</file>
    <file>Wait_On_Read.h</file>
    <file>Wait_Strategy.cpp</file>
    <file>Wait_Strategy.h</file>
    <file>Wait_Strategy.inl</file>
    <file>WCharSeq.pidl</file>
    <file>WCharSeqA.cpp</file>
    <file>WCharSeqC.cpp</file>
    <file>WCharSeqC.h</file>
    <file>WCharSeqS.h</file>
    <file>WrongTransaction.pidl</file>
    <file>WrongTransactionA.cpp</file>
    <file>WrongTransactionC.cpp</file>
    <file>WrongTransactionC.h</file>
    <file>WStringSeq.pidl</file>
    <file>WStringSeqA.cpp</file>
    <file>WStringSeqC.cpp</file>
    <file>WStringSeqC.h</file>
    <file>WStringSeqS.h</file>
    <file>XtResource_Factory.cpp</file>
    <file>XtResource_Factory.h</file>
    <file>XtResource_Loader.cpp</file>
    <file>XtResource_Loader.h</file>
  </compound>
  <compound kind="dir">
    <name>TAO/</name>
    <path>/web/www/Doxygen/staging_area/Current/ACE_wrappers/TAO/</path>
    <filename>dir_000000.html</filename>
    <dir>TAO/tao/</dir>
  </compound>
  <compound kind="namespace">
    <name>CONV_FRAME</name>
    <filename>namespaceCONV__FRAME.html</filename>
    <class kind="struct">CONV_FRAME::CodeSetComponent</class>
    <class kind="struct">CONV_FRAME::CodeSetComponentInfo</class>
    <class kind="struct">CONV_FRAME::CodeSetContext</class>
    <class kind="class">CONV_FRAME::CodeSetIdSeq</class>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>CodeSetId</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; CodeSetId &gt;</type>
      <name>CodeSetIdSeq</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::ULong_out</type>
      <name>CodeSetId_out</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; CodeSetIdSeq, CodeSetId &gt;</type>
      <name>CodeSetIdSeq_var</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; CodeSetIdSeq, CodeSetIdSeq_var, CodeSetId &gt;</type>
      <name>CodeSetIdSeq_out</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; CodeSetComponent &gt;</type>
      <name>CodeSetComponent_var</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; CodeSetComponent, CodeSetComponent_var &gt;</type>
      <name>CodeSetComponent_out</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; CodeSetComponentInfo &gt;</type>
      <name>CodeSetComponentInfo_var</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; CodeSetComponentInfo, CodeSetComponentInfo_var &gt;</type>
      <name>CodeSetComponentInfo_out</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Fixed_Var_T&lt; CodeSetContext &gt;</type>
      <name>CodeSetContext_var</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CodeSetContext &amp;</type>
      <name>CodeSetContext_out</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_CodeSetId</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_CodeSetIdSeq</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_CodeSetComponent</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_CodeSetComponentInfo</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_CodeSetContext</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CONV_FRAME::CodeSetComponent</name>
    <filename>structCONV__FRAME_1_1CodeSetComponent.html</filename>
    <member kind="typedef">
      <type>CodeSetComponent_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>CodeSetId</type>
      <name>native_code_set</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CodeSetIdSeq</type>
      <name>conversion_code_sets</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CONV_FRAME::CodeSetId</type>
      <name>native_code_set</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CONV_FRAME::CodeSetIdSeq</type>
      <name>conversion_code_sets</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CONV_FRAME::CodeSetComponentInfo</name>
    <filename>structCONV__FRAME_1_1CodeSetComponentInfo.html</filename>
    <member kind="typedef">
      <type>CodeSetComponentInfo_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>CodeSetComponent</type>
      <name>ForCharData</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CodeSetComponent</type>
      <name>ForWcharData</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CONV_FRAME::CodeSetComponent</type>
      <name>ForCharData</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CONV_FRAME::CodeSetComponent</type>
      <name>ForWcharData</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CONV_FRAME::CodeSetContext</name>
    <filename>structCONV__FRAME_1_1CodeSetContext.html</filename>
    <member kind="typedef">
      <type>CodeSetContext_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>CodeSetId</type>
      <name>char_data</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CodeSetId</type>
      <name>wchar_data</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CONV_FRAME::CodeSetId</type>
      <name>char_data</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CONV_FRAME::CodeSetId</type>
      <name>wchar_data</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CONV_FRAME::CodeSetIdSeq</name>
    <filename>classCONV__FRAME_1_1CodeSetIdSeq.html</filename>
    <base>TAO_Unbounded_Sequence&lt; CodeSetId &gt;</base>
    <member kind="typedef">
      <type>CodeSetIdSeq_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CodeSetIdSeq</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CodeSetIdSeq</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CodeSetIdSeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::ULong *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CodeSetIdSeq</name>
      <anchor>a3</anchor>
      <arglist>(const CodeSetIdSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CodeSetIdSeq</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>CORBA</name>
    <filename>namespaceCORBA.html</filename>
    <class kind="class">CORBA::Any</class>
    <class kind="struct">CORBA::Any::to_object</class>
    <class kind="struct">CORBA::Any::to_abstract_base</class>
    <class kind="struct">CORBA::Any::to_value</class>
    <class kind="class">CORBA::Any_var</class>
    <class kind="class">CORBA::Any_out</class>
    <class kind="class">CORBA::AnySeq</class>
    <class kind="class">CORBA::BooleanSeq</class>
    <class kind="exception">CORBA::Bounds</class>
    <class kind="class">CORBA::CharSeq</class>
    <class kind="class">CORBA::String_var</class>
    <class kind="class">CORBA::String_out</class>
    <class kind="class">CORBA::WString_var</class>
    <class kind="class">CORBA::WString_out</class>
    <class kind="interface">CORBA::Current</class>
    <class kind="interface">CORBA::DomainManager</class>
    <class kind="interface">CORBA::ConstructionPolicy</class>
    <class kind="class">CORBA::DomainManagerList</class>
    <class kind="class">CORBA::DoubleSeq</class>
    <class kind="class">CORBA::Environment</class>
    <class kind="class">CORBA::Exception</class>
    <class kind="class">CORBA::FloatSeq</class>
    <class kind="interface">CORBA::ORB</class>
    <class kind="exception">CORBA::ORB::InvalidName</class>
    <class kind="class">CORBA::LocalObject</class>
    <class kind="class">CORBA::LongDoubleSeq</class>
    <class kind="class">CORBA::LongLongSeq</class>
    <class kind="class">CORBA::LongSeq</class>
    <class kind="class">CORBA::NamedValue</class>
    <class kind="class">CORBA::NVList</class>
    <class kind="class">CORBA::Object</class>
    <class kind="class">CORBA::ORB_ObjectIdList</class>
    <class kind="class">CORBA::OctetSeq</class>
    <class kind="exception">CORBA::PolicyError</class>
    <class kind="exception">CORBA::InvalidPolicies</class>
    <class kind="interface">CORBA::Policy</class>
    <class kind="interface">CORBA::PolicyManager</class>
    <class kind="interface">CORBA::PolicyCurrent</class>
    <class kind="class">CORBA::PolicyList</class>
    <class kind="class">CORBA::PolicyTypeSeq</class>
    <class kind="interface">CORBA::Pollable</class>
    <class kind="interface">CORBA::DIIPollable</class>
    <class kind="interface">CORBA::PollableSet</class>
    <class kind="exception">CORBA::PollableSet::NoPossiblePollable</class>
    <class kind="exception">CORBA::PollableSet::UnknownPollable</class>
    <class kind="class">CORBA::Principal</class>
    <class kind="struct">CORBA::ServiceDetail</class>
    <class kind="struct">CORBA::ServiceInformation</class>
    <class kind="class">CORBA::ServiceOptionSeq</class>
    <class kind="class">CORBA::ServiceDetailSeq</class>
    <class kind="class">CORBA::ShortSeq</class>
    <class kind="class">CORBA::StringSeq</class>
    <class kind="class">CORBA::SystemException</class>
    <class kind="class">CORBA::TypeCode</class>
    <class kind="class">CORBA::TypeCode::Bounds</class>
    <class kind="class">CORBA::TypeCode::BadKind</class>
    <class kind="class">CORBA::ULongLongSeq</class>
    <class kind="class">CORBA::ULongSeq</class>
    <class kind="class">CORBA::UserException</class>
    <class kind="class">CORBA::UShortSeq</class>
    <class kind="class">CORBA::WCharSeq</class>
    <class kind="exception">CORBA::WrongTransaction</class>
    <class kind="class">CORBA::WStringSeq</class>
    <class kind="class">CORBA::CORBA::Any_var</class>
    <class kind="class">CORBA::CORBA::Any_out</class>
    <member kind="typedef">
      <type>ACE_CDR::Boolean</type>
      <name>Boolean</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Boolean &amp;</type>
      <name>Boolean_out</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_CDR::Octet</type>
      <name>Octet</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Octet &amp;</type>
      <name>Octet_out</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_CDR::Short</type>
      <name>Short</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Short &amp;</type>
      <name>Short_out</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_CDR::UShort</type>
      <name>UShort</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UShort &amp;</type>
      <name>UShort_out</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_CDR::Long</type>
      <name>Long</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Long &amp;</type>
      <name>Long_out</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_CDR::ULong</type>
      <name>ULong</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ULong &amp;</type>
      <name>ULong_out</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_CDR::LongLong</type>
      <name>LongLong</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LongLong &amp;</type>
      <name>LongLong_out</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_CDR::ULongLong</type>
      <name>ULongLong</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ULongLong &amp;</type>
      <name>ULongLong_out</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_CDR::Float</type>
      <name>Float</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Float &amp;</type>
      <name>Float_out</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_CDR::Double</type>
      <name>Double</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Double &amp;</type>
      <name>Double_out</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_CDR::LongDouble</type>
      <name>LongDouble</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LongDouble &amp;</type>
      <name>LongDouble_out</name>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_CDR::Char</type>
      <name>Char</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Char &amp;</type>
      <name>Char_out</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_CDR::WChar</type>
      <name>WChar</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WChar &amp;</type>
      <name>WChar_out</name>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export ORB_ptr</type>
      <name>ORB_init</name>
      <anchor>a345</anchor>
      <arglist>(int &amp;argc, char *argv[], const char *orb_name=0)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export ORB_ptr</type>
      <name>ORB_init</name>
      <anchor>a346</anchor>
      <arglist>(int &amp;argc, char *argv[], const char *orb_name, Environment &amp;ACE_TRY_ENV)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export char *</type>
      <name>string_alloc</name>
      <anchor>a361</anchor>
      <arglist>(ULong len)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export char *</type>
      <name>string_dup</name>
      <anchor>a362</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>string_free</name>
      <anchor>a363</anchor>
      <arglist>(char *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export WChar *</type>
      <name>wstring_alloc</name>
      <anchor>a364</anchor>
      <arglist>(ULong len)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export WChar *</type>
      <name>wstring_dup</name>
      <anchor>a365</anchor>
      <arglist>(const WChar *const)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>wstring_free</name>
      <anchor>a366</anchor>
      <arglist>(WChar *const)</arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_null</name>
      <anchor>a248</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_void</name>
      <anchor>a249</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_short</name>
      <anchor>a250</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_long</name>
      <anchor>a251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_ushort</name>
      <anchor>a252</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_ulong</name>
      <anchor>a253</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_float</name>
      <anchor>a254</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_double</name>
      <anchor>a255</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_boolean</name>
      <anchor>a256</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_char</name>
      <anchor>a257</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_octet</name>
      <anchor>a258</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_any</name>
      <anchor>a259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_TypeCode</name>
      <anchor>a260</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_Principal</name>
      <anchor>a261</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_Object</name>
      <anchor>a262</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_string</name>
      <anchor>a263</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_longlong</name>
      <anchor>a264</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_ulonglong</name>
      <anchor>a265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_longdouble</name>
      <anchor>a266</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_wchar</name>
      <anchor>a267</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_wstring</name>
      <anchor>a268</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TypeCode_ptr const</type>
      <name>_tc_Component</name>
      <anchor>a273</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TypeCode_ptr const</type>
      <name>_tc_Home</name>
      <anchor>a274</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InterfaceDef *</type>
      <name>InterfaceDef_ptr</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object *</type>
      <name>Object_ptr</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Var_T&lt; Object &gt;</type>
      <name>Object_var</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Out_T&lt; Object, Object_var &gt;</type>
      <name>Object_out</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Any *</type>
      <name>Any_ptr</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeCode *</type>
      <name>TypeCode_ptr</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractBase *</type>
      <name>AbstractBase_ptr</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; any &gt;</type>
      <name>AnySeq</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_VarSeq_Var_T&lt; AnySeq, CORBA::Any &gt;</type>
      <name>AnySeq_var</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; AnySeq, AnySeq_var, CORBA::Any &gt;</type>
      <name>AnySeq_out</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ORB *</type>
      <name>ORB_ptr</name>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; boolean &gt;</type>
      <name>BooleanSeq</name>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; BooleanSeq, CORBA::Boolean &gt;</type>
      <name>BooleanSeq_var</name>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; BooleanSeq, BooleanSeq_var, CORBA::Boolean &gt;</type>
      <name>BooleanSeq_out</name>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; char &gt;</type>
      <name>CharSeq</name>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; CharSeq, CORBA::Char &gt;</type>
      <name>CharSeq_var</name>
      <anchor>a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; CharSeq, CharSeq_var, CORBA::Char &gt;</type>
      <name>CharSeq_out</name>
      <anchor>a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Environment *</type>
      <name>Environment_ptr</name>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NamedValue *</type>
      <name>NamedValue_ptr</name>
      <anchor>a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NVList *</type>
      <name>NVList_ptr</name>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Principal *</type>
      <name>Principal_ptr</name>
      <anchor>a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OperationDef *</type>
      <name>OperationDef_ptr</name>
      <anchor>a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Current *</type>
      <name>Current_ptr</name>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; Current &gt;</type>
      <name>Current_var</name>
      <anchor>a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; Current &gt;</type>
      <name>Current_out</name>
      <anchor>a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; DomainManager &gt;</type>
      <name>DomainManagerList</name>
      <anchor>a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; InterfaceDef &gt;</type>
      <name>InterfaceDef_var</name>
      <anchor>a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; InterfaceDef &gt;</type>
      <name>InterfaceDef_out</name>
      <anchor>a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DomainManager *</type>
      <name>DomainManager_ptr</name>
      <anchor>a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; DomainManager &gt;</type>
      <name>DomainManager_var</name>
      <anchor>a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; DomainManager &gt;</type>
      <name>DomainManager_out</name>
      <anchor>a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstructionPolicy *</type>
      <name>ConstructionPolicy_ptr</name>
      <anchor>a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; ConstructionPolicy &gt;</type>
      <name>ConstructionPolicy_var</name>
      <anchor>a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; ConstructionPolicy &gt;</type>
      <name>ConstructionPolicy_out</name>
      <anchor>a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_MngSeq_Var_T&lt; DomainManagerList, TAO_Object_Manager&lt; DomainManager, DomainManager_var &gt; &gt;</type>
      <name>DomainManagerList_var</name>
      <anchor>a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_MngSeq_Out_T&lt; DomainManagerList, DomainManagerList_var, TAO_Object_Manager&lt; DomainManager, DomainManager_var &gt; &gt;</type>
      <name>DomainManagerList_out</name>
      <anchor>a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; double &gt;</type>
      <name>DoubleSeq</name>
      <anchor>a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; DoubleSeq, CORBA::Double &gt;</type>
      <name>DoubleSeq_var</name>
      <anchor>a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; DoubleSeq, DoubleSeq_var, CORBA::Double &gt;</type>
      <name>DoubleSeq_out</name>
      <anchor>a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExceptionList *</type>
      <name>ExceptionList_ptr</name>
      <anchor>a75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Request *</type>
      <name>Request_ptr</name>
      <anchor>a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Context *</type>
      <name>Context_ptr</name>
      <anchor>a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ServerRequest *</type>
      <name>ServerRequest_ptr</name>
      <anchor>a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ULong</type>
      <name>Flags</name>
      <anchor>a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Var_T&lt; Environment &gt;</type>
      <name>Environment_var</name>
      <anchor>a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Out_T&lt; Environment, Environment_var &gt;</type>
      <name>Environment_out</name>
      <anchor>a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; float &gt;</type>
      <name>FloatSeq</name>
      <anchor>a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; FloatSeq, CORBA::Float &gt;</type>
      <name>FloatSeq_var</name>
      <anchor>a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; FloatSeq, FloatSeq_var, CORBA::Float &gt;</type>
      <name>FloatSeq_out</name>
      <anchor>a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalObject *</type>
      <name>LocalObject_ptr</name>
      <anchor>a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Var_T&lt; LocalObject &gt;</type>
      <name>LocalObject_var</name>
      <anchor>a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Out_T&lt; LocalObject, LocalObject_var &gt;</type>
      <name>LocalObject_out</name>
      <anchor>a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; long double &gt;</type>
      <name>LongDoubleSeq</name>
      <anchor>a93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; LongDoubleSeq, CORBA::LongDouble &gt;</type>
      <name>LongDoubleSeq_var</name>
      <anchor>a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; LongDoubleSeq, LongDoubleSeq_var, CORBA::LongDouble &gt;</type>
      <name>LongDoubleSeq_out</name>
      <anchor>a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; long long &gt;</type>
      <name>LongLongSeq</name>
      <anchor>a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; LongLongSeq, CORBA::LongLong &gt;</type>
      <name>LongLongSeq_var</name>
      <anchor>a99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; LongLongSeq, LongLongSeq_var, CORBA::LongLong &gt;</type>
      <name>LongLongSeq_out</name>
      <anchor>a100</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; long &gt;</type>
      <name>LongSeq</name>
      <anchor>a101</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; LongSeq, CORBA::Long &gt;</type>
      <name>LongSeq_var</name>
      <anchor>a103</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; LongSeq, LongSeq_var, CORBA::Long &gt;</type>
      <name>LongSeq_out</name>
      <anchor>a104</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Var_T&lt; NamedValue &gt;</type>
      <name>NamedValue_var</name>
      <anchor>a105</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Out_T&lt; NamedValue, NamedValue_var &gt;</type>
      <name>NamedValue_out</name>
      <anchor>a106</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Var_T&lt; NVList &gt;</type>
      <name>NVList_var</name>
      <anchor>a107</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Out_T&lt; NVList, NVList_var &gt;</type>
      <name>NVList_out</name>
      <anchor>a108</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplementationDef *</type>
      <name>ImplementationDef_ptr</name>
      <anchor>a120</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContextList *</type>
      <name>ContextList_ptr</name>
      <anchor>a121</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>string</type>
      <name>ORB_ObjectId</name>
      <anchor>a122</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; ORB_ObjectId &gt;</type>
      <name>ORB_ObjectIdList</name>
      <anchor>a123</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_var</type>
      <name>ORB_ObjectId_var</name>
      <anchor>a126</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_out</type>
      <name>ORB_ObjectId_out</name>
      <anchor>a127</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_MngSeq_Var_T&lt; ORB_ObjectIdList, TAO_SeqElem_String_Manager &gt;</type>
      <name>ORB_ObjectIdList_var</name>
      <anchor>a128</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_MngSeq_Out_T&lt; ORB_ObjectIdList, ORB_ObjectIdList_var, TAO_SeqElem_String_Manager &gt;</type>
      <name>ORB_ObjectIdList_out</name>
      <anchor>a129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; octet &gt;</type>
      <name>OctetSeq</name>
      <anchor>a130</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; OctetSeq, CORBA::Octet &gt;</type>
      <name>OctetSeq_var</name>
      <anchor>a132</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; OctetSeq, OctetSeq_var, CORBA::Octet &gt;</type>
      <name>OctetSeq_out</name>
      <anchor>a133</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; ServiceInformation &gt;</type>
      <name>ServiceInformation_var</name>
      <anchor>a134</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; ServiceInformation, ServiceInformation_var &gt;</type>
      <name>ServiceInformation_out</name>
      <anchor>a135</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueFactoryBase *</type>
      <name>ValueFactory</name>
      <anchor>a136</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UShort</type>
      <name>ServiceType</name>
      <anchor>a137</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Var_T&lt; Request &gt;</type>
      <name>Request_var</name>
      <anchor>a138</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Out_T&lt; Request, Request_var &gt;</type>
      <name>Request_out</name>
      <anchor>a139</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Var_T&lt; ORB &gt;</type>
      <name>ORB_var</name>
      <anchor>a140</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Out_T&lt; ORB, ORB_var &gt;</type>
      <name>ORB_out</name>
      <anchor>a141</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::Short</type>
      <name>ValueModifier</name>
      <anchor>a142</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>string</type>
      <name>ORBid</name>
      <anchor>a144</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>string</type>
      <name>Identifier</name>
      <anchor>a145</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>string</type>
      <name>RepositoryId</name>
      <anchor>a146</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_var</type>
      <name>ORBid_var</name>
      <anchor>a151</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_out</type>
      <name>ORBid_out</name>
      <anchor>a152</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::ULong_out</type>
      <name>Flags_out</name>
      <anchor>a153</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_var</type>
      <name>Identifier_var</name>
      <anchor>a154</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_out</type>
      <name>Identifier_out</name>
      <anchor>a155</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_var</type>
      <name>RepositoryId_var</name>
      <anchor>a156</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_out</type>
      <name>RepositoryId_out</name>
      <anchor>a157</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParameterMode &amp;</type>
      <name>ParameterMode_out</name>
      <anchor>a162</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>PolicyErrorCode</name>
      <anchor>a163</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>PolicyType</name>
      <anchor>a169</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; Policy &gt;</type>
      <name>PolicyList</name>
      <anchor>a170</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; PolicyType &gt;</type>
      <name>PolicyTypeSeq</name>
      <anchor>a171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::ULong_out</type>
      <name>PolicyType_out</name>
      <anchor>a179</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Policy *</type>
      <name>Policy_ptr</name>
      <anchor>a180</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; Policy &gt;</type>
      <name>Policy_var</name>
      <anchor>a181</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; Policy &gt;</type>
      <name>Policy_out</name>
      <anchor>a182</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_MngSeq_Var_T&lt; PolicyList, TAO_Object_Manager&lt; Policy, Policy_var &gt; &gt;</type>
      <name>PolicyList_var</name>
      <anchor>a183</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_MngSeq_Out_T&lt; PolicyList, PolicyList_var, TAO_Object_Manager&lt; Policy, Policy_var &gt; &gt;</type>
      <name>PolicyList_out</name>
      <anchor>a184</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; PolicyTypeSeq, PolicyType &gt;</type>
      <name>PolicyTypeSeq_var</name>
      <anchor>a185</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; PolicyTypeSeq, PolicyTypeSeq_var, PolicyType &gt;</type>
      <name>PolicyTypeSeq_out</name>
      <anchor>a186</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PolicyCurrent *</type>
      <name>PolicyCurrent_ptr</name>
      <anchor>a187</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; PolicyCurrent &gt;</type>
      <name>PolicyCurrent_var</name>
      <anchor>a188</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; PolicyCurrent &gt;</type>
      <name>PolicyCurrent_out</name>
      <anchor>a189</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetOverrideType &amp;</type>
      <name>SetOverrideType_out</name>
      <anchor>a190</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::Short_out</type>
      <name>PolicyErrorCode_out</name>
      <anchor>a196</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PolicyManager *</type>
      <name>PolicyManager_ptr</name>
      <anchor>a197</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; PolicyManager &gt;</type>
      <name>PolicyManager_var</name>
      <anchor>a198</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; PolicyManager &gt;</type>
      <name>PolicyManager_out</name>
      <anchor>a199</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PollableSet *</type>
      <name>PollableSet_ptr</name>
      <anchor>a200</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; PollableSet &gt;</type>
      <name>PollableSet_var</name>
      <anchor>a201</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; PollableSet &gt;</type>
      <name>PollableSet_out</name>
      <anchor>a202</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pollable *</type>
      <name>Pollable_ptr</name>
      <anchor>a203</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; Pollable &gt;</type>
      <name>Pollable_var</name>
      <anchor>a204</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; Pollable &gt;</type>
      <name>Pollable_out</name>
      <anchor>a205</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DIIPollable *</type>
      <name>DIIPollable_ptr</name>
      <anchor>a206</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; DIIPollable &gt;</type>
      <name>DIIPollable_var</name>
      <anchor>a207</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; DIIPollable &gt;</type>
      <name>DIIPollable_out</name>
      <anchor>a208</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Var_T&lt; Principal &gt;</type>
      <name>Principal_var</name>
      <anchor>a209</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Out_T&lt; Principal, Principal_var &gt;</type>
      <name>Principal_out</name>
      <anchor>a210</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>ServiceOption</name>
      <anchor>a211</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>ServiceDetailType</name>
      <anchor>a212</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OctetSeq</type>
      <name>ServiceDetailData</name>
      <anchor>a213</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; ServiceOption &gt;</type>
      <name>ServiceOptionSeq</name>
      <anchor>a214</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; ServiceDetail &gt;</type>
      <name>ServiceDetailSeq</name>
      <anchor>a216</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::UShort_out</type>
      <name>ServiceType_out</name>
      <anchor>a225</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::ULong_out</type>
      <name>ServiceOption_out</name>
      <anchor>a226</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::ULong_out</type>
      <name>ServiceDetailType_out</name>
      <anchor>a227</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OctetSeq_var</type>
      <name>ServiceDetailData_var</name>
      <anchor>a228</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OctetSeq_out</type>
      <name>ServiceDetailData_out</name>
      <anchor>a229</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; ServiceOptionSeq, ServiceOption &gt;</type>
      <name>ServiceOptionSeq_var</name>
      <anchor>a230</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; ServiceOptionSeq, ServiceOptionSeq_var, ServiceOption &gt;</type>
      <name>ServiceOptionSeq_out</name>
      <anchor>a231</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; ServiceDetail &gt;</type>
      <name>ServiceDetail_var</name>
      <anchor>a232</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; ServiceDetail, ServiceDetail_var &gt;</type>
      <name>ServiceDetail_out</name>
      <anchor>a233</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_VarSeq_Var_T&lt; ServiceDetailSeq, ServiceDetail &gt;</type>
      <name>ServiceDetailSeq_var</name>
      <anchor>a234</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; ServiceDetailSeq, ServiceDetailSeq_var, ServiceDetail &gt;</type>
      <name>ServiceDetailSeq_out</name>
      <anchor>a235</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; short &gt;</type>
      <name>ShortSeq</name>
      <anchor>a236</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; ShortSeq, CORBA::Short &gt;</type>
      <name>ShortSeq_var</name>
      <anchor>a238</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; ShortSeq, ShortSeq_var, CORBA::Short &gt;</type>
      <name>ShortSeq_out</name>
      <anchor>a239</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; string &gt;</type>
      <name>StringSeq</name>
      <anchor>a240</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_MngSeq_Var_T&lt; StringSeq, TAO_SeqElem_String_Manager &gt;</type>
      <name>StringSeq_var</name>
      <anchor>a242</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_MngSeq_Out_T&lt; StringSeq, StringSeq_var, TAO_SeqElem_String_Manager &gt;</type>
      <name>StringSeq_out</name>
      <anchor>a243</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Var_T&lt; TypeCode &gt;</type>
      <name>TypeCode_var</name>
      <anchor>a271</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Pseudo_Out_T&lt; TypeCode, TypeCode_var &gt;</type>
      <name>TypeCode_out</name>
      <anchor>a272</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TCKind &amp;</type>
      <name>TCKind_out</name>
      <anchor>a312</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; unsigned long long &gt;</type>
      <name>ULongLongSeq</name>
      <anchor>a314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; ULongLongSeq, CORBA::ULongLong &gt;</type>
      <name>ULongLongSeq_var</name>
      <anchor>a316</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; ULongLongSeq, ULongLongSeq_var, CORBA::ULongLong &gt;</type>
      <name>ULongLongSeq_out</name>
      <anchor>a317</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; unsigned long &gt;</type>
      <name>ULongSeq</name>
      <anchor>a318</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; ULongSeq, CORBA::ULong &gt;</type>
      <name>ULongSeq_var</name>
      <anchor>a320</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; ULongSeq, ULongSeq_var, CORBA::ULong &gt;</type>
      <name>ULongSeq_out</name>
      <anchor>a321</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; unsigned short &gt;</type>
      <name>UShortSeq</name>
      <anchor>a322</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; UShortSeq, CORBA::UShort &gt;</type>
      <name>UShortSeq_var</name>
      <anchor>a324</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; UShortSeq, UShortSeq_var, CORBA::UShort &gt;</type>
      <name>UShortSeq_out</name>
      <anchor>a325</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::Short_out</type>
      <name>ValueModifier_out</name>
      <anchor>a330</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>Visibility</name>
      <anchor>a331</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::Short_out</type>
      <name>Visibility_out</name>
      <anchor>a335</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; wchar &gt;</type>
      <name>WCharSeq</name>
      <anchor>a336</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; WCharSeq, CORBA::WChar &gt;</type>
      <name>WCharSeq_var</name>
      <anchor>a338</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; WCharSeq, WCharSeq_var, CORBA::WChar &gt;</type>
      <name>WCharSeq_out</name>
      <anchor>a339</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; wstring &gt;</type>
      <name>WStringSeq</name>
      <anchor>a341</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_MngSeq_Var_T&lt; WStringSeq, TAO_SeqElem_WString_Manager &gt;</type>
      <name>WStringSeq_var</name>
      <anchor>a343</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_MngSeq_Out_T&lt; WStringSeq, WStringSeq_var, TAO_SeqElem_WString_Manager &gt;</type>
      <name>WStringSeq_out</name>
      <anchor>a344</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>exception_type</name>
      <anchor>a409</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_EXCEPTION</name>
      <anchor>a409a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USER_EXCEPTION</name>
      <anchor>a409a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SYSTEM_EXCEPTION</name>
      <anchor>a409a85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARG_IN</name>
      <anchor>a410a109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARG_OUT</name>
      <anchor>a410a110</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARG_INOUT</name>
      <anchor>a410a111</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_COPY_VALUE</name>
      <anchor>a410a112</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUT_LIST_MEMORY</name>
      <anchor>a410a113</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPENDENT_LIST</name>
      <anchor>a410a114</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CTX_RESTRICT_SCOPE</name>
      <anchor>a410a115</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CTX_DELETE_DESCENDENTS</name>
      <anchor>a410a116</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INV_NO_RESPONSE</name>
      <anchor>a410a117</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INV_TERM_ON_ERR</name>
      <anchor>a410a118</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESP_NO_WAIT</name>
      <anchor>a410a119</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ParameterMode</name>
      <anchor>a411</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_IN</name>
      <anchor>a412a158</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_OUT</name>
      <anchor>a412a159</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_INOUT</name>
      <anchor>a412a160</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ParameterMode</name>
      <anchor>a412</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_IN</name>
      <anchor>a412a158</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_OUT</name>
      <anchor>a412a159</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_INOUT</name>
      <anchor>a412a160</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SetOverrideType</name>
      <anchor>a413</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SET_OVERRIDE</name>
      <anchor>a414a172</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADD_OVERRIDE</name>
      <anchor>a414a173</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SetOverrideType</name>
      <anchor>a414</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SET_OVERRIDE</name>
      <anchor>a414a172</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADD_OVERRIDE</name>
      <anchor>a414a173</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>CompletionStatus</name>
      <anchor>a415</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMPLETED_YES</name>
      <anchor>a415a244</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMPLETED_NO</name>
      <anchor>a415a245</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMPLETED_MAYBE</name>
      <anchor>a415a246</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TCKind</name>
      <anchor>a416</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_null</name>
      <anchor>a417a275</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_void</name>
      <anchor>a417a276</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_short</name>
      <anchor>a417a277</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_long</name>
      <anchor>a417a278</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_ushort</name>
      <anchor>a417a279</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_ulong</name>
      <anchor>a417a280</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_float</name>
      <anchor>a417a281</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_double</name>
      <anchor>a417a282</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_boolean</name>
      <anchor>a417a283</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_char</name>
      <anchor>a417a284</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_octet</name>
      <anchor>a417a285</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_any</name>
      <anchor>a417a286</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_TypeCode</name>
      <anchor>a417a287</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_Principal</name>
      <anchor>a417a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_objref</name>
      <anchor>a417a289</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_struct</name>
      <anchor>a417a290</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_union</name>
      <anchor>a417a291</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_enum</name>
      <anchor>a417a292</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_string</name>
      <anchor>a417a293</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_sequence</name>
      <anchor>a417a294</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_array</name>
      <anchor>a417a295</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_alias</name>
      <anchor>a417a296</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_except</name>
      <anchor>a417a297</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_longlong</name>
      <anchor>a417a298</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_ulonglong</name>
      <anchor>a417a299</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_longdouble</name>
      <anchor>a417a300</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_wchar</name>
      <anchor>a417a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_wstring</name>
      <anchor>a417a302</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_fixed</name>
      <anchor>a417a303</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_value</name>
      <anchor>a417a304</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_value_box</name>
      <anchor>a417a305</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_native</name>
      <anchor>a417a306</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_abstract_interface</name>
      <anchor>a417a307</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_local_interface</name>
      <anchor>a417a308</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_component</name>
      <anchor>a417a309</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_home</name>
      <anchor>a417a310</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_event</name>
      <anchor>a417a311</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TCKind</name>
      <anchor>a417</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_null</name>
      <anchor>a417a275</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_void</name>
      <anchor>a417a276</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_short</name>
      <anchor>a417a277</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_long</name>
      <anchor>a417a278</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_ushort</name>
      <anchor>a417a279</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_ulong</name>
      <anchor>a417a280</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_float</name>
      <anchor>a417a281</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_double</name>
      <anchor>a417a282</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_boolean</name>
      <anchor>a417a283</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_char</name>
      <anchor>a417a284</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_octet</name>
      <anchor>a417a285</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_any</name>
      <anchor>a417a286</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_TypeCode</name>
      <anchor>a417a287</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_Principal</name>
      <anchor>a417a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_objref</name>
      <anchor>a417a289</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_struct</name>
      <anchor>a417a290</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_union</name>
      <anchor>a417a291</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_enum</name>
      <anchor>a417a292</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_string</name>
      <anchor>a417a293</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_sequence</name>
      <anchor>a417a294</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_array</name>
      <anchor>a417a295</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_alias</name>
      <anchor>a417a296</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_except</name>
      <anchor>a417a297</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_longlong</name>
      <anchor>a417a298</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_ulonglong</name>
      <anchor>a417a299</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_longdouble</name>
      <anchor>a417a300</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_wchar</name>
      <anchor>a417a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_wstring</name>
      <anchor>a417a302</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_fixed</name>
      <anchor>a417a303</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_value</name>
      <anchor>a417a304</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_value_box</name>
      <anchor>a417a305</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_native</name>
      <anchor>a417a306</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_abstract_interface</name>
      <anchor>a417a307</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_local_interface</name>
      <anchor>a417a308</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_component</name>
      <anchor>a417a309</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_home</name>
      <anchor>a417a310</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tk_event</name>
      <anchor>a417a311</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_TC_KIND_COUNT</name>
      <anchor>a417a313</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION Boolean</type>
      <name>is_nil</name>
      <anchor>a347</anchor>
      <arglist>(Environment_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION void</type>
      <name>release</name>
      <anchor>a348</anchor>
      <arglist>(Environment_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION Boolean</type>
      <name>is_nil</name>
      <anchor>a349</anchor>
      <arglist>(NamedValue_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION void</type>
      <name>release</name>
      <anchor>a350</anchor>
      <arglist>(NamedValue_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION Boolean</type>
      <name>is_nil</name>
      <anchor>a351</anchor>
      <arglist>(NVList_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION void</type>
      <name>release</name>
      <anchor>a352</anchor>
      <arglist>(NVList_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION Boolean</type>
      <name>is_nil</name>
      <anchor>a353</anchor>
      <arglist>(ORB_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION void</type>
      <name>release</name>
      <anchor>a354</anchor>
      <arglist>(ORB_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION Boolean</type>
      <name>is_nil</name>
      <anchor>a355</anchor>
      <arglist>(Object_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION void</type>
      <name>release</name>
      <anchor>a356</anchor>
      <arglist>(Object_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION Boolean</type>
      <name>is_nil</name>
      <anchor>a357</anchor>
      <arglist>(Principal_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION void</type>
      <name>release</name>
      <anchor>a358</anchor>
      <arglist>(Principal_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION Boolean</type>
      <name>is_nil</name>
      <anchor>a359</anchor>
      <arglist>(TypeCode_ptr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION void</type>
      <name>release</name>
      <anchor>a360</anchor>
      <arglist>(TypeCode_ptr)</arglist>
    </member>
    <member kind="function">
      <type>ACE_OSTREAM_TYPE &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a367</anchor>
      <arglist>(ACE_OSTREAM_TYPE &amp;os, const CORBA::Exception &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>ACE_OSTREAM_TYPE &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchor>a368</anchor>
      <arglist>(ACE_OSTREAM_TYPE &amp;os, const CORBA::Exception *e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a369</anchor>
      <arglist>(UNKNOWN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a370</anchor>
      <arglist>(BAD_PARAM)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a371</anchor>
      <arglist>(NO_MEMORY)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a372</anchor>
      <arglist>(IMP_LIMIT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a373</anchor>
      <arglist>(COMM_FAILURE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a374</anchor>
      <arglist>(INV_OBJREF)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a375</anchor>
      <arglist>(OBJECT_NOT_EXIST)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a376</anchor>
      <arglist>(NO_PERMISSION)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a377</anchor>
      <arglist>(INTERNAL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a378</anchor>
      <arglist>(MARSHAL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a379</anchor>
      <arglist>(INITIALIZE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a380</anchor>
      <arglist>(NO_IMPLEMENT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a381</anchor>
      <arglist>(BAD_TYPECODE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a382</anchor>
      <arglist>(BAD_OPERATION)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a383</anchor>
      <arglist>(NO_RESOURCES)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a384</anchor>
      <arglist>(NO_RESPONSE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a385</anchor>
      <arglist>(PERSIST_STORE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a386</anchor>
      <arglist>(BAD_INV_ORDER)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a387</anchor>
      <arglist>(TRANSIENT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a388</anchor>
      <arglist>(FREE_MEM)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a389</anchor>
      <arglist>(INV_IDENT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a390</anchor>
      <arglist>(INV_FLAG)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a391</anchor>
      <arglist>(INTF_REPOS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a392</anchor>
      <arglist>(BAD_CONTEXT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a393</anchor>
      <arglist>(OBJ_ADAPTER)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a394</anchor>
      <arglist>(DATA_CONVERSION)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a395</anchor>
      <arglist>(INV_POLICY)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a396</anchor>
      <arglist>(REBIND)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a397</anchor>
      <arglist>(TIMEOUT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a398</anchor>
      <arglist>(TRANSACTION_UNAVAILABLE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a399</anchor>
      <arglist>(TRANSACTION_MODE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a400</anchor>
      <arglist>(TRANSACTION_REQUIRED)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a401</anchor>
      <arglist>(TRANSACTION_ROLLEDBACK)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a402</anchor>
      <arglist>(INVALID_TRANSACTION)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a403</anchor>
      <arglist>(CODESET_INCOMPATIBLE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a404</anchor>
      <arglist>(BAD_QOS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a405</anchor>
      <arglist>(INVALID_ACTIVITY)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a406</anchor>
      <arglist>(ACTIVITY_COMPLETED)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a407</anchor>
      <arglist>(ACTIVITY_REQUIRED)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_SYSTEM_EXCEPTION</name>
      <anchor>a408</anchor>
      <arglist>(THREAD_CANCELLED)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_AnySeq</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_BooleanSeq</name>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_Bounds</name>
      <anchor>a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_CharSeq</name>
      <anchor>a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_Current</name>
      <anchor>a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PolicyType</type>
      <name>SecConstruction</name>
      <anchor>a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_DomainManager</name>
      <anchor>a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ConstructionPolicy</name>
      <anchor>a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_DomainManagerList</name>
      <anchor>a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_DoubleSeq</name>
      <anchor>a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr</type>
      <name>_tc_exception_type</name>
      <anchor>a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_FloatSeq</name>
      <anchor>a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_LongDoubleSeq</name>
      <anchor>a94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_LongLongSeq</name>
      <anchor>a98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_LongSeq</name>
      <anchor>a102</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ORB_ObjectId</name>
      <anchor>a124</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ORB_ObjectIdList</name>
      <anchor>a125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_OctetSeq</name>
      <anchor>a131</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ULong</type>
      <name>OMGVMCID</name>
      <anchor>a143</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ORBid</name>
      <anchor>a147</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_Flags</name>
      <anchor>a148</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_Identifier</name>
      <anchor>a149</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_RepositoryId</name>
      <anchor>a150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ParameterMode</name>
      <anchor>a161</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PolicyErrorCode</type>
      <name>BAD_POLICY</name>
      <anchor>a164</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PolicyErrorCode</type>
      <name>UNSUPPORTED_POLICY</name>
      <anchor>a165</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PolicyErrorCode</type>
      <name>BAD_POLICY_TYPE</name>
      <anchor>a166</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PolicyErrorCode</type>
      <name>BAD_POLICY_VALUE</name>
      <anchor>a167</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PolicyErrorCode</type>
      <name>UNSUPPORTED_POLICY_VALUE</name>
      <anchor>a168</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_PolicyType</name>
      <anchor>a174</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>extern::CORBA::TypeCode_ptr const</type>
      <name>_tc_Policy</name>
      <anchor>a175</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_PolicyList</name>
      <anchor>a176</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_PolicyTypeSeq</name>
      <anchor>a177</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_SetOverrideType</name>
      <anchor>a178</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_PolicyErrorCode</name>
      <anchor>a191</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_PolicyError</name>
      <anchor>a192</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_InvalidPolicies</name>
      <anchor>a193</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_PolicyManager</name>
      <anchor>a194</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_PolicyCurrent</name>
      <anchor>a195</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceType</type>
      <name>Security</name>
      <anchor>a215</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServiceType</name>
      <anchor>a217</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServiceOption</name>
      <anchor>a218</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServiceDetailType</name>
      <anchor>a219</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServiceDetailData</name>
      <anchor>a220</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServiceOptionSeq</name>
      <anchor>a221</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServiceDetail</name>
      <anchor>a222</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServiceDetailSeq</name>
      <anchor>a223</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServiceInformation</name>
      <anchor>a224</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ShortSeq</name>
      <anchor>a237</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_StringSeq</name>
      <anchor>a241</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TypeCode_ptr const</type>
      <name>_tc_CompletionStatus</name>
      <anchor>a247</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_SYSTEM_EXCEPTION_LIST TAO_Export TypeCode_ptr const</type>
      <name>_tc_UnknownUserException</name>
      <anchor>a269</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Export TypeCode_ptr const</type>
      <name>_tc_NamedValue</name>
      <anchor>a270</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ULongLongSeq</name>
      <anchor>a315</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ULongSeq</name>
      <anchor>a319</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_UShortSeq</name>
      <anchor>a323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ValueModifier</type>
      <name>VM_NONE</name>
      <anchor>a326</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ValueModifier</type>
      <name>VM_CUSTOM</name>
      <anchor>a327</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ValueModifier</type>
      <name>VM_ABSTRACT</name>
      <anchor>a328</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ValueModifier</type>
      <name>VM_TRUNCATABLE</name>
      <anchor>a329</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Visibility</type>
      <name>PRIVATE_MEMBER</name>
      <anchor>a332</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Visibility</type>
      <name>PUBLIC_MEMBER</name>
      <anchor>a333</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_Visibility</name>
      <anchor>a334</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_WCharSeq</name>
      <anchor>a337</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_WrongTransaction</name>
      <anchor>a340</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_WStringSeq</name>
      <anchor>a342</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::Any</name>
    <filename>classCORBA_1_1Any.html</filename>
    <member kind="typedef">
      <type>Any_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Any_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_OutputCDR::from_boolean</type>
      <name>from_boolean</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_OutputCDR::from_octet</type>
      <name>from_octet</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_OutputCDR::from_char</type>
      <name>from_char</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_OutputCDR::from_wchar</type>
      <name>from_wchar</name>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_OutputCDR::from_string</type>
      <name>from_string</name>
      <anchor>w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_OutputCDR::from_wstring</type>
      <name>from_wstring</name>
      <anchor>w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_InputCDR::to_boolean</type>
      <name>to_boolean</name>
      <anchor>w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_InputCDR::to_char</type>
      <name>to_char</name>
      <anchor>w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_InputCDR::to_wchar</type>
      <name>to_wchar</name>
      <anchor>w10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_InputCDR::to_octet</type>
      <name>to_octet</name>
      <anchor>w11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_InputCDR::to_string</type>
      <name>to_string</name>
      <anchor>w12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_InputCDR::to_wstring</type>
      <name>to_wstring</name>
      <anchor>w13</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Any</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Any</name>
      <anchor>a1</anchor>
      <arglist>(const Any &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Any</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Any &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Any &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TAO::Any_Impl *</type>
      <name>impl</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a5</anchor>
      <arglist>(from_boolean)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a6</anchor>
      <arglist>(from_char)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a7</anchor>
      <arglist>(from_wchar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a8</anchor>
      <arglist>(from_octet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a9</anchor>
      <arglist>(from_string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>a10</anchor>
      <arglist>(from_wstring)</arglist>
    </member>
    <member kind="function">
      <type>Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a11</anchor>
      <arglist>(to_boolean) const </arglist>
    </member>
    <member kind="function">
      <type>Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a12</anchor>
      <arglist>(to_octet) const </arglist>
    </member>
    <member kind="function">
      <type>Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a13</anchor>
      <arglist>(to_char) const </arglist>
    </member>
    <member kind="function">
      <type>Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a14</anchor>
      <arglist>(to_wchar) const </arglist>
    </member>
    <member kind="function">
      <type>Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a15</anchor>
      <arglist>(to_string) const </arglist>
    </member>
    <member kind="function">
      <type>Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a16</anchor>
      <arglist>(to_wstring) const </arglist>
    </member>
    <member kind="function">
      <type>Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a17</anchor>
      <arglist>(to_object) const </arglist>
    </member>
    <member kind="function">
      <type>Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a18</anchor>
      <arglist>(to_abstract_base) const </arglist>
    </member>
    <member kind="function">
      <type>Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>a19</anchor>
      <arglist>(to_value) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchor>a20</anchor>
      <arglist>(TAO::Any_Impl *)</arglist>
    </member>
    <member kind="function">
      <type>TypeCode_ptr</type>
      <name>type</name>
      <anchor>a21</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>type</name>
      <anchor>a22</anchor>
      <arglist>(TypeCode_ptr ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>_tao_get_typecode</name>
      <anchor>a23</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_tao_set_typecode</name>
      <anchor>a24</anchor>
      <arglist>(const CORBA::TypeCode_ptr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>_tao_byte_order</name>
      <anchor>a25</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>value</name>
      <anchor>a26</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>CORBA::Boolean</type>
      <name>checked_to_object</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::Object_ptr &amp;) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>CORBA::Boolean</type>
      <name>checked_to_value</name>
      <anchor>d1</anchor>
      <arglist>(CORBA::ValueBase *&amp;) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>CORBA::Boolean</type>
      <name>checked_to_abstract_base</name>
      <anchor>d2</anchor>
      <arglist>(CORBA::AbstractBase_ptr &amp;) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator&lt;&lt;=</name>
      <anchor>d3</anchor>
      <arglist>(unsigned char)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>CORBA::Boolean</type>
      <name>operator&gt;&gt;=</name>
      <anchor>d4</anchor>
      <arglist>(unsigned char &amp;) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO::Any_Impl *</type>
      <name>impl_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CORBA_NVList</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>TAO_Marshal_Any</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CORBA::Any::to_abstract_base</name>
    <filename>structCORBA_1_1Any_1_1to__abstract__base.html</filename>
    <member kind="function">
      <type></type>
      <name>to_abstract_base</name>
      <anchor>a0</anchor>
      <arglist>(AbstractBase_ptr &amp;obj)</arglist>
    </member>
    <member kind="variable">
      <type>AbstractBase_ptr &amp;</type>
      <name>ref_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CORBA::Any::to_object</name>
    <filename>structCORBA_1_1Any_1_1to__object.html</filename>
    <member kind="function">
      <type></type>
      <name>to_object</name>
      <anchor>a0</anchor>
      <arglist>(Object_out obj)</arglist>
    </member>
    <member kind="variable">
      <type>Object_ptr &amp;</type>
      <name>ref_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CORBA::Any::to_value</name>
    <filename>structCORBA_1_1Any_1_1to__value.html</filename>
    <member kind="function">
      <type></type>
      <name>to_value</name>
      <anchor>a0</anchor>
      <arglist>(ValueBase *&amp;base)</arglist>
    </member>
    <member kind="variable">
      <type>ValueBase *&amp;</type>
      <name>ref_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CORBA::Any::to_object</name>
    <filename>structCORBA_1_1Any_1_1to__object.html</filename>
    <member kind="function">
      <type></type>
      <name>to_object</name>
      <anchor>a0</anchor>
      <arglist>(Object_out obj)</arglist>
    </member>
    <member kind="variable">
      <type>Object_ptr &amp;</type>
      <name>ref_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CORBA::Any::to_abstract_base</name>
    <filename>structCORBA_1_1Any_1_1to__abstract__base.html</filename>
    <member kind="function">
      <type></type>
      <name>to_abstract_base</name>
      <anchor>a0</anchor>
      <arglist>(AbstractBase_ptr &amp;obj)</arglist>
    </member>
    <member kind="variable">
      <type>AbstractBase_ptr &amp;</type>
      <name>ref_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CORBA::Any::to_value</name>
    <filename>structCORBA_1_1Any_1_1to__value.html</filename>
    <member kind="function">
      <type></type>
      <name>to_value</name>
      <anchor>a0</anchor>
      <arglist>(ValueBase *&amp;base)</arglist>
    </member>
    <member kind="variable">
      <type>ValueBase *&amp;</type>
      <name>ref_</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::Any_var</name>
    <filename>classCORBA_1_1Any__var.html</filename>
    <member kind="function">
      <type></type>
      <name>Any_var</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Any_var</name>
      <anchor>a1</anchor>
      <arglist>(Any *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Any_var</name>
      <anchor>a2</anchor>
      <arglist>(const Any_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Any_var</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Any_var &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(Any *)</arglist>
    </member>
    <member kind="function">
      <type>Any_var &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(const Any_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Any *</type>
      <name>operator-&gt;</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Any *</name>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Any *&amp;</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Any &amp;</type>
      <name>in</name>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Any &amp;</type>
      <name>inout</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Any *&amp;</type>
      <name>out</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Any *</type>
      <name>_retn</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Any *</type>
      <name>ptr</name>
      <anchor>a13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Any *</type>
      <name>ptr_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::Any_out</name>
    <filename>classCORBA_1_1Any__out.html</filename>
    <member kind="function">
      <type></type>
      <name>Any_out</name>
      <anchor>a0</anchor>
      <arglist>(Any *&amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Any_out</name>
      <anchor>a1</anchor>
      <arglist>(Any_var &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Any_out</name>
      <anchor>a2</anchor>
      <arglist>(const Any_out &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Any_out &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Any_out &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Any_out &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(Any *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Any *&amp;</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Any *&amp;</type>
      <name>ptr</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Any *</type>
      <name>operator-&gt;</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d0</anchor>
      <arglist>(const Any_var &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Any *&amp;</type>
      <name>ptr_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::AnySeq</name>
    <filename>classCORBA_1_1AnySeq.html</filename>
    <base>TAO_Unbounded_Sequence&lt; CORBA::Any &gt;</base>
    <member kind="typedef">
      <type>AnySeq_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnySeq</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnySeq</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnySeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::Any *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnySeq</name>
      <anchor>a3</anchor>
      <arglist>(const AnySeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AnySeq</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::BooleanSeq</name>
    <filename>classCORBA_1_1BooleanSeq.html</filename>
    <base>TAO_Unbounded_Sequence&lt; CORBA::Boolean &gt;</base>
    <member kind="typedef">
      <type>BooleanSeq_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BooleanSeq</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BooleanSeq</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BooleanSeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::Boolean *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BooleanSeq</name>
      <anchor>a3</anchor>
      <arglist>(const BooleanSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BooleanSeq</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>CORBA::Bounds</name>
    <filename>exceptionCORBA_1_1Bounds.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>Bounds</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Bounds</name>
      <anchor>a1</anchor>
      <arglist>(const Bounds &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Bounds</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Bounds &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const Bounds &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>_tao_type</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Bounds *</type>
      <name>_downcast</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Exception *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const Bounds *</type>
      <name>_downcast</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Exception const *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::CharSeq</name>
    <filename>classCORBA_1_1CharSeq.html</filename>
    <base>TAO_Unbounded_Sequence&lt; CORBA::Char &gt;</base>
    <member kind="typedef">
      <type>CharSeq_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CharSeq</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CharSeq</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CharSeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::Char *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CharSeq</name>
      <anchor>a3</anchor>
      <arglist>(const CharSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CharSeq</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::String_var</name>
    <filename>classCORBA_1_1String__var.html</filename>
    <member kind="function">
      <type></type>
      <name>String_var</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String_var</name>
      <anchor>a1</anchor>
      <arglist>(char *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String_var</name>
      <anchor>a2</anchor>
      <arglist>(const char *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String_var</name>
      <anchor>a3</anchor>
      <arglist>(const String_var &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~String_var</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>String_var &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(char *p)</arglist>
    </member>
    <member kind="function">
      <type>String_var &amp;</type>
      <name>operator=</name>
      <anchor>a6</anchor>
      <arglist>(const char *p)</arglist>
    </member>
    <member kind="function">
      <type>String_var &amp;</type>
      <name>operator=</name>
      <anchor>a7</anchor>
      <arglist>(const String_var &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator char *&amp;</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char &amp;</type>
      <name>operator[]</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::ULong slot)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>operator[]</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::ULong slot) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>in</name>
      <anchor>a12</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>char *&amp;</type>
      <name>inout</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>char *&amp;</type>
      <name>out</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>_retn</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>ptr</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>ptr_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::String_out</name>
    <filename>classCORBA_1_1String__out.html</filename>
    <member kind="function">
      <type></type>
      <name>String_out</name>
      <anchor>a0</anchor>
      <arglist>(char *&amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String_out</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::String_var &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String_out</name>
      <anchor>a2</anchor>
      <arglist>(TAO_String_Manager &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String_out</name>
      <anchor>a3</anchor>
      <arglist>(const String_out &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>String_out &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const String_out &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>String_out &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(char *p)</arglist>
    </member>
    <member kind="function">
      <type>String_out &amp;</type>
      <name>operator=</name>
      <anchor>a6</anchor>
      <arglist>(const char *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator char *&amp;</name>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char *&amp;</type>
      <name>ptr</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d0</anchor>
      <arglist>(const CORBA::String_var &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *&amp;</type>
      <name>ptr_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::WString_var</name>
    <filename>classCORBA_1_1WString__var.html</filename>
    <member kind="function">
      <type></type>
      <name>WString_var</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WString_var</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::WChar *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WString_var</name>
      <anchor>a2</anchor>
      <arglist>(const CORBA::WChar *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WString_var</name>
      <anchor>a3</anchor>
      <arglist>(const WString_var &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WString_var</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>WString_var &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::WChar *p)</arglist>
    </member>
    <member kind="function">
      <type>WString_var &amp;</type>
      <name>operator=</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::WChar *p)</arglist>
    </member>
    <member kind="function">
      <type>WString_var &amp;</type>
      <name>operator=</name>
      <anchor>a7</anchor>
      <arglist>(const WString_var &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA::WChar *&amp;</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CORBA::WChar *</name>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar &amp;</type>
      <name>operator[]</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::ULong slot)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar</type>
      <name>operator[]</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::ULong slot) const </arglist>
    </member>
    <member kind="function">
      <type>const CORBA::WChar *</type>
      <name>in</name>
      <anchor>a12</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar *&amp;</type>
      <name>inout</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar *&amp;</type>
      <name>out</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar *</type>
      <name>_retn</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar *</type>
      <name>ptr</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::WChar *</type>
      <name>ptr_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::WString_out</name>
    <filename>classCORBA_1_1WString__out.html</filename>
    <member kind="function">
      <type></type>
      <name>WString_out</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::WChar *&amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WString_out</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::WString_var &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WString_out</name>
      <anchor>a2</anchor>
      <arglist>(TAO_WString_Manager &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WString_out</name>
      <anchor>a3</anchor>
      <arglist>(const WString_out &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>WString_out &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const WString_out &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>WString_out &amp;</type>
      <name>operator=</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::WChar *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CORBA::WChar *&amp;</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CORBA::WChar *&amp;</type>
      <name>ptr</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d0</anchor>
      <arglist>(const CORBA::WString_var &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::WChar *&amp;</type>
      <name>ptr_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>CORBA::Current</name>
    <filename>interfaceCORBA_1_1Current.html</filename>
    <base virtualness="virtual">CORBA::Object</base>
    <member kind="typedef">
      <type>Current_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Current_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a0</anchor>
      <arglist>(const char *type_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Current_ptr</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(Current_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_release</name>
      <anchor>e1</anchor>
      <arglist>(Current_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Current_ptr</type>
      <name>_narrow</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Current_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>e3</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Current_ptr</type>
      <name>_nil</name>
      <anchor>e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e5</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Current</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Current</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Current</name>
      <anchor>d0</anchor>
      <arglist>(const Current &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const Current &amp;)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>CORBA::DomainManager</name>
    <filename>interfaceCORBA_1_1DomainManager.html</filename>
    <base virtualness="virtual">CORBA::Object</base>
    <member kind="typedef">
      <type>DomainManager_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DomainManager_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Policy</type>
      <name>get_domain_policy</name>
      <anchor>a0</anchor>
      <arglist>(in PolicyType policy_type)</arglist>
    </member>
    <member kind="function">
      <type>virtual ::CORBA::Policy_ptr</type>
      <name>get_domain_policy</name>
      <anchor>a1</anchor>
      <arglist>(::CORBA::PolicyType policy_type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a2</anchor>
      <arglist>(const char *type_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a4</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>DomainManager_ptr</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(DomainManager_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_release</name>
      <anchor>e1</anchor>
      <arglist>(DomainManager_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>DomainManager_ptr</type>
      <name>_narrow</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>DomainManager_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>e3</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>DomainManager_ptr</type>
      <name>_nil</name>
      <anchor>e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e5</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DomainManager</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>CORBA_DomainManager_setup_collocation</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DomainManager</name>
      <anchor>b2</anchor>
      <arglist>(IOP::IOR *ior, TAO_ORB_Core *orb_core=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DomainManager</name>
      <anchor>b3</anchor>
      <arglist>(TAO_Stub *objref, CORBA::Boolean _tao_collocated=0, TAO_Abstract_ServantBase *servant=0, TAO_ORB_Core *orb_core=0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~DomainManager</name>
      <anchor>b4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DomainManager</name>
      <anchor>d0</anchor>
      <arglist>(const DomainManager &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const DomainManager &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO::Collocation_Proxy_Broker *</type>
      <name>the_TAO_DomainManager_Proxy_Broker_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TAO::Narrow_Utils&lt;DomainManager&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>CORBA::ConstructionPolicy</name>
    <filename>interfaceCORBA_1_1ConstructionPolicy.html</filename>
    <base virtualness="virtual">CORBA::Policy</base>
    <base>CORBA::Policy</base>
    <member kind="typedef">
      <type>ConstructionPolicy_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstructionPolicy_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>make_domain_manager</name>
      <anchor>a0</anchor>
      <arglist>(in InterfaceDef object_type, in boolean constr_policy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>make_domain_manager</name>
      <anchor>a1</anchor>
      <arglist>(::CORBA::InterfaceDef_ptr object_type,::CORBA::Boolean constr_policy ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a2</anchor>
      <arglist>(const char *type_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a4</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ConstructionPolicy_ptr</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(ConstructionPolicy_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_release</name>
      <anchor>e1</anchor>
      <arglist>(ConstructionPolicy_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ConstructionPolicy_ptr</type>
      <name>_narrow</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ConstructionPolicy_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>e3</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ConstructionPolicy_ptr</type>
      <name>_nil</name>
      <anchor>e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e5</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConstructionPolicy</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>CORBA_ConstructionPolicy_setup_collocation</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConstructionPolicy</name>
      <anchor>b2</anchor>
      <arglist>(IOP::IOR *ior, TAO_ORB_Core *orb_core=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConstructionPolicy</name>
      <anchor>b3</anchor>
      <arglist>(TAO_Stub *objref, CORBA::Boolean _tao_collocated=0, TAO_Abstract_ServantBase *servant=0, TAO_ORB_Core *orb_core=0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstructionPolicy</name>
      <anchor>b4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ConstructionPolicy</name>
      <anchor>d0</anchor>
      <arglist>(const ConstructionPolicy &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const ConstructionPolicy &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO::Collocation_Proxy_Broker *</type>
      <name>the_TAO_ConstructionPolicy_Proxy_Broker_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TAO::Narrow_Utils&lt;ConstructionPolicy&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::DomainManagerList</name>
    <filename>classCORBA_1_1DomainManagerList.html</filename>
    <base>TAO_Unbounded_Object_Sequence&lt; DomainManager, DomainManager_var &gt;</base>
    <member kind="typedef">
      <type>DomainManagerList_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DomainManagerList</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DomainManagerList</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DomainManagerList</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, DomainManager_ptr *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DomainManagerList</name>
      <anchor>a3</anchor>
      <arglist>(const DomainManagerList &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DomainManagerList</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::DoubleSeq</name>
    <filename>classCORBA_1_1DoubleSeq.html</filename>
    <base>TAO_Unbounded_Sequence&lt; CORBA::Double &gt;</base>
    <member kind="typedef">
      <type>DoubleSeq_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoubleSeq</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoubleSeq</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoubleSeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::Double *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoubleSeq</name>
      <anchor>a3</anchor>
      <arglist>(const DoubleSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DoubleSeq</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::Environment</name>
    <filename>classCORBA_1_1Environment.html</filename>
    <member kind="typedef">
      <type>CORBA::Environment_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::Environment_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Environment</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Environment</name>
      <anchor>a1</anchor>
      <arglist>(const Environment &amp;ACE_TRY_ENV)</arglist>
    </member>
    <member kind="function">
      <type>Environment &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(const Environment &amp;ACE_TRY_ENV)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Environment</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>exception_type</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>exception_id</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_exception</name>
      <anchor>a7</anchor>
      <arglist>(const char *info, FILE *f=stdout) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>Environment *</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(Environment *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Environment *</type>
      <name>_nil</name>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Environment &amp;</type>
      <name>default_environment</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Exception *exception void</type>
      <name>const</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void exception CORBA::Exception *</type>
      <name>ex</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Environment</name>
      <anchor>d0</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Exception *</type>
      <name>exception_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Environment *</type>
      <name>previous_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::Exception</name>
    <filename>classCORBA_1_1Exception.html</filename>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchor>a0</anchor>
      <arglist>(const Exception &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>Exception &amp;</type>
      <name>operator=</name>
      <anchor>a1</anchor>
      <arglist>(const Exception &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchor>a2</anchor>
      <arglist>(const char *repository_id, const char *local_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Exception</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a4</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_rep_id</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_name</name>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>_tao_type</name>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>_is_a</name>
      <anchor>a8</anchor>
      <arglist>(const char *repository_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_tao_print_exception</name>
      <anchor>a9</anchor>
      <arglist>(const char *info, FILE *f=stdout) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ACE_CString</type>
      <name>_info</name>
      <anchor>a10</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a11</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr ACE_ENV_ARG_DECL_NOT_USED) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a12</anchor>
      <arglist>(TAO_InputCDR &amp;cdr ACE_ENV_ARG_DECL_NOT_USED)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a13</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Exception *</type>
      <name>_downcast</name>
      <anchor>e0</anchor>
      <arglist>(Exception *x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Exception const *</type>
      <name>_downcast</name>
      <anchor>e1</anchor>
      <arglist>(Exception const *x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e2</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Exception</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::String_var</type>
      <name>id_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::String_var</type>
      <name>name_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::FloatSeq</name>
    <filename>classCORBA_1_1FloatSeq.html</filename>
    <base>TAO_Unbounded_Sequence&lt; CORBA::Float &gt;</base>
    <member kind="typedef">
      <type>FloatSeq_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FloatSeq</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FloatSeq</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FloatSeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::Float *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FloatSeq</name>
      <anchor>a3</anchor>
      <arglist>(const FloatSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FloatSeq</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>CORBA::ORB</name>
    <filename>interfaceCORBA_1_1ORB.html</filename>
    <member kind="typedef">
      <type>char *</type>
      <name>ObjectId</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_var</type>
      <name>ObjectId_var</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_out</type>
      <name>ObjectId_out</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::ORB_ObjectIdList</type>
      <name>ObjectIdList</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::ORB_ObjectIdList_var</type>
      <name>ObjectIdList_var</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::ORB_ObjectIdList_out</type>
      <name>ObjectIdList_out</name>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::ORB_ObjectIdList *</type>
      <name>ObjectIdList_ptr</name>
      <anchor>w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Unbounded_Pseudo_Sequence&lt; CORBA::Request &gt;</type>
      <name>RequestSeq</name>
      <anchor>w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_VarSeq_Var_T&lt; RequestSeq, TAO_Pseudo_Object_Manager&lt; CORBA::Request &gt; &gt;</type>
      <name>RequestSeq_var</name>
      <anchor>w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; RequestSeq, RequestSeq_var, TAO_Pseudo_Object_Manager&lt; CORBA::Request &gt; &gt;</type>
      <name>RequestSeq_out</name>
      <anchor>w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ORB_ptr</type>
      <name>_ptr_type</name>
      <anchor>w10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ORB_var</type>
      <name>_var_type</name>
      <anchor>w11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>id</name>
      <anchor>a0</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>string_to_object</name>
      <anchor>a1</anchor>
      <arglist>(const char *str ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>object_to_string</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ValueFactory</type>
      <name>register_value_factory</name>
      <anchor>a3</anchor>
      <arglist>(const char *repository_id, CORBA::ValueFactory factory ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregister_value_factory</name>
      <anchor>a4</anchor>
      <arglist>(const char *repository_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ValueFactory</type>
      <name>lookup_value_factory</name>
      <anchor>a5</anchor>
      <arglist>(const char *repository_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_list</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::Long count, CORBA::NVList_ptr &amp;new_list ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_operation_list</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::OperationDef_ptr, CORBA::NVList_ptr &amp;ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_named_value</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::NamedValue_ptr &amp;nmval ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_exception_list</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::ExceptionList_ptr &amp;exclist ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_environment</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::Environment_ptr &amp;new_env ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_context_list</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::ContextList_ptr &amp;ctxtlist ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_default_context</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::Context_ptr &amp;ctx ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>get_service_information</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::ServiceType service_type, CORBA::ServiceInformation_out service_information ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_multiple_requests_oneway</name>
      <anchor>a14</anchor>
      <arglist>(const CORBA::ORB::RequestSeq &amp;req ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_multiple_requests_deferred</name>
      <anchor>a15</anchor>
      <arglist>(const CORBA::ORB::RequestSeq &amp;req ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_next_response</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::Request_ptr &amp;req ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>poll_next_response</name>
      <anchor>a17</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_struct_tc</name>
      <anchor>a18</anchor>
      <arglist>(const char *id, const char *name, const CORBA::StructMemberSeq &amp;members ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_union_tc</name>
      <anchor>a19</anchor>
      <arglist>(const char *id, const char *name, CORBA::TypeCode_ptr discriminator_type, const CORBA::UnionMemberSeq &amp;members ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_enum_tc</name>
      <anchor>a20</anchor>
      <arglist>(const char *id, const char *name, const CORBA::EnumMemberSeq &amp;members ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_alias_tc</name>
      <anchor>a21</anchor>
      <arglist>(const char *id, const char *name, CORBA::TypeCode_ptr original_type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_exception_tc</name>
      <anchor>a22</anchor>
      <arglist>(const char *id, const char *name, const CORBA::StructMemberSeq &amp;members ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_interface_tc</name>
      <anchor>a23</anchor>
      <arglist>(const char *id, const char *name ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_string_tc</name>
      <anchor>a24</anchor>
      <arglist>(CORBA::ULong bound ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_wstring_tc</name>
      <anchor>a25</anchor>
      <arglist>(CORBA::ULong bound ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_fixed_tc</name>
      <anchor>a26</anchor>
      <arglist>(CORBA::UShort digits, CORBA::UShort scale ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_sequence_tc</name>
      <anchor>a27</anchor>
      <arglist>(CORBA::ULong bound, CORBA::TypeCode_ptr element_type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_array_tc</name>
      <anchor>a28</anchor>
      <arglist>(CORBA::ULong length, CORBA::TypeCode_ptr element_type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_value_tc</name>
      <anchor>a29</anchor>
      <arglist>(const char *id, const char *name, CORBA::ValueModifier type_modifier, CORBA::TypeCode_ptr concrete_base, const CORBA::ValueMemberSeq &amp;members ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_value_box_tc</name>
      <anchor>a30</anchor>
      <arglist>(const char *id, const char *name, CORBA::TypeCode_ptr boxed_type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_native_tc</name>
      <anchor>a31</anchor>
      <arglist>(const char *id, const char *name ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_recursive_tc</name>
      <anchor>a32</anchor>
      <arglist>(const char *id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_abstract_interface_tc</name>
      <anchor>a33</anchor>
      <arglist>(const char *id, const char *name ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_local_interface_tc</name>
      <anchor>a34</anchor>
      <arglist>(const char *id, const char *name ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_component_tc</name>
      <anchor>a35</anchor>
      <arglist>(const char *id, const char *name ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_home_tc</name>
      <anchor>a36</anchor>
      <arglist>(const char *id, const char *name ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_event_tc</name>
      <anchor>a37</anchor>
      <arglist>(const char *id, const char *name, CORBA::ValueModifier type_modifier, CORBA::TypeCode_ptr concrete_base, const CORBA::ValueMemberSeq &amp;members ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchor>a38</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchor>a39</anchor>
      <arglist>(ACE_Time_Value &amp;tv ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchor>a40</anchor>
      <arglist>(ACE_Time_Value *tv ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>work_pending</name>
      <anchor>a41</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>work_pending</name>
      <anchor>a42</anchor>
      <arglist>(ACE_Time_Value &amp;tv ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>perform_work</name>
      <anchor>a43</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>perform_work</name>
      <anchor>a44</anchor>
      <arglist>(ACE_Time_Value &amp;ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>perform_work</name>
      <anchor>a45</anchor>
      <arglist>(ACE_Time_Value *ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown</name>
      <anchor>a46</anchor>
      <arglist>(CORBA::Boolean wait_for_completion=0 ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchor>a47</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>resolve_initial_references</name>
      <anchor>a48</anchor>
      <arglist>(const char *name ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>resolve_initial_references</name>
      <anchor>a49</anchor>
      <arglist>(const char *name, ACE_Time_Value *timeout ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>register_initial_reference</name>
      <anchor>a50</anchor>
      <arglist>(const char *id, CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ORB::ObjectIdList_ptr</type>
      <name>list_initial_services</name>
      <anchor>a51</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>create_policy</name>
      <anchor>a52</anchor>
      <arglist>(CORBA::PolicyType type, const CORBA::Any &amp;val ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>_create_policy</name>
      <anchor>a53</anchor>
      <arglist>(CORBA::PolicyType type ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>resolve_root_poa</name>
      <anchor>a54</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_incr_refcnt</name>
      <anchor>a55</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_decr_refcnt</name>
      <anchor>a56</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_use_omg_ior_format</name>
      <anchor>a57</anchor>
      <arglist>(CORBA::Boolean ior)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>_use_omg_ior_format</name>
      <anchor>a58</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>orb_core</name>
      <anchor>a59</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const ACE_CString &amp;</type>
      <name>_tao_ft_client_id</name>
      <anchor>a60</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_tao_ft_client_id</name>
      <anchor>a61</anchor>
      <arglist>(const char *id)</arglist>
    </member>
    <member kind="function">
      <type>ACE_Time_Value *</type>
      <name>get_timeout</name>
      <anchor>a62</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::ORB_ptr</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::ORB_ptr orb)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::ORB_ptr</type>
      <name>_nil</name>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::ORB_ptr</type>
      <name>_tao_make_ORB</name>
      <anchor>e2</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>CORBA::TypeCode_ptr const</type>
      <name>_tc_ObjectId</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>CORBA::TypeCode_ptr const</type>
      <name>_tc_ObjectIdList</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ORB</name>
      <anchor>b0</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~ORB</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Object_ptr</type>
      <name>resolve_poa_current</name>
      <anchor>b2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Object_ptr</type>
      <name>resolve_policy_manager</name>
      <anchor>b3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::Object_ptr</type>
      <name>resolve_policy_current</name>
      <anchor>b4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>CORBA::Object_ptr</type>
      <name>resolve_service</name>
      <anchor>d0</anchor>
      <arglist>(TAO_MCAST_SERVICEID service_id ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>CORBA::Object_ptr</type>
      <name>ior_string_to_object</name>
      <anchor>d1</anchor>
      <arglist>(const char *ior ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>CORBA::Object_ptr</type>
      <name>url_ior_string_to_object</name>
      <anchor>d2</anchor>
      <arglist>(const char *ior ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>check_shutdown</name>
      <anchor>d3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>set_timeout</name>
      <anchor>d4</anchor>
      <arglist>(ACE_Time_Value *timeout)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ORB</name>
      <anchor>d5</anchor>
      <arglist>(const ORB &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ORB &amp;</type>
      <name>operator=</name>
      <anchor>d6</anchor>
      <arglist>(const ORB &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_SYNCH_MUTEX</type>
      <name>lock_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>refcount_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Boolean</type>
      <name>use_omg_ior_format_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Time_Value *</type>
      <name>timeout_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>CORBA::ORB::InvalidName</name>
    <filename>exceptionCORBA_1_1ORB_1_1InvalidName.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>InvalidName</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidName</name>
      <anchor>a1</anchor>
      <arglist>(const InvalidName &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InvalidName</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>InvalidName &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const InvalidName &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>InvalidName *</type>
      <name>_downcast</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::Exception *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>CORBA::ORB::InvalidName</name>
    <filename>exceptionCORBA_1_1ORB_1_1InvalidName.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>InvalidName</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidName</name>
      <anchor>a1</anchor>
      <arglist>(const InvalidName &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InvalidName</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>InvalidName &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const InvalidName &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>InvalidName *</type>
      <name>_downcast</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::Exception *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::LocalObject</name>
    <filename>classCORBA_1_1LocalObject.html</filename>
    <base virtualness="virtual">CORBA::Object</base>
    <member kind="typedef">
      <type>LocalObject_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalObject_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocalObject</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_non_existent</name>
      <anchor>a1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::ImplementationDef_ptr</type>
      <name>_get_implementation</name>
      <anchor>a2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::InterfaceDef_ptr</type>
      <name>_get_interface</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Object_ptr</type>
      <name>_get_component</name>
      <anchor>a4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_create_request</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::Context_ptr ctx, const char *operation, CORBA::NVList_ptr arg_list, CORBA::NamedValue_ptr result, CORBA::Request_ptr &amp;request, CORBA::Flags req_flags ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_create_request</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::Context_ptr ctx, const char *operation, CORBA::NVList_ptr arg_list, CORBA::NamedValue_ptr result, CORBA::ExceptionList_ptr exclist, CORBA::ContextList_ptr ctxtlist, CORBA::Request_ptr &amp;request, CORBA::Flags req_flags ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Request_ptr</type>
      <name>_request</name>
      <anchor>a7</anchor>
      <arglist>(const char *operation ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>_get_policy</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::PolicyType type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>_get_cached_policy</name>
      <anchor>a9</anchor>
      <arglist>(TAO_Cached_Policy_Type type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>_set_policy_overrides</name>
      <anchor>a10</anchor>
      <arglist>(const CORBA::PolicyList &amp;policies, CORBA::SetOverrideType set_add ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::PolicyList *</type>
      <name>_get_policy_overrides</name>
      <anchor>a11</anchor>
      <arglist>(const CORBA::PolicyTypeSeq &amp;types ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>_validate_connection</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::PolicyList_out inconsistent_policies ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>_hash</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::ULong maximum ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_equivalent</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::Object_ptr other_obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_add_ref</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_remove_ref</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::ObjectKey *</type>
      <name>_key</name>
      <anchor>a17</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>LocalObject_ptr</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(LocalObject_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>LocalObject_ptr</type>
      <name>_nil</name>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>LocalObject_ptr</type>
      <name>_narrow</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LocalObject</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>LocalObject</name>
      <anchor>z90_0</anchor>
      <arglist>(const LocalObject &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>LocalObject &amp;</type>
      <name>operator=</name>
      <anchor>z90_1</anchor>
      <arglist>(const LocalObject &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::LongDoubleSeq</name>
    <filename>classCORBA_1_1LongDoubleSeq.html</filename>
    <base>TAO_Unbounded_Sequence&lt; CORBA::LongDouble &gt;</base>
    <member kind="typedef">
      <type>LongDoubleSeq_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LongDoubleSeq</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LongDoubleSeq</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LongDoubleSeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::LongDouble *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LongDoubleSeq</name>
      <anchor>a3</anchor>
      <arglist>(const LongDoubleSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LongDoubleSeq</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::LongLongSeq</name>
    <filename>classCORBA_1_1LongLongSeq.html</filename>
    <base>TAO_Unbounded_Sequence&lt; CORBA::LongLong &gt;</base>
    <member kind="typedef">
      <type>LongLongSeq_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LongLongSeq</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LongLongSeq</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LongLongSeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::LongLong *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LongLongSeq</name>
      <anchor>a3</anchor>
      <arglist>(const LongLongSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LongLongSeq</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::LongSeq</name>
    <filename>classCORBA_1_1LongSeq.html</filename>
    <base>TAO_Unbounded_Sequence&lt; CORBA::Long &gt;</base>
    <member kind="typedef">
      <type>LongSeq_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LongSeq</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LongSeq</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LongSeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::Long *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LongSeq</name>
      <anchor>a3</anchor>
      <arglist>(const LongSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LongSeq</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::NamedValue</name>
    <filename>classCORBA_1_1NamedValue.html</filename>
    <member kind="typedef">
      <type>NamedValue_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NamedValue_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchor>a0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Any_ptr</type>
      <name>value</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Flags</type>
      <name>flags</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ULong</type>
      <name>_incr_refcnt</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ULong</type>
      <name>_decr_refcnt</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>NamedValue *</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(NamedValue *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>NamedValue *</type>
      <name>_nil</name>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~NamedValue</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>NamedValue</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ULong</type>
      <name>refcount_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_SYNCH_MUTEX</type>
      <name>refcount_lock_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Any</type>
      <name>any_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Flags</type>
      <name>flags_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>name_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ORB</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>NVList</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Request</name>
      <anchor>n2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::NVList</name>
    <filename>classCORBA_1_1NVList.html</filename>
    <member kind="typedef">
      <type>NVList_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NVList_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ULong</type>
      <name>count</name>
      <anchor>a0</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS) const </arglist>
    </member>
    <member kind="function">
      <type>NamedValue_ptr</type>
      <name>add</name>
      <anchor>a1</anchor>
      <arglist>(Flags ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>NamedValue_ptr</type>
      <name>add_item</name>
      <anchor>a2</anchor>
      <arglist>(const char *, Flags ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>NamedValue_ptr</type>
      <name>add_value</name>
      <anchor>a3</anchor>
      <arglist>(const char *, const Any &amp;, Flags ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>NamedValue_ptr</type>
      <name>add_item_consume</name>
      <anchor>a4</anchor>
      <arglist>(char *, Flags ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>NamedValue_ptr</type>
      <name>add_value_consume</name>
      <anchor>a5</anchor>
      <arglist>(char *, Any_ptr, Flags ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>NamedValue_ptr</type>
      <name>item</name>
      <anchor>a6</anchor>
      <arglist>(ULong n ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchor>a7</anchor>
      <arglist>(ULong n ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>ULong</type>
      <name>_incr_refcnt</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ULong</type>
      <name>_decr_refcnt</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_tao_incoming_cdr</name>
      <anchor>a10</anchor>
      <arglist>(TAO_InputCDR &amp;cdr, int flag, bool &amp;lazy_evaluation ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_tao_encode</name>
      <anchor>a11</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, int flag ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_tao_decode</name>
      <anchor>a12</anchor>
      <arglist>(TAO_InputCDR &amp;cdr, int flag ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>ptrdiff_t</type>
      <name>_tao_target_alignment</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Boolean</type>
      <name>_lazy_has_arguments</name>
      <anchor>a14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>NVList *</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(NVList *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>NVList *</type>
      <name>_nil</name>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~NVList</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>NVList</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>NamedValue_ptr</type>
      <name>add_element</name>
      <anchor>d1</anchor>
      <arglist>(Flags ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>evaluate</name>
      <anchor>d2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Unbounded_Queue&lt; NamedValue_ptr &gt;</type>
      <name>values_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ULong</type>
      <name>max_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ULong</type>
      <name>refcount_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_SYNCH_MUTEX</type>
      <name>refcount_lock_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_InputCDR *</type>
      <name>incoming_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>incoming_flag_</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ORB</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Request</name>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::Object</name>
    <filename>classCORBA_1_1Object.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>z94_0</anchor>
      <arglist>(const char *logical_type_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>z94_1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>_hash</name>
      <anchor>z94_2</anchor>
      <arglist>(CORBA::ULong maximum ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_equivalent</name>
      <anchor>z94_3</anchor>
      <arglist>(CORBA::Object_ptr other_obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_non_existent</name>
      <anchor>z94_4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::ImplementationDef_ptr</type>
      <name>_get_implementation</name>
      <anchor>z94_5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterfaceDef_ptr</type>
      <name>_get_interface</name>
      <anchor>z94_6</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Object_ptr</type>
      <name>_get_component</name>
      <anchor>z94_7</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_create_request</name>
      <anchor>z94_8</anchor>
      <arglist>(CORBA::Context_ptr ctx, const char *operation, CORBA::NVList_ptr arg_list, CORBA::NamedValue_ptr result, CORBA::Request_ptr &amp;request, CORBA::Flags req_flags ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_create_request</name>
      <anchor>z94_9</anchor>
      <arglist>(CORBA::Context_ptr ctx, const char *operation, CORBA::NVList_ptr arg_list, CORBA::NamedValue_ptr result, CORBA::ExceptionList_ptr exclist, CORBA::ContextList_ptr ctxtlist, CORBA::Request_ptr &amp;request, CORBA::Flags req_flags ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Request_ptr</type>
      <name>_request</name>
      <anchor>z94_10</anchor>
      <arglist>(const char *operation ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>_get_policy</name>
      <anchor>z94_11</anchor>
      <arglist>(CORBA::PolicyType type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy_ptr</type>
      <name>_get_cached_policy</name>
      <anchor>z94_12</anchor>
      <arglist>(TAO_Cached_Policy_Type type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>_set_policy_overrides</name>
      <anchor>z94_13</anchor>
      <arglist>(const CORBA::PolicyList &amp;policies, CORBA::SetOverrideType set_add ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::PolicyList *</type>
      <name>_get_policy_overrides</name>
      <anchor>z94_14</anchor>
      <arglist>(const CORBA::PolicyTypeSeq &amp;types ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>_validate_connection</name>
      <anchor>z94_15</anchor>
      <arglist>(CORBA::PolicyList_out inconsistent_policies ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Object_ptr</type>
      <name>_duplicate</name>
      <anchor>z94_16</anchor>
      <arglist>(CORBA::Object_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Object_ptr</type>
      <name>_nil</name>
      <anchor>z94_17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Object_ptr</type>
      <name>_narrow</name>
      <anchor>z94_18</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Abstract_ServantBase *</type>
      <name>_servant</name>
      <anchor>z97_0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_collocated</name>
      <anchor>z97_1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_local</name>
      <anchor>z97_2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO::ObjectKey *</type>
      <name>_key</name>
      <anchor>z97_3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Object</name>
      <anchor>z97_4</anchor>
      <arglist>(TAO_Stub *p, CORBA::Boolean collocated=0, TAO_Abstract_ServantBase *servant=0, TAO_ORB_Core *orb_core=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Object</name>
      <anchor>z97_5</anchor>
      <arglist>(IOP::IOR *ior, TAO_ORB_Core *orb_core=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Stub *</type>
      <name>_stubobj</name>
      <anchor>z97_6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Stub *</type>
      <name>_stubobj</name>
      <anchor>z97_7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_proxy_broker</name>
      <anchor>z97_8</anchor>
      <arglist>(TAO::Object_Proxy_Broker *proxy_broker)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>z97_9</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>is_evaluated</name>
      <anchor>z97_10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_collocated_servant</name>
      <anchor>z97_11</anchor>
      <arglist>(TAO_Abstract_ServantBase *)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>orb_core</name>
      <anchor>z97_12</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>IOP::IOR *</type>
      <name>steal_ior</name>
      <anchor>z97_13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const IOP::IOR &amp;</type>
      <name>ior</name>
      <anchor>z97_14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>z97_15</anchor>
      <arglist>(Object_ptr obj, TAO_OutputCDR &amp;strm)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>z97_16</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>is_nil_i</name>
      <anchor>z97_17</anchor>
      <arglist>(CORBA::Object_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>tao_object_initialize</name>
      <anchor>z97_18</anchor>
      <arglist>(Object *)</arglist>
    </member>
    <member kind="typedef">
      <type>Object_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Object</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_add_ref</name>
      <anchor>z96_0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_remove_ref</name>
      <anchor>z96_1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Object</name>
      <anchor>b0</anchor>
      <arglist>(int dummy=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Abstract_ServantBase *</type>
      <name>servant_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Object</name>
      <anchor>d0</anchor>
      <arglist>(const Object &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Object &amp;</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const Object &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO::Object_Proxy_Broker *</type>
      <name>proxy_broker_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Boolean</type>
      <name>is_collocated_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Boolean</type>
      <name>is_local_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Boolean</type>
      <name>is_evaluated_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IOP::IOR_var</type>
      <name>ior_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Stub *</type>
      <name>protocol_proxy_</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>refcount_</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Lock *</type>
      <name>refcount_lock_</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::ORB_ObjectIdList</name>
    <filename>classCORBA_1_1ORB__ObjectIdList.html</filename>
    <base>TAO_Unbounded_String_Sequence</base>
    <member kind="typedef">
      <type>ORB_ObjectIdList_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ORB_ObjectIdList</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ORB_ObjectIdList</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ORB_ObjectIdList</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, char **buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ORB_ObjectIdList</name>
      <anchor>a3</anchor>
      <arglist>(const ORB_ObjectIdList &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ORB_ObjectIdList</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::OctetSeq</name>
    <filename>classCORBA_1_1OctetSeq.html</filename>
    <base>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;</base>
    <member kind="typedef">
      <type>OctetSeq_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctetSeq</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctetSeq</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctetSeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::Octet *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctetSeq</name>
      <anchor>a3</anchor>
      <arglist>(const OctetSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OctetSeq</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctetSeq</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::ULong length, const ACE_Message_Block *mb)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>CORBA::PolicyError</name>
    <filename>exceptionCORBA_1_1PolicyError.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>PolicyError</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolicyError</name>
      <anchor>a1</anchor>
      <arglist>(const PolicyError &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PolicyError</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>PolicyError &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const PolicyError &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolicyError</name>
      <anchor>a8</anchor>
      <arglist>(ACE_NESTED_CLASS(CORBA, PolicyErrorCode) _tao_reason)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>_tao_type</name>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>PolicyError *</type>
      <name>_downcast</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Exception *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const PolicyError *</type>
      <name>_downcast</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Exception const *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>PolicyErrorCode</type>
      <name>reason</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::PolicyErrorCode</type>
      <name>reason</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>CORBA::InvalidPolicies</name>
    <filename>exceptionCORBA_1_1InvalidPolicies.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>InvalidPolicies</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidPolicies</name>
      <anchor>a1</anchor>
      <arglist>(const InvalidPolicies &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InvalidPolicies</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>InvalidPolicies &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const InvalidPolicies &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidPolicies</name>
      <anchor>a8</anchor>
      <arglist>(const ACE_NESTED_CLASS(CORBA, UShortSeq)&amp;_tao_indices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>_tao_type</name>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>InvalidPolicies *</type>
      <name>_downcast</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Exception *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const InvalidPolicies *</type>
      <name>_downcast</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Exception const *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>UShortSeq</type>
      <name>indices</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::UShortSeq</type>
      <name>indices</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>CORBA::Policy</name>
    <filename>interfaceCORBA_1_1Policy.html</filename>
    <base virtualness="virtual">CORBA::Object</base>
    <member kind="typedef">
      <type>Policy_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Policy_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Policy</type>
      <name>copy</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::PolicyType</type>
      <name>policy_type</name>
      <anchor>a2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function">
      <type>virtual ::CORBA::Policy_ptr</type>
      <name>copy</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchor>a4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a5</anchor>
      <arglist>(const char *type_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a7</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_tao_encode</name>
      <anchor>a8</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_tao_decode</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Cached_Policy_Type</type>
      <name>_tao_cached_type</name>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_Policy_Scope</type>
      <name>_tao_scope</name>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>Policy_ptr</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(Policy_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_release</name>
      <anchor>e1</anchor>
      <arglist>(Policy_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Policy_ptr</type>
      <name>_narrow</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Policy_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>e3</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Policy_ptr</type>
      <name>_nil</name>
      <anchor>e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e5</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute PolicyType</type>
      <name>policy_type</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Policy</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>CORBA_Policy_setup_collocation</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Policy</name>
      <anchor>b2</anchor>
      <arglist>(IOP::IOR *ior, TAO_ORB_Core *orb_core=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Policy</name>
      <anchor>b3</anchor>
      <arglist>(TAO_Stub *objref, CORBA::Boolean _tao_collocated=0, TAO_Abstract_ServantBase *servant=0, TAO_ORB_Core *orb_core=0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Policy</name>
      <anchor>b4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Policy</name>
      <anchor>d0</anchor>
      <arglist>(const Policy &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const Policy &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO::Collocation_Proxy_Broker *</type>
      <name>the_TAO_Policy_Proxy_Broker_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TAO::Narrow_Utils&lt;Policy&gt;</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>CORBA::PolicyManager</name>
    <filename>interfaceCORBA_1_1PolicyManager.html</filename>
    <base virtualness="virtual">CORBA::Object</base>
    <member kind="typedef">
      <type>PolicyManager_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PolicyManager_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PolicyList</type>
      <name>get_policy_overrides</name>
      <anchor>a0</anchor>
      <arglist>(in PolicyTypeSeq ts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_policy_overrides</name>
      <anchor>a1</anchor>
      <arglist>(in PolicyList policies, in SetOverrideType set_add)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ::CORBA::PolicyList *</type>
      <name>get_policy_overrides</name>
      <anchor>a2</anchor>
      <arglist>(const ::CORBA::PolicyTypeSeq &amp;ts ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set_policy_overrides</name>
      <anchor>a3</anchor>
      <arglist>(const ::CORBA::PolicyList &amp;policies,::CORBA::SetOverrideType set_add ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a4</anchor>
      <arglist>(const char *type_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>PolicyManager_ptr</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(PolicyManager_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_release</name>
      <anchor>e1</anchor>
      <arglist>(PolicyManager_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>PolicyManager_ptr</type>
      <name>_narrow</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>PolicyManager_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>e3</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>PolicyManager_ptr</type>
      <name>_nil</name>
      <anchor>e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e5</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PolicyManager</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PolicyManager</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>PolicyManager</name>
      <anchor>d0</anchor>
      <arglist>(const PolicyManager &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const PolicyManager &amp;)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>CORBA::PolicyCurrent</name>
    <filename>interfaceCORBA_1_1PolicyCurrent.html</filename>
    <base virtualness="virtual">CORBA::PolicyManager</base>
    <base virtualness="virtual">CORBA::Current</base>
    <base>CORBA::PolicyManager</base>
    <base>CORBA::Current</base>
    <member kind="typedef">
      <type>PolicyCurrent_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PolicyCurrent_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a0</anchor>
      <arglist>(const char *type_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>PolicyCurrent_ptr</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(PolicyCurrent_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_release</name>
      <anchor>e1</anchor>
      <arglist>(PolicyCurrent_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>PolicyCurrent_ptr</type>
      <name>_narrow</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>PolicyCurrent_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>e3</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>PolicyCurrent_ptr</type>
      <name>_nil</name>
      <anchor>e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e5</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PolicyCurrent</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PolicyCurrent</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>PolicyCurrent</name>
      <anchor>d0</anchor>
      <arglist>(const PolicyCurrent &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const PolicyCurrent &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::PolicyList</name>
    <filename>classCORBA_1_1PolicyList.html</filename>
    <base>TAO_Unbounded_Object_Sequence&lt; Policy, Policy_var &gt;</base>
    <member kind="typedef">
      <type>PolicyList_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolicyList</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolicyList</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolicyList</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, Policy_ptr *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolicyList</name>
      <anchor>a3</anchor>
      <arglist>(const PolicyList &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PolicyList</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::PolicyTypeSeq</name>
    <filename>classCORBA_1_1PolicyTypeSeq.html</filename>
    <base>TAO_Unbounded_Sequence&lt; PolicyType &gt;</base>
    <member kind="typedef">
      <type>PolicyTypeSeq_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolicyTypeSeq</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolicyTypeSeq</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolicyTypeSeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::ULong *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolicyTypeSeq</name>
      <anchor>a3</anchor>
      <arglist>(const PolicyTypeSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PolicyTypeSeq</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>CORBA::Pollable</name>
    <filename>interfaceCORBA_1_1Pollable.html</filename>
    <base virtualness="virtual">CORBA::Object</base>
    <member kind="typedef">
      <type>Pollable_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pollable_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>is_ready</name>
      <anchor>a0</anchor>
      <arglist>(in unsigned long timeout)</arglist>
    </member>
    <member kind="function">
      <type>PollableSet</type>
      <name>create_pollable_set</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>is_ready</name>
      <anchor>a2</anchor>
      <arglist>(::CORBA::ULong timeout ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ::CORBA::PollableSet_ptr</type>
      <name>create_pollable_set</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a4</anchor>
      <arglist>(const char *type_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Pollable_ptr</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(Pollable_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_release</name>
      <anchor>e1</anchor>
      <arglist>(Pollable_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Pollable_ptr</type>
      <name>_narrow</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Pollable_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>e3</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Pollable_ptr</type>
      <name>_nil</name>
      <anchor>e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Pollable</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Pollable</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Pollable</name>
      <anchor>d0</anchor>
      <arglist>(const Pollable &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const Pollable &amp;)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>CORBA::DIIPollable</name>
    <filename>interfaceCORBA_1_1DIIPollable.html</filename>
    <base virtualness="virtual">CORBA::Pollable</base>
    <base>CORBA::Pollable</base>
    <member kind="typedef">
      <type>DIIPollable_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DIIPollable_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a0</anchor>
      <arglist>(const char *type_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>DIIPollable_ptr</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(DIIPollable_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_release</name>
      <anchor>e1</anchor>
      <arglist>(DIIPollable_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>DIIPollable_ptr</type>
      <name>_narrow</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>DIIPollable_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>e3</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>DIIPollable_ptr</type>
      <name>_nil</name>
      <anchor>e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DIIPollable</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~DIIPollable</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DIIPollable</name>
      <anchor>d0</anchor>
      <arglist>(const DIIPollable &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const DIIPollable &amp;)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>CORBA::PollableSet</name>
    <filename>interfaceCORBA_1_1PollableSet.html</filename>
    <base virtualness="virtual">CORBA::Object</base>
    <member kind="typedef">
      <type>PollableSet_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PollableSet_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>DIIPollable</type>
      <name>create_dii_pollable</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_pollable</name>
      <anchor>a1</anchor>
      <arglist>(in Pollable potential)</arglist>
    </member>
    <member kind="function">
      <type>Pollable</type>
      <name>get_ready_pollable</name>
      <anchor>a2</anchor>
      <arglist>(in unsigned long timeout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchor>a3</anchor>
      <arglist>(in Pollable potential)</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>number_left</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ::CORBA::DIIPollable_ptr</type>
      <name>create_dii_pollable</name>
      <anchor>a5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add_pollable</name>
      <anchor>a6</anchor>
      <arglist>(::CORBA::Pollable_ptr potential ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ::CORBA::Pollable_ptr</type>
      <name>get_ready_pollable</name>
      <anchor>a7</anchor>
      <arglist>(::CORBA::ULong timeout ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>remove</name>
      <anchor>a8</anchor>
      <arglist>(::CORBA::Pollable_ptr potential ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::UShort</type>
      <name>number_left</name>
      <anchor>a9</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a10</anchor>
      <arglist>(const char *type_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a12</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>PollableSet_ptr</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(PollableSet_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_release</name>
      <anchor>e1</anchor>
      <arglist>(PollableSet_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>PollableSet_ptr</type>
      <name>_narrow</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>PollableSet_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>e3</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>PollableSet_ptr</type>
      <name>_nil</name>
      <anchor>e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PollableSet</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PollableSet</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>PollableSet</name>
      <anchor>d0</anchor>
      <arglist>(const PollableSet &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const PollableSet &amp;)</arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>CORBA::PollableSet::NoPossiblePollable</name>
    <filename>exceptionCORBA_1_1PollableSet_1_1NoPossiblePollable.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>NoPossiblePollable</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoPossiblePollable</name>
      <anchor>a1</anchor>
      <arglist>(const NoPossiblePollable &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NoPossiblePollable</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>NoPossiblePollable &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const NoPossiblePollable &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>NoPossiblePollable *</type>
      <name>_downcast</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::Exception *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const NoPossiblePollable *</type>
      <name>_downcast</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Exception const *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>CORBA::PollableSet::UnknownPollable</name>
    <filename>exceptionCORBA_1_1PollableSet_1_1UnknownPollable.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>UnknownPollable</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnknownPollable</name>
      <anchor>a1</anchor>
      <arglist>(const UnknownPollable &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UnknownPollable</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>UnknownPollable &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const UnknownPollable &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>UnknownPollable *</type>
      <name>_downcast</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::Exception *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const UnknownPollable *</type>
      <name>_downcast</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Exception const *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>CORBA::PollableSet::NoPossiblePollable</name>
    <filename>exceptionCORBA_1_1PollableSet_1_1NoPossiblePollable.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>NoPossiblePollable</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoPossiblePollable</name>
      <anchor>a1</anchor>
      <arglist>(const NoPossiblePollable &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NoPossiblePollable</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>NoPossiblePollable &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const NoPossiblePollable &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>NoPossiblePollable *</type>
      <name>_downcast</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::Exception *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const NoPossiblePollable *</type>
      <name>_downcast</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Exception const *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>CORBA::PollableSet::UnknownPollable</name>
    <filename>exceptionCORBA_1_1PollableSet_1_1UnknownPollable.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>UnknownPollable</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnknownPollable</name>
      <anchor>a1</anchor>
      <arglist>(const UnknownPollable &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UnknownPollable</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>UnknownPollable &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const UnknownPollable &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>UnknownPollable *</type>
      <name>_downcast</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::Exception *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const UnknownPollable *</type>
      <name>_downcast</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Exception const *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::Principal</name>
    <filename>classCORBA_1_1Principal.html</filename>
    <member kind="typedef">
      <type>Principal_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Principal_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_incr_refcnt</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>_decr_refcnt</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Principal</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Principal *</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(Principal *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Principal *</type>
      <name>_nil</name>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>CORBA::OctetSeq</type>
      <name>id</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~Principal</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Principal &amp;</type>
      <name>operator=</name>
      <anchor>d0</anchor>
      <arglist>(const CORBA::Principal_ptr &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Principal</name>
      <anchor>d1</anchor>
      <arglist>(const CORBA::Principal_ptr &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>refcount_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_SYNCH_MUTEX</type>
      <name>refcount_mutex_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CORBA::ServiceDetail</name>
    <filename>structCORBA_1_1ServiceDetail.html</filename>
    <member kind="typedef">
      <type>ServiceDetail_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>ServiceDetailType</type>
      <name>service_detail_type</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ServiceDetailData</type>
      <name>service_detail</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::ServiceDetailType</type>
      <name>service_detail_type</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::ServiceDetailData</type>
      <name>service_detail</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CORBA::ServiceInformation</name>
    <filename>structCORBA_1_1ServiceInformation.html</filename>
    <member kind="typedef">
      <type>ServiceInformation_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>ServiceOptionSeq</type>
      <name>service_options</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ServiceDetailSeq</type>
      <name>service_details</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::ServiceOptionSeq</type>
      <name>service_options</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::ServiceDetailSeq</type>
      <name>service_details</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::ServiceOptionSeq</name>
    <filename>classCORBA_1_1ServiceOptionSeq.html</filename>
    <base>TAO_Unbounded_Sequence&lt; ServiceOption &gt;</base>
    <member kind="typedef">
      <type>ServiceOptionSeq_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ServiceOptionSeq</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ServiceOptionSeq</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ServiceOptionSeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::ULong *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ServiceOptionSeq</name>
      <anchor>a3</anchor>
      <arglist>(const ServiceOptionSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ServiceOptionSeq</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::ServiceDetailSeq</name>
    <filename>classCORBA_1_1ServiceDetailSeq.html</filename>
    <base>TAO_Unbounded_Sequence&lt; ServiceDetail &gt;</base>
    <member kind="typedef">
      <type>ServiceDetailSeq_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ServiceDetailSeq</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ServiceDetailSeq</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ServiceDetailSeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, ServiceDetail *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ServiceDetailSeq</name>
      <anchor>a3</anchor>
      <arglist>(const ServiceDetailSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ServiceDetailSeq</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::ShortSeq</name>
    <filename>classCORBA_1_1ShortSeq.html</filename>
    <base>TAO_Unbounded_Sequence&lt; CORBA::Short &gt;</base>
    <member kind="typedef">
      <type>ShortSeq_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShortSeq</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShortSeq</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShortSeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::Short *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShortSeq</name>
      <anchor>a3</anchor>
      <arglist>(const ShortSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ShortSeq</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::StringSeq</name>
    <filename>classCORBA_1_1StringSeq.html</filename>
    <base>TAO_Unbounded_String_Sequence</base>
    <member kind="typedef">
      <type>StringSeq_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringSeq</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringSeq</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringSeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, char **buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringSeq</name>
      <anchor>a3</anchor>
      <arglist>(const StringSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StringSeq</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::SystemException</name>
    <filename>classCORBA_1_1SystemException.html</filename>
    <base>CORBA::Exception</base>
    <member kind="function">
      <type></type>
      <name>SystemException</name>
      <anchor>a0</anchor>
      <arglist>(const SystemException &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SystemException</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ULong</type>
      <name>minor</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minor</name>
      <anchor>a3</anchor>
      <arglist>(ULong m)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::CompletionStatus</type>
      <name>completed</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>completed</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::CompletionStatus c)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a6</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>_is_a</name>
      <anchor>a7</anchor>
      <arglist>(const char *type_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_tao_print_system_exception</name>
      <anchor>a8</anchor>
      <arglist>(FILE *f=stdout) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_CString</type>
      <name>_info</name>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a10</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr ACE_ENV_ARG_DECL_NOT_USED) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a11</anchor>
      <arglist>(TAO_InputCDR &amp;cdr ACE_ENV_ARG_DECL_NOT_USED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a12</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>SystemException *</type>
      <name>_downcast</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::Exception *exception)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const SystemException *</type>
      <name>_downcast</name>
      <anchor>e1</anchor>
      <arglist>(const CORBA::Exception *exception)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::ULong</type>
      <name>_tao_minor_code</name>
      <anchor>e2</anchor>
      <arglist>(u_int location, int errno_value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::ULong</type>
      <name>_tao_errno</name>
      <anchor>e3</anchor>
      <arglist>(int errno_value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SystemException</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SystemException &amp;</type>
      <name>operator=</name>
      <anchor>b1</anchor>
      <arglist>(const SystemException &amp;src)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SystemException</name>
      <anchor>b2</anchor>
      <arglist>(CORBA::ULong code, CORBA::CompletionStatus completed)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SystemException</name>
      <anchor>b3</anchor>
      <arglist>(const char *repository_id, const char *local_name, CORBA::ULong code, CORBA::CompletionStatus completed)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>const char *</type>
      <name>_tao_get_omg_exception_description</name>
      <anchor>f0</anchor>
      <arglist>(const CORBA::SystemException &amp;exc, CORBA::ULong minor_code)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>minor_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::CompletionStatus</type>
      <name>completed_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::TypeCode</name>
    <filename>classCORBA_1_1TypeCode.html</filename>
    <member kind="typedef">
      <type>CORBA::TypeCode_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>tao_marshal</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>tao_duplicate</name>
      <anchor>a1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>tao_release</name>
      <anchor>a2</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <type>Boolean</type>
      <name>equal</name>
      <anchor>z202_0</anchor>
      <arglist>(TypeCode_ptr tc ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function">
      <type>Boolean</type>
      <name>equivalent</name>
      <anchor>z202_1</anchor>
      <arglist>(TypeCode_ptr tc ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function">
      <type>TCKind</type>
      <name>kind</name>
      <anchor>z202_2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function">
      <type>TypeCode_ptr</type>
      <name>get_compact_typecode</name>
      <anchor>z202_3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>id</name>
      <anchor>z202_4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>name</name>
      <anchor>z202_5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function">
      <type>ULong</type>
      <name>member_count</name>
      <anchor>z202_6</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>member_name</name>
      <anchor>z202_7</anchor>
      <arglist>(ULong index ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function">
      <type>TypeCode_ptr</type>
      <name>member_type</name>
      <anchor>z202_8</anchor>
      <arglist>(ULong index ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function">
      <type>Any *</type>
      <name>member_label</name>
      <anchor>z202_9</anchor>
      <arglist>(ULong index ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function">
      <type>TypeCode_ptr</type>
      <name>discriminator_type</name>
      <anchor>z202_10</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function">
      <type>Long</type>
      <name>default_index</name>
      <anchor>z202_11</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function">
      <type>ULong</type>
      <name>length</name>
      <anchor>z202_12</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function">
      <type>TypeCode_ptr</type>
      <name>content_type</name>
      <anchor>z202_13</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function">
      <type>UShort</type>
      <name>fixed_digits</name>
      <anchor>z202_14</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function">
      <type>UShort</type>
      <name>fixed_scale</name>
      <anchor>z202_15</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function">
      <type>Visibility</type>
      <name>member_visibility</name>
      <anchor>z202_16</anchor>
      <arglist>(ULong index ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function">
      <type>ValueModifier</type>
      <name>type_modifier</name>
      <anchor>z202_17</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function">
      <type>TypeCode_ptr</type>
      <name>concrete_base_type</name>
      <anchor>z202_18</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::TypeCode_ptr tc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>_nil</name>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e2</anchor>
      <arglist>(void *x)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>CORBA::TypeCode_ptr const</type>
      <name>_tc_Bounds</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>CORBA::TypeCode_ptr const</type>
      <name>_tc_BadKind</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TypeCode</name>
      <anchor>b0</anchor>
      <arglist>(CORBA::TCKind kind)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~TypeCode</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Boolean</type>
      <name>equal_i</name>
      <anchor>z204_0</anchor>
      <arglist>(TypeCode_ptr tc ACE_ENV_ARG_DECL) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Boolean</type>
      <name>equivalent_i</name>
      <anchor>z204_1</anchor>
      <arglist>(TypeCode_ptr tc ACE_ENV_ARG_DECL) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual TypeCode_ptr</type>
      <name>get_compact_typecode_i</name>
      <anchor>z204_2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char const *</type>
      <name>id_i</name>
      <anchor>z204_3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char const *</type>
      <name>name_i</name>
      <anchor>z204_4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ULong</type>
      <name>member_count_i</name>
      <anchor>z204_5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char const *</type>
      <name>member_name_i</name>
      <anchor>z204_6</anchor>
      <arglist>(ULong index ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TypeCode_ptr</type>
      <name>member_type_i</name>
      <anchor>z204_7</anchor>
      <arglist>(ULong index ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Any *</type>
      <name>member_label_i</name>
      <anchor>z204_8</anchor>
      <arglist>(ULong index ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TypeCode_ptr</type>
      <name>discriminator_type_i</name>
      <anchor>z204_9</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Long</type>
      <name>default_index_i</name>
      <anchor>z204_10</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ULong</type>
      <name>length_i</name>
      <anchor>z204_11</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TypeCode_ptr</type>
      <name>content_type_i</name>
      <anchor>z204_12</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual UShort</type>
      <name>fixed_digits_i</name>
      <anchor>z204_13</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual UShort</type>
      <name>fixed_scale_i</name>
      <anchor>z204_14</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Visibility</type>
      <name>member_visibility_i</name>
      <anchor>z204_15</anchor>
      <arglist>(ULong index ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ValueModifier</type>
      <name>type_modifier_i</name>
      <anchor>z204_16</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TypeCode_ptr</type>
      <name>concrete_base_type_i</name>
      <anchor>z204_17</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TCKind const</type>
      <name>kind_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TypeCode</name>
      <anchor>d0</anchor>
      <arglist>(TypeCode const &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(TypeCode const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::TypeCode::BadKind</name>
    <filename>classCORBA_1_1TypeCode_1_1BadKind.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>BadKind</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;cdr ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>BadKind *</type>
      <name>_downcast</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::Exception *ex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::TypeCode::Bounds</name>
    <filename>classCORBA_1_1TypeCode_1_1Bounds.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>Bounds</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;cdr ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Bounds *</type>
      <name>_downcast</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::Exception *ex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::TypeCode::Bounds</name>
    <filename>classCORBA_1_1TypeCode_1_1Bounds.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>Bounds</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;cdr ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Bounds *</type>
      <name>_downcast</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::Exception *ex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::TypeCode::BadKind</name>
    <filename>classCORBA_1_1TypeCode_1_1BadKind.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>BadKind</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;cdr ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>BadKind *</type>
      <name>_downcast</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::Exception *ex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::ULongLongSeq</name>
    <filename>classCORBA_1_1ULongLongSeq.html</filename>
    <base>TAO_Unbounded_Sequence&lt; CORBA::ULongLong &gt;</base>
    <member kind="typedef">
      <type>ULongLongSeq_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ULongLongSeq</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ULongLongSeq</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ULongLongSeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::ULongLong *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ULongLongSeq</name>
      <anchor>a3</anchor>
      <arglist>(const ULongLongSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ULongLongSeq</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::ULongSeq</name>
    <filename>classCORBA_1_1ULongSeq.html</filename>
    <base>TAO_Unbounded_Sequence&lt; CORBA::ULong &gt;</base>
    <member kind="typedef">
      <type>ULongSeq_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ULongSeq</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ULongSeq</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ULongSeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::ULong *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ULongSeq</name>
      <anchor>a3</anchor>
      <arglist>(const ULongSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ULongSeq</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::UserException</name>
    <filename>classCORBA_1_1UserException.html</filename>
    <base>CORBA::Exception</base>
    <member kind="function">
      <type></type>
      <name>UserException</name>
      <anchor>a0</anchor>
      <arglist>(UserException const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UserException</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>UserException &amp;</type>
      <name>operator=</name>
      <anchor>a2</anchor>
      <arglist>(UserException const &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a3</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UserException</name>
      <anchor>a4</anchor>
      <arglist>(char const *repository_id, char const *local_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>_is_a</name>
      <anchor>a5</anchor>
      <arglist>(char const *interface_id) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_CString</type>
      <name>_info</name>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UserException</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>UserException *</type>
      <name>_downcast</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::Exception *exception)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const UserException *</type>
      <name>_downcast</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Exception const *exception)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::UShortSeq</name>
    <filename>classCORBA_1_1UShortSeq.html</filename>
    <base>TAO_Unbounded_Sequence&lt; CORBA::UShort &gt;</base>
    <member kind="typedef">
      <type>UShortSeq_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UShortSeq</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UShortSeq</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UShortSeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::UShort *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UShortSeq</name>
      <anchor>a3</anchor>
      <arglist>(const UShortSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UShortSeq</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::WCharSeq</name>
    <filename>classCORBA_1_1WCharSeq.html</filename>
    <base>TAO_Unbounded_Sequence&lt; CORBA::WChar &gt;</base>
    <member kind="typedef">
      <type>WCharSeq_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WCharSeq</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WCharSeq</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WCharSeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::WChar *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WCharSeq</name>
      <anchor>a3</anchor>
      <arglist>(const WCharSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WCharSeq</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>CORBA::WrongTransaction</name>
    <filename>exceptionCORBA_1_1WrongTransaction.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>WrongTransaction</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WrongTransaction</name>
      <anchor>a1</anchor>
      <arglist>(const WrongTransaction &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WrongTransaction</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>WrongTransaction &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const WrongTransaction &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>_tao_type</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>WrongTransaction *</type>
      <name>_downcast</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Exception *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const WrongTransaction *</type>
      <name>_downcast</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Exception const *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::WStringSeq</name>
    <filename>classCORBA_1_1WStringSeq.html</filename>
    <base>TAO_Unbounded_WString_Sequence</base>
    <member kind="typedef">
      <type>WStringSeq_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WStringSeq</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WStringSeq</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WStringSeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::WChar **buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WStringSeq</name>
      <anchor>a3</anchor>
      <arglist>(const WStringSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WStringSeq</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CORBA::CORBA::Any_var</name>
    <filename>classCORBA_1_1CORBA_1_1Any__var.html</filename>
  </compound>
  <compound kind="class">
    <name>CORBA::CORBA::Any_out</name>
    <filename>classCORBA_1_1CORBA_1_1Any__out.html</filename>
  </compound>
  <compound kind="namespace">
    <name>CORBA::CORBA</name>
    <filename>namespaceCORBA_1_1CORBA.html</filename>
    <class kind="class">CORBA::CORBA::Any_var</class>
    <class kind="class">CORBA::CORBA::Any_out</class>
  </compound>
  <compound kind="class">
    <name>CORBA::CORBA::Any_var</name>
    <filename>classCORBA_1_1CORBA_1_1Any__var.html</filename>
  </compound>
  <compound kind="class">
    <name>CORBA::CORBA::Any_out</name>
    <filename>classCORBA_1_1CORBA_1_1Any__out.html</filename>
  </compound>
  <compound kind="namespace">
    <name>Dynamic</name>
    <filename>namespaceDynamic.html</filename>
    <class kind="struct">Dynamic::Parameter</class>
    <class kind="class">Dynamic::ParameterList</class>
    <class kind="class">Dynamic::ExceptionList</class>
    <member kind="typedef">
      <type>sequence&lt; Parameter &gt;</type>
      <name>ParameterList</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::StringSeq</type>
      <name>ContextList</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; CORBA::TypeCode &gt;</type>
      <name>ExceptionList</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::StringSeq</type>
      <name>RequestContext</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; Parameter &gt;</type>
      <name>Parameter_var</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; Parameter, Parameter_var &gt;</type>
      <name>Parameter_out</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_VarSeq_Var_T&lt; ParameterList, Parameter &gt;</type>
      <name>ParameterList_var</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; ParameterList, ParameterList_var, Parameter &gt;</type>
      <name>ParameterList_out</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::StringSeq_var</type>
      <name>ContextList_var</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::StringSeq_out</type>
      <name>ContextList_out</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_MngSeq_Var_T&lt; ExceptionList, TAO_Pseudo_Object_Manager&lt; CORBA::TypeCode &gt; &gt;</type>
      <name>ExceptionList_var</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_MngSeq_Out_T&lt; ExceptionList, ExceptionList_var, TAO_Pseudo_Object_Manager&lt; CORBA::TypeCode &gt; &gt;</type>
      <name>ExceptionList_out</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::StringSeq_var</type>
      <name>RequestContext_var</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::StringSeq_out</type>
      <name>RequestContext_out</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>typeprefix Dynamic omg</type>
      <name>org</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_Parameter</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ParameterList</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ContextList</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ExceptionList</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_RequestContext</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dynamic::Parameter</name>
    <filename>structDynamic_1_1Parameter.html</filename>
    <member kind="typedef">
      <type>Parameter_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>any</type>
      <name>argument</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::ParameterMode</type>
      <name>mode</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Any</type>
      <name>argument</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dynamic::ParameterList</name>
    <filename>classDynamic_1_1ParameterList.html</filename>
    <base>TAO_Unbounded_Sequence&lt; Parameter &gt;</base>
    <member kind="typedef">
      <type>ParameterList_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterList</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterList</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterList</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, Parameter *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterList</name>
      <anchor>a3</anchor>
      <arglist>(const ParameterList &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ParameterList</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dynamic::ExceptionList</name>
    <filename>classDynamic_1_1ExceptionList.html</filename>
    <base>TAO_Unbounded_Pseudo_Sequence&lt; CORBA::TypeCode &gt;</base>
    <member kind="typedef">
      <type>ExceptionList_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExceptionList</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExceptionList</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExceptionList</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::TypeCode_ptr *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExceptionList</name>
      <anchor>a3</anchor>
      <arglist>(const ExceptionList &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ExceptionList</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>GIOP</name>
    <filename>namespaceGIOP.html</filename>
    <class kind="struct">GIOP::Version</class>
    <class kind="struct">GIOP::IORAddressingInfo</class>
    <class kind="union">GIOP::TargetAddress</class>
    <member kind="typedef">
      <type>short</type>
      <name>AddressingDisposition</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::Short_out</type>
      <name>AddressingDisposition_out</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Fixed_Var_T&lt; Version &gt;</type>
      <name>Version_var</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Version &amp;</type>
      <name>Version_out</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; IORAddressingInfo &gt;</type>
      <name>IORAddressingInfo_var</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; IORAddressingInfo, IORAddressingInfo_var &gt;</type>
      <name>IORAddressingInfo_out</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; TargetAddress &gt;</type>
      <name>TargetAddress_var</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; TargetAddress, TargetAddress_var &gt;</type>
      <name>TargetAddress_out</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const short</type>
      <name>KeyAddr</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const short</type>
      <name>ProfileAddr</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const short</type>
      <name>ReferenceAddr</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_AddressingDisposition</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_Version</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_IORAddressingInfo</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_TargetAddress</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GIOP::Version</name>
    <filename>structGIOP_1_1Version.html</filename>
    <member kind="typedef">
      <type>Version_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>octet</type>
      <name>major</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>octet</type>
      <name>minor</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Octet</type>
      <name>major</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Octet</type>
      <name>minor</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GIOP::IORAddressingInfo</name>
    <filename>structGIOP_1_1IORAddressingInfo.html</filename>
    <member kind="typedef">
      <type>IORAddressingInfo_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>selected_profile_index</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IOP::IOR</type>
      <name>ior</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::ULong</type>
      <name>selected_profile_index</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>GIOP::TargetAddress</name>
    <filename>unionGIOP_1_1TargetAddress.html</filename>
    <member kind="typedef">
      <type>TargetAddress_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TargetAddress</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TargetAddress</name>
      <anchor>a1</anchor>
      <arglist>(const TargetAddress &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TargetAddress</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TargetAddress &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TargetAddress &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_d</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Short)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Short</type>
      <name>_d</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>object_key</name>
      <anchor>a6</anchor>
      <arglist>(const CORBA::OctetSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const CORBA::OctetSeq &amp;</type>
      <name>object_key</name>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::OctetSeq &amp;</type>
      <name>object_key</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>profile</name>
      <anchor>a9</anchor>
      <arglist>(const IOP::TaggedProfile &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const IOP::TaggedProfile &amp;</type>
      <name>profile</name>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>IOP::TaggedProfile &amp;</type>
      <name>profile</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ior</name>
      <anchor>a12</anchor>
      <arglist>(const ACE_NESTED_CLASS(GIOP, IORAddressingInfo)&amp;)</arglist>
    </member>
    <member kind="function">
      <type>const</type>
      <name>ACE_NESTED_CLASS</name>
      <anchor>a13</anchor>
      <arglist>(GIOP, IORAddressingInfo)&amp;ior(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACE_NESTED_CLASS</name>
      <anchor>a14</anchor>
      <arglist>(GIOP, IORAddressingInfo)&amp;ior(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_default</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>CORBA::OctetSeq</type>
      <name>object_key</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IOP::TaggedProfile</type>
      <name>profile</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IORAddressingInfo</type>
      <name>ior</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>_reset</name>
      <anchor>d0</anchor>
      <arglist>(CORBA::Short, CORBA::Boolean)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Short</type>
      <name>disc_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Short</type>
      <name>holder_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GIOP::TargetAddress::@7</type>
      <name>u_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ACE_NESTED_CLASS</name>
      <anchor>d0</anchor>
      <arglist>(GIOP, IORAddressingInfo)*ior_</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::OctetSeq *</type>
      <name>object_key_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IOP::TaggedProfile *</type>
      <name>profile_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IIOP</name>
    <filename>namespaceIIOP.html</filename>
    <class kind="struct">IIOP::ListenPoint</class>
    <class kind="struct">IIOP::BiDirIIOPServiceContext</class>
    <class kind="class">IIOP::ListenPointList</class>
    <member kind="typedef">
      <type>sequence&lt; ListenPoint &gt;</type>
      <name>ListenPointList</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; ListenPoint &gt;</type>
      <name>ListenPoint_var</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; ListenPoint, ListenPoint_var &gt;</type>
      <name>ListenPoint_out</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_VarSeq_Var_T&lt; ListenPointList, ListenPoint &gt;</type>
      <name>ListenPointList_var</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; ListenPointList, ListenPointList_var, ListenPoint &gt;</type>
      <name>ListenPointList_out</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; BiDirIIOPServiceContext &gt;</type>
      <name>BiDirIIOPServiceContext_var</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; BiDirIIOPServiceContext, BiDirIIOPServiceContext_var &gt;</type>
      <name>BiDirIIOPServiceContext_out</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ListenPoint</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ListenPointList</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_BiDirIIOPServiceContext</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IIOP::ListenPoint</name>
    <filename>structIIOP_1_1ListenPoint.html</filename>
    <member kind="typedef">
      <type>ListenPoint_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>host</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>port</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_String_Manager</type>
      <name>host</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::UShort</type>
      <name>port</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IIOP::BiDirIIOPServiceContext</name>
    <filename>structIIOP_1_1BiDirIIOPServiceContext.html</filename>
    <member kind="typedef">
      <type>BiDirIIOPServiceContext_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>ListenPointList</type>
      <name>listen_points</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IIOP::ListenPointList</type>
      <name>listen_points</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IIOP::ListenPointList</name>
    <filename>classIIOP_1_1ListenPointList.html</filename>
    <base>TAO_Unbounded_Sequence&lt; ListenPoint &gt;</base>
    <member kind="typedef">
      <type>ListenPointList_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListenPointList</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListenPointList</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListenPointList</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, ListenPoint *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListenPointList</name>
      <anchor>a3</anchor>
      <arglist>(const ListenPointList &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ListenPointList</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IOP</name>
    <filename>namespaceIOP.html</filename>
    <class kind="interface">IOP::Codec</class>
    <class kind="exception">IOP::Codec::InvalidTypeForEncoding</class>
    <class kind="exception">IOP::Codec::FormatMismatch</class>
    <class kind="exception">IOP::Codec::TypeMismatch</class>
    <class kind="struct">IOP::Encoding</class>
    <class kind="interface">IOP::CodecFactory</class>
    <class kind="exception">IOP::CodecFactory::UnknownEncoding</class>
    <class kind="struct">IOP::TaggedProfile</class>
    <class kind="struct">IOP::IOR</class>
    <class kind="struct">IOP::TaggedComponent</class>
    <class kind="struct">IOP::ServiceContext</class>
    <class kind="class">IOP::TaggedProfileSeq</class>
    <class kind="class">IOP::MultipleComponentProfile</class>
    <class kind="class">IOP::TaggedComponentList</class>
    <class kind="class">IOP::TaggedComponentSeq</class>
    <class kind="class">IOP::ServiceContextList</class>
    <member kind="typedef">
      <type>short</type>
      <name>EncodingFormat</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Codec *</type>
      <name>Codec_ptr</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; Codec &gt;</type>
      <name>Codec_var</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; Codec &gt;</type>
      <name>Codec_out</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::Short_out</type>
      <name>EncodingFormat_out</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Fixed_Var_T&lt; Encoding &gt;</type>
      <name>Encoding_var</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Encoding &amp;</type>
      <name>Encoding_out</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CodecFactory *</type>
      <name>CodecFactory_ptr</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; CodecFactory &gt;</type>
      <name>CodecFactory_var</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; CodecFactory &gt;</type>
      <name>CodecFactory_out</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>ProfileId</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; TaggedProfile &gt;</type>
      <name>TaggedProfileSeq</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>ComponentId</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; TaggedComponent &gt;</type>
      <name>MultipleComponentProfile</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; TaggedComponent &gt;</type>
      <name>TaggedComponentList</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; TaggedComponent &gt;</type>
      <name>TaggedComponentSeq</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>ServiceId</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; ServiceContext &gt;</type>
      <name>ServiceContextList</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::ULong_out</type>
      <name>ProfileId_out</name>
      <anchor>a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; TaggedProfile &gt;</type>
      <name>TaggedProfile_var</name>
      <anchor>a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; TaggedProfile, TaggedProfile_var &gt;</type>
      <name>TaggedProfile_out</name>
      <anchor>a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_VarSeq_Var_T&lt; TaggedProfileSeq, TaggedProfile &gt;</type>
      <name>TaggedProfileSeq_var</name>
      <anchor>a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; TaggedProfileSeq, TaggedProfileSeq_var, TaggedProfile &gt;</type>
      <name>TaggedProfileSeq_out</name>
      <anchor>a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; IOR &gt;</type>
      <name>IOR_var</name>
      <anchor>a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; IOR, IOR_var &gt;</type>
      <name>IOR_out</name>
      <anchor>a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::ULong_out</type>
      <name>ComponentId_out</name>
      <anchor>a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; TaggedComponent &gt;</type>
      <name>TaggedComponent_var</name>
      <anchor>a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; TaggedComponent, TaggedComponent_var &gt;</type>
      <name>TaggedComponent_out</name>
      <anchor>a75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_VarSeq_Var_T&lt; MultipleComponentProfile, TaggedComponent &gt;</type>
      <name>MultipleComponentProfile_var</name>
      <anchor>a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; MultipleComponentProfile, MultipleComponentProfile_var, TaggedComponent &gt;</type>
      <name>MultipleComponentProfile_out</name>
      <anchor>a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_VarSeq_Var_T&lt; TaggedComponentList, TaggedComponent &gt;</type>
      <name>TaggedComponentList_var</name>
      <anchor>a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; TaggedComponentList, TaggedComponentList_var, TaggedComponent &gt;</type>
      <name>TaggedComponentList_out</name>
      <anchor>a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_VarSeq_Var_T&lt; TaggedComponentSeq, TaggedComponent &gt;</type>
      <name>TaggedComponentSeq_var</name>
      <anchor>a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; TaggedComponentSeq, TaggedComponentSeq_var, TaggedComponent &gt;</type>
      <name>TaggedComponentSeq_out</name>
      <anchor>a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::ULong_out</type>
      <name>ServiceId_out</name>
      <anchor>a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; ServiceContext &gt;</type>
      <name>ServiceContext_var</name>
      <anchor>a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; ServiceContext, ServiceContext_var &gt;</type>
      <name>ServiceContext_out</name>
      <anchor>a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_VarSeq_Var_T&lt; ServiceContextList, ServiceContext &gt;</type>
      <name>ServiceContextList_var</name>
      <anchor>a85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; ServiceContextList, ServiceContextList_var, ServiceContext &gt;</type>
      <name>ServiceContextList_out</name>
      <anchor>a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const EncodingFormat</type>
      <name>ENCODING_CDR_ENCAPS</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_Codec</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_EncodingFormat</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_Encoding</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_CodecFactory</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ProfileId</type>
      <name>TAG_INTERNET_IOP</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ProfileId</type>
      <name>TAG_MULTIPLE_COMPONENTS</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_ORB_TYPE</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_CODE_SETS</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_POLICIES</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_ALTERNATE_IIOP_ADDRESS</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_COMPLETE_OBJECT_KEY</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_ENDPOINT_ID_POSITION</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_LOCATION_POLICY</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_DCE_STRING_BINDING</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_DCE_BINDING_NAME</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_DCE_NO_PIPES</name>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>TransactionService</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>CodeSets</name>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>ChainBypassCheck</name>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>ChainBypassInfo</name>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>LogicalThreadId</name>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>BI_DIR_IIOP</name>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>SendingContextRunTime</name>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>INVOCATION_POLICIES</name>
      <anchor>a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>UnknownExceptionInfo</name>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>RTCorbaPriority</name>
      <anchor>a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>RTCorbaPriorityRange</name>
      <anchor>a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_FT_GROUP</name>
      <anchor>a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_FT_PRIMARY</name>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_FT_HEARTBEAT_ENABLED</name>
      <anchor>a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>FT_GROUP_VERSION</name>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ServiceId</type>
      <name>FT_REQUEST</name>
      <anchor>a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ProfileId</type>
      <name>TAG_UIPMC</name>
      <anchor>a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_GROUP</name>
      <anchor>a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ComponentId</type>
      <name>TAG_GROUP_IIOP</name>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ProfileId</name>
      <anchor>a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_TaggedProfile</name>
      <anchor>a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_TaggedProfileSeq</name>
      <anchor>a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_IOR</name>
      <anchor>a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ComponentId</name>
      <anchor>a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_TaggedComponent</name>
      <anchor>a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_MultipleComponentProfile</name>
      <anchor>a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_TaggedComponentList</name>
      <anchor>a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_TaggedComponentSeq</name>
      <anchor>a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServiceId</name>
      <anchor>a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServiceContext</name>
      <anchor>a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServiceContextList</name>
      <anchor>a65</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>IOP::Codec</name>
    <filename>interfaceIOP_1_1Codec.html</filename>
    <base virtualness="virtual">CORBA::Object</base>
    <member kind="typedef">
      <type>Codec_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Codec_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::OctetSeq</type>
      <name>encode</name>
      <anchor>a0</anchor>
      <arglist>(in any data)</arglist>
    </member>
    <member kind="function">
      <type>any</type>
      <name>decode</name>
      <anchor>a1</anchor>
      <arglist>(in CORBA::OctetSeq data)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::OctetSeq</type>
      <name>encode_value</name>
      <anchor>a2</anchor>
      <arglist>(in any data)</arglist>
    </member>
    <member kind="function">
      <type>any</type>
      <name>decode_value</name>
      <anchor>a3</anchor>
      <arglist>(in CORBA::OctetSeq data, in CORBA::TypeCode tc)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ::CORBA::OctetSeq *</type>
      <name>encode</name>
      <anchor>a4</anchor>
      <arglist>(const ::CORBA::Any &amp;data ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Any *</type>
      <name>decode</name>
      <anchor>a5</anchor>
      <arglist>(const ::CORBA::OctetSeq &amp;data ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ::CORBA::OctetSeq *</type>
      <name>encode_value</name>
      <anchor>a6</anchor>
      <arglist>(const ::CORBA::Any &amp;data ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Any *</type>
      <name>decode_value</name>
      <anchor>a7</anchor>
      <arglist>(const ::CORBA::OctetSeq &amp;data,::CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a8</anchor>
      <arglist>(const char *type_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a10</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Codec_ptr</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(Codec_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_release</name>
      <anchor>e1</anchor>
      <arglist>(Codec_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Codec_ptr</type>
      <name>_narrow</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Codec_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>e3</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Codec_ptr</type>
      <name>_nil</name>
      <anchor>e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e5</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_InvalidTypeForEncoding</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_FormatMismatch</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_TypeMismatch</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Codec</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Codec</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Codec</name>
      <anchor>d0</anchor>
      <arglist>(const Codec &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const Codec &amp;)</arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>IOP::Codec::FormatMismatch</name>
    <filename>exceptionIOP_1_1Codec_1_1FormatMismatch.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>FormatMismatch</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormatMismatch</name>
      <anchor>a1</anchor>
      <arglist>(const FormatMismatch &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FormatMismatch</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>FormatMismatch &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const FormatMismatch &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>_tao_type</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>FormatMismatch *</type>
      <name>_downcast</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Exception *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const FormatMismatch *</type>
      <name>_downcast</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Exception const *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>IOP::Codec::InvalidTypeForEncoding</name>
    <filename>exceptionIOP_1_1Codec_1_1InvalidTypeForEncoding.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>InvalidTypeForEncoding</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidTypeForEncoding</name>
      <anchor>a1</anchor>
      <arglist>(const InvalidTypeForEncoding &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InvalidTypeForEncoding</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>InvalidTypeForEncoding &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const InvalidTypeForEncoding &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>_tao_type</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>InvalidTypeForEncoding *</type>
      <name>_downcast</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Exception *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const InvalidTypeForEncoding *</type>
      <name>_downcast</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Exception const *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>IOP::Codec::TypeMismatch</name>
    <filename>exceptionIOP_1_1Codec_1_1TypeMismatch.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>TypeMismatch</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeMismatch</name>
      <anchor>a1</anchor>
      <arglist>(const TypeMismatch &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TypeMismatch</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TypeMismatch &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TypeMismatch &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>_tao_type</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TypeMismatch *</type>
      <name>_downcast</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Exception *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const TypeMismatch *</type>
      <name>_downcast</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Exception const *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>IOP::Codec::InvalidTypeForEncoding</name>
    <filename>exceptionIOP_1_1Codec_1_1InvalidTypeForEncoding.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>InvalidTypeForEncoding</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidTypeForEncoding</name>
      <anchor>a1</anchor>
      <arglist>(const InvalidTypeForEncoding &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InvalidTypeForEncoding</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>InvalidTypeForEncoding &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const InvalidTypeForEncoding &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>_tao_type</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>InvalidTypeForEncoding *</type>
      <name>_downcast</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Exception *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const InvalidTypeForEncoding *</type>
      <name>_downcast</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Exception const *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>IOP::Codec::FormatMismatch</name>
    <filename>exceptionIOP_1_1Codec_1_1FormatMismatch.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>FormatMismatch</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormatMismatch</name>
      <anchor>a1</anchor>
      <arglist>(const FormatMismatch &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FormatMismatch</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>FormatMismatch &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const FormatMismatch &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>_tao_type</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>FormatMismatch *</type>
      <name>_downcast</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Exception *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const FormatMismatch *</type>
      <name>_downcast</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Exception const *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>IOP::Codec::TypeMismatch</name>
    <filename>exceptionIOP_1_1Codec_1_1TypeMismatch.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>TypeMismatch</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeMismatch</name>
      <anchor>a1</anchor>
      <arglist>(const TypeMismatch &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TypeMismatch</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TypeMismatch &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const TypeMismatch &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>_tao_type</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TypeMismatch *</type>
      <name>_downcast</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Exception *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const TypeMismatch *</type>
      <name>_downcast</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Exception const *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IOP::Encoding</name>
    <filename>structIOP_1_1Encoding.html</filename>
    <member kind="typedef">
      <type>Encoding_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>EncodingFormat</type>
      <name>format</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>octet</type>
      <name>major_version</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>octet</type>
      <name>minor_version</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IOP::EncodingFormat</type>
      <name>format</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Octet</type>
      <name>major_version</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Octet</type>
      <name>minor_version</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>IOP::CodecFactory</name>
    <filename>interfaceIOP_1_1CodecFactory.html</filename>
    <base virtualness="virtual">CORBA::Object</base>
    <member kind="typedef">
      <type>CodecFactory_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CodecFactory_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Codec</type>
      <name>create_codec</name>
      <anchor>a0</anchor>
      <arglist>(in Encoding enc)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ::IOP::Codec_ptr</type>
      <name>create_codec</name>
      <anchor>a1</anchor>
      <arglist>(const ::IOP::Encoding &amp;enc ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a2</anchor>
      <arglist>(const char *type_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a4</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CodecFactory_ptr</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(CodecFactory_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_release</name>
      <anchor>e1</anchor>
      <arglist>(CodecFactory_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CodecFactory_ptr</type>
      <name>_narrow</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CodecFactory_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>e3</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CodecFactory_ptr</type>
      <name>_nil</name>
      <anchor>e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e5</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_UnknownEncoding</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CodecFactory</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CodecFactory</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CodecFactory</name>
      <anchor>d0</anchor>
      <arglist>(const CodecFactory &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const CodecFactory &amp;)</arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>IOP::CodecFactory::UnknownEncoding</name>
    <filename>exceptionIOP_1_1CodecFactory_1_1UnknownEncoding.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>UnknownEncoding</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnknownEncoding</name>
      <anchor>a1</anchor>
      <arglist>(const UnknownEncoding &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UnknownEncoding</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>UnknownEncoding &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const UnknownEncoding &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>_tao_type</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>UnknownEncoding *</type>
      <name>_downcast</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Exception *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const UnknownEncoding *</type>
      <name>_downcast</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Exception const *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>IOP::CodecFactory::UnknownEncoding</name>
    <filename>exceptionIOP_1_1CodecFactory_1_1UnknownEncoding.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>UnknownEncoding</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnknownEncoding</name>
      <anchor>a1</anchor>
      <arglist>(const UnknownEncoding &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UnknownEncoding</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>UnknownEncoding &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const UnknownEncoding &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>_tao_type</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>UnknownEncoding *</type>
      <name>_downcast</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Exception *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const UnknownEncoding *</type>
      <name>_downcast</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Exception const *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IOP::TaggedProfile</name>
    <filename>structIOP_1_1TaggedProfile.html</filename>
    <member kind="typedef">
      <type>TaggedProfile_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>ProfileId</type>
      <name>tag</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::OctetSeq</type>
      <name>profile_data</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IOP::ProfileId</type>
      <name>tag</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IOP::IOR</name>
    <filename>structIOP_1_1IOR.html</filename>
    <member kind="typedef">
      <type>IOR_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>type_id</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TaggedProfileSeq</type>
      <name>profiles</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_String_Manager</type>
      <name>type_id</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IOP::TaggedProfileSeq</type>
      <name>profiles</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IOP::TaggedComponent</name>
    <filename>structIOP_1_1TaggedComponent.html</filename>
    <member kind="typedef">
      <type>TaggedComponent_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>ComponentId</type>
      <name>tag</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::OctetSeq</type>
      <name>component_data</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IOP::ComponentId</type>
      <name>tag</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IOP::ServiceContext</name>
    <filename>structIOP_1_1ServiceContext.html</filename>
    <member kind="typedef">
      <type>ServiceContext_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>ServiceId</type>
      <name>context_id</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::OctetSeq</type>
      <name>context_data</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IOP::ServiceId</type>
      <name>context_id</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IOP::TaggedProfileSeq</name>
    <filename>classIOP_1_1TaggedProfileSeq.html</filename>
    <base>TAO_Unbounded_Sequence&lt; TaggedProfile &gt;</base>
    <member kind="typedef">
      <type>TaggedProfileSeq_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaggedProfileSeq</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaggedProfileSeq</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaggedProfileSeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, TaggedProfile *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaggedProfileSeq</name>
      <anchor>a3</anchor>
      <arglist>(const TaggedProfileSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TaggedProfileSeq</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IOP::MultipleComponentProfile</name>
    <filename>classIOP_1_1MultipleComponentProfile.html</filename>
    <base>TAO_Unbounded_Sequence&lt; TaggedComponent &gt;</base>
    <member kind="typedef">
      <type>MultipleComponentProfile_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultipleComponentProfile</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultipleComponentProfile</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultipleComponentProfile</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, TaggedComponent *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultipleComponentProfile</name>
      <anchor>a3</anchor>
      <arglist>(const MultipleComponentProfile &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MultipleComponentProfile</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IOP::TaggedComponentList</name>
    <filename>classIOP_1_1TaggedComponentList.html</filename>
    <base>TAO_Unbounded_Sequence&lt; TaggedComponent &gt;</base>
    <member kind="typedef">
      <type>TaggedComponentList_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaggedComponentList</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaggedComponentList</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaggedComponentList</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, TaggedComponent *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaggedComponentList</name>
      <anchor>a3</anchor>
      <arglist>(const TaggedComponentList &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TaggedComponentList</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IOP::TaggedComponentSeq</name>
    <filename>classIOP_1_1TaggedComponentSeq.html</filename>
    <base>TAO_Unbounded_Sequence&lt; TaggedComponent &gt;</base>
    <member kind="typedef">
      <type>TaggedComponentSeq_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaggedComponentSeq</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaggedComponentSeq</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaggedComponentSeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, TaggedComponent *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaggedComponentSeq</name>
      <anchor>a3</anchor>
      <arglist>(const TaggedComponentSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TaggedComponentSeq</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IOP::ServiceContextList</name>
    <filename>classIOP_1_1ServiceContextList.html</filename>
    <base>TAO_Unbounded_Sequence&lt; ServiceContext &gt;</base>
    <member kind="typedef">
      <type>ServiceContextList_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ServiceContextList</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ServiceContextList</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ServiceContextList</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, ServiceContext *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ServiceContextList</name>
      <anchor>a3</anchor>
      <arglist>(const ServiceContextList &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ServiceContextList</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Messaging</name>
    <filename>namespaceMessaging.html</filename>
    <class kind="struct">Messaging::PolicyValue</class>
    <class kind="class">Messaging::PolicyValueSeq</class>
    <member kind="typedef">
      <type>sequence&lt; PolicyValue &gt;</type>
      <name>PolicyValueSeq</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; PolicyValue &gt;</type>
      <name>PolicyValue_var</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; PolicyValue, PolicyValue_var &gt;</type>
      <name>PolicyValue_out</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_VarSeq_Var_T&lt; PolicyValueSeq, PolicyValue &gt;</type>
      <name>PolicyValueSeq_var</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; PolicyValueSeq, PolicyValueSeq_var, PolicyValue &gt;</type>
      <name>PolicyValueSeq_out</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>SyncScope</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::Short_out</type>
      <name>SyncScope_out</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IOP::ComponentId</type>
      <name>TAG_POLICIES</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IOP::ServiceId</type>
      <name>INVOCATION_POLICIES</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_PolicyValue</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_PolicyValueSeq</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SyncScope</type>
      <name>SYNC_NONE</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SyncScope</type>
      <name>SYNC_WITH_TRANSPORT</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SyncScope</type>
      <name>SYNC_WITH_SERVER</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SyncScope</type>
      <name>SYNC_WITH_TARGET</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Messaging::PolicyValue</name>
    <filename>structMessaging_1_1PolicyValue.html</filename>
    <member kind="typedef">
      <type>PolicyValue_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>CORBA::PolicyType</type>
      <name>ptype</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::OctetSeq</type>
      <name>pvalue</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Messaging::PolicyValueSeq</name>
    <filename>classMessaging_1_1PolicyValueSeq.html</filename>
    <base>TAO_Unbounded_Sequence&lt; PolicyValue &gt;</base>
    <member kind="typedef">
      <type>PolicyValueSeq_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolicyValueSeq</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolicyValueSeq</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolicyValueSeq</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, PolicyValue *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolicyValueSeq</name>
      <anchor>a3</anchor>
      <arglist>(const PolicyValueSeq &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PolicyValueSeq</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ORB</name>
    <filename>namespaceORB.html</filename>
  </compound>
  <compound kind="namespace">
    <name>POA_CONV_FRAME</name>
    <filename>namespacePOA__CONV__FRAME.html</filename>
  </compound>
  <compound kind="namespace">
    <name>POA_CORBA</name>
    <filename>namespacePOA__CORBA.html</filename>
  </compound>
  <compound kind="namespace">
    <name>POA_GIOP</name>
    <filename>namespacePOA__GIOP.html</filename>
  </compound>
  <compound kind="namespace">
    <name>PortableInterceptor</name>
    <filename>namespacePortableInterceptor.html</filename>
    <class kind="interface">PortableInterceptor::ClientRequestInfo</class>
    <class kind="exception">PortableInterceptor::InvalidSlot</class>
    <class kind="interface">PortableInterceptor::ORBInitializer</class>
    <class kind="interface">PortableInterceptor::ORBInitInfo</class>
    <class kind="exception">PortableInterceptor::ORBInitInfo::DuplicateName</class>
    <class kind="exception">PortableInterceptor::ORBInitInfo::InvalidName</class>
    <class kind="interface">PortableInterceptor::PolicyFactory</class>
    <class kind="interface">PortableInterceptor::Interceptor</class>
    <class kind="exception">PortableInterceptor::ForwardRequest</class>
    <class kind="interface">PortableInterceptor::Current</class>
    <class kind="interface">PortableInterceptor::ClientRequestInterceptor</class>
    <class kind="interface">PortableInterceptor::ServerRequestInterceptor</class>
    <class kind="interface">PortableInterceptor::RequestInfo</class>
    <class kind="interface">PortableInterceptor::ServerRequestInfo</class>
    <member kind="typedef">
      <type>ClientRequestInfo *</type>
      <name>ClientRequestInfo_ptr</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; ClientRequestInfo &gt;</type>
      <name>ClientRequestInfo_var</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; ClientRequestInfo &gt;</type>
      <name>ClientRequestInfo_out</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Interceptor *</type>
      <name>Interceptor_ptr</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IORInterceptor *</type>
      <name>IORInterceptor_ptr</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IORInfo *</type>
      <name>IORInfo_ptr</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ORBInitializer *</type>
      <name>ORBInitializer_ptr</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; ORBInitializer &gt;</type>
      <name>ORBInitializer_var</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ORBInitInfo *</type>
      <name>ORBInitInfo_ptr</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; ORBInitInfo &gt;</type>
      <name>ORBInitInfo_var</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; ORBInitInfo &gt;</type>
      <name>ORBInitInfo_out</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; ORBInitializer &gt;</type>
      <name>ORBInitializer_out</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClientRequestInterceptor *</type>
      <name>ClientRequestInterceptor_ptr</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; ClientRequestInterceptor &gt;</type>
      <name>ClientRequestInterceptor_var</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; ClientRequestInterceptor &gt;</type>
      <name>ClientRequestInterceptor_out</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ServerRequestInterceptor *</type>
      <name>ServerRequestInterceptor_ptr</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; ServerRequestInterceptor &gt;</type>
      <name>ServerRequestInterceptor_var</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; ServerRequestInterceptor &gt;</type>
      <name>ServerRequestInterceptor_out</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; IORInterceptor &gt;</type>
      <name>IORInterceptor_var</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; IORInterceptor &gt;</type>
      <name>IORInterceptor_out</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PolicyFactory *</type>
      <name>PolicyFactory_ptr</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; PolicyFactory &gt;</type>
      <name>PolicyFactory_var</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; PolicyFactory &gt;</type>
      <name>PolicyFactory_out</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>string</type>
      <name>ServerId</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>string</type>
      <name>ORBId</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::StringSeq</type>
      <name>AdapterName</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::OctetSeq</type>
      <name>ObjectId</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long</type>
      <name>AdapterManagerId</name>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>AdapterState</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>SlotId</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>ReplyStatus</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_var</type>
      <name>ServerId_var</name>
      <anchor>a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_out</type>
      <name>ServerId_out</name>
      <anchor>a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_var</type>
      <name>ORBId_var</name>
      <anchor>a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_out</type>
      <name>ORBId_out</name>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::StringSeq_var</type>
      <name>AdapterName_var</name>
      <anchor>a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::StringSeq_out</type>
      <name>AdapterName_out</name>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::OctetSeq_var</type>
      <name>ObjectId_var</name>
      <anchor>a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::OctetSeq_out</type>
      <name>ObjectId_out</name>
      <anchor>a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::Long_out</type>
      <name>AdapterManagerId_out</name>
      <anchor>a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::Short_out</type>
      <name>AdapterState_out</name>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::ULong_out</type>
      <name>SlotId_out</name>
      <anchor>a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::Short_out</type>
      <name>ReplyStatus_out</name>
      <anchor>a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; Interceptor &gt;</type>
      <name>Interceptor_var</name>
      <anchor>a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; Interceptor &gt;</type>
      <name>Interceptor_out</name>
      <anchor>a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Current *</type>
      <name>Current_ptr</name>
      <anchor>a75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; Current &gt;</type>
      <name>Current_var</name>
      <anchor>a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; Current &gt;</type>
      <name>Current_out</name>
      <anchor>a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RequestInfo *</type>
      <name>RequestInfo_ptr</name>
      <anchor>a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; RequestInfo &gt;</type>
      <name>RequestInfo_var</name>
      <anchor>a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; RequestInfo &gt;</type>
      <name>RequestInfo_out</name>
      <anchor>a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ServerRequestInfo *</type>
      <name>ServerRequestInfo_ptr</name>
      <anchor>a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; ServerRequestInfo &gt;</type>
      <name>ServerRequestInfo_var</name>
      <anchor>a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; ServerRequestInfo &gt;</type>
      <name>ServerRequestInfo_out</name>
      <anchor>a85</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TAO_Export void</type>
      <name>register_orb_initializer</name>
      <anchor>a86</anchor>
      <arglist>(ORBInitializer_ptr init ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="variable">
      <type>typeprefix PortableInterceptor omg</type>
      <name>org</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ClientRequestInfo</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_InvalidSlot</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ORBInitializer</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ORBInitInfo</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServerId</name>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ORBId</name>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_AdapterName</name>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ObjectId</name>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_AdapterManagerId</name>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_AdapterState</name>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_SlotId</name>
      <anchor>a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ReplyStatus</name>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_PolicyFactory</name>
      <anchor>a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AdapterState</type>
      <name>HOLDING</name>
      <anchor>a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AdapterState</type>
      <name>ACTIVE</name>
      <anchor>a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AdapterState</type>
      <name>DISCARDING</name>
      <anchor>a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AdapterState</type>
      <name>INACTIVE</name>
      <anchor>a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AdapterState</type>
      <name>NON_EXISTENT</name>
      <anchor>a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ReplyStatus</type>
      <name>SUCCESSFUL</name>
      <anchor>a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ReplyStatus</type>
      <name>SYSTEM_EXCEPTION</name>
      <anchor>a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ReplyStatus</type>
      <name>USER_EXCEPTION</name>
      <anchor>a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ReplyStatus</type>
      <name>LOCATION_FORWARD</name>
      <anchor>a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ReplyStatus</type>
      <name>TRANSPORT_RETRY</name>
      <anchor>a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ReplyStatus</type>
      <name>UNKNOWN</name>
      <anchor>a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_Interceptor</name>
      <anchor>a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ForwardRequest</name>
      <anchor>a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_Current</name>
      <anchor>a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ClientRequestInterceptor</name>
      <anchor>a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServerRequestInterceptor</name>
      <anchor>a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_RequestInfo</name>
      <anchor>a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ServerRequestInfo</name>
      <anchor>a82</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PortableInterceptor::ClientRequestInfo</name>
    <filename>interfacePortableInterceptor_1_1ClientRequestInfo.html</filename>
    <base virtualness="virtual">PortableInterceptor::RequestInfo</base>
    <base>PortableInterceptor::RequestInfo</base>
    <member kind="typedef">
      <type>ClientRequestInfo_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClientRequestInfo_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IOP::TaggedComponent</type>
      <name>get_effective_component</name>
      <anchor>a0</anchor>
      <arglist>(in IOP::ComponentId id)</arglist>
    </member>
    <member kind="function">
      <type>IOP::TaggedComponentSeq</type>
      <name>get_effective_components</name>
      <anchor>a1</anchor>
      <arglist>(in IOP::ComponentId id)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy</type>
      <name>get_request_policy</name>
      <anchor>a2</anchor>
      <arglist>(in CORBA::PolicyType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_request_service_context</name>
      <anchor>a3</anchor>
      <arglist>(in IOP::ServiceContext service_context, in boolean replace)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Object_ptr</type>
      <name>target</name>
      <anchor>a4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Object_ptr</type>
      <name>effective_target</name>
      <anchor>a5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ::IOP::TaggedProfile *</type>
      <name>effective_profile</name>
      <anchor>a6</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Any *</type>
      <name>received_exception</name>
      <anchor>a7</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char *</type>
      <name>received_exception_id</name>
      <anchor>a8</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ::IOP::TaggedComponent *</type>
      <name>get_effective_component</name>
      <anchor>a9</anchor>
      <arglist>(::IOP::ComponentId id ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ::IOP::TaggedComponentSeq *</type>
      <name>get_effective_components</name>
      <anchor>a10</anchor>
      <arglist>(::IOP::ComponentId id ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ::CORBA::Policy_ptr</type>
      <name>get_request_policy</name>
      <anchor>a11</anchor>
      <arglist>(::CORBA::PolicyType type ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add_request_service_context</name>
      <anchor>a12</anchor>
      <arglist>(const ::IOP::ServiceContext &amp;service_context,::CORBA::Boolean replace ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a13</anchor>
      <arglist>(const char *type_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>a14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a15</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ClientRequestInfo_ptr</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(ClientRequestInfo_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_release</name>
      <anchor>e1</anchor>
      <arglist>(ClientRequestInfo_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ClientRequestInfo_ptr</type>
      <name>_narrow</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ClientRequestInfo_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>e3</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ClientRequestInfo_ptr</type>
      <name>_nil</name>
      <anchor>e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e5</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute Object</type>
      <name>target</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute Object</type>
      <name>effective_target</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute IOP::TaggedProfile</type>
      <name>effective_profile</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute any</type>
      <name>received_exception</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute CORBA::RepositoryId</type>
      <name>received_exception_id</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClientRequestInfo</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ClientRequestInfo</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ClientRequestInfo</name>
      <anchor>d0</anchor>
      <arglist>(const ClientRequestInfo &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const ClientRequestInfo &amp;)</arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>PortableInterceptor::InvalidSlot</name>
    <filename>exceptionPortableInterceptor_1_1InvalidSlot.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>InvalidSlot</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidSlot</name>
      <anchor>a1</anchor>
      <arglist>(const InvalidSlot &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InvalidSlot</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>InvalidSlot &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const InvalidSlot &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>_tao_type</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>InvalidSlot *</type>
      <name>_downcast</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Exception *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const InvalidSlot *</type>
      <name>_downcast</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Exception const *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PortableInterceptor::ORBInitializer</name>
    <filename>interfacePortableInterceptor_1_1ORBInitializer.html</filename>
    <base virtualness="virtual">CORBA::Object</base>
    <member kind="typedef">
      <type>ORBInitializer_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ORBInitializer_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pre_init</name>
      <anchor>a0</anchor>
      <arglist>(in ORBInitInfo info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>post_init</name>
      <anchor>a1</anchor>
      <arglist>(in ORBInitInfo info)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pre_init</name>
      <anchor>a2</anchor>
      <arglist>(::PortableInterceptor::ORBInitInfo_ptr info ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>post_init</name>
      <anchor>a3</anchor>
      <arglist>(::PortableInterceptor::ORBInitInfo_ptr info ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a4</anchor>
      <arglist>(const char *type_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ORBInitializer_ptr</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(ORBInitializer_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_release</name>
      <anchor>e1</anchor>
      <arglist>(ORBInitializer_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ORBInitializer_ptr</type>
      <name>_narrow</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ORBInitializer_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>e3</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ORBInitializer_ptr</type>
      <name>_nil</name>
      <anchor>e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e5</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ORBInitializer</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ORBInitializer</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ORBInitializer</name>
      <anchor>d0</anchor>
      <arglist>(const ORBInitializer &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const ORBInitializer &amp;)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PortableInterceptor::ORBInitInfo</name>
    <filename>interfacePortableInterceptor_1_1ORBInitInfo.html</filename>
    <base virtualness="virtual">CORBA::Object</base>
    <member kind="typedef">
      <type>string</type>
      <name>ObjectId</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ORBInitInfo_ptr</type>
      <name>_ptr_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ORBInitInfo_var</type>
      <name>_var_type</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char *</type>
      <name>ObjectId</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_var</type>
      <name>ObjectId_var</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_out</type>
      <name>ObjectId_out</name>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>register_initial_reference</name>
      <anchor>a0</anchor>
      <arglist>(in ObjectId id, in Object obj)</arglist>
    </member>
    <member kind="function">
      <type>Object</type>
      <name>resolve_initial_references</name>
      <anchor>a1</anchor>
      <arglist>(in ObjectId id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_client_request_interceptor</name>
      <anchor>a2</anchor>
      <arglist>(in ClientRequestInterceptor interceptor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_server_request_interceptor</name>
      <anchor>a3</anchor>
      <arglist>(in ServerRequestInterceptor interceptor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_ior_interceptor</name>
      <anchor>a4</anchor>
      <arglist>(in IORInterceptor interceptor)</arglist>
    </member>
    <member kind="function">
      <type>SlotId</type>
      <name>allocate_slot_id</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>register_policy_factory</name>
      <anchor>a6</anchor>
      <arglist>(in CORBA::PolicyType type, in PolicyFactory policy_factory)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ::CORBA::StringSeq *</type>
      <name>arguments</name>
      <anchor>a7</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char *</type>
      <name>orb_id</name>
      <anchor>a8</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ::IOP::CodecFactory_ptr</type>
      <name>codec_factory</name>
      <anchor>a9</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>register_initial_reference</name>
      <anchor>a10</anchor>
      <arglist>(const char *id,::CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Object_ptr</type>
      <name>resolve_initial_references</name>
      <anchor>a11</anchor>
      <arglist>(const char *id ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add_client_request_interceptor</name>
      <anchor>a12</anchor>
      <arglist>(::PortableInterceptor::ClientRequestInterceptor_ptr interceptor ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add_server_request_interceptor</name>
      <anchor>a13</anchor>
      <arglist>(::PortableInterceptor::ServerRequestInterceptor_ptr interceptor ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add_ior_interceptor</name>
      <anchor>a14</anchor>
      <arglist>(::PortableInterceptor::IORInterceptor_ptr interceptor ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PortableInterceptor::SlotId</type>
      <name>allocate_slot_id</name>
      <anchor>a15</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>register_policy_factory</name>
      <anchor>a16</anchor>
      <arglist>(::CORBA::PolicyType type,::PortableInterceptor::PolicyFactory_ptr policy_factory ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a17</anchor>
      <arglist>(const char *type_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>a18</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a19</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ORBInitInfo_ptr</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(ORBInitInfo_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_release</name>
      <anchor>e1</anchor>
      <arglist>(ORBInitInfo_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ORBInitInfo_ptr</type>
      <name>_narrow</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ORBInitInfo_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>e3</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ORBInitInfo_ptr</type>
      <name>_nil</name>
      <anchor>e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e5</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute CORBA::StringSeq</type>
      <name>arguments</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute string</type>
      <name>orb_id</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute IOP::CodecFactory</type>
      <name>codec_factory</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_ObjectId</name>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_DuplicateName</name>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_InvalidName</name>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ORBInitInfo</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ORBInitInfo</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ORBInitInfo</name>
      <anchor>d0</anchor>
      <arglist>(const ORBInitInfo &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const ORBInitInfo &amp;)</arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>PortableInterceptor::ORBInitInfo::DuplicateName</name>
    <filename>exceptionPortableInterceptor_1_1ORBInitInfo_1_1DuplicateName.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>DuplicateName</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DuplicateName</name>
      <anchor>a1</anchor>
      <arglist>(const DuplicateName &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DuplicateName</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>DuplicateName &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const DuplicateName &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DuplicateName</name>
      <anchor>a8</anchor>
      <arglist>(const char *_tao_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>_tao_type</name>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>DuplicateName *</type>
      <name>_downcast</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Exception *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const DuplicateName *</type>
      <name>_downcast</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Exception const *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>name</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_String_Manager</type>
      <name>name</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>PortableInterceptor::ORBInitInfo::InvalidName</name>
    <filename>exceptionPortableInterceptor_1_1ORBInitInfo_1_1InvalidName.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>InvalidName</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidName</name>
      <anchor>a1</anchor>
      <arglist>(const InvalidName &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InvalidName</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>InvalidName &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const InvalidName &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>_tao_type</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>InvalidName *</type>
      <name>_downcast</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Exception *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const InvalidName *</type>
      <name>_downcast</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Exception const *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>PortableInterceptor::ORBInitInfo::DuplicateName</name>
    <filename>exceptionPortableInterceptor_1_1ORBInitInfo_1_1DuplicateName.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>DuplicateName</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DuplicateName</name>
      <anchor>a1</anchor>
      <arglist>(const DuplicateName &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DuplicateName</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>DuplicateName &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const DuplicateName &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DuplicateName</name>
      <anchor>a8</anchor>
      <arglist>(const char *_tao_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>_tao_type</name>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>DuplicateName *</type>
      <name>_downcast</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Exception *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const DuplicateName *</type>
      <name>_downcast</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Exception const *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>name</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_String_Manager</type>
      <name>name</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>PortableInterceptor::ORBInitInfo::InvalidName</name>
    <filename>exceptionPortableInterceptor_1_1ORBInitInfo_1_1InvalidName.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>InvalidName</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidName</name>
      <anchor>a1</anchor>
      <arglist>(const InvalidName &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InvalidName</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>InvalidName &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const InvalidName &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>_tao_type</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>InvalidName *</type>
      <name>_downcast</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Exception *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const InvalidName *</type>
      <name>_downcast</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Exception const *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PortableInterceptor::PolicyFactory</name>
    <filename>interfacePortableInterceptor_1_1PolicyFactory.html</filename>
    <base virtualness="virtual">CORBA::Object</base>
    <member kind="typedef">
      <type>PolicyFactory_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PolicyFactory_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy</type>
      <name>create_policy</name>
      <anchor>a0</anchor>
      <arglist>(in CORBA::PolicyType type, in any value)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ::CORBA::Policy_ptr</type>
      <name>create_policy</name>
      <anchor>a1</anchor>
      <arglist>(::CORBA::PolicyType type, const ::CORBA::Any &amp;value ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function">
      <type>virtual ::CORBA::Policy_ptr</type>
      <name>_create_policy</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::PolicyType type ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a3</anchor>
      <arglist>(const char *type_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a5</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>PolicyFactory_ptr</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(PolicyFactory_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_release</name>
      <anchor>e1</anchor>
      <arglist>(PolicyFactory_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>PolicyFactory_ptr</type>
      <name>_narrow</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>PolicyFactory_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>e3</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>PolicyFactory_ptr</type>
      <name>_nil</name>
      <anchor>e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e5</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PolicyFactory</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PolicyFactory</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>PolicyFactory</name>
      <anchor>d0</anchor>
      <arglist>(const PolicyFactory &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const PolicyFactory &amp;)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PortableInterceptor::Interceptor</name>
    <filename>interfacePortableInterceptor_1_1Interceptor.html</filename>
    <base virtualness="virtual">CORBA::Object</base>
    <member kind="typedef">
      <type>Interceptor_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Interceptor_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char *</type>
      <name>name</name>
      <anchor>a1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>destroy</name>
      <anchor>a2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a3</anchor>
      <arglist>(const char *type_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a5</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Interceptor_ptr</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(Interceptor_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_release</name>
      <anchor>e1</anchor>
      <arglist>(Interceptor_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Interceptor_ptr</type>
      <name>_narrow</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Interceptor_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>e3</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Interceptor_ptr</type>
      <name>_nil</name>
      <anchor>e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e5</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute string</type>
      <name>name</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Interceptor</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Interceptor</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Interceptor</name>
      <anchor>d0</anchor>
      <arglist>(const Interceptor &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const Interceptor &amp;)</arglist>
    </member>
  </compound>
  <compound kind="exception">
    <name>PortableInterceptor::ForwardRequest</name>
    <filename>exceptionPortableInterceptor_1_1ForwardRequest.html</filename>
    <base>CORBA::UserException</base>
    <member kind="function">
      <type></type>
      <name>ForwardRequest</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForwardRequest</name>
      <anchor>a1</anchor>
      <arglist>(const ForwardRequest &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ForwardRequest</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>ForwardRequest &amp;</type>
      <name>operator=</name>
      <anchor>a3</anchor>
      <arglist>(const ForwardRequest &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Exception *</type>
      <name>_tao_duplicate</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_raise</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_encode</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForwardRequest</name>
      <anchor>a8</anchor>
      <arglist>(const CORBA::Object_ptr _tao_forward)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>_tao_type</name>
      <anchor>a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ForwardRequest *</type>
      <name>_downcast</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Exception *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>const ForwardRequest *</type>
      <name>_downcast</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Exception const *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Exception *</type>
      <name>_alloc</name>
      <anchor>e3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>Object</type>
      <name>forward</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Object_var</type>
      <name>forward</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PortableInterceptor::Current</name>
    <filename>interfacePortableInterceptor_1_1Current.html</filename>
    <base virtualness="virtual">CORBA::Current</base>
    <base>CORBA::Current</base>
    <member kind="typedef">
      <type>Current_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Current_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>any</type>
      <name>get_slot</name>
      <anchor>a0</anchor>
      <arglist>(in SlotId id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_slot</name>
      <anchor>a1</anchor>
      <arglist>(in SlotId id, in any data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Any *</type>
      <name>get_slot</name>
      <anchor>a2</anchor>
      <arglist>(::PortableInterceptor::SlotId id ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set_slot</name>
      <anchor>a3</anchor>
      <arglist>(::PortableInterceptor::SlotId id, const ::CORBA::Any &amp;data ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a4</anchor>
      <arglist>(const char *type_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a6</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Current_ptr</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(Current_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_release</name>
      <anchor>e1</anchor>
      <arglist>(Current_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Current_ptr</type>
      <name>_narrow</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Current_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>e3</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Current_ptr</type>
      <name>_nil</name>
      <anchor>e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e5</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Current</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Current</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Current</name>
      <anchor>d0</anchor>
      <arglist>(const Current &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const Current &amp;)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PortableInterceptor::ClientRequestInterceptor</name>
    <filename>interfacePortableInterceptor_1_1ClientRequestInterceptor.html</filename>
    <base virtualness="virtual">PortableInterceptor::Interceptor</base>
    <base>PortableInterceptor::Interceptor</base>
    <member kind="typedef">
      <type>ClientRequestInterceptor_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClientRequestInterceptor_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_request</name>
      <anchor>a0</anchor>
      <arglist>(in ClientRequestInfo ri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_poll</name>
      <anchor>a1</anchor>
      <arglist>(in ClientRequestInfo ri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receive_reply</name>
      <anchor>a2</anchor>
      <arglist>(in ClientRequestInfo ri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receive_exception</name>
      <anchor>a3</anchor>
      <arglist>(in ClientRequestInfo ri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receive_other</name>
      <anchor>a4</anchor>
      <arglist>(in ClientRequestInfo ri)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>send_request</name>
      <anchor>a5</anchor>
      <arglist>(::PortableInterceptor::ClientRequestInfo_ptr ri ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>send_poll</name>
      <anchor>a6</anchor>
      <arglist>(::PortableInterceptor::ClientRequestInfo_ptr ri ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receive_reply</name>
      <anchor>a7</anchor>
      <arglist>(::PortableInterceptor::ClientRequestInfo_ptr ri ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receive_exception</name>
      <anchor>a8</anchor>
      <arglist>(::PortableInterceptor::ClientRequestInfo_ptr ri ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receive_other</name>
      <anchor>a9</anchor>
      <arglist>(::PortableInterceptor::ClientRequestInfo_ptr ri ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a10</anchor>
      <arglist>(const char *type_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a12</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ClientRequestInterceptor_ptr</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(ClientRequestInterceptor_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_release</name>
      <anchor>e1</anchor>
      <arglist>(ClientRequestInterceptor_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ClientRequestInterceptor_ptr</type>
      <name>_narrow</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ClientRequestInterceptor_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>e3</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ClientRequestInterceptor_ptr</type>
      <name>_nil</name>
      <anchor>e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e5</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClientRequestInterceptor</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ClientRequestInterceptor</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ClientRequestInterceptor</name>
      <anchor>d0</anchor>
      <arglist>(const ClientRequestInterceptor &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const ClientRequestInterceptor &amp;)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PortableInterceptor::ServerRequestInterceptor</name>
    <filename>interfacePortableInterceptor_1_1ServerRequestInterceptor.html</filename>
    <base virtualness="virtual">PortableInterceptor::Interceptor</base>
    <base>PortableInterceptor::Interceptor</base>
    <member kind="typedef">
      <type>ServerRequestInterceptor_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ServerRequestInterceptor_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tao_ft_interception_point</name>
      <anchor>a0</anchor>
      <arglist>(in ServerRequestInfo ri, out CORBA::OctetSeq os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receive_request_service_contexts</name>
      <anchor>a1</anchor>
      <arglist>(in ServerRequestInfo ri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receive_request</name>
      <anchor>a2</anchor>
      <arglist>(in ServerRequestInfo ri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_reply</name>
      <anchor>a3</anchor>
      <arglist>(in ServerRequestInfo ri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_exception</name>
      <anchor>a4</anchor>
      <arglist>(in ServerRequestInfo ri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_other</name>
      <anchor>a5</anchor>
      <arglist>(in ServerRequestInfo ri)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receive_request_service_contexts</name>
      <anchor>a6</anchor>
      <arglist>(::PortableInterceptor::ServerRequestInfo_ptr ri ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receive_request</name>
      <anchor>a7</anchor>
      <arglist>(::PortableInterceptor::ServerRequestInfo_ptr ri ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>send_reply</name>
      <anchor>a8</anchor>
      <arglist>(::PortableInterceptor::ServerRequestInfo_ptr ri ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>send_exception</name>
      <anchor>a9</anchor>
      <arglist>(::PortableInterceptor::ServerRequestInfo_ptr ri ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>send_other</name>
      <anchor>a10</anchor>
      <arglist>(::PortableInterceptor::ServerRequestInfo_ptr ri ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a11</anchor>
      <arglist>(const char *type_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>a12</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a13</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ServerRequestInterceptor_ptr</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(ServerRequestInterceptor_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_release</name>
      <anchor>e1</anchor>
      <arglist>(ServerRequestInterceptor_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ServerRequestInterceptor_ptr</type>
      <name>_narrow</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ServerRequestInterceptor_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>e3</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ServerRequestInterceptor_ptr</type>
      <name>_nil</name>
      <anchor>e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e5</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ServerRequestInterceptor</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ServerRequestInterceptor</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ServerRequestInterceptor</name>
      <anchor>d0</anchor>
      <arglist>(const ServerRequestInterceptor &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const ServerRequestInterceptor &amp;)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PortableInterceptor::RequestInfo</name>
    <filename>interfacePortableInterceptor_1_1RequestInfo.html</filename>
    <base virtualness="virtual">CORBA::Object</base>
    <member kind="typedef">
      <type>RequestInfo_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RequestInfo_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>any</type>
      <name>get_slot</name>
      <anchor>a0</anchor>
      <arglist>(in SlotId id)</arglist>
    </member>
    <member kind="function">
      <type>IOP::ServiceContext</type>
      <name>get_request_service_context</name>
      <anchor>a1</anchor>
      <arglist>(in IOP::ServiceId id)</arglist>
    </member>
    <member kind="function">
      <type>IOP::ServiceContext</type>
      <name>get_reply_service_context</name>
      <anchor>a2</anchor>
      <arglist>(in IOP::ServiceId id)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::ULong</type>
      <name>request_id</name>
      <anchor>a3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char *</type>
      <name>operation</name>
      <anchor>a4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ::Dynamic::ParameterList *</type>
      <name>arguments</name>
      <anchor>a5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ::Dynamic::ExceptionList *</type>
      <name>exceptions</name>
      <anchor>a6</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ::Dynamic::ContextList *</type>
      <name>contexts</name>
      <anchor>a7</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ::Dynamic::RequestContext *</type>
      <name>operation_context</name>
      <anchor>a8</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Any *</type>
      <name>result</name>
      <anchor>a9</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>response_expected</name>
      <anchor>a10</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Messaging::SyncScope</type>
      <name>sync_scope</name>
      <anchor>a11</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PortableInterceptor::ReplyStatus</type>
      <name>reply_status</name>
      <anchor>a12</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Object_ptr</type>
      <name>forward_reference</name>
      <anchor>a13</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Any *</type>
      <name>get_slot</name>
      <anchor>a14</anchor>
      <arglist>(::PortableInterceptor::SlotId id ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ::IOP::ServiceContext *</type>
      <name>get_request_service_context</name>
      <anchor>a15</anchor>
      <arglist>(::IOP::ServiceId id ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ::IOP::ServiceContext *</type>
      <name>get_reply_service_context</name>
      <anchor>a16</anchor>
      <arglist>(::IOP::ServiceId id ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a17</anchor>
      <arglist>(const char *type_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>a18</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a19</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>RequestInfo_ptr</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(RequestInfo_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_release</name>
      <anchor>e1</anchor>
      <arglist>(RequestInfo_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>RequestInfo_ptr</type>
      <name>_narrow</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>RequestInfo_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>e3</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>RequestInfo_ptr</type>
      <name>_nil</name>
      <anchor>e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e5</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute unsigned long</type>
      <name>request_id</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute string</type>
      <name>operation</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute Dynamic::ParameterList</type>
      <name>arguments</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute Dynamic::ExceptionList</type>
      <name>exceptions</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute Dynamic::ContextList</type>
      <name>contexts</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute Dynamic::RequestContext</type>
      <name>operation_context</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute any</type>
      <name>result</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute boolean</type>
      <name>response_expected</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute Messaging::SyncScope</type>
      <name>sync_scope</name>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute ReplyStatus</type>
      <name>reply_status</name>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute Object</type>
      <name>forward_reference</name>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RequestInfo</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~RequestInfo</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>RequestInfo</name>
      <anchor>d0</anchor>
      <arglist>(const RequestInfo &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const RequestInfo &amp;)</arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>PortableInterceptor::ServerRequestInfo</name>
    <filename>interfacePortableInterceptor_1_1ServerRequestInfo.html</filename>
    <base virtualness="virtual">PortableInterceptor::RequestInfo</base>
    <base>PortableInterceptor::RequestInfo</base>
    <member kind="typedef">
      <type>ServerRequestInfo_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ServerRequestInfo_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Policy</type>
      <name>get_server_policy</name>
      <anchor>a0</anchor>
      <arglist>(in CORBA::PolicyType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_slot</name>
      <anchor>a1</anchor>
      <arglist>(in SlotId id, in any data)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>target_is_a</name>
      <anchor>a2</anchor>
      <arglist>(in CORBA::RepositoryId id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_reply_service_context</name>
      <anchor>a3</anchor>
      <arglist>(in IOP::ServiceContext service_context, in boolean replace)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Any *</type>
      <name>sending_exception</name>
      <anchor>a4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char *</type>
      <name>server_id</name>
      <anchor>a5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char *</type>
      <name>orb_id</name>
      <anchor>a6</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ::PortableInterceptor::AdapterName *</type>
      <name>adapter_name</name>
      <anchor>a7</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ::PortableInterceptor::ObjectId *</type>
      <name>object_id</name>
      <anchor>a8</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ::CORBA::OctetSeq *</type>
      <name>adapter_id</name>
      <anchor>a9</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char *</type>
      <name>target_most_derived_interface</name>
      <anchor>a10</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ::CORBA::Policy_ptr</type>
      <name>get_server_policy</name>
      <anchor>a11</anchor>
      <arglist>(::CORBA::PolicyType type ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set_slot</name>
      <anchor>a12</anchor>
      <arglist>(::PortableInterceptor::SlotId id, const ::CORBA::Any &amp;data ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>target_is_a</name>
      <anchor>a13</anchor>
      <arglist>(const char *id ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add_reply_service_context</name>
      <anchor>a14</anchor>
      <arglist>(const ::IOP::ServiceContext &amp;service_context,::CORBA::Boolean replace ACE_ENV_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a15</anchor>
      <arglist>(const char *type_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>a16</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a17</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ServerRequestInfo_ptr</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(ServerRequestInfo_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_release</name>
      <anchor>e1</anchor>
      <arglist>(ServerRequestInfo_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ServerRequestInfo_ptr</type>
      <name>_narrow</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ServerRequestInfo_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>e3</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ServerRequestInfo_ptr</type>
      <name>_nil</name>
      <anchor>e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e5</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute any</type>
      <name>sending_exception</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute ServerId</type>
      <name>server_id</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute ORBId</type>
      <name>orb_id</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute AdapterName</type>
      <name>adapter_name</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute ObjectId</type>
      <name>object_id</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute CORBA::OctetSeq</type>
      <name>adapter_id</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute CORBA::RepositoryId</type>
      <name>target_most_derived_interface</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ServerRequestInfo</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ServerRequestInfo</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ServerRequestInfo</name>
      <anchor>d0</anchor>
      <arglist>(const ServerRequestInfo &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const ServerRequestInfo &amp;)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>TAO</name>
    <filename>namespaceTAO.html</filename>
    <class kind="class">TAO::TAO_Allocator</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::Any &gt;</class>
    <class kind="class">TAO::Any_Array_Impl_T</class>
    <class kind="class">TAO::Any_Basic_Impl</class>
    <class kind="class">TAO::Any_Basic_Impl_T</class>
    <class kind="class">TAO::Any_Dual_Impl_T</class>
    <class kind="class">TAO::Any_Impl</class>
    <class kind="class">TAO::Any_Impl_T</class>
    <class kind="class">TAO::Any_Special_Impl_T</class>
    <class kind="class">TAO::Any_SystemException</class>
    <class kind="class">TAO::Unknown_IDL_Type</class>
    <class kind="class">TAO::Arg_Traits</class>
    <class kind="class">TAO::SArg_Traits</class>
    <class kind="class">TAO::Argument</class>
    <class kind="struct">TAO::Array_Traits</class>
    <class kind="class">TAO::ARDB_Refcount_Functor</class>
    <class kind="class">TAO::In_Basic_Argument_T</class>
    <class kind="class">TAO::Inout_Basic_Argument_T</class>
    <class kind="class">TAO::Out_Basic_Argument_T</class>
    <class kind="class">TAO::Ret_Basic_Argument_T</class>
    <class kind="struct">TAO::Basic_Tag</class>
    <class kind="struct">TAO::Basic_Arg_Traits_T</class>
    <class kind="class">TAO::Arg_Traits&lt; void &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::Short &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::Long &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::UShort &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::ULong &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::Float &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::Double &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::LongLong &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::ULongLong &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::LongDouble &gt;</class>
    <class kind="class">TAO::In_BD_String_Argument_T</class>
    <class kind="class">TAO::Inout_BD_String_Argument_T</class>
    <class kind="class">TAO::Out_BD_String_Argument_T</class>
    <class kind="class">TAO::Ret_BD_String_Argument_T</class>
    <class kind="struct">TAO::BD_String_Tag</class>
    <class kind="struct">TAO::BD_String_Arg_Traits_T</class>
    <class kind="class">TAO::BD_String_Arg_Traits</class>
    <class kind="class">TAO::BD_WString_Arg_Traits</class>
    <class kind="class">TAO::TAO_Buffer_Allocator</class>
    <class kind="class">TAO::Cache_IntId</class>
    <class kind="class">TAO::Cache_ExtId</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::PortableInterceptor::ClientRequestInfo &gt;</class>
    <class kind="class">TAO::ClientRequestInterceptor_Adapter</class>
    <class kind="class">TAO::Collocated_Invocation</class>
    <class kind="class">TAO::Collocation_Proxy_Broker</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::CORBA::Current &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::Policy &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::InterfaceDef &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::CORBA::DomainManager &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::CORBA::ConstructionPolicy &gt;</class>
    <class kind="struct">TAO::Exception_Data</class>
    <class kind="class">TAO::In_Fixed_Array_Argument_T</class>
    <class kind="class">TAO::Inout_Fixed_Array_Argument_T</class>
    <class kind="class">TAO::Out_Fixed_Array_Argument_T</class>
    <class kind="class">TAO::Ret_Fixed_Array_Argument_T</class>
    <class kind="struct">TAO::Fixed_Array_Tag</class>
    <class kind="struct">TAO::Fixed_Array_Arg_Traits_T</class>
    <class kind="class">TAO::In_Fixed_Size_Argument_T</class>
    <class kind="class">TAO::Inout_Fixed_Size_Argument_T</class>
    <class kind="class">TAO::Out_Fixed_Size_Argument_T</class>
    <class kind="class">TAO::Ret_Fixed_Size_Argument_T</class>
    <class kind="struct">TAO::Fixed_Size_Tag</class>
    <class kind="struct">TAO::Fixed_Size_Arg_Traits_T</class>
    <class kind="class">TAO::FlResource_Factory</class>
    <class kind="class">TAO::FlResource_Loader</class>
    <class kind="class">TAO::GUIResource_Factory</class>
    <class kind="struct">TAO::IIOP_Endpoint_Info</class>
    <class kind="class">TAO::IIOPEndpointSequence</class>
    <class kind="class">TAO::Invocation_Adapter</class>
    <class kind="class">TAO::Invocation_Base</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::IOP::Codec &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::IOP::CodecFactory &gt;</class>
    <class kind="class">TAO::LocateRequest_Invocation</class>
    <class kind="class">TAO::LocateRequest_Invocation_Adapter</class>
    <class kind="class">TAO::Null_RefCount_Policy</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::Object &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; CORBA::Object &gt;</class>
    <class kind="class">TAO::Ret_Object_Argument_T&lt; CORBA::Object_ptr, CORBA::Object_var &gt;</class>
    <class kind="class">TAO::In_Object_Argument_T</class>
    <class kind="class">TAO::Inout_Object_Argument_T</class>
    <class kind="class">TAO::Out_Object_Argument_T</class>
    <class kind="class">TAO::Ret_Object_Argument_T</class>
    <class kind="struct">TAO::Object_Tag</class>
    <class kind="struct">TAO::Object_Arg_Traits_T</class>
    <class kind="class">TAO::ObjectKey</class>
    <class kind="class">TAO::Object_Proxy_Broker</class>
    <class kind="class">TAO::Narrow_Utils</class>
    <class kind="class">TAO::Less_Than_ObjectKey</class>
    <class kind="class">TAO::ObjectKey_Table</class>
    <class kind="struct">TAO::Objref_Traits</class>
    <class kind="class">TAO::ORB_Table</class>
    <class kind="class">TAO::ORBInitializer_Registry</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::PortableInterceptor::ORBInitializer &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; TAO_ORBInitInfo &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::PortableInterceptor::ORBInitInfo &gt;</class>
    <class kind="class">TAO::PICurrent</class>
    <class kind="class">TAO::PICurrent_Impl</class>
    <class kind="class">TAO::PICurrent_Copy_Callback</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::CORBA::Policy &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::CORBA::PolicyCurrent &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::CORBA::PolicyManager &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::PortableInterceptor::PolicyFactory &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::CORBA::PollableSet &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::CORBA::Pollable &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::CORBA::DIIPollable &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::PortableInterceptor::ClientRequestInterceptor &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::PortableInterceptor::ServerRequestInterceptor &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::PortableInterceptor::Interceptor &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::PortableInterceptor::Current &gt;</class>
    <class kind="class">TAO::Profile_Transport_Resolver</class>
    <class kind="class">TAO::QtResource_Factory</class>
    <class kind="class">TAO::QtResource_Loader</class>
    <class kind="struct">TAO::RefCount_Policy_Traits&lt; Null_RefCount_Policy, TypePtr &gt;</class>
    <class kind="struct">TAO::RefCount_Policy_Traits&lt; True_RefCount_Policy, TypePtr &gt;</class>
    <class kind="class">TAO::Refcounted_ObjectKey</class>
    <class kind="class">TAO::Remote_Invocation</class>
    <class kind="class">TAO::Remote_Object_Proxy_Broker</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::PortableInterceptor::RequestInfo &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::PortableInterceptor::ServerRequestInfo &gt;</class>
    <class kind="class">TAO::In_Special_Basic_Argument_T</class>
    <class kind="class">TAO::Inout_Special_Basic_Argument_T</class>
    <class kind="class">TAO::Out_Special_Basic_Argument_T</class>
    <class kind="class">TAO::Ret_Special_Basic_Argument_T</class>
    <class kind="struct">TAO::Special_Basic_Tag</class>
    <class kind="struct">TAO::Special_Basic_Arg_Traits_T</class>
    <class kind="class">TAO::Arg_Traits&lt; ACE_InputCDR::to_char &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; ACE_InputCDR::to_wchar &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; ACE_InputCDR::to_octet &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; ACE_InputCDR::to_boolean &gt;</class>
    <class kind="class">TAO::Synch_Twoway_Invocation</class>
    <class kind="class">TAO::Synch_Oneway_Invocation</class>
    <class kind="class">TAO::Reply_Guard</class>
    <class kind="struct">TAO::BufferingConstraint</class>
    <class kind="interface">TAO::BufferingConstraintPolicy</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::TAO::BufferingConstraintPolicy &gt;</class>
    <class kind="class">TAO::TkResource_Factory</class>
    <class kind="class">TAO::TkResource_Loader</class>
    <class kind="class">TAO::Transport_Cache_Manager</class>
    <class kind="class">TAO::True_RefCount_Policy</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::TypeCode &gt;</class>
    <class kind="struct">TAO::Objref_Traits&lt; ::CORBA::TypeCode &gt;</class>
    <class kind="class">TAO::In_UB_String_Argument_T</class>
    <class kind="class">TAO::Inout_UB_String_Argument_T</class>
    <class kind="class">TAO::Out_UB_String_Argument_T</class>
    <class kind="class">TAO::Ret_UB_String_Argument_T</class>
    <class kind="struct">TAO::UB_String_Tag</class>
    <class kind="struct">TAO::UB_String_Arg_Traits_T</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::Char * &gt;</class>
    <class kind="class">TAO::Arg_Traits&lt; CORBA::WChar * &gt;</class>
    <class kind="class">TAO::In_Var_Array_Argument_T</class>
    <class kind="class">TAO::Inout_Var_Array_Argument_T</class>
    <class kind="class">TAO::Out_Var_Array_Argument_T</class>
    <class kind="class">TAO::Ret_Var_Array_Argument_T</class>
    <class kind="struct">TAO::Var_Array_Tag</class>
    <class kind="struct">TAO::Var_Array_Arg_Traits_T</class>
    <class kind="class">TAO::In_Var_Size_Argument_T</class>
    <class kind="class">TAO::Inout_Var_Size_Argument_T</class>
    <class kind="class">TAO::Out_Var_Size_Argument_T</class>
    <class kind="class">TAO::Ret_Var_Size_Argument_T</class>
    <class kind="struct">TAO::Var_Size_Tag</class>
    <class kind="struct">TAO::Var_Size_Arg_Traits_T</class>
    <class kind="class">TAO::Nested_Upcall_Guard</class>
    <class kind="class">TAO::Wait_On_LF_No_Upcall</class>
    <class kind="class">TAO::XtResource_Factory</class>
    <class kind="class">TAO::XtResource_Loader</class>
    <class kind="class">TAO::Any_Exception</class>
    <class kind="struct">TAO::RefCount_Policy_Traits</class>
    <class kind="struct">TAO::Special_Basic_Traits_T</class>
    <class kind="class">TAO::TAO_Wait_On_LF_No_Upcall</class>
    <member kind="typedef">
      <type>CORBA::SystemException *(*</type>
      <name>excp_factory</name>
      <anchor>a0</anchor>
      <arglist>)(void)</arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::Exception *(*</type>
      <name>TAO_Exception_Alloc</name>
      <anchor>a11</anchor>
      <arglist>)(void)</arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; IIOP_Endpoint_Info &gt;</type>
      <name>IIOPEndpointSequence</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Var_Var_T&lt; IIOP_Endpoint_Info &gt;</type>
      <name>IIOP_Endpoint_Info_var</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Out_T&lt; IIOP_Endpoint_Info, IIOP_Endpoint_Info_var &gt;</type>
      <name>IIOP_Endpoint_Info_out</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_VarSeq_Var_T&lt; IIOPEndpointSequence, IIOP_Endpoint_Info &gt;</type>
      <name>IIOPEndpointSequence_var</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; IIOPEndpointSequence, IIOPEndpointSequence_var, IIOP_Endpoint_Info &gt;</type>
      <name>IIOPEndpointSequence_out</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sequence&lt; octet &gt;</type>
      <name>ObjectKey</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_FixedSeq_Var_T&lt; ObjectKey, CORBA::Octet &gt;</type>
      <name>ObjectKey_var</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Seq_Out_T&lt; ObjectKey, ObjectKey_var, CORBA::Octet &gt;</type>
      <name>ObjectKey_out</name>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Collocation_Proxy_Broker *(*</type>
      <name>Proxy_Broker_Factory</name>
      <anchor>a37</anchor>
      <arglist>)(CORBA::Object_ptr)</arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>BufferingConstraintMode</name>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::UShort_out</type>
      <name>BufferingConstraintMode_out</name>
      <anchor>a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Fixed_Var_T&lt; BufferingConstraint &gt;</type>
      <name>BufferingConstraint_var</name>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BufferingConstraint &amp;</type>
      <name>BufferingConstraint_out</name>
      <anchor>a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BufferingConstraintPolicy *</type>
      <name>BufferingConstraintPolicy_ptr</name>
      <anchor>a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Var_T&lt; BufferingConstraintPolicy &gt;</type>
      <name>BufferingConstraintPolicy_var</name>
      <anchor>a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Objref_Out_T&lt; BufferingConstraintPolicy &gt;</type>
      <name>BufferingConstraintPolicy_out</name>
      <anchor>a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Unbounded_Set&lt; TAO_Connection_Handler * &gt;</type>
      <name>Connection_Handler_Set</name>
      <anchor>a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Cache_Entries_State</name>
      <anchor>a147</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENTRY_IDLE_AND_PURGABLE</name>
      <anchor>a147a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENTRY_IDLE_BUT_NOT_PURGABLE</name>
      <anchor>a147a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENTRY_PURGABLE_BUT_NOT_IDLE</name>
      <anchor>a147a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENTRY_BUSY</name>
      <anchor>a147a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENTRY_CLOSED</name>
      <anchor>a147a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENTRY_UNKNOWN</name>
      <anchor>a147a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Collocation_Strategy</name>
      <anchor>a148</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CS_REMOTE_STRATEGY</name>
      <anchor>a148a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CS_THRU_POA_STRATEGY</name>
      <anchor>a148a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CS_DIRECT_STRATEGY</name>
      <anchor>a148a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CS_LAST</name>
      <anchor>a148a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Invocation_Status</name>
      <anchor>a149</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_INVOKE_START</name>
      <anchor>a149a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_INVOKE_RESTART</name>
      <anchor>a149a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_INVOKE_SUCCESS</name>
      <anchor>a149a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_INVOKE_USER_EXCEPTION</name>
      <anchor>a149a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_INVOKE_SYSTEM_EXCEPTION</name>
      <anchor>a149a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_INVOKE_FAILURE</name>
      <anchor>a149a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Invocation_Type</name>
      <anchor>a150</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_ONEWAY_INVOCATION</name>
      <anchor>a150a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_TWOWAY_INVOCATION</name>
      <anchor>a150a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Invocation_Mode</name>
      <anchor>a151</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_SYNCHRONOUS_INVOCATION</name>
      <anchor>a151a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_ASYNCHRONOUS_CALLBACK_INVOCATION</name>
      <anchor>a151a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_ASYNCHRONOUS_POLLER_INVOCATION</name>
      <anchor>a151a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_DII_INVOCATION</name>
      <anchor>a151a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_DII_DEFERRED_INVOCATION</name>
      <anchor>a151a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>traverse_status</name>
      <anchor>a152</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_STOP</name>
      <anchor>a152a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_CONTINUE</name>
      <anchor>a152a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Connection_Role</name>
      <anchor>a153</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_UNSPECIFIED_ROLE</name>
      <anchor>a153a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_SERVER_ROLE</name>
      <anchor>a153a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAO_CLIENT_ROLE</name>
      <anchor>a153a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; CORBA::Object &gt;::to_object</name>
      <anchor>a62</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; CORBA::Bounds &gt;::demarshal_value</name>
      <anchor>a63</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ClientRequestInfo &gt;::to_object</name>
      <anchor>a64</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ClientRequestInfo &gt;::marshal_value</name>
      <anchor>a65</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ClientRequestInfo &gt;::demarshal_value</name>
      <anchor>a66</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; CORBA::Current &gt;::to_object</name>
      <anchor>a67</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; CORBA::Current &gt;::marshal_value</name>
      <anchor>a68</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; CORBA::Current &gt;::demarshal_value</name>
      <anchor>a69</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; CORBA::DomainManager &gt;::to_object</name>
      <anchor>a70</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; CORBA::ConstructionPolicy &gt;::to_object</name>
      <anchor>a71</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>In_Object_Argument_T&lt; CORBA::InterfaceDef_ptr &gt;::interceptor_param</name>
      <anchor>a72</anchor>
      <arglist>(Dynamic::Parameter &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>In_Object_Argument_T&lt; CORBA::InterfaceDef_ptr &gt;::marshal</name>
      <anchor>a73</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Any_Dual_Impl_T&lt; CORBA::Exception &gt;::value</name>
      <anchor>a74</anchor>
      <arglist>(const CORBA::Exception &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; CORBA::Exception &gt;::marshal_value</name>
      <anchor>a75</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; CORBA::Exception &gt;::demarshal_value</name>
      <anchor>a76</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; CORBA::Exception &gt;::extract</name>
      <anchor>a77</anchor>
      <arglist>(const CORBA::Any &amp;, _tao_destructor, CORBA::TypeCode_ptr, const CORBA::Exception *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; PortableInterceptor::InvalidSlot &gt;::demarshal_value</name>
      <anchor>a78</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; IOP::Codec &gt;::to_object</name>
      <anchor>a79</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; IOP::Codec &gt;::marshal_value</name>
      <anchor>a80</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; IOP::Codec &gt;::demarshal_value</name>
      <anchor>a81</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; IOP::Codec::InvalidTypeForEncoding &gt;::marshal_value</name>
      <anchor>a82</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; IOP::Codec::InvalidTypeForEncoding &gt;::demarshal_value</name>
      <anchor>a83</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; IOP::Codec::FormatMismatch &gt;::marshal_value</name>
      <anchor>a84</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; IOP::Codec::FormatMismatch &gt;::demarshal_value</name>
      <anchor>a85</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; IOP::Codec::TypeMismatch &gt;::marshal_value</name>
      <anchor>a86</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; IOP::Codec::TypeMismatch &gt;::demarshal_value</name>
      <anchor>a87</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; IOP::CodecFactory &gt;::to_object</name>
      <anchor>a88</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; IOP::CodecFactory &gt;::marshal_value</name>
      <anchor>a89</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; IOP::CodecFactory &gt;::demarshal_value</name>
      <anchor>a90</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; IOP::CodecFactory::UnknownEncoding &gt;::marshal_value</name>
      <anchor>a91</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; IOP::CodecFactory::UnknownEncoding &gt;::demarshal_value</name>
      <anchor>a92</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>Objref_Traits&lt; CORBA::Object &gt;::duplicate</name>
      <anchor>a93</anchor>
      <arglist>(CORBA::Object_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Objref_Traits&lt; CORBA::Object &gt;::release</name>
      <anchor>a94</anchor>
      <arglist>(CORBA::Object_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>Objref_Traits&lt; CORBA::Object &gt;::nil</name>
      <anchor>a95</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Objref_Traits&lt; CORBA::Object &gt;::marshal</name>
      <anchor>a96</anchor>
      <arglist>(CORBA::Object_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ORBInitializer &gt;::to_object</name>
      <anchor>a97</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ORBInitializer &gt;::marshal_value</name>
      <anchor>a98</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ORBInitializer &gt;::demarshal_value</name>
      <anchor>a99</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ORBInitInfo &gt;::to_object</name>
      <anchor>a100</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ORBInitInfo &gt;::marshal_value</name>
      <anchor>a101</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ORBInitInfo &gt;::demarshal_value</name>
      <anchor>a102</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; PortableInterceptor::ORBInitInfo::DuplicateName &gt;::marshal_value</name>
      <anchor>a103</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; PortableInterceptor::ORBInitInfo::DuplicateName &gt;::demarshal_value</name>
      <anchor>a104</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; PortableInterceptor::ORBInitInfo::InvalidName &gt;::marshal_value</name>
      <anchor>a105</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; PortableInterceptor::ORBInitInfo::InvalidName &gt;::demarshal_value</name>
      <anchor>a106</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; CORBA::PolicyError &gt;::demarshal_value</name>
      <anchor>a107</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; CORBA::InvalidPolicies &gt;::demarshal_value</name>
      <anchor>a108</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; CORBA::Policy &gt;::to_object</name>
      <anchor>a109</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; CORBA::PolicyManager &gt;::to_object</name>
      <anchor>a110</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; CORBA::PolicyManager &gt;::marshal_value</name>
      <anchor>a111</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; CORBA::PolicyManager &gt;::demarshal_value</name>
      <anchor>a112</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; CORBA::PolicyCurrent &gt;::to_object</name>
      <anchor>a113</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; CORBA::PolicyCurrent &gt;::marshal_value</name>
      <anchor>a114</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; CORBA::PolicyCurrent &gt;::demarshal_value</name>
      <anchor>a115</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::PolicyFactory &gt;::to_object</name>
      <anchor>a116</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::PolicyFactory &gt;::marshal_value</name>
      <anchor>a117</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::PolicyFactory &gt;::demarshal_value</name>
      <anchor>a118</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::Interceptor &gt;::to_object</name>
      <anchor>a119</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::Interceptor &gt;::marshal_value</name>
      <anchor>a120</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::Interceptor &gt;::demarshal_value</name>
      <anchor>a121</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Dual_Impl_T&lt; PortableInterceptor::ForwardRequest &gt;::demarshal_value</name>
      <anchor>a122</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::Current &gt;::to_object</name>
      <anchor>a123</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::Current &gt;::marshal_value</name>
      <anchor>a124</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::Current &gt;::demarshal_value</name>
      <anchor>a125</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ClientRequestInterceptor &gt;::to_object</name>
      <anchor>a126</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ClientRequestInterceptor &gt;::marshal_value</name>
      <anchor>a127</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ClientRequestInterceptor &gt;::demarshal_value</name>
      <anchor>a128</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ServerRequestInterceptor &gt;::to_object</name>
      <anchor>a129</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ServerRequestInterceptor &gt;::marshal_value</name>
      <anchor>a130</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ServerRequestInterceptor &gt;::demarshal_value</name>
      <anchor>a131</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::RequestInfo &gt;::to_object</name>
      <anchor>a132</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::RequestInfo &gt;::marshal_value</name>
      <anchor>a133</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::RequestInfo &gt;::demarshal_value</name>
      <anchor>a134</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ServerRequestInfo &gt;::to_object</name>
      <anchor>a135</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ServerRequestInfo &gt;::marshal_value</name>
      <anchor>a136</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; PortableInterceptor::ServerRequestInfo &gt;::demarshal_value</name>
      <anchor>a137</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; TAO::BufferingConstraintPolicy &gt;::to_object</name>
      <anchor>a138</anchor>
      <arglist>(CORBA::Object_ptr &amp;_tao_elem) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; TAO::BufferingConstraintPolicy &gt;::marshal_value</name>
      <anchor>a139</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Any_Impl_T&lt; TAO::BufferingConstraintPolicy &gt;::demarshal_value</name>
      <anchor>a140</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>Objref_Traits&lt; CORBA::TypeCode &gt;::duplicate</name>
      <anchor>a141</anchor>
      <arglist>(CORBA::TypeCode_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Objref_Traits&lt; CORBA::TypeCode &gt;::release</name>
      <anchor>a142</anchor>
      <arglist>(CORBA::TypeCode_ptr p)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>Objref_Traits&lt; CORBA::TypeCode &gt;::nil</name>
      <anchor>a143</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>Objref_Traits&lt; CORBA::TypeCode &gt;::marshal</name>
      <anchor>a144</anchor>
      <arglist>(CORBA::TypeCode_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Export CORBA::TypeCode_ptr</type>
      <name>unaliased_typecode</name>
      <anchor>a145</anchor>
      <arglist>(CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>TAO_NAMESPACE_INLINE_FUNCTION CORBA::TCKind</type>
      <name>unaliased_kind</name>
      <anchor>a146</anchor>
      <arglist>(CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_IIOP_Endpoint_Info</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_IIOPEndpointSequence</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>VMCID</name>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>MAX_MINOR_CODE</name>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::ULong</type>
      <name>VPVID</name>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BufferingConstraintMode</type>
      <name>BUFFER_FLUSH</name>
      <anchor>a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BufferingConstraintMode</type>
      <name>BUFFER_TIMEOUT</name>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BufferingConstraintMode</type>
      <name>BUFFER_MESSAGE_COUNT</name>
      <anchor>a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BufferingConstraintMode</type>
      <name>BUFFER_MESSAGE_BYTES</name>
      <anchor>a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CORBA::PolicyType</type>
      <name>BUFFERING_CONSTRAINT_POLICY_TYPE</name>
      <anchor>a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Messaging::SyncScope</type>
      <name>SYNC_EAGER_BUFFERING</name>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Messaging::SyncScope</type>
      <name>SYNC_DELAYED_BUFFERING</name>
      <anchor>a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_BufferingConstraintMode</name>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_BufferingConstraint</name>
      <anchor>a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_BufferingConstraintPolicy</name>
      <anchor>a51</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::TAO_Allocator</name>
    <filename>classTAO_1_1TAO__Allocator.html</filename>
    <templarg>handler_type</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TAO_Allocator</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual handler_type *</type>
      <name>allocate</name>
      <anchor>a1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>release</name>
      <anchor>a2</anchor>
      <arglist>(handler_type *ptr)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Arg_Traits&lt; CORBA::Any &gt;</name>
    <filename>classTAO_1_1Arg__Traits_3_01CORBA_1_1Any_01_4.html</filename>
    <base>TAO::Var_Size_Arg_Traits_T&lt; CORBA::Any, CORBA::Any_var, CORBA::Any_out &gt;</base>
  </compound>
  <compound kind="class">
    <name>TAO::Any_Array_Impl_T</name>
    <filename>classTAO_1_1Any__Array__Impl__T.html</filename>
    <templarg>T_slice</templarg>
    <templarg>T_forany</templarg>
    <base>TAO::Any_Impl</base>
    <member kind="function">
      <type></type>
      <name>Any_Array_Impl_T</name>
      <anchor>a0</anchor>
      <arglist>(_tao_destructor destructor, CORBA::TypeCode_ptr, T_slice *const)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Any_Array_Impl_T</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal_value</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>demarshal_value</name>
      <anchor>a3</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>value</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>free_value</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>insert</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::Any &amp;, _tao_destructor destructor, CORBA::TypeCode_ptr, T_slice *const)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>extract</name>
      <anchor>e1</anchor>
      <arglist>(const CORBA::Any &amp;, _tao_destructor, CORBA::TypeCode_ptr, T_slice *&amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T_slice *</type>
      <name>value_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Any_Basic_Impl</name>
    <filename>classTAO_1_1Any__Basic__Impl.html</filename>
    <base>TAO::Any_Impl</base>
    <member kind="function">
      <type></type>
      <name>Any_Basic_Impl</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::TypeCode_ptr, void *value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Any_Basic_Impl</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal_value</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>demarshal_value</name>
      <anchor>a3</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>demarshal_value</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;, CORBA::Long)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a5</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>insert</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::TypeCode_ptr, const void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>extract</name>
      <anchor>e1</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::TypeCode_ptr, void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Any_Basic_Impl *</type>
      <name>create_empty</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::TypeCode_ptr)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>void</type>
      <name>assign_value</name>
      <anchor>h0</anchor>
      <arglist>(void *, Any_Basic_Impl *)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>void</type>
      <name>assign_value</name>
      <anchor>h1</anchor>
      <arglist>(void *, Any_Basic_Impl *, CORBA::Long tck)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Long</type>
      <name>kind_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO::Any_Basic_Impl::@4</type>
      <name>u_</name>
      <anchor>r14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Short</type>
      <name>s</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::UShort</type>
      <name>us</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Long</type>
      <name>l</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>ul</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Float</type>
      <name>f</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Double</type>
      <name>d</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Boolean</type>
      <name>b</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Char</type>
      <name>c</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Octet</type>
      <name>o</name>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::LongLong</type>
      <name>ll</name>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULongLong</type>
      <name>ull</name>
      <anchor>r10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::LongDouble</type>
      <name>ld</name>
      <anchor>r11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::WChar</type>
      <name>wc</name>
      <anchor>r12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Any_Basic_Impl_T</name>
    <filename>classTAO_1_1Any__Basic__Impl__T.html</filename>
    <templarg>T</templarg>
    <base>TAO::Any_Impl</base>
    <member kind="function">
      <type></type>
      <name>Any_Basic_Impl_T</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::TypeCode_ptr, const T &amp;val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Any_Basic_Impl_T</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal_value</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>demarshal_value</name>
      <anchor>a3</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>value</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>insert</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::Any &amp;, CORBA::TypeCode_ptr, const T &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>extract</name>
      <anchor>e1</anchor>
      <arglist>(const CORBA::Any &amp;, CORBA::TypeCode_ptr, T &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Any_Basic_Impl_T&lt; T &gt; *</type>
      <name>create_empty</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::TypeCode_ptr)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>value_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Any_Dual_Impl_T</name>
    <filename>classTAO_1_1Any__Dual__Impl__T.html</filename>
    <templarg>T</templarg>
    <base>TAO::Any_Impl</base>
    <member kind="function">
      <type></type>
      <name>Any_Dual_Impl_T</name>
      <anchor>a0</anchor>
      <arglist>(_tao_destructor destructor, CORBA::TypeCode_ptr, T *const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Any_Dual_Impl_T</name>
      <anchor>a1</anchor>
      <arglist>(_tao_destructor destructor, CORBA::TypeCode_ptr, const T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Any_Dual_Impl_T</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Any_Dual_Impl_T</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal_value</name>
      <anchor>a4</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>demarshal_value</name>
      <anchor>a5</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a6</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>value</name>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>free_value</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>demarshal_value</name>
      <anchor>a9</anchor>
      <arglist>(TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>insert</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::Any &amp;, _tao_destructor, CORBA::TypeCode_ptr, T *const)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>insert_copy</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Any &amp;, _tao_destructor destructor, CORBA::TypeCode_ptr, const T &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>extract</name>
      <anchor>e2</anchor>
      <arglist>(const CORBA::Any &amp;, _tao_destructor, CORBA::TypeCode_ptr, const T *&amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>value</name>
      <anchor>b0</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>value_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Any_Impl</name>
    <filename>classTAO_1_1Any__Impl.html</filename>
    <member kind="typedef">
      <type>void(*</type>
      <name>_tao_destructor</name>
      <anchor>w0</anchor>
      <arglist>)(void *)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a0</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>marshal_value</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>value</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>free_value</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>type</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>_tao_get_typecode</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>type</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::TypeCode_ptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>_tao_byte_order</name>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_add_ref</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_remove_ref</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a10</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>to_object</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::Object_ptr &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>to_value</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::ValueBase *&amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>to_abstract_base</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::AbstractBase_ptr &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>encoded</name>
      <anchor>a14</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_string_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_wstring_destructor</name>
      <anchor>e1</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Any_Impl</name>
      <anchor>b0</anchor>
      <arglist>(_tao_destructor, CORBA::TypeCode_ptr, bool encoded=false)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Any_Impl</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO::Any_Impl::_tao_destructor</type>
      <name>value_destructor_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::TypeCode_ptr</type>
      <name>type_</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>encoded_</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_SYNCH_MUTEX</type>
      <name>mutex_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>refcount_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Any_Impl_T</name>
    <filename>classTAO_1_1Any__Impl__T.html</filename>
    <templarg>T</templarg>
    <base>TAO::Any_Impl</base>
    <member kind="function">
      <type></type>
      <name>Any_Impl_T</name>
      <anchor>a0</anchor>
      <arglist>(_tao_destructor destructor, CORBA::TypeCode_ptr, T *const)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Any_Impl_T</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>to_object</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Object_ptr &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>to_value</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::ValueBase *&amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>to_abstract_base</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::AbstractBase_ptr &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal_value</name>
      <anchor>a5</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>demarshal_value</name>
      <anchor>a6</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a7</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>value</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>free_value</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>insert</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::Any &amp;, _tao_destructor destructor, CORBA::TypeCode_ptr, T *const)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>extract</name>
      <anchor>e1</anchor>
      <arglist>(const CORBA::Any &amp;, _tao_destructor, CORBA::TypeCode_ptr, T *&amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>value_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Any_Special_Impl_T</name>
    <filename>classTAO_1_1Any__Special__Impl__T.html</filename>
    <templarg>T</templarg>
    <templarg>from_T</templarg>
    <templarg>to_T</templarg>
    <base>TAO::Any_Impl</base>
    <member kind="function">
      <type></type>
      <name>Any_Special_Impl_T</name>
      <anchor>a0</anchor>
      <arglist>(_tao_destructor destructor, CORBA::TypeCode_ptr, T *const, CORBA::ULong bound)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Any_Special_Impl_T</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal_value</name>
      <anchor>a2</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>demarshal_value</name>
      <anchor>a3</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a4</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>value</name>
      <anchor>a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>free_value</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>insert</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::Any &amp;, _tao_destructor destructor, CORBA::TypeCode_ptr, T *const, CORBA::ULong bound)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>extract</name>
      <anchor>e1</anchor>
      <arglist>(const CORBA::Any &amp;, _tao_destructor, CORBA::TypeCode_ptr, const T *&amp;, CORBA::ULong bound)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>value_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>bound_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Any_SystemException</name>
    <filename>classTAO_1_1Any__SystemException.html</filename>
    <base>TAO::Any_Impl</base>
    <member kind="function">
      <type></type>
      <name>Any_SystemException</name>
      <anchor>a0</anchor>
      <arglist>(_tao_destructor destructor, CORBA::TypeCode_ptr, CORBA::SystemException *const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Any_SystemException</name>
      <anchor>a1</anchor>
      <arglist>(_tao_destructor destructor, CORBA::TypeCode_ptr, const CORBA::SystemException &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Any_SystemException</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TypeCode_ptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Any_SystemException</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal_value</name>
      <anchor>a4</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>demarshal_value</name>
      <anchor>a5</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>value</name>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>free_value</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>insert</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::Any &amp;, _tao_destructor, CORBA::TypeCode_ptr, CORBA::SystemException *const)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>insert_copy</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Any &amp;, _tao_destructor destructor, CORBA::TypeCode_ptr, const CORBA::SystemException &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>extract</name>
      <anchor>e2</anchor>
      <arglist>(const CORBA::Any &amp;, _tao_destructor, CORBA::TypeCode_ptr, const CORBA::SystemException *&amp;, excp_factory f)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::SystemException *</type>
      <name>value_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Unknown_IDL_Type</name>
    <filename>classTAO_1_1Unknown__IDL__Type.html</filename>
    <base>TAO::Any_Impl</base>
    <member kind="function">
      <type></type>
      <name>Unknown_IDL_Type</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::TypeCode_ptr, TAO_InputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Unknown_IDL_Type</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::TypeCode_ptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Unknown_IDL_Type</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal_value</name>
      <anchor>a3</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>value</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>free_value</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TAO_InputCDR &amp;</type>
      <name>_tao_get_cdr</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>_tao_byte_order</name>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>_tao_decode</name>
      <anchor>a8</anchor>
      <arglist>(TAO_InputCDR &amp;ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>to_object</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::Object_ptr &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>to_value</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::ValueBase *&amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>to_abstract_base</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::AbstractBase_ptr &amp;) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_InputCDR</type>
      <name>cdr_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Arg_Traits</name>
    <filename>classTAO_1_1Arg__Traits.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>TAO::SArg_Traits</name>
    <filename>classTAO_1_1SArg__Traits.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>TAO::Argument</name>
    <filename>classTAO_1_1Argument.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Argument</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>z19_0</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_result</name>
      <anchor>z19_1</anchor>
      <arglist>(CORBA::Any *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Array_Traits</name>
    <filename>structTAO_1_1Array__Traits.html</filename>
    <templarg>T</templarg>
    <templarg>T_slice</templarg>
    <templarg>TAG</templarg>
    <member kind="function" static="yes">
      <type>T_slice *</type>
      <name>alloc</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>free</name>
      <anchor>e1</anchor>
      <arglist>(T_slice *_tao_slice)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>T_slice *</type>
      <name>dup</name>
      <anchor>e2</anchor>
      <arglist>(const T_slice *_tao_slice)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>copy</name>
      <anchor>e3</anchor>
      <arglist>(T_slice *_tao_to, const T_slice *_tao_from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::ARDB_Refcount_Functor</name>
    <filename>classTAO_1_1ARDB__Refcount__Functor.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Asynch_Reply_Dispatcher_Base *ardb)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::In_Basic_Argument_T</name>
    <filename>classTAO_1_1In__Basic__Argument__T.html</filename>
    <templarg>S</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>In_Basic_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(S const &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a2</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S const &amp;</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Inout_Basic_Argument_T</name>
    <filename>classTAO_1_1Inout__Basic__Argument__T.html</filename>
    <templarg>S</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Inout_Basic_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(S &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a3</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S &amp;</type>
      <name>arg</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S &amp;</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Out_Basic_Argument_T</name>
    <filename>classTAO_1_1Out__Basic__Argument__T.html</filename>
    <templarg>S</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Out_Basic_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(S &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a2</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S &amp;</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S &amp;</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Ret_Basic_Argument_T</name>
    <filename>classTAO_1_1Ret__Basic__Argument__T.html</filename>
    <templarg>S</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Ret_Basic_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_result</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Any *)</arglist>
    </member>
    <member kind="function">
      <type>S &amp;</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>S</type>
      <name>excp</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>S</type>
      <name>retn</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Basic_Tag</name>
    <filename>structTAO_1_1Basic__Tag.html</filename>
  </compound>
  <compound kind="struct">
    <name>TAO::Basic_Arg_Traits_T</name>
    <filename>structTAO_1_1Basic__Arg__Traits__T.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>ret_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>in_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>inout_type</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>out_type</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>In_Basic_Argument_T&lt; T &gt;</type>
      <name>in_arg_val</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Inout_Basic_Argument_T&lt; T &gt;</type>
      <name>inout_arg_val</name>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Out_Basic_Argument_T&lt; T &gt;</type>
      <name>out_arg_val</name>
      <anchor>w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Ret_Basic_Argument_T&lt; T &gt;</type>
      <name>ret_val</name>
      <anchor>w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Basic_Tag</type>
      <name>idl_tag</name>
      <anchor>w8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Arg_Traits&lt; void &gt;</name>
    <filename>classTAO_1_1Arg__Traits_3_01void_01_4.html</filename>
    <member kind="typedef">
      <type>void</type>
      <name>ret_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Argument</type>
      <name>ret_val</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Basic_Tag</type>
      <name>idl_tag</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Arg_Traits&lt; CORBA::Short &gt;</name>
    <filename>classTAO_1_1Arg__Traits_3_01CORBA_1_1Short_01_4.html</filename>
    <base>TAO::Basic_Arg_Traits_T&lt; CORBA::Short &gt;</base>
  </compound>
  <compound kind="class">
    <name>TAO::Arg_Traits&lt; CORBA::Long &gt;</name>
    <filename>classTAO_1_1Arg__Traits_3_01CORBA_1_1Long_01_4.html</filename>
    <base>TAO::Basic_Arg_Traits_T&lt; CORBA::Long &gt;</base>
  </compound>
  <compound kind="class">
    <name>TAO::Arg_Traits&lt; CORBA::UShort &gt;</name>
    <filename>classTAO_1_1Arg__Traits_3_01CORBA_1_1UShort_01_4.html</filename>
    <base>TAO::Basic_Arg_Traits_T&lt; CORBA::UShort &gt;</base>
  </compound>
  <compound kind="class">
    <name>TAO::Arg_Traits&lt; CORBA::ULong &gt;</name>
    <filename>classTAO_1_1Arg__Traits_3_01CORBA_1_1ULong_01_4.html</filename>
    <base>TAO::Basic_Arg_Traits_T&lt; CORBA::ULong &gt;</base>
  </compound>
  <compound kind="class">
    <name>TAO::Arg_Traits&lt; CORBA::Float &gt;</name>
    <filename>classTAO_1_1Arg__Traits_3_01CORBA_1_1Float_01_4.html</filename>
    <base>TAO::Basic_Arg_Traits_T&lt; CORBA::Float &gt;</base>
  </compound>
  <compound kind="class">
    <name>TAO::Arg_Traits&lt; CORBA::Double &gt;</name>
    <filename>classTAO_1_1Arg__Traits_3_01CORBA_1_1Double_01_4.html</filename>
    <base>TAO::Basic_Arg_Traits_T&lt; CORBA::Double &gt;</base>
  </compound>
  <compound kind="class">
    <name>TAO::Arg_Traits&lt; CORBA::LongLong &gt;</name>
    <filename>classTAO_1_1Arg__Traits_3_01CORBA_1_1LongLong_01_4.html</filename>
    <base>TAO::Basic_Arg_Traits_T&lt; CORBA::LongLong &gt;</base>
  </compound>
  <compound kind="class">
    <name>TAO::Arg_Traits&lt; CORBA::ULongLong &gt;</name>
    <filename>classTAO_1_1Arg__Traits_3_01CORBA_1_1ULongLong_01_4.html</filename>
    <base>TAO::Basic_Arg_Traits_T&lt; CORBA::ULongLong &gt;</base>
  </compound>
  <compound kind="class">
    <name>TAO::Arg_Traits&lt; CORBA::LongDouble &gt;</name>
    <filename>classTAO_1_1Arg__Traits_3_01CORBA_1_1LongDouble_01_4.html</filename>
    <base>TAO::Basic_Arg_Traits_T&lt; CORBA::LongDouble &gt;</base>
  </compound>
  <compound kind="class">
    <name>TAO::In_BD_String_Argument_T</name>
    <filename>classTAO_1_1In__BD__String__Argument__T.html</filename>
    <templarg>S</templarg>
    <templarg>to_S</templarg>
    <templarg>from_S</templarg>
    <templarg>BOUND</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>In_BD_String_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(const S *x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a2</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S const *</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S const *</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Inout_BD_String_Argument_T</name>
    <filename>classTAO_1_1Inout__BD__String__Argument__T.html</filename>
    <templarg>S</templarg>
    <templarg>to_S</templarg>
    <templarg>from_S</templarg>
    <templarg>BOUND</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Inout_BD_String_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(S *&amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a3</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S *&amp;</type>
      <name>arg</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S *&amp;</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Out_BD_String_Argument_T</name>
    <filename>classTAO_1_1Out__BD__String__Argument__T.html</filename>
    <templarg>S</templarg>
    <templarg>S_out</templarg>
    <templarg>to_S</templarg>
    <templarg>from_S</templarg>
    <templarg>BOUND</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Out_BD_String_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(S_out x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a2</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S *&amp;</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S *&amp;</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Ret_BD_String_Argument_T</name>
    <filename>classTAO_1_1Ret__BD__String__Argument__T.html</filename>
    <templarg>S</templarg>
    <templarg>S_var</templarg>
    <templarg>to_S</templarg>
    <templarg>from_S</templarg>
    <templarg>BOUND</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Ret_BD_String_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_result</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Any *)</arglist>
    </member>
    <member kind="function">
      <type>S *&amp;</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>S *</type>
      <name>excp</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>S *</type>
      <name>retn</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S_var</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::BD_String_Tag</name>
    <filename>structTAO_1_1BD__String__Tag.html</filename>
  </compound>
  <compound kind="struct">
    <name>TAO::BD_String_Arg_Traits_T</name>
    <filename>structTAO_1_1BD__String__Arg__Traits__T.html</filename>
    <templarg>T</templarg>
    <templarg>T_var</templarg>
    <templarg>T_out</templarg>
    <templarg>to_T</templarg>
    <templarg>from_T</templarg>
    <templarg>BOUND</templarg>
    <member kind="typedef">
      <type>T *</type>
      <name>ret_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T const *</type>
      <name>in_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *&amp;</type>
      <name>inout_type</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_out</type>
      <name>out_type</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>In_BD_String_Argument_T&lt; T, to_T, from_T, BOUND &gt;</type>
      <name>in_arg_val</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Inout_BD_String_Argument_T&lt; T, to_T, from_T, BOUND &gt;</type>
      <name>inout_arg_val</name>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Out_BD_String_Argument_T&lt; T, T_out, to_T, from_T, BOUND &gt;</type>
      <name>out_arg_val</name>
      <anchor>w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Ret_BD_String_Argument_T&lt; T, T_var, to_T, from_T, BOUND &gt;</type>
      <name>ret_val</name>
      <anchor>w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BD_String_Tag</type>
      <name>idl_tag</name>
      <anchor>w8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::BD_String_Arg_Traits</name>
    <filename>classTAO_1_1BD__String__Arg__Traits.html</filename>
    <templarg>BOUND</templarg>
    <base>TAO::BD_String_Arg_Traits_T&lt; CORBA::Char, CORBA::String_var, CORBA::String_out, ACE_InputCDR::to_string, ACE_OutputCDR::from_string, BOUND &gt;</base>
  </compound>
  <compound kind="class">
    <name>TAO::BD_WString_Arg_Traits</name>
    <filename>classTAO_1_1BD__WString__Arg__Traits.html</filename>
    <templarg>BOUND</templarg>
    <base>TAO::BD_String_Arg_Traits_T&lt; CORBA::WChar, CORBA::WString_var, CORBA::WString_out, ACE_InputCDR::to_wstring, ACE_OutputCDR::from_wstring, BOUND &gt;</base>
  </compound>
  <compound kind="class">
    <name>TAO::TAO_Buffer_Allocator</name>
    <filename>classTAO_1_1TAO__Buffer__Allocator.html</filename>
    <templarg>handler_type</templarg>
    <templarg>alloc_type</templarg>
    <base>TAO::TAO_Allocator</base>
    <member kind="typedef">
      <type>handler_type</type>
      <name>HANDLER_TYPE</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>alloc_type</type>
      <name>ALLOC_TYPE</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TAO_Buffer_Allocator</name>
      <anchor>a0</anchor>
      <arglist>(alloc_type *allocator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual handler_type *</type>
      <name>allocate</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>release</name>
      <anchor>a2</anchor>
      <arglist>(handler_type *ptr)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>alloc_type *</type>
      <name>allocator_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Cache_IntId</name>
    <filename>classTAO_1_1Cache__IntId.html</filename>
    <member kind="function">
      <type></type>
      <name>Cache_IntId</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cache_IntId</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Transport *transport)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cache_IntId</name>
      <anchor>a2</anchor>
      <arglist>(const Cache_IntId &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Cache_IntId</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Cache_IntId &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const Cache_IntId &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>a5</anchor>
      <arglist>(const Cache_IntId &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>a6</anchor>
      <arglist>(const Cache_IntId &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>TAO_Transport *</type>
      <name>transport</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const TAO_Transport *</type>
      <name>transport</name>
      <anchor>a8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recycle_state</name>
      <anchor>a9</anchor>
      <arglist>(Cache_Entries_State new_state)</arglist>
    </member>
    <member kind="function">
      <type>Cache_Entries_State</type>
      <name>recycle_state</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Transport *</type>
      <name>relinquish_transport</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Transport *</type>
      <name>transport_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Cache_Entries_State</type>
      <name>recycle_state_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Cache_ExtId</name>
    <filename>classTAO_1_1Cache__ExtId.html</filename>
    <member kind="function">
      <type></type>
      <name>Cache_ExtId</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cache_ExtId</name>
      <anchor>a1</anchor>
      <arglist>(TAO_Transport_Descriptor_Interface *prop)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cache_ExtId</name>
      <anchor>a2</anchor>
      <arglist>(const Cache_ExtId &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Cache_ExtId</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Cache_ExtId &amp;</type>
      <name>operator=</name>
      <anchor>a4</anchor>
      <arglist>(const Cache_ExtId &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchor>a5</anchor>
      <arglist>(const Cache_ExtId &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchor>a6</anchor>
      <arglist>(const Cache_ExtId &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>u_long</type>
      <name>hash</name>
      <anchor>a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>duplicate</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>index</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::ULong index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incr_index</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Transport_Descriptor_Interface *</type>
      <name>property</name>
      <anchor>a11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>index</name>
      <anchor>z27_0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::ULong</type>
      <name>index</name>
      <anchor>z27_1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Transport_Descriptor_Interface *</type>
      <name>transport_property_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Boolean</type>
      <name>is_delete_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>index_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Objref_Traits&lt; ::PortableInterceptor::ClientRequestInfo &gt;</name>
    <filename>structTAO_1_1Objref__Traits_3_01_1_1PortableInterceptor_1_1ClientRequestInfo_01_4.html</filename>
    <member kind="function" static="yes">
      <type>::PortableInterceptor::ClientRequestInfo_ptr</type>
      <name>duplicate</name>
      <anchor>e0</anchor>
      <arglist>(::PortableInterceptor::ClientRequestInfo_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(::PortableInterceptor::ClientRequestInfo_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>::PortableInterceptor::ClientRequestInfo_ptr</type>
      <name>nil</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>e3</anchor>
      <arglist>(::PortableInterceptor::ClientRequestInfo_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::ClientRequestInterceptor_Adapter</name>
    <filename>classTAO_1_1ClientRequestInterceptor__Adapter.html</filename>
    <member kind="function">
      <type></type>
      <name>ClientRequestInterceptor_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ClientRequestInterceptor_List::TYPE &amp;interceptors, Invocation_Base *invocation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ClientRequestInterceptor_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_request</name>
      <anchor>z31_0</anchor>
      <arglist>(TAO_ClientRequestInfo_i *ri ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receive_reply</name>
      <anchor>z31_1</anchor>
      <arglist>(TAO_ClientRequestInfo_i *ri ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receive_exception</name>
      <anchor>z31_2</anchor>
      <arglist>(TAO_ClientRequestInfo_i *ri ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receive_other</name>
      <anchor>z31_3</anchor>
      <arglist>(TAO_ClientRequestInfo_i *ri ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process_forward_request</name>
      <anchor>b0</anchor>
      <arglist>(TAO_ClientRequestInfo_i *ri, PortableInterceptor::ForwardRequest &amp;exc ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ClientRequestInterceptor_List::TYPE &amp;</type>
      <name>interceptors_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Invocation_Base *</type>
      <name>invocation_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const size_t</type>
      <name>len_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>stack_size_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ClientRequestInfo *</type>
      <name>info_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Collocated_Invocation</name>
    <filename>classTAO_1_1Collocated__Invocation.html</filename>
    <base>TAO::Invocation_Base</base>
    <member kind="function">
      <type></type>
      <name>Collocated_Invocation</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::Object_ptr t, CORBA::Object_ptr et, TAO_Stub *stub, TAO_Operation_Details &amp;detail, bool response_expected=true)</arglist>
    </member>
    <member kind="function">
      <type>Invocation_Status</type>
      <name>invoke</name>
      <anchor>a1</anchor>
      <arglist>(Collocation_Proxy_Broker *cpb, Collocation_Strategy strat ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Collocated_Invocation</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Collocation_Proxy_Broker</name>
    <filename>classTAO_1_1Collocation__Proxy__Broker.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Collocation_Proxy_Broker</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Collocation_Strategy</type>
      <name>get_strategy</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dispatch</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Object_ptr obj, CORBA::Object_out forward_obj, Argument **args, int num_args, const char *op, size_t op_len, Collocation_Strategy strategy ACE_ENV_ARG_DECL)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Objref_Traits&lt; ::CORBA::Current &gt;</name>
    <filename>structTAO_1_1Objref__Traits_3_01_1_1CORBA_1_1Current_01_4.html</filename>
    <member kind="function" static="yes">
      <type>::CORBA::Current_ptr</type>
      <name>duplicate</name>
      <anchor>e0</anchor>
      <arglist>(::CORBA::Current_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(::CORBA::Current_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>::CORBA::Current_ptr</type>
      <name>nil</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>e3</anchor>
      <arglist>(::CORBA::Current_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Arg_Traits&lt; CORBA::Policy &gt;</name>
    <filename>classTAO_1_1Arg__Traits_3_01CORBA_1_1Policy_01_4.html</filename>
    <base>TAO::Object_Arg_Traits_T&lt; CORBA::Policy_ptr, CORBA::Policy_var, CORBA::Policy_out, TAO::Objref_Traits&lt; CORBA::Policy &gt; &gt;</base>
    <base>TAO::Object_Arg_Traits_T&lt; CORBA::Policy_ptr, CORBA::Policy_var, CORBA::Policy_out, TAO::Objref_Traits&lt; CORBA::Policy &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>TAO::Arg_Traits&lt; CORBA::InterfaceDef &gt;</name>
    <filename>classTAO_1_1Arg__Traits_3_01CORBA_1_1InterfaceDef_01_4.html</filename>
    <base>TAO::Object_Arg_Traits_T&lt; CORBA::InterfaceDef_ptr, CORBA::InterfaceDef_var, CORBA::InterfaceDef_out, TAO::Objref_Traits&lt; CORBA::InterfaceDef &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>TAO::Objref_Traits&lt; ::CORBA::DomainManager &gt;</name>
    <filename>structTAO_1_1Objref__Traits_3_01_1_1CORBA_1_1DomainManager_01_4.html</filename>
    <member kind="function" static="yes">
      <type>::CORBA::DomainManager_ptr</type>
      <name>duplicate</name>
      <anchor>e0</anchor>
      <arglist>(::CORBA::DomainManager_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(::CORBA::DomainManager_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>::CORBA::DomainManager_ptr</type>
      <name>nil</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>e3</anchor>
      <arglist>(::CORBA::DomainManager_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Objref_Traits&lt; ::CORBA::ConstructionPolicy &gt;</name>
    <filename>structTAO_1_1Objref__Traits_3_01_1_1CORBA_1_1ConstructionPolicy_01_4.html</filename>
    <member kind="function" static="yes">
      <type>::CORBA::ConstructionPolicy_ptr</type>
      <name>duplicate</name>
      <anchor>e0</anchor>
      <arglist>(::CORBA::ConstructionPolicy_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(::CORBA::ConstructionPolicy_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>::CORBA::ConstructionPolicy_ptr</type>
      <name>nil</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>e3</anchor>
      <arglist>(::CORBA::ConstructionPolicy_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Exception_Data</name>
    <filename>structTAO_1_1Exception__Data.html</filename>
    <member kind="variable">
      <type>const char *</type>
      <name>id</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_Exception_Alloc</type>
      <name>alloc</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::TypeCode_ptr</type>
      <name>tc_ptr</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::In_Fixed_Array_Argument_T</name>
    <filename>classTAO_1_1In__Fixed__Array__Argument__T.html</filename>
    <templarg>S</templarg>
    <templarg>S_slice</templarg>
    <templarg>S_forany</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>In_Fixed_Array_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(const S_slice *x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a2</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S_slice const *</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S_forany</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Inout_Fixed_Array_Argument_T</name>
    <filename>classTAO_1_1Inout__Fixed__Array__Argument__T.html</filename>
    <templarg>S</templarg>
    <templarg>S_slice</templarg>
    <templarg>S_forany</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Inout_Fixed_Array_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(S_slice *&amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a3</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S_slice *</type>
      <name>arg</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S_forany</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Out_Fixed_Array_Argument_T</name>
    <filename>classTAO_1_1Out__Fixed__Array__Argument__T.html</filename>
    <templarg>S</templarg>
    <templarg>S_slice</templarg>
    <templarg>S_forany</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Out_Fixed_Array_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(S_slice *&amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a2</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S_slice *&amp;</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S_forany</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Ret_Fixed_Array_Argument_T</name>
    <filename>classTAO_1_1Ret__Fixed__Array__Argument__T.html</filename>
    <templarg>S</templarg>
    <templarg>S_slice</templarg>
    <templarg>S_var</templarg>
    <templarg>S_forany</templarg>
    <templarg>S_tag</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Ret_Fixed_Array_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_result</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Any *)</arglist>
    </member>
    <member kind="function">
      <type>S_slice *&amp;</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>S_slice *</type>
      <name>excp</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>S_slice *</type>
      <name>retn</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S_var</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Fixed_Array_Tag</name>
    <filename>structTAO_1_1Fixed__Array__Tag.html</filename>
  </compound>
  <compound kind="struct">
    <name>TAO::Fixed_Array_Arg_Traits_T</name>
    <filename>structTAO_1_1Fixed__Array__Arg__Traits__T.html</filename>
    <templarg>T</templarg>
    <templarg>T_slice</templarg>
    <templarg>T_var</templarg>
    <templarg>T_forany</templarg>
    <templarg>T_tag</templarg>
    <member kind="typedef">
      <type>T_slice *</type>
      <name>ret_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T const</type>
      <name>in_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>inout_type</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>out_type</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>In_Fixed_Array_Argument_T&lt; T, T_slice, T_forany &gt;</type>
      <name>in_arg_val</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Inout_Fixed_Array_Argument_T&lt; T, T_slice, T_forany &gt;</type>
      <name>inout_arg_val</name>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Out_Fixed_Array_Argument_T&lt; T, T_slice, T_forany &gt;</type>
      <name>out_arg_val</name>
      <anchor>w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Ret_Fixed_Array_Argument_T&lt; T, T_slice, T_var, T_forany, T_tag &gt;</type>
      <name>ret_val</name>
      <anchor>w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Fixed_Array_Tag</type>
      <name>idl_tag</name>
      <anchor>w8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::In_Fixed_Size_Argument_T</name>
    <filename>classTAO_1_1In__Fixed__Size__Argument__T.html</filename>
    <templarg>S</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>In_Fixed_Size_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(S const &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a2</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S const &amp;</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S const *</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Inout_Fixed_Size_Argument_T</name>
    <filename>classTAO_1_1Inout__Fixed__Size__Argument__T.html</filename>
    <templarg>S</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Inout_Fixed_Size_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(S &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a3</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S &amp;</type>
      <name>arg</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S *</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Out_Fixed_Size_Argument_T</name>
    <filename>classTAO_1_1Out__Fixed__Size__Argument__T.html</filename>
    <templarg>S</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Out_Fixed_Size_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(S &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a2</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S &amp;</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S &amp;</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Ret_Fixed_Size_Argument_T</name>
    <filename>classTAO_1_1Ret__Fixed__Size__Argument__T.html</filename>
    <templarg>S</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Ret_Fixed_Size_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_result</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Any *)</arglist>
    </member>
    <member kind="function">
      <type>S &amp;</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>S</type>
      <name>excp</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>S</type>
      <name>retn</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>S</type>
      <name>x_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Fixed_Size_Tag</name>
    <filename>structTAO_1_1Fixed__Size__Tag.html</filename>
  </compound>
  <compound kind="struct">
    <name>TAO::Fixed_Size_Arg_Traits_T</name>
    <filename>structTAO_1_1Fixed__Size__Arg__Traits__T.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>ret_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T const &amp;</type>
      <name>in_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>inout_type</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>out_type</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>In_Fixed_Size_Argument_T&lt; T &gt;</type>
      <name>in_arg_val</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Inout_Fixed_Size_Argument_T&lt; T &gt;</type>
      <name>inout_arg_val</name>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Out_Fixed_Size_Argument_T&lt; T &gt;</type>
      <name>out_arg_val</name>
      <anchor>w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Ret_Fixed_Size_Argument_T&lt; T &gt;</type>
      <name>ret_val</name>
      <anchor>w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Fixed_Size_Tag</type>
      <name>idl_tag</name>
      <anchor>w8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::FlResource_Factory</name>
    <filename>classTAO_1_1FlResource__Factory.html</filename>
    <base>TAO::GUIResource_Factory</base>
    <member kind="function">
      <type></type>
      <name>FlResource_Factory</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ACE_Reactor_Impl *</type>
      <name>reactor_impl</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_FlReactor *</type>
      <name>reactor_impl_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::FlResource_Loader</name>
    <filename>classTAO_1_1FlResource__Loader.html</filename>
    <member kind="function">
      <type></type>
      <name>FlResource_Loader</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FlResource_Loader</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::GUIResource_Factory</name>
    <filename>classTAO_1_1GUIResource__Factory.html</filename>
    <member kind="function">
      <type></type>
      <name>GUIResource_Factory</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GUIResource_Factory</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Reactor *</type>
      <name>get_reactor</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reclaim_reactor</name>
      <anchor>a3</anchor>
      <arglist>(ACE_Reactor *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual ACE_Reactor_Impl *</type>
      <name>reactor_impl</name>
      <anchor>b0</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>dynamically_allocated_reactor_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_SYNCH_MUTEX</type>
      <name>lock_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::IIOP_Endpoint_Info</name>
    <filename>structTAO_1_1IIOP__Endpoint__Info.html</filename>
    <member kind="typedef">
      <type>IIOP_Endpoint_Info_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>host</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>port</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>priority</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO_String_Manager</type>
      <name>host</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Short</type>
      <name>port</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Short</type>
      <name>priority</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::IIOPEndpointSequence</name>
    <filename>classTAO_1_1IIOPEndpointSequence.html</filename>
    <base>TAO_Unbounded_Sequence&lt; IIOP_Endpoint_Info &gt;</base>
    <member kind="typedef">
      <type>IIOPEndpointSequence_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IIOPEndpointSequence</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IIOPEndpointSequence</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IIOPEndpointSequence</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, IIOP_Endpoint_Info *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IIOPEndpointSequence</name>
      <anchor>a3</anchor>
      <arglist>(const IIOPEndpointSequence &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IIOPEndpointSequence</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Invocation_Adapter</name>
    <filename>classTAO_1_1Invocation__Adapter.html</filename>
    <member kind="function">
      <type></type>
      <name>Invocation_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::Object_ptr target, Argument **args, int arg_number, const char *operation, int op_len, Collocation_Proxy_Broker *cpb, TAO::Invocation_Type type=TAO_TWOWAY_INVOCATION, TAO::Invocation_Mode mode=TAO_SYNCHRONOUS_INVOCATION)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Invocation_Adapter</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke</name>
      <anchor>a2</anchor>
      <arglist>(TAO::Exception_Data *ex, unsigned long ex_count ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>invoke_i</name>
      <anchor>b0</anchor>
      <arglist>(TAO_Stub *stub, TAO_Operation_Details &amp;details ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>get_timeout</name>
      <anchor>b1</anchor>
      <arglist>(TAO_Stub *stub, ACE_Time_Value &amp;val)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TAO_Stub *</type>
      <name>get_stub</name>
      <anchor>b2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>object_forwarded</name>
      <anchor>b3</anchor>
      <arglist>(CORBA::Object_var &amp;effective_target, TAO_Stub *stub ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_response_flags</name>
      <anchor>b4</anchor>
      <arglist>(TAO_Stub *stub, TAO_Operation_Details &amp;details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Invocation_Status</type>
      <name>invoke_remote_i</name>
      <anchor>z74_0</anchor>
      <arglist>(TAO_Stub *stub, TAO_Operation_Details &amp;details, CORBA::Object_var &amp;effective_target, ACE_Time_Value *&amp;max_wait_time ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Invocation_Status</type>
      <name>invoke_collocated_i</name>
      <anchor>z74_1</anchor>
      <arglist>(TAO_Stub *stub, TAO_Operation_Details &amp;details, CORBA::Object_var &amp;effective_target, Collocation_Strategy strat ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Invocation_Status</type>
      <name>invoke_twoway</name>
      <anchor>z74_2</anchor>
      <arglist>(TAO_Operation_Details &amp;details, CORBA::Object_var &amp;effective_target, Profile_Transport_Resolver &amp;r, ACE_Time_Value *&amp;max_wait_time ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Invocation_Status</type>
      <name>invoke_oneway</name>
      <anchor>z74_3</anchor>
      <arglist>(TAO_Operation_Details &amp;details, CORBA::Object_var &amp;effective_target, Profile_Transport_Resolver &amp;r, ACE_Time_Value *&amp;max_wait_time ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Object_ptr</type>
      <name>target_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument **const</type>
      <name>args_</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int const</type>
      <name>number_args_</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char const *</type>
      <name>operation_</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int const</type>
      <name>op_len_</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Collocation_Proxy_Broker *const</type>
      <name>cpb_</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Invocation_Type const</type>
      <name>type_</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Invocation_Mode const</type>
      <name>mode_</name>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Invocation_Adapter</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Invocation_Adapter</name>
      <anchor>d1</anchor>
      <arglist>(Invocation_Adapter const &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Invocation_Adapter &amp;</type>
      <name>operator=</name>
      <anchor>d2</anchor>
      <arglist>(const Invocation_Adapter &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Invocation_Base</name>
    <filename>classTAO_1_1Invocation__Base.html</filename>
    <member kind="function">
      <type>char *</type>
      <name>operation_name</name>
      <anchor>z77_0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Dynamic::ParameterList *</type>
      <name>arguments</name>
      <anchor>z77_1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>Dynamic::ExceptionList *</type>
      <name>exceptions</name>
      <anchor>z77_2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Any *</type>
      <name>result</name>
      <anchor>z77_3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Octet</type>
      <name>sync_scope</name>
      <anchor>z77_4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Invocation_Status</type>
      <name>send_request_interception</name>
      <anchor>z77_5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Invocation_Status</type>
      <name>receive_reply_interception</name>
      <anchor>z77_6</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Invocation_Status</type>
      <name>receive_other_interception</name>
      <anchor>z77_7</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PortableInterceptor::ReplyStatus</type>
      <name>handle_any_exception</name>
      <anchor>z77_8</anchor>
      <arglist>(CORBA::Exception *e ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PortableInterceptor::ReplyStatus</type>
      <name>handle_all_exception</name>
      <anchor>z77_9</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ClientRequestInterceptor_Adapter</type>
      <name>adapter_</name>
      <anchor>z77_10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_ClientRequestInfo_i</type>
      <name>req_info_</name>
      <anchor>z77_11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Invocation_Base</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>orb_core</name>
      <anchor>z75_0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TAO_Stub *</type>
      <name>stub</name>
      <anchor>z75_1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>forwarded_reference</name>
      <anchor>z75_2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forwarded_reference</name>
      <anchor>z75_3</anchor>
      <arglist>(CORBA::Object_ptr o)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Service_Context &amp;</type>
      <name>request_service_context</name>
      <anchor>z75_4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Service_Context &amp;</type>
      <name>reply_service_context</name>
      <anchor>z75_5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>steal_forwarded_reference</name>
      <anchor>z75_6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_forwarded</name>
      <anchor>z75_7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reply_received</name>
      <anchor>z75_8</anchor>
      <arglist>(Invocation_Status s)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>effective_target</name>
      <anchor>z75_9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>target</name>
      <anchor>z75_10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Boolean</type>
      <name>response_expected</name>
      <anchor>z75_11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Invocation_Base</name>
      <anchor>b0</anchor>
      <arglist>(CORBA::Object_ptr otarget, CORBA::Object_ptr target, TAO_Stub *stub, TAO_Operation_Details &amp;op, bool response_expected)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TAO_Operation_Details &amp;</type>
      <name>details_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CORBA::Object_var</type>
      <name>forwarded_to_</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>response_expected_</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Invocation_Base &amp;</type>
      <name>operator=</name>
      <anchor>d0</anchor>
      <arglist>(const Invocation_Base &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Object_ptr</type>
      <name>otarget_</name>
      <anchor>z76_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Object_ptr</type>
      <name>target_</name>
      <anchor>z76_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>z76_2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Stub *</type>
      <name>stub_</name>
      <anchor>z76_3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Objref_Traits&lt; ::IOP::Codec &gt;</name>
    <filename>structTAO_1_1Objref__Traits_3_01_1_1IOP_1_1Codec_01_4.html</filename>
    <member kind="function" static="yes">
      <type>::IOP::Codec_ptr</type>
      <name>duplicate</name>
      <anchor>e0</anchor>
      <arglist>(::IOP::Codec_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(::IOP::Codec_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>::IOP::Codec_ptr</type>
      <name>nil</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>e3</anchor>
      <arglist>(::IOP::Codec_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Objref_Traits&lt; ::IOP::CodecFactory &gt;</name>
    <filename>structTAO_1_1Objref__Traits_3_01_1_1IOP_1_1CodecFactory_01_4.html</filename>
    <member kind="function" static="yes">
      <type>::IOP::CodecFactory_ptr</type>
      <name>duplicate</name>
      <anchor>e0</anchor>
      <arglist>(::IOP::CodecFactory_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(::IOP::CodecFactory_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>::IOP::CodecFactory_ptr</type>
      <name>nil</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>e3</anchor>
      <arglist>(::IOP::CodecFactory_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::LocateRequest_Invocation</name>
    <filename>classTAO_1_1LocateRequest__Invocation.html</filename>
    <base protection="protected">TAO::Synch_Twoway_Invocation</base>
    <member kind="function">
      <type></type>
      <name>LocateRequest_Invocation</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::Object_ptr otarget, Profile_Transport_Resolver &amp;resolver, TAO_Operation_Details &amp;detail)</arglist>
    </member>
    <member kind="function">
      <type>Invocation_Status</type>
      <name>invoke</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Time_Value *max_wait_time ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Invocation_Status</type>
      <name>check_reply</name>
      <anchor>d0</anchor>
      <arglist>(TAO_Synch_Reply_Dispatcher &amp;rd ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::LocateRequest_Invocation_Adapter</name>
    <filename>classTAO_1_1LocateRequest__Invocation__Adapter.html</filename>
    <member kind="function">
      <type></type>
      <name>LocateRequest_Invocation_Adapter</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::Object_ptr target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invoke</name>
      <anchor>a1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::PolicyList *</type>
      <name>get_inconsistent_policies</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>get_timeout</name>
      <anchor>d0</anchor>
      <arglist>(ACE_Time_Value &amp;val)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Object_ptr</type>
      <name>target_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::PolicyList_var</type>
      <name>list_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Null_RefCount_Policy</name>
    <filename>classTAO_1_1Null__RefCount__Policy.html</filename>
    <member kind="function">
      <type>void</type>
      <name>add_ref</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_ref</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Arg_Traits&lt; CORBA::Object &gt;</name>
    <filename>classTAO_1_1Arg__Traits_3_01CORBA_1_1Object_01_4.html</filename>
    <base>TAO::Object_Arg_Traits_T&lt; CORBA::Object_ptr, CORBA::Object_var, CORBA::Object_out, TAO::Objref_Traits&lt; CORBA::Object &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>TAO::Objref_Traits&lt; CORBA::Object &gt;</name>
    <filename>structTAO_1_1Objref__Traits_3_01CORBA_1_1Object_01_4.html</filename>
    <member kind="function" static="yes">
      <type>CORBA::Object_ptr</type>
      <name>duplicate</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::Object_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Object_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Object_ptr</type>
      <name>nil</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>e3</anchor>
      <arglist>(CORBA::Object_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Ret_Object_Argument_T&lt; CORBA::Object_ptr, CORBA::Object_var &gt;</name>
    <filename>classTAO_1_1Ret__Object__Argument__T_3_01CORBA_1_1Object__ptr_00_01CORBA_1_1Object__var_01_4.html</filename>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Ret_Object_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_result</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Any *)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr &amp;</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>excp</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object_ptr</type>
      <name>retn</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Object_var</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::In_Object_Argument_T</name>
    <filename>classTAO_1_1In__Object__Argument__T.html</filename>
    <templarg>S_ptr</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>In_Object_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(S_ptr x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a2</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S_ptr</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S_ptr</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Inout_Object_Argument_T</name>
    <filename>classTAO_1_1Inout__Object__Argument__T.html</filename>
    <templarg>S_ptr</templarg>
    <templarg>S_traits</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Inout_Object_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(S_ptr &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a3</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S_ptr &amp;</type>
      <name>arg</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S_ptr &amp;</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Out_Object_Argument_T</name>
    <filename>classTAO_1_1Out__Object__Argument__T.html</filename>
    <templarg>S_ptr</templarg>
    <templarg>S_out</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Out_Object_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(S_out &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a2</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S_out</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S_ptr &amp;</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Ret_Object_Argument_T</name>
    <filename>classTAO_1_1Ret__Object__Argument__T.html</filename>
    <templarg>S_ptr</templarg>
    <templarg>S_var</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Ret_Object_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_result</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Any *)</arglist>
    </member>
    <member kind="function">
      <type>S_ptr &amp;</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>S_ptr</type>
      <name>excp</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>S_ptr</type>
      <name>retn</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S_var</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Object_Tag</name>
    <filename>structTAO_1_1Object__Tag.html</filename>
  </compound>
  <compound kind="struct">
    <name>TAO::Object_Arg_Traits_T</name>
    <filename>structTAO_1_1Object__Arg__Traits__T.html</filename>
    <templarg>T_ptr</templarg>
    <templarg>T_var</templarg>
    <templarg>T_out</templarg>
    <templarg>T_traits</templarg>
    <member kind="typedef">
      <type>T_ptr</type>
      <name>ret_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_ptr</type>
      <name>in_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_ptr &amp;</type>
      <name>inout_type</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_out</type>
      <name>out_type</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>In_Object_Argument_T&lt; T_ptr &gt;</type>
      <name>in_arg_val</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Inout_Object_Argument_T&lt; T_ptr, T_traits &gt;</type>
      <name>inout_arg_val</name>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Out_Object_Argument_T&lt; T_ptr, T_out &gt;</type>
      <name>out_arg_val</name>
      <anchor>w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Ret_Object_Argument_T&lt; T_ptr, T_var &gt;</type>
      <name>ret_val</name>
      <anchor>w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object_Tag</type>
      <name>idl_tag</name>
      <anchor>w8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::ObjectKey</name>
    <filename>classTAO_1_1ObjectKey.html</filename>
    <base>TAO_Unbounded_Sequence&lt; CORBA::Octet &gt;</base>
    <member kind="typedef">
      <type>ObjectKey_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectKey</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectKey</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::ULong max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectKey</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::ULong max, CORBA::ULong length, CORBA::Octet *buffer, CORBA::Boolean release=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectKey</name>
      <anchor>a3</anchor>
      <arglist>(const ObjectKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ObjectKey</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectKey</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::ULong length, const ACE_Message_Block *mb)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>encode_sequence_to_string</name>
      <anchor>e0</anchor>
      <arglist>(char *&amp;str, const TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;seq)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>decode_string_to_sequence</name>
      <anchor>e1</anchor>
      <arglist>(TAO_Unbounded_Sequence&lt; CORBA::Octet &gt; &amp;seq, const char *str)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>int</type>
      <name>is_legal</name>
      <anchor>e2</anchor>
      <arglist>(u_char &amp;c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>demarshal_key</name>
      <anchor>e3</anchor>
      <arglist>(ObjectKey &amp;key, TAO_InputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Object_Proxy_Broker</name>
    <filename>classTAO_1_1Object__Proxy__Broker.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Object_Proxy_Broker</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::Object_ptr target, const char *logical_type_id ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Boolean</type>
      <name>_non_existent</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Object_ptr target ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::InterfaceDef *</type>
      <name>_get_interface</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::Object_ptr target ACE_ENV_ARG_DECL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Object_ptr</type>
      <name>_get_component</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::Object_ptr target ACE_ENV_ARG_DECL)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Narrow_Utils</name>
    <filename>classTAO_1_1Narrow__Utils.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T *</type>
      <name>T_ptr</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>T_ptr</type>
      <name>narrow</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::Object_ptr, const char *repo_id, Proxy_Broker_Factory ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>T_ptr</type>
      <name>unchecked_narrow</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Object_ptr, Proxy_Broker_Factory)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>T_ptr</type>
      <name>unchecked_narrow</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Object_ptr, const char *repo_id, Proxy_Broker_Factory ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>T_ptr</type>
      <name>lazy_evaluation</name>
      <anchor>h0</anchor>
      <arglist>(CORBA::Object_ptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Less_Than_ObjectKey</name>
    <filename>classTAO_1_1Less__Than__ObjectKey.html</filename>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const TAO::ObjectKey &amp;lhs, const TAO::ObjectKey &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::ObjectKey_Table</name>
    <filename>classTAO_1_1ObjectKey__Table.html</filename>
    <member kind="function">
      <type></type>
      <name>ObjectKey_Table</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ObjectKey_Table</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>(TAO_ORB_Core *orb)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>destroy</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind</name>
      <anchor>a4</anchor>
      <arglist>(const ObjectKey &amp;key, Refcounted_ObjectKey *&amp;key_new)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>a5</anchor>
      <arglist>(TAO::Refcounted_ObjectKey *&amp;key)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>bind_i</name>
      <anchor>b0</anchor>
      <arglist>(const ObjectKey &amp;key, Refcounted_ObjectKey *&amp;key_new)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>unbind_i</name>
      <anchor>b1</anchor>
      <arglist>(Refcounted_ObjectKey *&amp;key)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ACE_RB_Tree&lt; TAO::ObjectKey, TAO::Refcounted_ObjectKey *, TAO::Less_Than_ObjectKey, ACE_Null_Mutex &gt;</type>
      <name>TABLE</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Lock *</type>
      <name>lock_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TABLE</type>
      <name>table_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Objref_Traits</name>
    <filename>structTAO_1_1Objref__Traits.html</filename>
    <templarg>T</templarg>
    <member kind="function" static="yes">
      <type>T *</type>
      <name>duplicate</name>
      <anchor>e0</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>T *</type>
      <name>nil</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>e3</anchor>
      <arglist>(T *, TAO_OutputCDR &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::ORB_Table</name>
    <filename>classTAO_1_1ORB__Table.html</filename>
    <member kind="typedef">
      <type>ACE_Hash_Map_Manager_Ex&lt; const char *, TAO_ORB_Core *, ACE_Hash&lt; const char * &gt;, ACE_Equal_To&lt; const char * &gt;, ACE_Null_Mutex &gt;</type>
      <name>Table</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Table::iterator</type>
      <name>Iterator</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ORB_Table</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ORB_Table</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *const *</type>
      <name>get_orbs</name>
      <anchor>a2</anchor>
      <arglist>(size_t &amp;num_orbs)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>first_orb</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_default</name>
      <anchor>a4</anchor>
      <arglist>(char const *orb_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>not_default</name>
      <anchor>a5</anchor>
      <arglist>(char const *orb_id)</arglist>
    </member>
    <member kind="function">
      <type>Table *</type>
      <name>table</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchor>z129_0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchor>z129_1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind</name>
      <anchor>z129_2</anchor>
      <arglist>(const char *orb_id, TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type>TAO_ORB_Core *</type>
      <name>find</name>
      <anchor>z129_3</anchor>
      <arglist>(const char *orb_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unbind</name>
      <anchor>z129_4</anchor>
      <arglist>(const char *orb_id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ORB_Table *</type>
      <name>instance</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ORB_Table</name>
      <anchor>d0</anchor>
      <arglist>(const ORB_Table &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const ORB_Table &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>update_orbs</name>
      <anchor>d2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_SYNCH_MUTEX</type>
      <name>lock_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>first_orb_not_default_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Table</type>
      <name>table_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ORB_Core *</type>
      <name>first_orb_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ORB_Core **</type>
      <name>orbs_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>num_orbs_</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::ORBInitializer_Registry</name>
    <filename>classTAO_1_1ORBInitializer__Registry.html</filename>
    <member kind="function">
      <type></type>
      <name>ORBInitializer_Registry</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>register_orb_initializer</name>
      <anchor>b0</anchor>
      <arglist>(PortableInterceptor::ORBInitializer_ptr init ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>pre_init</name>
      <anchor>b1</anchor>
      <arglist>(PortableInterceptor::ORBInitInfo_ptr info ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>post_init</name>
      <anchor>b2</anchor>
      <arglist>(PortableInterceptor::ORBInitInfo_ptr info ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>ORBInitializer_Registry *</type>
      <name>instance</name>
      <anchor>f0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ORBInitializer_Registry</name>
      <anchor>d0</anchor>
      <arglist>(const ORBInitializer_Registry &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const ORBInitializer_Registry &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_SYNCH_MUTEX</type>
      <name>lock_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Array_Base&lt; PortableInterceptor::ORBInitializer_var &gt;</type>
      <name>initializers_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>PortableInterceptor::register_orb_initializer</name>
      <anchor>n0</anchor>
      <arglist>(PortableInterceptor::ORBInitializer_ptr init ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend CORBA::ORB_ptr</type>
      <name>CORBA::ORB_init</name>
      <anchor>n1</anchor>
      <arglist>(int &amp;, char *argv[], const char *, CORBA::Environment &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Objref_Traits&lt; ::PortableInterceptor::ORBInitializer &gt;</name>
    <filename>structTAO_1_1Objref__Traits_3_01_1_1PortableInterceptor_1_1ORBInitializer_01_4.html</filename>
    <member kind="function" static="yes">
      <type>::PortableInterceptor::ORBInitializer_ptr</type>
      <name>duplicate</name>
      <anchor>e0</anchor>
      <arglist>(::PortableInterceptor::ORBInitializer_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(::PortableInterceptor::ORBInitializer_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>::PortableInterceptor::ORBInitializer_ptr</type>
      <name>nil</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>e3</anchor>
      <arglist>(::PortableInterceptor::ORBInitializer_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Objref_Traits&lt; TAO_ORBInitInfo &gt;</name>
    <filename>structTAO_1_1Objref__Traits_3_01TAO__ORBInitInfo_01_4.html</filename>
    <member kind="function" static="yes">
      <type>TAO_ORBInitInfo_ptr</type>
      <name>duplicate</name>
      <anchor>e0</anchor>
      <arglist>(TAO_ORBInitInfo_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(TAO_ORBInitInfo_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TAO_ORBInitInfo_ptr</type>
      <name>nil</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>e3</anchor>
      <arglist>(TAO_ORBInitInfo_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Objref_Traits&lt; ::PortableInterceptor::ORBInitInfo &gt;</name>
    <filename>structTAO_1_1Objref__Traits_3_01_1_1PortableInterceptor_1_1ORBInitInfo_01_4.html</filename>
    <member kind="function" static="yes">
      <type>::PortableInterceptor::ORBInitInfo_ptr</type>
      <name>duplicate</name>
      <anchor>e0</anchor>
      <arglist>(::PortableInterceptor::ORBInitInfo_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(::PortableInterceptor::ORBInitInfo_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>::PortableInterceptor::ORBInitInfo_ptr</type>
      <name>nil</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>e3</anchor>
      <arglist>(::PortableInterceptor::ORBInitInfo_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::PICurrent</name>
    <filename>classTAO_1_1PICurrent.html</filename>
    <base virtualness="virtual">PortableInterceptor::Current</base>
    <base virtualness="virtual">TAO_Local_RefCounted_Object</base>
    <member kind="function">
      <type></type>
      <name>PICurrent</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core *orb_core)</arglist>
    </member>
    <member kind="function">
      <type>PortableInterceptor::SlotId</type>
      <name>slot_count</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>PICurrent_Impl *</type>
      <name>tsc</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check_validity</name>
      <anchor>a3</anchor>
      <arglist>(const PortableInterceptor::SlotId &amp;identifier ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchor>a4</anchor>
      <arglist>(PortableInterceptor::SlotId sc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Any *</type>
      <name>get_slot</name>
      <anchor>z137_0</anchor>
      <arglist>(PortableInterceptor::SlotId id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_slot</name>
      <anchor>z137_1</anchor>
      <arglist>(PortableInterceptor::SlotId identifier, const CORBA::Any &amp;data ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~PICurrent</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>PICurrent</name>
      <anchor>z138_0</anchor>
      <arglist>(const PICurrent &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>z138_1</anchor>
      <arglist>(const PICurrent &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_ORB_Core *</type>
      <name>orb_core_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PortableInterceptor::SlotId</type>
      <name>slot_count_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::PICurrent_Impl</name>
    <filename>classTAO_1_1PICurrent__Impl.html</filename>
    <member kind="typedef">
      <type>ACE_Array_Base&lt; CORBA::Any &gt;</type>
      <name>Table</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PICurrent_Impl</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PICurrent_Impl</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::Any *</type>
      <name>get_slot</name>
      <anchor>a2</anchor>
      <arglist>(PortableInterceptor::SlotId identifier ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_slot</name>
      <anchor>a3</anchor>
      <arglist>(PortableInterceptor::SlotId identifier, const CORBA::Any &amp;data ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_callback</name>
      <anchor>a4</anchor>
      <arglist>(PICurrent_Copy_Callback *cb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destruction_callback</name>
      <anchor>a5</anchor>
      <arglist>(PICurrent_Impl *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>execute_destruction_callback</name>
      <anchor>a6</anchor>
      <arglist>(Table *old_lc_slot_table)</arglist>
    </member>
    <member kind="function">
      <type>Table &amp;</type>
      <name>slot_table</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Table &amp;</type>
      <name>current_slot_table</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lc_slot_table</name>
      <anchor>a9</anchor>
      <arglist>(PICurrent_Impl *p)</arglist>
    </member>
    <member kind="function">
      <type>Table *</type>
      <name>lc_slot_table</name>
      <anchor>a10</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>PICurrent_Impl</name>
      <anchor>z139_0</anchor>
      <arglist>(const PICurrent_Impl &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>z139_1</anchor>
      <arglist>(const PICurrent_Impl &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Table</type>
      <name>slot_table_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Table *</type>
      <name>lc_slot_table_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PICurrent_Copy_Callback *</type>
      <name>copy_callback_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PICurrent_Impl *</type>
      <name>destruction_callback_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::PICurrent_Copy_Callback</name>
    <filename>classTAO_1_1PICurrent__Copy__Callback.html</filename>
    <base>ACE_Command_Base</base>
    <member kind="function">
      <type></type>
      <name>PICurrent_Copy_Callback</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PICurrent_Copy_Callback</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>execute</name>
      <anchor>a2</anchor>
      <arglist>(void *arg=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>src_and_dst</name>
      <anchor>a3</anchor>
      <arglist>(PICurrent_Impl *src, PICurrent_Impl *dst)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PICurrent_Impl *</type>
      <name>src_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PICurrent_Impl *</type>
      <name>dst_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Objref_Traits&lt; ::CORBA::Policy &gt;</name>
    <filename>structTAO_1_1Objref__Traits_3_01_1_1CORBA_1_1Policy_01_4.html</filename>
    <member kind="function" static="yes">
      <type>::CORBA::Policy_ptr</type>
      <name>duplicate</name>
      <anchor>e0</anchor>
      <arglist>(::CORBA::Policy_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(::CORBA::Policy_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>::CORBA::Policy_ptr</type>
      <name>nil</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>e3</anchor>
      <arglist>(::CORBA::Policy_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Objref_Traits&lt; ::CORBA::PolicyCurrent &gt;</name>
    <filename>structTAO_1_1Objref__Traits_3_01_1_1CORBA_1_1PolicyCurrent_01_4.html</filename>
    <member kind="function" static="yes">
      <type>::CORBA::PolicyCurrent_ptr</type>
      <name>duplicate</name>
      <anchor>e0</anchor>
      <arglist>(::CORBA::PolicyCurrent_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(::CORBA::PolicyCurrent_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>::CORBA::PolicyCurrent_ptr</type>
      <name>nil</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>e3</anchor>
      <arglist>(::CORBA::PolicyCurrent_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Objref_Traits&lt; ::CORBA::PolicyManager &gt;</name>
    <filename>structTAO_1_1Objref__Traits_3_01_1_1CORBA_1_1PolicyManager_01_4.html</filename>
    <member kind="function" static="yes">
      <type>::CORBA::PolicyManager_ptr</type>
      <name>duplicate</name>
      <anchor>e0</anchor>
      <arglist>(::CORBA::PolicyManager_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(::CORBA::PolicyManager_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>::CORBA::PolicyManager_ptr</type>
      <name>nil</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>e3</anchor>
      <arglist>(::CORBA::PolicyManager_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Objref_Traits&lt; ::PortableInterceptor::PolicyFactory &gt;</name>
    <filename>structTAO_1_1Objref__Traits_3_01_1_1PortableInterceptor_1_1PolicyFactory_01_4.html</filename>
    <member kind="function" static="yes">
      <type>::PortableInterceptor::PolicyFactory_ptr</type>
      <name>duplicate</name>
      <anchor>e0</anchor>
      <arglist>(::PortableInterceptor::PolicyFactory_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(::PortableInterceptor::PolicyFactory_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>::PortableInterceptor::PolicyFactory_ptr</type>
      <name>nil</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>e3</anchor>
      <arglist>(::PortableInterceptor::PolicyFactory_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Objref_Traits&lt; ::CORBA::PollableSet &gt;</name>
    <filename>structTAO_1_1Objref__Traits_3_01_1_1CORBA_1_1PollableSet_01_4.html</filename>
    <member kind="function" static="yes">
      <type>::CORBA::PollableSet_ptr</type>
      <name>duplicate</name>
      <anchor>e0</anchor>
      <arglist>(::CORBA::PollableSet_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(::CORBA::PollableSet_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>::CORBA::PollableSet_ptr</type>
      <name>nil</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>e3</anchor>
      <arglist>(::CORBA::PollableSet_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Objref_Traits&lt; ::CORBA::Pollable &gt;</name>
    <filename>structTAO_1_1Objref__Traits_3_01_1_1CORBA_1_1Pollable_01_4.html</filename>
    <member kind="function" static="yes">
      <type>::CORBA::Pollable_ptr</type>
      <name>duplicate</name>
      <anchor>e0</anchor>
      <arglist>(::CORBA::Pollable_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(::CORBA::Pollable_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>::CORBA::Pollable_ptr</type>
      <name>nil</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>e3</anchor>
      <arglist>(::CORBA::Pollable_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Objref_Traits&lt; ::CORBA::DIIPollable &gt;</name>
    <filename>structTAO_1_1Objref__Traits_3_01_1_1CORBA_1_1DIIPollable_01_4.html</filename>
    <member kind="function" static="yes">
      <type>::CORBA::DIIPollable_ptr</type>
      <name>duplicate</name>
      <anchor>e0</anchor>
      <arglist>(::CORBA::DIIPollable_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(::CORBA::DIIPollable_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>::CORBA::DIIPollable_ptr</type>
      <name>nil</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>e3</anchor>
      <arglist>(::CORBA::DIIPollable_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Objref_Traits&lt; ::PortableInterceptor::ClientRequestInterceptor &gt;</name>
    <filename>structTAO_1_1Objref__Traits_3_01_1_1PortableInterceptor_1_1ClientRequestInterceptor_01_4.html</filename>
    <member kind="function" static="yes">
      <type>::PortableInterceptor::ClientRequestInterceptor_ptr</type>
      <name>duplicate</name>
      <anchor>e0</anchor>
      <arglist>(::PortableInterceptor::ClientRequestInterceptor_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(::PortableInterceptor::ClientRequestInterceptor_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>::PortableInterceptor::ClientRequestInterceptor_ptr</type>
      <name>nil</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>e3</anchor>
      <arglist>(::PortableInterceptor::ClientRequestInterceptor_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Objref_Traits&lt; ::PortableInterceptor::ServerRequestInterceptor &gt;</name>
    <filename>structTAO_1_1Objref__Traits_3_01_1_1PortableInterceptor_1_1ServerRequestInterceptor_01_4.html</filename>
    <member kind="function" static="yes">
      <type>::PortableInterceptor::ServerRequestInterceptor_ptr</type>
      <name>duplicate</name>
      <anchor>e0</anchor>
      <arglist>(::PortableInterceptor::ServerRequestInterceptor_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(::PortableInterceptor::ServerRequestInterceptor_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>::PortableInterceptor::ServerRequestInterceptor_ptr</type>
      <name>nil</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>e3</anchor>
      <arglist>(::PortableInterceptor::ServerRequestInterceptor_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Objref_Traits&lt; ::PortableInterceptor::Interceptor &gt;</name>
    <filename>structTAO_1_1Objref__Traits_3_01_1_1PortableInterceptor_1_1Interceptor_01_4.html</filename>
    <member kind="function" static="yes">
      <type>::PortableInterceptor::Interceptor_ptr</type>
      <name>duplicate</name>
      <anchor>e0</anchor>
      <arglist>(::PortableInterceptor::Interceptor_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(::PortableInterceptor::Interceptor_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>::PortableInterceptor::Interceptor_ptr</type>
      <name>nil</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>e3</anchor>
      <arglist>(::PortableInterceptor::Interceptor_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Objref_Traits&lt; ::PortableInterceptor::Current &gt;</name>
    <filename>structTAO_1_1Objref__Traits_3_01_1_1PortableInterceptor_1_1Current_01_4.html</filename>
    <member kind="function" static="yes">
      <type>::PortableInterceptor::Current_ptr</type>
      <name>duplicate</name>
      <anchor>e0</anchor>
      <arglist>(::PortableInterceptor::Current_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(::PortableInterceptor::Current_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>::PortableInterceptor::Current_ptr</type>
      <name>nil</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>e3</anchor>
      <arglist>(::PortableInterceptor::Current_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Profile_Transport_Resolver</name>
    <filename>classTAO_1_1Profile__Transport__Resolver.html</filename>
    <member kind="function">
      <type></type>
      <name>Profile_Transport_Resolver</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::Object *p, TAO_Stub *stub, bool block=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Profile_Transport_Resolver</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resolve</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Time_Value *val ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transport_released</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_connect</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Transport_Descriptor_Interface *desc, ACE_Time_Value *val ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init_inconsistent_policies</name>
      <anchor>a5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>CORBA::PolicyList *</type>
      <name>inconsistent_policies</name>
      <anchor>a6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::PolicyList *</type>
      <name>steal_inconsistent_policies</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>profile</name>
      <anchor>z148_0</anchor>
      <arglist>(TAO_Profile *pfile)</arglist>
    </member>
    <member kind="function">
      <type>TAO_Profile *</type>
      <name>profile</name>
      <anchor>z148_1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TAO_Stub *</type>
      <name>stub</name>
      <anchor>z148_2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::Object *</type>
      <name>object</name>
      <anchor>z148_3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TAO_Transport *</type>
      <name>transport</name>
      <anchor>z148_4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>blocked_connect</name>
      <anchor>z148_5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>get_connection_timeout</name>
      <anchor>d0</anchor>
      <arglist>(ACE_Time_Value &amp;max_wait_time)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Object *</type>
      <name>obj_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Stub *</type>
      <name>stub_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Transport *</type>
      <name>transport_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Profile *</type>
      <name>profile_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::PolicyList *</type>
      <name>inconsistent_policies_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>is_released_</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool const</type>
      <name>blocked_</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::QtResource_Factory</name>
    <filename>classTAO_1_1QtResource__Factory.html</filename>
    <base>TAO::GUIResource_Factory</base>
    <member kind="function">
      <type></type>
      <name>QtResource_Factory</name>
      <anchor>a0</anchor>
      <arglist>(QApplication *qapp_)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ACE_Reactor_Impl *</type>
      <name>reactor_impl</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_QtReactor *</type>
      <name>reactor_impl_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QApplication *</type>
      <name>qapp_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_SYNCH_MUTEX</type>
      <name>lock_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::QtResource_Loader</name>
    <filename>classTAO_1_1QtResource__Loader.html</filename>
    <member kind="function">
      <type></type>
      <name>QtResource_Loader</name>
      <anchor>a0</anchor>
      <arglist>(QApplication *qapp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~QtResource_Loader</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::RefCount_Policy_Traits&lt; Null_RefCount_Policy, TypePtr &gt;</name>
    <filename>structTAO_1_1RefCount__Policy__Traits_3_01Null__RefCount__Policy_00_01TypePtr_01_4.html</filename>
    <templarg>TypePtr</templarg>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e0</anchor>
      <arglist>(TypePtr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::RefCount_Policy_Traits&lt; True_RefCount_Policy, TypePtr &gt;</name>
    <filename>structTAO_1_1RefCount__Policy__Traits_3_01True__RefCount__Policy_00_01TypePtr_01_4.html</filename>
    <templarg>TypePtr</templarg>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e0</anchor>
      <arglist>(TypePtr ptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Refcounted_ObjectKey</name>
    <filename>classTAO_1_1Refcounted__ObjectKey.html</filename>
    <member kind="function">
      <type></type>
      <name>Refcounted_ObjectKey</name>
      <anchor>a0</anchor>
      <arglist>(const ObjectKey &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>const ObjectKey &amp;</type>
      <name>object_key</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~Refcounted_ObjectKey</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>long</type>
      <name>incr_refcount</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>long</type>
      <name>decr_refcount</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ObjectKey</type>
      <name>object_key_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long</type>
      <name>ref_count_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ObjectKey_Table</name>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Remote_Invocation</name>
    <filename>classTAO_1_1Remote__Invocation.html</filename>
    <base>TAO::Invocation_Base</base>
    <member kind="function">
      <type></type>
      <name>Remote_Invocation</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::Object_ptr otarget, Profile_Transport_Resolver &amp;resolver, TAO_Operation_Details &amp;detail, bool response_expected)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init_target_spec</name>
      <anchor>b0</anchor>
      <arglist>(TAO_Target_Specification &amp;spec ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write_header</name>
      <anchor>b1</anchor>
      <arglist>(TAO_Target_Specification &amp;spec, TAO_OutputCDR &amp;out_stream ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>marshal_data</name>
      <anchor>b2</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Invocation_Status</type>
      <name>send_message</name>
      <anchor>b3</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr, short message_semantics, ACE_Time_Value *max_wait_time ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Profile_Transport_Resolver &amp;</type>
      <name>resolver_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Remote_Object_Proxy_Broker</name>
    <filename>classTAO_1_1Remote__Object__Proxy__Broker.html</filename>
    <base>TAO::Object_Proxy_Broker</base>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::Object_ptr target, const char *logical_type_id ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_non_existent</name>
      <anchor>a1</anchor>
      <arglist>(CORBA::Object_ptr target ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::InterfaceDef *</type>
      <name>_get_interface</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Object_ptr target ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Object_ptr</type>
      <name>_get_component</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::Object_ptr target ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Objref_Traits&lt; ::PortableInterceptor::RequestInfo &gt;</name>
    <filename>structTAO_1_1Objref__Traits_3_01_1_1PortableInterceptor_1_1RequestInfo_01_4.html</filename>
    <member kind="function" static="yes">
      <type>::PortableInterceptor::RequestInfo_ptr</type>
      <name>duplicate</name>
      <anchor>e0</anchor>
      <arglist>(::PortableInterceptor::RequestInfo_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(::PortableInterceptor::RequestInfo_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>::PortableInterceptor::RequestInfo_ptr</type>
      <name>nil</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>e3</anchor>
      <arglist>(::PortableInterceptor::RequestInfo_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Objref_Traits&lt; ::PortableInterceptor::ServerRequestInfo &gt;</name>
    <filename>structTAO_1_1Objref__Traits_3_01_1_1PortableInterceptor_1_1ServerRequestInfo_01_4.html</filename>
    <member kind="function" static="yes">
      <type>::PortableInterceptor::ServerRequestInfo_ptr</type>
      <name>duplicate</name>
      <anchor>e0</anchor>
      <arglist>(::PortableInterceptor::ServerRequestInfo_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(::PortableInterceptor::ServerRequestInfo_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>::PortableInterceptor::ServerRequestInfo_ptr</type>
      <name>nil</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>e3</anchor>
      <arglist>(::PortableInterceptor::ServerRequestInfo_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::In_Special_Basic_Argument_T</name>
    <filename>classTAO_1_1In__Special__Basic__Argument__T.html</filename>
    <templarg>S</templarg>
    <templarg>to_S</templarg>
    <templarg>from_S</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>In_Special_Basic_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(S const &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a2</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S const &amp;</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S const &amp;</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Inout_Special_Basic_Argument_T</name>
    <filename>classTAO_1_1Inout__Special__Basic__Argument__T.html</filename>
    <templarg>S</templarg>
    <templarg>to_S</templarg>
    <templarg>from_S</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Inout_Special_Basic_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(S &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a3</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S &amp;</type>
      <name>arg</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S &amp;</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Out_Special_Basic_Argument_T</name>
    <filename>classTAO_1_1Out__Special__Basic__Argument__T.html</filename>
    <templarg>S</templarg>
    <templarg>to_S</templarg>
    <templarg>from_S</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Out_Special_Basic_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(S &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a2</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S &amp;</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S &amp;</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Ret_Special_Basic_Argument_T</name>
    <filename>classTAO_1_1Ret__Special__Basic__Argument__T.html</filename>
    <templarg>S</templarg>
    <templarg>to_S</templarg>
    <templarg>from_S</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Ret_Special_Basic_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_result</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Any *)</arglist>
    </member>
    <member kind="function">
      <type>S &amp;</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>S</type>
      <name>excp</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>S</type>
      <name>retn</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Special_Basic_Tag</name>
    <filename>structTAO_1_1Special__Basic__Tag.html</filename>
  </compound>
  <compound kind="struct">
    <name>TAO::Special_Basic_Arg_Traits_T</name>
    <filename>structTAO_1_1Special__Basic__Arg__Traits__T.html</filename>
    <templarg>T</templarg>
    <templarg>to_T</templarg>
    <templarg>from_T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>ret_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>in_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>inout_type</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>out_type</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>In_Special_Basic_Argument_T&lt; T, to_T, from_T &gt;</type>
      <name>in_arg_val</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Inout_Special_Basic_Argument_T&lt; T, to_T, from_T &gt;</type>
      <name>inout_arg_val</name>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Out_Special_Basic_Argument_T&lt; T, to_T, from_T &gt;</type>
      <name>out_arg_val</name>
      <anchor>w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Ret_Special_Basic_Argument_T&lt; T, to_T, from_T &gt;</type>
      <name>ret_val</name>
      <anchor>w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Special_Basic_Tag</type>
      <name>idl_tag</name>
      <anchor>w8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Arg_Traits&lt; ACE_InputCDR::to_char &gt;</name>
    <filename>classTAO_1_1Arg__Traits_3_01ACE__InputCDR_1_1to__char_01_4.html</filename>
    <base>TAO::Special_Basic_Arg_Traits_T&lt; CORBA::Char, ACE_InputCDR::to_char, ACE_OutputCDR::from_char &gt;</base>
  </compound>
  <compound kind="class">
    <name>TAO::Arg_Traits&lt; ACE_InputCDR::to_wchar &gt;</name>
    <filename>classTAO_1_1Arg__Traits_3_01ACE__InputCDR_1_1to__wchar_01_4.html</filename>
    <base>TAO::Special_Basic_Arg_Traits_T&lt; CORBA::WChar, ACE_InputCDR::to_wchar, ACE_OutputCDR::from_wchar &gt;</base>
  </compound>
  <compound kind="class">
    <name>TAO::Arg_Traits&lt; ACE_InputCDR::to_octet &gt;</name>
    <filename>classTAO_1_1Arg__Traits_3_01ACE__InputCDR_1_1to__octet_01_4.html</filename>
    <base>TAO::Special_Basic_Arg_Traits_T&lt; CORBA::Octet, ACE_InputCDR::to_octet, ACE_OutputCDR::from_octet &gt;</base>
  </compound>
  <compound kind="class">
    <name>TAO::Arg_Traits&lt; ACE_InputCDR::to_boolean &gt;</name>
    <filename>classTAO_1_1Arg__Traits_3_01ACE__InputCDR_1_1to__boolean_01_4.html</filename>
    <base>TAO::Special_Basic_Arg_Traits_T&lt; CORBA::Boolean, ACE_InputCDR::to_boolean, ACE_OutputCDR::from_boolean &gt;</base>
  </compound>
  <compound kind="class">
    <name>TAO::Synch_Twoway_Invocation</name>
    <filename>classTAO_1_1Synch__Twoway__Invocation.html</filename>
    <base>TAO::Remote_Invocation</base>
    <member kind="function">
      <type></type>
      <name>Synch_Twoway_Invocation</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::Object_ptr otarget, Profile_Transport_Resolver &amp;resolver, TAO_Operation_Details &amp;detail, bool response_expected=true)</arglist>
    </member>
    <member kind="function">
      <type>Invocation_Status</type>
      <name>remote_twoway</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Time_Value *max_wait_time ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Invocation_Status</type>
      <name>handle_user_exception</name>
      <anchor>b0</anchor>
      <arglist>(TAO_InputCDR &amp;cdr ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Invocation_Status</type>
      <name>location_forward</name>
      <anchor>b1</anchor>
      <arglist>(TAO_InputCDR &amp;cdr ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Invocation_Status</type>
      <name>handle_system_exception</name>
      <anchor>b2</anchor>
      <arglist>(TAO_InputCDR &amp;cdr ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Invocation_Status</type>
      <name>wait_for_reply</name>
      <anchor>b3</anchor>
      <arglist>(ACE_Time_Value *max_wait_time, TAO_Synch_Reply_Dispatcher &amp;rd, TAO_Bind_Dispatcher_Guard &amp;bd ACE_ENV_ARG_DECL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Invocation_Status</type>
      <name>check_reply_status</name>
      <anchor>d0</anchor>
      <arglist>(TAO_Synch_Reply_Dispatcher &amp;rd ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Synch_Oneway_Invocation</name>
    <filename>classTAO_1_1Synch__Oneway__Invocation.html</filename>
    <base>TAO::Synch_Twoway_Invocation</base>
    <member kind="function">
      <type></type>
      <name>Synch_Oneway_Invocation</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::Object_ptr otarget, Profile_Transport_Resolver &amp;resolver, TAO_Operation_Details &amp;detail)</arglist>
    </member>
    <member kind="function">
      <type>Invocation_Status</type>
      <name>remote_oneway</name>
      <anchor>a1</anchor>
      <arglist>(ACE_Time_Value *max_wait_time ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Reply_Guard</name>
    <filename>classTAO_1_1Reply__Guard.html</filename>
    <member kind="function">
      <type></type>
      <name>Reply_Guard</name>
      <anchor>a0</anchor>
      <arglist>(Invocation_Base *s, Invocation_Status is)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Reply_Guard</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_status</name>
      <anchor>a2</anchor>
      <arglist>(Invocation_Status s)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Invocation_Base *</type>
      <name>invocation_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Invocation_Status</type>
      <name>status_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::BufferingConstraint</name>
    <filename>structTAO_1_1BufferingConstraint.html</filename>
    <member kind="typedef">
      <type>BufferingConstraint_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>BufferingConstraintMode</type>
      <name>mode</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TimeBase::TimeT</type>
      <name>timeout</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>message_count</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>message_bytes</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::BufferingConstraintMode</type>
      <name>mode</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::ULong</type>
      <name>message_count</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::ULong</type>
      <name>message_bytes</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="interface">
    <name>TAO::BufferingConstraintPolicy</name>
    <filename>interfaceTAO_1_1BufferingConstraintPolicy.html</filename>
    <base virtualness="virtual">CORBA::Policy</base>
    <base>CORBA::Policy</base>
    <member kind="typedef">
      <type>BufferingConstraintPolicy_ptr</type>
      <name>_ptr_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BufferingConstraintPolicy_var</type>
      <name>_var_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ::TAO::BufferingConstraint</type>
      <name>buffering_constraint</name>
      <anchor>a0</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ::CORBA::Policy_ptr</type>
      <name>copy</name>
      <anchor>a1</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>destroy</name>
      <anchor>a2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>_is_a</name>
      <anchor>a3</anchor>
      <arglist>(const char *type_id ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_interface_repository_id</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a5</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>BufferingConstraintPolicy_ptr</type>
      <name>_duplicate</name>
      <anchor>e0</anchor>
      <arglist>(BufferingConstraintPolicy_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_release</name>
      <anchor>e1</anchor>
      <arglist>(BufferingConstraintPolicy_ptr obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>BufferingConstraintPolicy_ptr</type>
      <name>_narrow</name>
      <anchor>e2</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>BufferingConstraintPolicy_ptr</type>
      <name>_unchecked_narrow</name>
      <anchor>e3</anchor>
      <arglist>(CORBA::Object_ptr obj ACE_ENV_ARG_DECL_WITH_DEFAULTS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>BufferingConstraintPolicy_ptr</type>
      <name>_nil</name>
      <anchor>e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e5</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>readonly attribute BufferingConstraint</type>
      <name>buffering_constraint</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BufferingConstraintPolicy</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~BufferingConstraintPolicy</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BufferingConstraintPolicy</name>
      <anchor>d0</anchor>
      <arglist>(const BufferingConstraintPolicy &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchor>d1</anchor>
      <arglist>(const BufferingConstraintPolicy &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Objref_Traits&lt; ::TAO::BufferingConstraintPolicy &gt;</name>
    <filename>structTAO_1_1Objref__Traits_3_01_1_1TAO_1_1BufferingConstraintPolicy_01_4.html</filename>
    <member kind="function" static="yes">
      <type>::TAO::BufferingConstraintPolicy_ptr</type>
      <name>duplicate</name>
      <anchor>e0</anchor>
      <arglist>(::TAO::BufferingConstraintPolicy_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(::TAO::BufferingConstraintPolicy_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>::TAO::BufferingConstraintPolicy_ptr</type>
      <name>nil</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>e3</anchor>
      <arglist>(::TAO::BufferingConstraintPolicy_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::TkResource_Factory</name>
    <filename>classTAO_1_1TkResource__Factory.html</filename>
    <base>TAO::GUIResource_Factory</base>
    <member kind="function">
      <type></type>
      <name>TkResource_Factory</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ACE_Reactor_Impl *</type>
      <name>reactor_impl</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_TkReactor *</type>
      <name>reactor_impl_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_SYNCH_MUTEX</type>
      <name>lock_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::TkResource_Loader</name>
    <filename>classTAO_1_1TkResource__Loader.html</filename>
    <member kind="function">
      <type></type>
      <name>TkResource_Loader</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TkResource_Loader</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Transport_Cache_Manager</name>
    <filename>classTAO_1_1Transport__Cache__Manager.html</filename>
    <member kind="typedef">
      <type>ACE_Hash_Map_Manager_Ex&lt; Cache_ExtId, Cache_IntId, ACE_Hash&lt; Cache_ExtId &gt;, ACE_Equal_To&lt; Cache_ExtId &gt;, ACE_Null_Mutex &gt;</type>
      <name>HASH_MAP</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HASH_MAP::iterator</type>
      <name>HASH_MAP_ITER</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ACE_Hash_Map_Entry&lt; Cache_ExtId, Cache_IntId &gt;</type>
      <name>HASH_MAP_ENTRY</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Condition&lt; TAO_SYNCH_MUTEX &gt;</type>
      <name>CONDITION</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transport_Cache_Manager</name>
      <anchor>a0</anchor>
      <arglist>(TAO_ORB_Core &amp;orb_core)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Transport_Cache_Manager</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cache_transport</name>
      <anchor>a2</anchor>
      <arglist>(TAO_Transport_Descriptor_Interface *prop, TAO_Transport *transport)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cache_idle_transport</name>
      <anchor>a3</anchor>
      <arglist>(TAO_Transport_Descriptor_Interface *prop, TAO_Transport *transport)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find_transport</name>
      <anchor>a4</anchor>
      <arglist>(TAO_Transport_Descriptor_Interface *prop, TAO_Transport *&amp;transport)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>purge</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>purge_entry</name>
      <anchor>a6</anchor>
      <arglist>(HASH_MAP_ENTRY *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mark_invalid</name>
      <anchor>a7</anchor>
      <arglist>(HASH_MAP_ENTRY *&amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>make_idle</name>
      <anchor>a8</anchor>
      <arglist>(HASH_MAP_ENTRY *&amp;entry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>update_entry</name>
      <anchor>a9</anchor>
      <arglist>(HASH_MAP_ENTRY *&amp;entry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchor>a10</anchor>
      <arglist>(Connection_Handler_Set &amp;handlers)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>blockable_client_transports</name>
      <anchor>a11</anchor>
      <arglist>(Connection_Handler_Set &amp;handlers)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>current_size</name>
      <anchor>a12</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>total_size</name>
      <anchor>a13</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>HASH_MAP &amp;</type>
      <name>map</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>HASH_MAP_ENTRY **</type>
      <name>DESCRIPTOR_SET</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>bind</name>
      <anchor>d0</anchor>
      <arglist>(Cache_ExtId &amp;ext_id, Cache_IntId &amp;int_id)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>find</name>
      <anchor>d1</anchor>
      <arglist>(const Cache_ExtId &amp;key, Cache_IntId &amp;value)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>bind_i</name>
      <anchor>d2</anchor>
      <arglist>(Cache_ExtId &amp;ext_id, Cache_IntId &amp;int_id)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>find_i</name>
      <anchor>d3</anchor>
      <arglist>(const Cache_ExtId &amp;key, Cache_IntId &amp;value)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>make_idle_i</name>
      <anchor>d4</anchor>
      <arglist>(HASH_MAP_ENTRY *&amp;entry)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>close_i</name>
      <anchor>d5</anchor>
      <arglist>(Connection_Handler_Set &amp;handlers)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>purge_entry_i</name>
      <anchor>d6</anchor>
      <arglist>(HASH_MAP_ENTRY *&amp;entry)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>mark_invalid_i</name>
      <anchor>d7</anchor>
      <arglist>(HASH_MAP_ENTRY *&amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>get_last_index_bind</name>
      <anchor>d8</anchor>
      <arglist>(Cache_ExtId &amp;key, Cache_IntId &amp;val, HASH_MAP_ENTRY *&amp;entry)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>is_entry_idle</name>
      <anchor>d9</anchor>
      <arglist>(HASH_MAP_ENTRY *&amp;entry)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sort_set</name>
      <anchor>d10</anchor>
      <arglist>(DESCRIPTOR_SET &amp;entries, int size)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>fill_set_i</name>
      <anchor>d11</anchor>
      <arglist>(DESCRIPTOR_SET &amp;sorted_set)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>wait_for_connection</name>
      <anchor>d12</anchor>
      <arglist>(Cache_ExtId &amp;extid)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>is_wakeup_useful</name>
      <anchor>d13</anchor>
      <arglist>(Cache_ExtId &amp;extid)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>blockable_client_transports_i</name>
      <anchor>d14</anchor>
      <arglist>(Connection_Handler_Set &amp;handlers)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>int</type>
      <name>cpscmp</name>
      <anchor>h0</anchor>
      <arglist>(const void *a, const void *b)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>percent_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Connection_Purging_Strategy *</type>
      <name>purging_strategy_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>HASH_MAP</type>
      <name>cache_map_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CONDITION *</type>
      <name>condition_</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_Lock *</type>
      <name>cache_lock_</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong</type>
      <name>muxed_number_</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>no_waiting_threads_</name>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Cache_ExtId *</type>
      <name>last_entry_returned_</name>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::True_RefCount_Policy</name>
    <filename>classTAO_1_1True__RefCount__Policy.html</filename>
    <member kind="function">
      <type>void</type>
      <name>add_ref</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_ref</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>True_RefCount_Policy</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~True_RefCount_Policy</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_SYNCH_MUTEX</type>
      <name>lock_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>refcount_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Arg_Traits&lt; CORBA::TypeCode &gt;</name>
    <filename>classTAO_1_1Arg__Traits_3_01CORBA_1_1TypeCode_01_4.html</filename>
    <base>TAO::Object_Arg_Traits_T&lt; CORBA::TypeCode_ptr, CORBA::TypeCode_var, CORBA::TypeCode_out, TAO::Objref_Traits&lt; CORBA::TypeCode &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>TAO::Objref_Traits&lt; ::CORBA::TypeCode &gt;</name>
    <filename>structTAO_1_1Objref__Traits_3_01_1_1CORBA_1_1TypeCode_01_4.html</filename>
    <member kind="function" static="yes">
      <type>::CORBA::TypeCode_ptr</type>
      <name>duplicate</name>
      <anchor>e0</anchor>
      <arglist>(::CORBA::TypeCode_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>release</name>
      <anchor>e1</anchor>
      <arglist>(::CORBA::TypeCode_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>::CORBA::TypeCode_ptr</type>
      <name>nil</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>e3</anchor>
      <arglist>(::CORBA::TypeCode_ptr p, TAO_OutputCDR &amp;cdr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::In_UB_String_Argument_T</name>
    <filename>classTAO_1_1In__UB__String__Argument__T.html</filename>
    <templarg>S</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>In_UB_String_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(const S *x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a2</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S const *</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S const *</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Inout_UB_String_Argument_T</name>
    <filename>classTAO_1_1Inout__UB__String__Argument__T.html</filename>
    <templarg>S</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Inout_UB_String_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(S *&amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a3</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S *&amp;</type>
      <name>arg</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S *&amp;</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Out_UB_String_Argument_T</name>
    <filename>classTAO_1_1Out__UB__String__Argument__T.html</filename>
    <templarg>S</templarg>
    <templarg>S_out</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Out_UB_String_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(S_out &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a2</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S *&amp;</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S *&amp;</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Ret_UB_String_Argument_T</name>
    <filename>classTAO_1_1Ret__UB__String__Argument__T.html</filename>
    <templarg>S</templarg>
    <templarg>S_var</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Ret_UB_String_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_result</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Any *)</arglist>
    </member>
    <member kind="function">
      <type>S *&amp;</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>S *</type>
      <name>excp</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>S *</type>
      <name>retn</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S_var</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::UB_String_Tag</name>
    <filename>structTAO_1_1UB__String__Tag.html</filename>
  </compound>
  <compound kind="struct">
    <name>TAO::UB_String_Arg_Traits_T</name>
    <filename>structTAO_1_1UB__String__Arg__Traits__T.html</filename>
    <templarg>T</templarg>
    <templarg>T_var</templarg>
    <templarg>T_out</templarg>
    <member kind="typedef">
      <type>T *</type>
      <name>ret_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T const *</type>
      <name>in_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *&amp;</type>
      <name>inout_type</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_out</type>
      <name>out_type</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>In_UB_String_Argument_T&lt; T &gt;</type>
      <name>in_arg_val</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Inout_UB_String_Argument_T&lt; T &gt;</type>
      <name>inout_arg_val</name>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Out_UB_String_Argument_T&lt; T, T_out &gt;</type>
      <name>out_arg_val</name>
      <anchor>w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Ret_UB_String_Argument_T&lt; T, T_var &gt;</type>
      <name>ret_val</name>
      <anchor>w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UB_String_Tag</type>
      <name>idl_tag</name>
      <anchor>w8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Arg_Traits&lt; CORBA::Char * &gt;</name>
    <filename>classTAO_1_1Arg__Traits_3_01CORBA_1_1Char_01_5_01_4.html</filename>
    <base>TAO::UB_String_Arg_Traits_T&lt; CORBA::Char, CORBA::String_var, CORBA::String_out &gt;</base>
  </compound>
  <compound kind="class">
    <name>TAO::Arg_Traits&lt; CORBA::WChar * &gt;</name>
    <filename>classTAO_1_1Arg__Traits_3_01CORBA_1_1WChar_01_5_01_4.html</filename>
    <base>TAO::UB_String_Arg_Traits_T&lt; CORBA::WChar, CORBA::WString_var, CORBA::WString_out &gt;</base>
  </compound>
  <compound kind="class">
    <name>TAO::In_Var_Array_Argument_T</name>
    <filename>classTAO_1_1In__Var__Array__Argument__T.html</filename>
    <templarg>S</templarg>
    <templarg>S_slice</templarg>
    <templarg>S_forany</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>In_Var_Array_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(const S_slice *x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a2</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S_slice const *</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S_forany</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Inout_Var_Array_Argument_T</name>
    <filename>classTAO_1_1Inout__Var__Array__Argument__T.html</filename>
    <templarg>S</templarg>
    <templarg>S_slice</templarg>
    <templarg>S_forany</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Inout_Var_Array_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(S_slice *&amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a3</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S_slice *</type>
      <name>arg</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S_forany</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Out_Var_Array_Argument_T</name>
    <filename>classTAO_1_1Out__Var__Array__Argument__T.html</filename>
    <templarg>S</templarg>
    <templarg>S_slice</templarg>
    <templarg>S_var</templarg>
    <templarg>S_out</templarg>
    <templarg>S_forany</templarg>
    <templarg>S_tag</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Out_Var_Array_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(S_out x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a2</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S_slice *&amp;</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S_slice *&amp;</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Ret_Var_Array_Argument_T</name>
    <filename>classTAO_1_1Ret__Var__Array__Argument__T.html</filename>
    <templarg>S</templarg>
    <templarg>S_slice</templarg>
    <templarg>S_var</templarg>
    <templarg>S_forany</templarg>
    <templarg>S_tag</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Ret_Var_Array_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_result</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Any *)</arglist>
    </member>
    <member kind="function">
      <type>S_slice *&amp;</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>S_slice *</type>
      <name>excp</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>S_slice *</type>
      <name>retn</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S_var</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Var_Array_Tag</name>
    <filename>structTAO_1_1Var__Array__Tag.html</filename>
  </compound>
  <compound kind="struct">
    <name>TAO::Var_Array_Arg_Traits_T</name>
    <filename>structTAO_1_1Var__Array__Arg__Traits__T.html</filename>
    <templarg>T</templarg>
    <templarg>T_slice</templarg>
    <templarg>T_var</templarg>
    <templarg>T_out</templarg>
    <templarg>T_forany</templarg>
    <templarg>T_tag</templarg>
    <member kind="typedef">
      <type>T_slice *</type>
      <name>ret_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T</type>
      <name>in_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>inout_type</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_out</type>
      <name>out_type</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>In_Var_Array_Argument_T&lt; T, T_slice, T_forany &gt;</type>
      <name>in_arg_val</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Inout_Var_Array_Argument_T&lt; T, T_slice, T_forany &gt;</type>
      <name>inout_arg_val</name>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Out_Var_Array_Argument_T&lt; T, T_slice, T_var, T_out, T_forany, T_tag &gt;</type>
      <name>out_arg_val</name>
      <anchor>w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Ret_Var_Array_Argument_T&lt; T, T_slice, T_var, T_forany, T_tag &gt;</type>
      <name>ret_val</name>
      <anchor>w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Var_Array_Tag</type>
      <name>idl_tag</name>
      <anchor>w8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::In_Var_Size_Argument_T</name>
    <filename>classTAO_1_1In__Var__Size__Argument__T.html</filename>
    <templarg>S</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>In_Var_Size_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(S const &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a2</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S const &amp;</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const S *</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Inout_Var_Size_Argument_T</name>
    <filename>classTAO_1_1Inout__Var__Size__Argument__T.html</filename>
    <templarg>S</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Inout_Var_Size_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(S &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>marshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_OutputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a2</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a3</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S &amp;</type>
      <name>arg</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S *</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Out_Var_Size_Argument_T</name>
    <filename>classTAO_1_1Out__Var__Size__Argument__T.html</filename>
    <templarg>S</templarg>
    <templarg>S_out</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Out_Var_Size_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(S_out x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_param</name>
      <anchor>a2</anchor>
      <arglist>(Dynamic::Parameter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>S *&amp;</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S *&amp;</type>
      <name>x_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Ret_Var_Size_Argument_T</name>
    <filename>classTAO_1_1Ret__Var__Size__Argument__T.html</filename>
    <templarg>S</templarg>
    <templarg>S_var</templarg>
    <base>TAO::Argument</base>
    <member kind="function">
      <type></type>
      <name>Ret_Var_Size_Argument_T</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>demarshal</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interceptor_result</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::Any *)</arglist>
    </member>
    <member kind="function">
      <type>S *&amp;</type>
      <name>arg</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>S *</type>
      <name>excp</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>S *</type>
      <name>retn</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>S_var</type>
      <name>x_</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::Var_Size_Tag</name>
    <filename>structTAO_1_1Var__Size__Tag.html</filename>
  </compound>
  <compound kind="struct">
    <name>TAO::Var_Size_Arg_Traits_T</name>
    <filename>structTAO_1_1Var__Size__Arg__Traits__T.html</filename>
    <templarg>T</templarg>
    <templarg>T_var</templarg>
    <templarg>T_out</templarg>
    <member kind="typedef">
      <type>T *</type>
      <name>ret_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T const &amp;</type>
      <name>in_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>inout_type</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_out</type>
      <name>out_type</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>In_Var_Size_Argument_T&lt; T &gt;</type>
      <name>in_arg_val</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Inout_Var_Size_Argument_T&lt; T &gt;</type>
      <name>inout_arg_val</name>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Out_Var_Size_Argument_T&lt; T, T_out &gt;</type>
      <name>out_arg_val</name>
      <anchor>w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Ret_Var_Size_Argument_T&lt; T, T_var &gt;</type>
      <name>ret_val</name>
      <anchor>w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Var_Size_Tag</type>
      <name>idl_tag</name>
      <anchor>w8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Nested_Upcall_Guard</name>
    <filename>classTAO_1_1Nested__Upcall__Guard.html</filename>
    <member kind="function">
      <type></type>
      <name>Nested_Upcall_Guard</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Transport *t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Nested_Upcall_Guard</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Nested_Upcall_Guard</name>
      <anchor>d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Nested_Upcall_Guard</name>
      <anchor>d1</anchor>
      <arglist>(const Nested_Upcall_Guard &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_Transport *</type>
      <name>t_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Wait_On_LF_No_Upcall</name>
    <filename>classTAO_1_1Wait__On__LF__No__Upcall.html</filename>
    <base>TAO_Wait_On_Leader_Follower</base>
    <member kind="typedef">
      <type>TAO_Wait_On_Leader_Follower</type>
      <name>base</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Wait_On_LF_No_Upcall</name>
      <anchor>a0</anchor>
      <arglist>(TAO_Transport *t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Wait_On_LF_No_Upcall</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>wait</name>
      <anchor>a2</anchor>
      <arglist>(ACE_Time_Value *max_wait_time, TAO_Synch_Reply_Dispatcher &amp;rd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>can_process_upcalls</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::XtResource_Factory</name>
    <filename>classTAO_1_1XtResource__Factory.html</filename>
    <base>TAO::GUIResource_Factory</base>
    <member kind="function">
      <type></type>
      <name>XtResource_Factory</name>
      <anchor>a0</anchor>
      <arglist>(XtAppContext context)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ACE_Reactor_Impl *</type>
      <name>reactor_impl</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ACE_XtReactor *</type>
      <name>reactor_impl_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>XtAppContext</type>
      <name>context_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TAO_SYNCH_MUTEX</type>
      <name>lock_</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::XtResource_Loader</name>
    <filename>classTAO_1_1XtResource__Loader.html</filename>
    <member kind="function">
      <type></type>
      <name>XtResource_Loader</name>
      <anchor>a0</anchor>
      <arglist>(XtAppContext context)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~XtResource_Loader</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::Any_Exception</name>
    <filename>classTAO_1_1Any__Exception.html</filename>
  </compound>
  <compound kind="struct">
    <name>TAO::RefCount_Policy_Traits</name>
    <filename>structTAO_1_1RefCount__Policy__Traits.html</filename>
  </compound>
  <compound kind="struct">
    <name>TAO::Special_Basic_Traits_T</name>
    <filename>structTAO_1_1Special__Basic__Traits__T.html</filename>
  </compound>
  <compound kind="class">
    <name>TAO::TAO_Wait_On_LF_No_Upcall</name>
    <filename>classTAO_1_1TAO__Wait__On__LF__No__Upcall.html</filename>
  </compound>
  <compound kind="namespace">
    <name>TAO::ORB</name>
    <filename>namespaceTAO_1_1ORB.html</filename>
    <member kind="function">
      <type>void</type>
      <name>init_orb_globals</name>
      <anchor>a0</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open_services</name>
      <anchor>a1</anchor>
      <arglist>(int &amp;argc, ACE_TCHAR **argv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close_services</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>default_svc_conf_entries</name>
      <anchor>a3</anchor>
      <arglist>(char const *rf_args, char const *ssf_args, char const *csf_args)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>TAO::TypeCode</name>
    <filename>namespaceTAO_1_1TypeCode.html</filename>
    <class kind="struct">TAO::TypeCode::Alias_Traits&lt; CORBA::tk_alias &gt;</class>
    <class kind="struct">TAO::TypeCode::Alias_Traits&lt; CORBA::tk_value_box &gt;</class>
    <class kind="class">TAO::TypeCode::Alias</class>
    <class kind="class">TAO::TypeCode::Empty_Param</class>
    <class kind="class">TAO::TypeCode::Enum</class>
    <class kind="class">TAO::TypeCode::Fixed</class>
    <class kind="struct">TAO::TypeCode::Objref_Traits&lt; CORBA::tk_abstract_interface &gt;</class>
    <class kind="struct">TAO::TypeCode::Objref_Traits&lt; CORBA::tk_component &gt;</class>
    <class kind="struct">TAO::TypeCode::Objref_Traits&lt; CORBA::tk_home &gt;</class>
    <class kind="struct">TAO::TypeCode::Objref_Traits&lt; CORBA::tk_local_interface &gt;</class>
    <class kind="struct">TAO::TypeCode::Objref_Traits&lt; CORBA::tk_native &gt;</class>
    <class kind="struct">TAO::TypeCode::Objref_Traits&lt; CORBA::tk_objref &gt;</class>
    <class kind="class">TAO::TypeCode::Objref</class>
    <class kind="class">TAO::TypeCode::Objref_Base</class>
    <class kind="class">TAO::TypeCode::Sequence</class>
    <class kind="class">TAO::TypeCode::String</class>
    <class kind="class">TAO::TypeCode::Struct</class>
    <class kind="class">TAO::TypeCode::Base_Attributes</class>
    <class kind="class">TAO::TypeCode::Case</class>
    <class kind="class">TAO::TypeCode::Default_Case</class>
    <class kind="struct">TAO::TypeCode::Case_Traits</class>
    <class kind="struct">TAO::TypeCode::Case_Traits&lt; CORBA::Boolean &gt;</class>
    <class kind="struct">TAO::TypeCode::Case_Traits&lt; CORBA::Char &gt;</class>
    <class kind="struct">TAO::TypeCode::Case_Traits&lt; CORBA::WChar &gt;</class>
    <class kind="class">TAO::TypeCode::Non_Default_Case</class>
    <class kind="struct">TAO::TypeCode::Struct_Field</class>
    <class kind="struct">TAO::TypeCode::Traits&lt; STATIC_TYPECODE &gt;</class>
    <class kind="struct">TAO::TypeCode::Traits&lt; DYNAMIC_TYPECODE &gt;</class>
    <class kind="struct">TAO::TypeCode::Traits&lt; Traits&lt; STATIC_TYPECODE &gt;::typecode_type &gt;</class>
    <class kind="struct">TAO::TypeCode::Traits&lt; Traits&lt; DYNAMIC_TYPECODE &gt;::typecode_type &gt;</class>
    <class kind="struct">TAO::TypeCode::Value_Field</class>
    <class kind="class">TAO::TypeCode::Union</class>
    <class kind="class">TAO::TypeCode::Value</class>
    <member kind="typedef">
      <type>Struct&lt; char const *, CORBA::TypeCode_ptr const *, Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>tc_SystemException</name>
      <anchor>a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char const *</type>
      <name>STATIC_TYPECODE</name>
      <anchor>a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::String_var</type>
      <name>DYNAMIC_TYPECODE</name>
      <anchor>a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>TAO_OutputCDR::from_octet const</type>
      <name>zero_octet</name>
      <anchor>a107</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_AnySeq_0</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_any, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_AnySeq_0</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_BooleanSeq_0</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_boolean, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_BooleanSeq_0</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_CharSeq_0</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_char, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_CharSeq_0</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CONV_FRAME_CodeSetIdSeq_0</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CONV_FRAME::_tc_CodeSetId, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CONV_FRAME_CodeSetIdSeq_0</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_DomainManagerList_0</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_DomainManager, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_DomainManagerList_0</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_DoubleSeq_0</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_double, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_DoubleSeq_0</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>Dynamic_ParameterList_0</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::tk_sequence,&amp;Dynamic::_tc_Parameter, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_Dynamic_ParameterList_0</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>Dynamic_ExceptionList_0</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_TypeCode, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_Dynamic_ExceptionList_0</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_FloatSeq_0</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_float, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_FloatSeq_0</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>TAO_IIOPEndpointSequence_0</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::tk_sequence,&amp;TAO::_tc_IIOP_Endpoint_Info, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_TAO_IIOPEndpointSequence_0</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>IIOP_ListenPointList_0</name>
      <anchor>a20</anchor>
      <arglist>(CORBA::tk_sequence,&amp;IIOP::_tc_ListenPoint, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_IIOP_ListenPointList_0</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>IOP_TaggedProfileSeq_0</name>
      <anchor>a22</anchor>
      <arglist>(CORBA::tk_sequence,&amp;IOP::_tc_TaggedProfile, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_IOP_TaggedProfileSeq_0</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>IOP_MultipleComponentProfile_0</name>
      <anchor>a24</anchor>
      <arglist>(CORBA::tk_sequence,&amp;IOP::_tc_TaggedComponent, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_IOP_MultipleComponentProfile_0</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>IOP_TaggedComponentList_0</name>
      <anchor>a26</anchor>
      <arglist>(CORBA::tk_sequence,&amp;IOP::_tc_TaggedComponent, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_IOP_TaggedComponentList_0</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>IOP_TaggedComponentSeq_0</name>
      <anchor>a28</anchor>
      <arglist>(CORBA::tk_sequence,&amp;IOP::_tc_TaggedComponent, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_IOP_TaggedComponentSeq_0</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>IOP_ServiceContextList_0</name>
      <anchor>a30</anchor>
      <arglist>(CORBA::tk_sequence,&amp;IOP::_tc_ServiceContext, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_IOP_ServiceContextList_0</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_LongDoubleSeq_0</name>
      <anchor>a32</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_longdouble, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_LongDoubleSeq_0</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_LongLongSeq_0</name>
      <anchor>a34</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_longlong, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_LongLongSeq_0</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_LongSeq_0</name>
      <anchor>a36</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_long, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_LongSeq_0</name>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>Messaging_PolicyValueSeq_0</name>
      <anchor>a38</anchor>
      <arglist>(CORBA::tk_sequence,&amp;Messaging::_tc_PolicyValue, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_Messaging_PolicyValueSeq_0</name>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_ORB_ObjectIdList_0</name>
      <anchor>a40</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_ORB_ObjectId, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_ORB_ObjectIdList_0</name>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_OctetSeq_0</name>
      <anchor>a42</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_octet, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_OctetSeq_0</name>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_PolicyList_0</name>
      <anchor>a44</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_Policy, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_PolicyList_0</name>
      <anchor>a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_PolicyTypeSeq_0</name>
      <anchor>a46</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_PolicyType, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_PolicyTypeSeq_0</name>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_ServiceOptionSeq_0</name>
      <anchor>a48</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_ServiceOption, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_ServiceOptionSeq_0</name>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_ServiceDetailSeq_0</name>
      <anchor>a50</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_ServiceDetail, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_ServiceDetailSeq_0</name>
      <anchor>a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_ShortSeq_0</name>
      <anchor>a52</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_short, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_ShortSeq_0</name>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_StringSeq_0</name>
      <anchor>a54</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_string, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_StringSeq_0</name>
      <anchor>a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char const *const</type>
      <name>enumerators_CORBA_CompletionStatus</name>
      <anchor>a56</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>Enum&lt; char const *, char const *const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>tc_CompletionStatus</name>
      <anchor>a57</anchor>
      <arglist>(&quot;IDL:omg.org/CORBA/CompletionStatus:1.0&quot;,&quot;CompletionStatus&quot;, enumerators_CORBA_CompletionStatus, 3)</arglist>
    </member>
    <member kind="variable">
      <type>Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const</type>
      <name>fields_CORBA_SystemException</name>
      <anchor>a58</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_null</name>
      <anchor>a60</anchor>
      <arglist>(CORBA::tk_null)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_void</name>
      <anchor>a61</anchor>
      <arglist>(CORBA::tk_void)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_boolean</name>
      <anchor>a62</anchor>
      <arglist>(CORBA::tk_boolean)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_char</name>
      <anchor>a63</anchor>
      <arglist>(CORBA::tk_char)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_wchar</name>
      <anchor>a64</anchor>
      <arglist>(CORBA::tk_wchar)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_short</name>
      <anchor>a65</anchor>
      <arglist>(CORBA::tk_short)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_ushort</name>
      <anchor>a66</anchor>
      <arglist>(CORBA::tk_ushort)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_long</name>
      <anchor>a67</anchor>
      <arglist>(CORBA::tk_long)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_ulong</name>
      <anchor>a68</anchor>
      <arglist>(CORBA::tk_ulong)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_longlong</name>
      <anchor>a69</anchor>
      <arglist>(CORBA::tk_longlong)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_ulonglong</name>
      <anchor>a70</anchor>
      <arglist>(CORBA::tk_ulonglong)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_float</name>
      <anchor>a71</anchor>
      <arglist>(CORBA::tk_float)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_double</name>
      <anchor>a72</anchor>
      <arglist>(CORBA::tk_double)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_longdouble</name>
      <anchor>a73</anchor>
      <arglist>(CORBA::tk_longdouble)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_octet</name>
      <anchor>a74</anchor>
      <arglist>(CORBA::tk_octet)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_any</name>
      <anchor>a75</anchor>
      <arglist>(CORBA::tk_any)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_TypeCode</name>
      <anchor>a76</anchor>
      <arglist>(CORBA::tk_TypeCode)</arglist>
    </member>
    <member kind="variable">
      <type>Empty_Param</type>
      <name>tc_Principal</name>
      <anchor>a77</anchor>
      <arglist>(CORBA::tk_Principal)</arglist>
    </member>
    <member kind="variable">
      <type>String&lt; TAO::Null_RefCount_Policy &gt;</type>
      <name>tc_string</name>
      <anchor>a78</anchor>
      <arglist>(CORBA::tk_string, 0)</arglist>
    </member>
    <member kind="variable">
      <type>String&lt; TAO::Null_RefCount_Policy &gt;</type>
      <name>tc_wstring</name>
      <anchor>a79</anchor>
      <arglist>(CORBA::tk_wstring, 0)</arglist>
    </member>
    <member kind="variable">
      <type>char const</type>
      <name>tc_object_id</name>
      <anchor>a80</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>char const</type>
      <name>tc_object_name</name>
      <anchor>a81</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>Objref&lt; char const *, CORBA::tk_objref, TAO::Null_RefCount_Policy &gt;</type>
      <name>tc_Object</name>
      <anchor>a82</anchor>
      <arglist>(tc_object_id, tc_object_name)</arglist>
    </member>
    <member kind="variable">
      <type>char const</type>
      <name>tc_component_id</name>
      <anchor>a83</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>char const</type>
      <name>tc_component_name</name>
      <anchor>a84</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>Objref&lt; char const *, CORBA::tk_component, TAO::Null_RefCount_Policy &gt;</type>
      <name>tc_Component</name>
      <anchor>a85</anchor>
      <arglist>(tc_component_id, tc_component_name)</arglist>
    </member>
    <member kind="variable">
      <type>char const</type>
      <name>tc_home_id</name>
      <anchor>a86</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>char const</type>
      <name>tc_home_name</name>
      <anchor>a87</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>Objref&lt; char const *, CORBA::tk_home, TAO::Null_RefCount_Policy &gt;</type>
      <name>tc_Home</name>
      <anchor>a88</anchor>
      <arglist>(tc_home_id, tc_home_name)</arglist>
    </member>
    <member kind="variable">
      <type>char const</type>
      <name>tc_bounds_id</name>
      <anchor>a91</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>char const</type>
      <name>tc_bounds_name</name>
      <anchor>a92</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>Struct&lt; char const *, CORBA::TypeCode_ptr const *, Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>tc_Bounds</name>
      <anchor>a93</anchor>
      <arglist>(CORBA::tk_except, tc_bounds_id, tc_bounds_name, 0, 0)</arglist>
    </member>
    <member kind="variable">
      <type>char const</type>
      <name>tc_bad_kind_id</name>
      <anchor>a94</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>char const</type>
      <name>tc_bad_kind_name</name>
      <anchor>a95</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>Struct&lt; char const *, CORBA::TypeCode_ptr const *, Struct_Field&lt; char const *, CORBA::TypeCode_ptr const * &gt; const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>tc_BadKind</name>
      <anchor>a96</anchor>
      <arglist>(CORBA::tk_except, tc_bad_kind_id, tc_bad_kind_name, 0, 0)</arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_ULongLongSeq_0</name>
      <anchor>a97</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_ulonglong, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_ULongLongSeq_0</name>
      <anchor>a98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_ULongSeq_0</name>
      <anchor>a99</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_ulong, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_ULongSeq_0</name>
      <anchor>a100</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_UShortSeq_0</name>
      <anchor>a101</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_ushort, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_UShortSeq_0</name>
      <anchor>a102</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_WCharSeq_0</name>
      <anchor>a103</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_wchar, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_WCharSeq_0</name>
      <anchor>a104</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TAO::TypeCode::Sequence&lt; ::CORBA::TypeCode_ptr const *, TAO::Null_RefCount_Policy &gt;</type>
      <name>CORBA_WStringSeq_0</name>
      <anchor>a105</anchor>
      <arglist>(CORBA::tk_sequence,&amp;CORBA::_tc_wstring, 0U)</arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>tc_CORBA_WStringSeq_0</name>
      <anchor>a106</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::TypeCode::Alias_Traits&lt; CORBA::tk_alias &gt;</name>
    <filename>structTAO_1_1TypeCode_1_1Alias__Traits_3_01CORBA_1_1tk__alias_01_4.html</filename>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_compact_typecode</name>
      <anchor>e0</anchor>
      <arglist>(TAO_TypeCodeFactory_Adapter *factory, char const *id, CORBA::TypeCode_ptr compact_content_type ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::TypeCode::Alias_Traits&lt; CORBA::tk_value_box &gt;</name>
    <filename>structTAO_1_1TypeCode_1_1Alias__Traits_3_01CORBA_1_1tk__value__box_01_4.html</filename>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_compact_typecode</name>
      <anchor>e0</anchor>
      <arglist>(TAO_TypeCodeFactory_Adapter *factory, char const *id, CORBA::TypeCode_ptr compact_content_type ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::TypeCode::Alias</name>
    <filename>classTAO_1_1TypeCode_1_1Alias.html</filename>
    <templarg>StringType</templarg>
    <templarg>TypeCodeType</templarg>
    <templarg>Kind</templarg>
    <templarg>RefCountPolicy</templarg>
    <base>CORBA::TypeCode</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>equal_i</name>
      <anchor>z17_0</anchor>
      <arglist>(CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>equivalent_i</name>
      <anchor>z17_1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>get_compact_typecode_i</name>
      <anchor>z17_2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char const *</type>
      <name>id_i</name>
      <anchor>z17_3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char const *</type>
      <name>name_i</name>
      <anchor>z17_4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>content_type_i</name>
      <anchor>z17_5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Base_Attributes&lt; StringType &gt;</type>
      <name>attributes_</name>
      <anchor>z17_6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TypeCodeType const</type>
      <name>content_type_</name>
      <anchor>z17_7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Alias</name>
      <anchor>a0</anchor>
      <arglist>(char const *id, char const *name, TypeCodeType const &amp;tc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tao_marshal</name>
      <anchor>z15_0</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tao_duplicate</name>
      <anchor>z15_1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tao_release</name>
      <anchor>z15_2</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::TypeCode::Empty_Param</name>
    <filename>classTAO_1_1TypeCode_1_1Empty__Param.html</filename>
    <base>CORBA::TypeCode</base>
    <member kind="function">
      <type></type>
      <name>Empty_Param</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::TCKind k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tao_marshal</name>
      <anchor>z47_0</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tao_duplicate</name>
      <anchor>z47_1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tao_release</name>
      <anchor>z47_2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>equal_i</name>
      <anchor>z49_0</anchor>
      <arglist>(CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>equivalent_i</name>
      <anchor>z49_1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>get_compact_typecode_i</name>
      <anchor>z49_2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::TypeCode::Enum</name>
    <filename>classTAO_1_1TypeCode_1_1Enum.html</filename>
    <templarg>StringType</templarg>
    <templarg>EnumeratorArrayType</templarg>
    <templarg>RefCountPolicy</templarg>
    <base>CORBA::TypeCode</base>
    <member kind="function">
      <type></type>
      <name>Enum</name>
      <anchor>a0</anchor>
      <arglist>(char const *id, char const *name, EnumeratorArrayType const &amp;enumerators, CORBA::ULong nenumerators)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tao_marshal</name>
      <anchor>z53_0</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tao_duplicate</name>
      <anchor>z53_1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tao_release</name>
      <anchor>z53_2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>equal_i</name>
      <anchor>z55_0</anchor>
      <arglist>(CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>equivalent_i</name>
      <anchor>z55_1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>get_compact_typecode_i</name>
      <anchor>z55_2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char const *</type>
      <name>id_i</name>
      <anchor>z55_3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char const *</type>
      <name>name_i</name>
      <anchor>z55_4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>member_count_i</name>
      <anchor>z55_5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char const *</type>
      <name>member_name_i</name>
      <anchor>z55_6</anchor>
      <arglist>(CORBA::ULong index ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Base_Attributes&lt; StringType &gt;</type>
      <name>base_attributes_</name>
      <anchor>z56_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong const</type>
      <name>nenumerators_</name>
      <anchor>z56_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EnumeratorArrayType const</type>
      <name>enumerators_</name>
      <anchor>z56_2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::TypeCode::Fixed</name>
    <filename>classTAO_1_1TypeCode_1_1Fixed.html</filename>
    <templarg>RefCountPolicy</templarg>
    <base>CORBA::TypeCode</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>equal_i</name>
      <anchor>z62_0</anchor>
      <arglist>(CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>equivalent_i</name>
      <anchor>z62_1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>get_compact_typecode_i</name>
      <anchor>z62_2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::UShort</type>
      <name>fixed_digits_i</name>
      <anchor>z62_3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::UShort</type>
      <name>fixed_scale_i</name>
      <anchor>z62_4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::UShort const</type>
      <name>digits_</name>
      <anchor>z62_5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::UShort const</type>
      <name>scale_</name>
      <anchor>z62_6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fixed</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::UShort digits, CORBA::UShort scale)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tao_marshal</name>
      <anchor>z60_0</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tao_duplicate</name>
      <anchor>z60_1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tao_release</name>
      <anchor>z60_2</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::TypeCode::Objref_Traits&lt; CORBA::tk_abstract_interface &gt;</name>
    <filename>structTAO_1_1TypeCode_1_1Objref__Traits_3_01CORBA_1_1tk__abstract__interface_01_4.html</filename>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_compact_typecode</name>
      <anchor>e0</anchor>
      <arglist>(TAO_TypeCodeFactory_Adapter *factory, char const *id ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::TypeCode::Objref_Traits&lt; CORBA::tk_component &gt;</name>
    <filename>structTAO_1_1TypeCode_1_1Objref__Traits_3_01CORBA_1_1tk__component_01_4.html</filename>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_compact_typecode</name>
      <anchor>e0</anchor>
      <arglist>(TAO_TypeCodeFactory_Adapter *factory, char const *id ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::TypeCode::Objref_Traits&lt; CORBA::tk_home &gt;</name>
    <filename>structTAO_1_1TypeCode_1_1Objref__Traits_3_01CORBA_1_1tk__home_01_4.html</filename>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_compact_typecode</name>
      <anchor>e0</anchor>
      <arglist>(TAO_TypeCodeFactory_Adapter *factory, char const *id ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::TypeCode::Objref_Traits&lt; CORBA::tk_local_interface &gt;</name>
    <filename>structTAO_1_1TypeCode_1_1Objref__Traits_3_01CORBA_1_1tk__local__interface_01_4.html</filename>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_compact_typecode</name>
      <anchor>e0</anchor>
      <arglist>(TAO_TypeCodeFactory_Adapter *factory, char const *id ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::TypeCode::Objref_Traits&lt; CORBA::tk_native &gt;</name>
    <filename>structTAO_1_1TypeCode_1_1Objref__Traits_3_01CORBA_1_1tk__native_01_4.html</filename>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_compact_typecode</name>
      <anchor>e0</anchor>
      <arglist>(TAO_TypeCodeFactory_Adapter *factory, char const *id ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::TypeCode::Objref_Traits&lt; CORBA::tk_objref &gt;</name>
    <filename>structTAO_1_1TypeCode_1_1Objref__Traits_3_01CORBA_1_1tk__objref_01_4.html</filename>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_compact_typecode</name>
      <anchor>e0</anchor>
      <arglist>(TAO_TypeCodeFactory_Adapter *factory, char const *id ACE_ENV_ARG_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::TypeCode::Objref</name>
    <filename>classTAO_1_1TypeCode_1_1Objref.html</filename>
    <templarg>StringType</templarg>
    <templarg>Kind</templarg>
    <templarg>RefCountPolicy</templarg>
    <base>TAO::TypeCode::Objref_Base</base>
    <member kind="function">
      <type></type>
      <name>Objref</name>
      <anchor>a0</anchor>
      <arglist>(char const *id, char const *name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>get_compact_typecode_i</name>
      <anchor>b0</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::TypeCode::Objref_Base</name>
    <filename>classTAO_1_1TypeCode_1_1Objref__Base.html</filename>
    <templarg>StringType</templarg>
    <templarg>RefCountPolicy</templarg>
    <base>CORBA::TypeCode</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>equal_i</name>
      <anchor>z105_0</anchor>
      <arglist>(CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>equivalent_i</name>
      <anchor>z105_1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>get_compact_typecode_i</name>
      <anchor>z105_2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char const *</type>
      <name>id_i</name>
      <anchor>z105_3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char const *</type>
      <name>name_i</name>
      <anchor>z105_4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Base_Attributes&lt; StringType &gt;</type>
      <name>attributes_</name>
      <anchor>z105_5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Objref_Base</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::TCKind kind, char const *id, char const *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tao_marshal</name>
      <anchor>z103_0</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tao_duplicate</name>
      <anchor>z103_1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tao_release</name>
      <anchor>z103_2</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::TypeCode::Sequence</name>
    <filename>classTAO_1_1TypeCode_1_1Sequence.html</filename>
    <templarg>TypeCodeType</templarg>
    <templarg>RefCountPolicy</templarg>
    <base>CORBA::TypeCode</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>equal_i</name>
      <anchor>z163_0</anchor>
      <arglist>(CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>equivalent_i</name>
      <anchor>z163_1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>get_compact_typecode_i</name>
      <anchor>z163_2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>length_i</name>
      <anchor>z163_3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>content_type_i</name>
      <anchor>z163_4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TypeCodeType const</type>
      <name>content_type_</name>
      <anchor>z163_5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong const</type>
      <name>length_</name>
      <anchor>z163_6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sequence</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::TCKind kind, TypeCodeType const &amp;content_type, CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tao_marshal</name>
      <anchor>z161_0</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tao_duplicate</name>
      <anchor>z161_1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tao_release</name>
      <anchor>z161_2</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::TypeCode::String</name>
    <filename>classTAO_1_1TypeCode_1_1String.html</filename>
    <templarg>RefCountPolicy</templarg>
    <base>CORBA::TypeCode</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>equal_i</name>
      <anchor>z167_0</anchor>
      <arglist>(CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>equivalent_i</name>
      <anchor>z167_1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>get_compact_typecode_i</name>
      <anchor>z167_2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>length_i</name>
      <anchor>z167_3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong const</type>
      <name>length_</name>
      <anchor>z167_4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::TCKind kind, CORBA::ULong length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tao_marshal</name>
      <anchor>z165_0</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tao_duplicate</name>
      <anchor>z165_1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tao_release</name>
      <anchor>z165_2</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::TypeCode::Struct</name>
    <filename>classTAO_1_1TypeCode_1_1Struct.html</filename>
    <templarg>StringType</templarg>
    <templarg>TypeCodeType</templarg>
    <templarg>FieldArrayType</templarg>
    <templarg>RefCountPolicy</templarg>
    <base>CORBA::TypeCode</base>
    <member kind="function">
      <type></type>
      <name>Struct</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::TCKind kind, char const *id, char const *name, FieldArrayType const &amp;fields, CORBA::ULong nfields)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tao_marshal</name>
      <anchor>z169_0</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tao_duplicate</name>
      <anchor>z169_1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tao_release</name>
      <anchor>z169_2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>equal_i</name>
      <anchor>z171_0</anchor>
      <arglist>(CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>equivalent_i</name>
      <anchor>z171_1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>get_compact_typecode_i</name>
      <anchor>z171_2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char const *</type>
      <name>id_i</name>
      <anchor>z171_3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char const *</type>
      <name>name_i</name>
      <anchor>z171_4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>member_count_i</name>
      <anchor>z171_5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char const *</type>
      <name>member_name_i</name>
      <anchor>z171_6</anchor>
      <arglist>(CORBA::ULong index ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>member_type_i</name>
      <anchor>z171_7</anchor>
      <arglist>(CORBA::ULong index ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Base_Attributes&lt; StringType &gt; const</type>
      <name>base_attributes_</name>
      <anchor>z172_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong const</type>
      <name>nfields_</name>
      <anchor>z172_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FieldArrayType const</type>
      <name>fields_</name>
      <anchor>z172_2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::TypeCode::Base_Attributes</name>
    <filename>classTAO_1_1TypeCode_1_1Base__Attributes.html</filename>
    <templarg>STRING_TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>Base_Attributes</name>
      <anchor>a0</anchor>
      <arglist>(char const *id, char const *name)</arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>id</name>
      <anchor>a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>name</name>
      <anchor>a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>STRING_TYPE const</type>
      <name>id_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>STRING_TYPE const</type>
      <name>name_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::TypeCode::Case</name>
    <filename>classTAO_1_1TypeCode_1_1Case.html</filename>
    <templarg>StringType</templarg>
    <templarg>TypeCodeType</templarg>
    <member kind="function">
      <type></type>
      <name>Case</name>
      <anchor>a0</anchor>
      <arglist>(char const *name, TypeCodeType const &amp;tc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Case</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CORBA::Any *</type>
      <name>label</name>
      <anchor>a2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const =0</arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>name</name>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CORBA::TypeCode_ptr</type>
      <name>type</name>
      <anchor>a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>marshal</name>
      <anchor>a5</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::ULong index, CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equivalent</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::ULong index, CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>marshal_label</name>
      <anchor>b0</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>equal_label</name>
      <anchor>b1</anchor>
      <arglist>(CORBA::ULong index, CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL) const =0</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>StringType const</type>
      <name>name_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TypeCodeType const</type>
      <name>type_</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::TypeCode::Default_Case</name>
    <filename>classTAO_1_1TypeCode_1_1Default__Case.html</filename>
    <templarg>StringType</templarg>
    <templarg>TypeCodeType</templarg>
    <base>TAO::TypeCode::Case</base>
    <member kind="function">
      <type></type>
      <name>Default_Case</name>
      <anchor>a0</anchor>
      <arglist>(char const *member_name, TypeCodeType member_type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Any *</type>
      <name>label</name>
      <anchor>z208_0</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>marshal_label</name>
      <anchor>z208_1</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equal_label</name>
      <anchor>z208_2</anchor>
      <arglist>(CORBA::ULong index, CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::TypeCode::Case_Traits</name>
    <filename>structTAO_1_1TypeCode_1_1Case__Traits.html</filename>
    <templarg>T</templarg>
    <member kind="function" static="yes">
      <type>T</type>
      <name>any_from</name>
      <anchor>e0</anchor>
      <arglist>(T v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>T &amp;</type>
      <name>any_to</name>
      <anchor>e1</anchor>
      <arglist>(T &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::TypeCode::Case_Traits&lt; CORBA::Boolean &gt;</name>
    <filename>structTAO_1_1TypeCode_1_1Case__Traits_3_01CORBA_1_1Boolean_01_4.html</filename>
    <member kind="function" static="yes">
      <type>CORBA::Any::from_boolean</type>
      <name>any_from</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::Boolean v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Any::to_boolean</type>
      <name>any_to</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Boolean &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::TypeCode::Case_Traits&lt; CORBA::Char &gt;</name>
    <filename>structTAO_1_1TypeCode_1_1Case__Traits_3_01CORBA_1_1Char_01_4.html</filename>
    <member kind="function" static="yes">
      <type>CORBA::Any::from_char</type>
      <name>any_from</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::Char v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Any::to_char</type>
      <name>any_to</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::Char &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::TypeCode::Case_Traits&lt; CORBA::WChar &gt;</name>
    <filename>structTAO_1_1TypeCode_1_1Case__Traits_3_01CORBA_1_1WChar_01_4.html</filename>
    <member kind="function" static="yes">
      <type>CORBA::Any::from_wchar</type>
      <name>any_from</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::WChar v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::Any::to_wchar</type>
      <name>any_to</name>
      <anchor>e1</anchor>
      <arglist>(CORBA::WChar &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::TypeCode::Non_Default_Case</name>
    <filename>classTAO_1_1TypeCode_1_1Non__Default__Case.html</filename>
    <templarg>DiscriminatorType</templarg>
    <templarg>StringType</templarg>
    <templarg>TypeCodeType</templarg>
    <base>TAO::TypeCode::Case</base>
    <member kind="function">
      <type></type>
      <name>Non_Default_Case</name>
      <anchor>a0</anchor>
      <arglist>(DiscriminatorType member_label, char const *member_name, TypeCodeType member_type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CORBA::Any *</type>
      <name>label</name>
      <anchor>z210_0</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>marshal_label</name>
      <anchor>z210_1</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equal_label</name>
      <anchor>z210_2</anchor>
      <arglist>(CORBA::ULong index, CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DiscriminatorType const</type>
      <name>label_</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::TypeCode::Struct_Field</name>
    <filename>structTAO_1_1TypeCode_1_1Struct__Field.html</filename>
    <templarg>StringType</templarg>
    <templarg>TypeCodeType</templarg>
    <member kind="variable">
      <type>StringType</type>
      <name>name</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TypeCodeType</type>
      <name>type</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::TypeCode::Traits&lt; STATIC_TYPECODE &gt;</name>
    <filename>structTAO_1_1TypeCode_1_1Traits_3_01STATIC__TYPECODE_01_4.html</filename>
    <member kind="typedef">
      <type>char const *</type>
      <name>string_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::TypeCode_ptr const *</type>
      <name>typecode_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO::Null_RefCount_Policy</type>
      <name>refcount_policy_type</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>char const *</type>
      <name>get_string</name>
      <anchor>e0</anchor>
      <arglist>(string_type const &amp;str)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>get_typecode</name>
      <anchor>e1</anchor>
      <arglist>(typecode_type const &amp;tc)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::TypeCode::Traits&lt; DYNAMIC_TYPECODE &gt;</name>
    <filename>structTAO_1_1TypeCode_1_1Traits_3_01DYNAMIC__TYPECODE_01_4.html</filename>
    <member kind="typedef">
      <type>CORBA::String_var</type>
      <name>string_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::TypeCode_var</type>
      <name>typecode_type</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO::True_RefCount_Policy</type>
      <name>refcount_policy_type</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>char const *</type>
      <name>get_string</name>
      <anchor>e0</anchor>
      <arglist>(string_type const &amp;str)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>get_typecode</name>
      <anchor>e1</anchor>
      <arglist>(typecode_type const &amp;tc)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::TypeCode::Traits&lt; Traits&lt; STATIC_TYPECODE &gt;::typecode_type &gt;</name>
    <filename>structTAO_1_1TypeCode_1_1Traits_3_01Traits_3_01STATIC__TYPECODE_01_4_1_1typecode__type_01_4.html</filename>
    <member kind="typedef">
      <type>Traits&lt; STATIC_TYPECODE &gt;::typecode_type</type>
      <name>typecode_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>get_typecode</name>
      <anchor>e0</anchor>
      <arglist>(typecode_type const &amp;tc)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::TypeCode::Traits&lt; Traits&lt; DYNAMIC_TYPECODE &gt;::typecode_type &gt;</name>
    <filename>structTAO_1_1TypeCode_1_1Traits_3_01Traits_3_01DYNAMIC__TYPECODE_01_4_1_1typecode__type_01_4.html</filename>
    <member kind="typedef">
      <type>Traits&lt; DYNAMIC_TYPECODE &gt;::typecode_type</type>
      <name>typecode_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>get_typecode</name>
      <anchor>e0</anchor>
      <arglist>(typecode_type const &amp;tc)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::TypeCode::Value_Field</name>
    <filename>structTAO_1_1TypeCode_1_1Value__Field.html</filename>
    <templarg>StringType</templarg>
    <templarg>TypeCodeType</templarg>
    <member kind="variable">
      <type>StringType</type>
      <name>name</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TypeCodeType</type>
      <name>type</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::Visibility</type>
      <name>visibility</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::TypeCode::Union</name>
    <filename>classTAO_1_1TypeCode_1_1Union.html</filename>
    <templarg>StringType</templarg>
    <templarg>TypeCodeType</templarg>
    <templarg>CaseArrayType</templarg>
    <templarg>RefCountPolicy</templarg>
    <base>CORBA::TypeCode</base>
    <member kind="typedef">
      <type>TAO::TypeCode::Case&lt; StringType, TypeCodeType &gt; const</type>
      <name>case_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Union</name>
      <anchor>a0</anchor>
      <arglist>(char const *id, char const *name, TypeCodeType const &amp;discriminant_type, CaseArrayType const &amp;cases, CORBA::ULong ncases, CORBA::Long default_index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tao_marshal</name>
      <anchor>z214_0</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tao_duplicate</name>
      <anchor>z214_1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tao_release</name>
      <anchor>z214_2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CORBA::ULong</type>
      <name>case_count</name>
      <anchor>b0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>case_type &amp;</type>
      <name>the_case</name>
      <anchor>b1</anchor>
      <arglist>(CORBA::ULong index) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>equal_i</name>
      <anchor>z216_0</anchor>
      <arglist>(CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>equivalent_i</name>
      <anchor>z216_1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>get_compact_typecode_i</name>
      <anchor>z216_2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char const *</type>
      <name>id_i</name>
      <anchor>z216_3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char const *</type>
      <name>name_i</name>
      <anchor>z216_4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>member_count_i</name>
      <anchor>z216_5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char const *</type>
      <name>member_name_i</name>
      <anchor>z216_6</anchor>
      <arglist>(CORBA::ULong index ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>member_type_i</name>
      <anchor>z216_7</anchor>
      <arglist>(CORBA::ULong index ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Any *</type>
      <name>member_label_i</name>
      <anchor>z216_8</anchor>
      <arglist>(CORBA::ULong index ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>discriminator_type_i</name>
      <anchor>z216_9</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Long</type>
      <name>default_index_i</name>
      <anchor>z216_10</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Base_Attributes&lt; StringType &gt; const</type>
      <name>base_attributes_</name>
      <anchor>z217_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TypeCodeType const</type>
      <name>discriminant_type_</name>
      <anchor>z217_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::Long const</type>
      <name>default_index_</name>
      <anchor>z217_2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong const</type>
      <name>ncases_</name>
      <anchor>z217_3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CaseArrayType const</type>
      <name>cases_</name>
      <anchor>z217_4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TAO::TypeCode::Value</name>
    <filename>classTAO_1_1TypeCode_1_1Value.html</filename>
    <templarg>StringType</templarg>
    <templarg>TypeCodeType</templarg>
    <templarg>FieldArrayType</templarg>
    <templarg>RefCountPolicy</templarg>
    <base>CORBA::TypeCode</base>
    <member kind="function">
      <type></type>
      <name>Value</name>
      <anchor>a0</anchor>
      <arglist>(CORBA::TCKind kind, char const *id, char const *name, CORBA::ValueModifier modifier, TypeCodeType const &amp;concrete_base, FieldArrayType const &amp;fields, CORBA::ULong nfields)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tao_marshal</name>
      <anchor>z219_0</anchor>
      <arglist>(TAO_OutputCDR &amp;cdr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tao_duplicate</name>
      <anchor>z219_1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tao_release</name>
      <anchor>z219_2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>equal_i</name>
      <anchor>z221_0</anchor>
      <arglist>(CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Boolean</type>
      <name>equivalent_i</name>
      <anchor>z221_1</anchor>
      <arglist>(CORBA::TypeCode_ptr tc ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>get_compact_typecode_i</name>
      <anchor>z221_2</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char const *</type>
      <name>id_i</name>
      <anchor>z221_3</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char const *</type>
      <name>name_i</name>
      <anchor>z221_4</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::ULong</type>
      <name>member_count_i</name>
      <anchor>z221_5</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char const *</type>
      <name>member_name_i</name>
      <anchor>z221_6</anchor>
      <arglist>(CORBA::ULong index ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>member_type_i</name>
      <anchor>z221_7</anchor>
      <arglist>(CORBA::ULong index ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::Visibility</type>
      <name>member_visibility_i</name>
      <anchor>z221_8</anchor>
      <arglist>(CORBA::ULong index ACE_ENV_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::ValueModifier</type>
      <name>type_modifier_i</name>
      <anchor>z221_9</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CORBA::TypeCode_ptr</type>
      <name>concrete_base_type_i</name>
      <anchor>z221_10</anchor>
      <arglist>(ACE_ENV_SINGLE_ARG_DECL) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Base_Attributes&lt; StringType &gt; const</type>
      <name>base_attributes_</name>
      <anchor>z222_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ValueModifier const</type>
      <name>type_modifier_</name>
      <anchor>z222_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TypeCodeType const</type>
      <name>concrete_base_</name>
      <anchor>z222_2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CORBA::ULong const</type>
      <name>nfields_</name>
      <anchor>z222_3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FieldArrayType const</type>
      <name>fields_</name>
      <anchor>z222_4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>TAO::TypeCodeFactory</name>
    <filename>namespaceTAO_1_1TypeCodeFactory.html</filename>
    <class kind="struct">TAO::TypeCodeFactory::Objref_Traits&lt; CORBA::tk_abstract_interface &gt;</class>
    <class kind="struct">TAO::TypeCodeFactory::Objref_Traits&lt; CORBA::tk_component &gt;</class>
    <class kind="struct">TAO::TypeCodeFactory::Objref_Traits&lt; CORBA::tk_home &gt;</class>
    <class kind="struct">TAO::TypeCodeFactory::Objref_Traits&lt; CORBA::tk_local_interface &gt;</class>
    <class kind="struct">TAO::TypeCodeFactory::Objref_Traits&lt; CORBA::tk_native &gt;</class>
    <class kind="struct">TAO::TypeCodeFactory::Objref_Traits&lt; CORBA::tk_objref &gt;</class>
    <class kind="struct">TAO::TypeCodeFactory::String_Traits&lt; CORBA::Any::from_string &gt;</class>
    <class kind="struct">TAO::TypeCodeFactory::String_Traits&lt; CORBA::Any::from_wstring &gt;</class>
    <member kind="typedef">
      <type>bool(*</type>
      <name>factory</name>
      <anchor>a0</anchor>
      <arglist>)(CORBA::TCKind, TAO_InputCDR &amp;, CORBA::TypeCode_ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_objref_factory</name>
      <anchor>a1</anchor>
      <arglist>(TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_null_factory</name>
      <anchor>a2</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_void_factory</name>
      <anchor>a3</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_short_factory</name>
      <anchor>a4</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_long_factory</name>
      <anchor>a5</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_ushort_factory</name>
      <anchor>a6</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_ulong_factory</name>
      <anchor>a7</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_float_factory</name>
      <anchor>a8</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_double_factory</name>
      <anchor>a9</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_boolean_factory</name>
      <anchor>a10</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_char_factory</name>
      <anchor>a11</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_octet_factory</name>
      <anchor>a12</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_any_factory</name>
      <anchor>a13</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_TypeCode_factory</name>
      <anchor>a14</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_Principal_factory</name>
      <anchor>a15</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_objref_factory</name>
      <anchor>a16</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_struct_factory</name>
      <anchor>a17</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_union_factory</name>
      <anchor>a18</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_enum_factory</name>
      <anchor>a19</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_string_factory</name>
      <anchor>a20</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_sequence_factory</name>
      <anchor>a21</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_array_factory</name>
      <anchor>a22</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_alias_factory</name>
      <anchor>a23</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_except_factory</name>
      <anchor>a24</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_longlong_factory</name>
      <anchor>a25</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_ulonglong_factory</name>
      <anchor>a26</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_longdouble_factory</name>
      <anchor>a27</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_wchar_factory</name>
      <anchor>a28</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_wstring_factory</name>
      <anchor>a29</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_fixed_factory</name>
      <anchor>a30</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_value_factory</name>
      <anchor>a31</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_value_box_factory</name>
      <anchor>a32</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_native_factory</name>
      <anchor>a33</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_abstract_interface_factory</name>
      <anchor>a34</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_local_interface_factory</name>
      <anchor>a35</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_component_factory</name>
      <anchor>a36</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_home_factory</name>
      <anchor>a37</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tc_event_factory</name>
      <anchor>a38</anchor>
      <arglist>(CORBA::TCKind kind, TAO_InputCDR &amp;cdr, CORBA::TypeCode_ptr &amp;tc)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::TypeCodeFactory::Objref_Traits&lt; CORBA::tk_abstract_interface &gt;</name>
    <filename>structTAO_1_1TypeCodeFactory_1_1Objref__Traits_3_01CORBA_1_1tk__abstract__interface_01_4.html</filename>
    <member kind="function" static="yes">
      <type>char const *</type>
      <name>tc_constant_id</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>tc_constant</name>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_typecode</name>
      <anchor>e2</anchor>
      <arglist>(char const *id, char const *name)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::TypeCodeFactory::Objref_Traits&lt; CORBA::tk_component &gt;</name>
    <filename>structTAO_1_1TypeCodeFactory_1_1Objref__Traits_3_01CORBA_1_1tk__component_01_4.html</filename>
    <member kind="function" static="yes">
      <type>char const *</type>
      <name>tc_constant_id</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>tc_constant</name>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_typecode</name>
      <anchor>e2</anchor>
      <arglist>(char const *id, char const *name)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::TypeCodeFactory::Objref_Traits&lt; CORBA::tk_home &gt;</name>
    <filename>structTAO_1_1TypeCodeFactory_1_1Objref__Traits_3_01CORBA_1_1tk__home_01_4.html</filename>
    <member kind="function" static="yes">
      <type>char const *</type>
      <name>tc_constant_id</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>tc_constant</name>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_typecode</name>
      <anchor>e2</anchor>
      <arglist>(char const *id, char const *name)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::TypeCodeFactory::Objref_Traits&lt; CORBA::tk_local_interface &gt;</name>
    <filename>structTAO_1_1TypeCodeFactory_1_1Objref__Traits_3_01CORBA_1_1tk__local__interface_01_4.html</filename>
    <member kind="function" static="yes">
      <type>char const *</type>
      <name>tc_constant_id</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>tc_constant</name>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_typecode</name>
      <anchor>e2</anchor>
      <arglist>(char const *id, char const *name)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::TypeCodeFactory::Objref_Traits&lt; CORBA::tk_native &gt;</name>
    <filename>structTAO_1_1TypeCodeFactory_1_1Objref__Traits_3_01CORBA_1_1tk__native_01_4.html</filename>
    <member kind="function" static="yes">
      <type>char const *</type>
      <name>tc_constant_id</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>tc_constant</name>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_typecode</name>
      <anchor>e2</anchor>
      <arglist>(char const *id, char const *name)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::TypeCodeFactory::Objref_Traits&lt; CORBA::tk_objref &gt;</name>
    <filename>structTAO_1_1TypeCodeFactory_1_1Objref__Traits_3_01CORBA_1_1tk__objref_01_4.html</filename>
    <member kind="function" static="yes">
      <type>char const *</type>
      <name>tc_constant_id</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>tc_constant</name>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_typecode</name>
      <anchor>e2</anchor>
      <arglist>(char const *id, char const *name)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::TypeCodeFactory::String_Traits&lt; CORBA::Any::from_string &gt;</name>
    <filename>structTAO_1_1TypeCodeFactory_1_1String__Traits_3_01CORBA_1_1Any_1_1from__string_01_4.html</filename>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_typecode</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::TCKind kind, CORBA::ULong bound)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TAO::TypeCodeFactory::String_Traits&lt; CORBA::Any::from_wstring &gt;</name>
    <filename>structTAO_1_1TypeCodeFactory_1_1String__Traits_3_01CORBA_1_1Any_1_1from__wstring_01_4.html</filename>
    <member kind="function" static="yes">
      <type>CORBA::TypeCode_ptr</type>
      <name>create_typecode</name>
      <anchor>e0</anchor>
      <arglist>(CORBA::TCKind kind, CORBA::ULong bound)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>TAO::Utils</name>
    <filename>namespaceTAO_1_1Utils.html</filename>
  </compound>
  <compound kind="namespace">
    <name>TimeBase</name>
    <filename>namespaceTimeBase.html</filename>
    <class kind="struct">TimeBase::UtcT</class>
    <class kind="struct">TimeBase::IntervalT</class>
    <member kind="typedef">
      <type>CORBA::ULongLong</type>
      <name>TimeT</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeT</type>
      <name>InaccuracyT</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>TdfT</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::ULongLong_out</type>
      <name>TimeT_out</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimeT_out</type>
      <name>InaccuracyT_out</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CORBA::Short_out</type>
      <name>TdfT_out</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Fixed_Var_T&lt; UtcT &gt;</type>
      <name>UtcT_var</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UtcT &amp;</type>
      <name>UtcT_out</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAO_Fixed_Var_T&lt; IntervalT &gt;</type>
      <name>IntervalT_var</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntervalT &amp;</type>
      <name>IntervalT_out</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_TimeT</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_InaccuracyT</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_TdfT</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_UtcT</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CORBA::TypeCode_ptr const</type>
      <name>_tc_IntervalT</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TimeBase::UtcT</name>
    <filename>structTimeBase_1_1UtcT.html</filename>
    <member kind="typedef">
      <type>UtcT_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>TimeT</type>
      <name>time</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>inacclo</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>inacchi</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TdfT</type>
      <name>tdf</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TimeBase::TimeT</type>
      <name>time</name>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::ULong</type>
      <name>inacclo</name>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CORBA::UShort</type>
      <name>inacchi</name>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TimeBase::TdfT</type>
      <name>tdf</name>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TimeBase::IntervalT</name>
    <filename>structTimeBase_1_1IntervalT.html</filename>
    <member kind="typedef">
      <type>IntervalT_var</type>
      <name>_var_type</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>_tao_any_destructor</name>
      <anchor>e0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable">
      <type>TimeT</type>
      <name>lower_bound</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TimeT</type>
      <name>upper_bound</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TimeBase::TimeT</type>
      <name>lower_bound</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TimeBase::TimeT</type>
      <name>upper_bound</name>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
</tagfile>
