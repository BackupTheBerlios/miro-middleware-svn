// -*- idl -*- ///////////////////////////////////////////////////////////////
//
// This file is part of Miro (The Middleware for Robots)
// Copyright (C) 1999-2005
// Department of Neuroinformatics, University of Ulm, Germany
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation; either version 2, or (at your option)
// any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//
// $Id$
//
#ifndef PanTilt_idl
#define PanTilt_idl

#include "Tilt.idl"
#include "Pan.idl"

module Miro
{
  //! Struct representing a pantilt position.
  struct PanTiltPositionIDL
  {
    //! Pan anlge in rad.
    float     panValue;
    //! Tilt anlge in rad.
    float     tiltValue;
  };


  //! Struct representing a pantilt limits  configuration.
  struct PanTiltLimitsIDL
  {
    //! Panning limits.
    PanLimitsIDL pan;
    //! Tilting limit
    TiltLimitsIDL tilt;
  };


  //! Interface to a pantilt unit.
  /** 
   * @author Hans Utz
   */
  interface PanTilt : Pan, Tilt
  {
    //! Get the current panTilt position. 
    /**
     * @return The current panning and tilting angles.
     * @throw EDevIO
     * is thrown to indicate low level device problems.
     */
    PanTiltPositionIDL getPosition() raises(EDevIO);

    //! Get the target panTilt position. 
    /**
     * @return The target panning and tilting angles.
     */
    PanTiltPositionIDL getTargetPosition();

    //! Set the desired pantilt position.
    /**
     * @param destination The desired panning and tilting angles.
     * @throw EOutOfBounds
     * if the thrown when the panning or tilting angle is beyond 
     * the range of the pantilt unit.
     * @throw EDevIO
     * is thrown to indicate low level device problems.
     */
    void setPosition(in PanTiltPositionIDL destination) raises(EOutOfBounds, EDevIO);

    //! Query the limits of the PTU.
    /**
     * @return The actual limits settings of the PTU.
     */
    PanTiltLimitsIDL getPanTiltLimits();
  };
};

#endif // PantTilt_idl




