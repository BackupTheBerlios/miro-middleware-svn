// -*- idl -*- ///////////////////////////////////////////////////////////////
//
// This file is part of Miro (The Middleware for Robots)
// Copyright (C) 1999-2005
// Department of Neuroinformatics, University of Ulm, Germany
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation; either version 2, or (at your option)
// any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//
// $Id$
//
#ifndef Buttons_idl
#define Buttons_idl

#include "Exception.idl"
#include "Time.idl"

module Miro
{
  //! Namespace holding type definitions for the Buttons interface.
  module Button
  {
    //! Data type specifying the event type.
    enum Event { ON_PRESS, ON_RELEASE };
  };
  
  //! Data type holding the button status in case of a button event. 
  /**
   * This data type is shipped via the event channel.
   */
  struct ButtonStatusIDL 
  {
    //! Time the button event was created.
    TimeIDL time;
    //! The id of the button causing the event.
    unsigned long number;
    //! The type of event.
    Button::Event event;
  };

  //! Interface to the buttons service.
  /**
   * Many robots have some buttons for simple user interaction.
   * Press to start, press to stop, or what so ever.
   *
   * This is a simple polling interface that every buttons service
   * should be able to support. All available buttons should be
   * continuosly numbered, starting with zero.
   *
   * Note the all robots also can braodcast button events via 
   * the notification service.
   *
   * Event declaration:
   * - type name = Button
   * - remainder of body = @ref ButtonStatusIDL
   * 
   * @author Hans Utz
   */
  interface Buttons
  {
    //! Get the current state of a single button.
    /**
     * @param number The id of the button.
     *
     * @throw ETOutOfBounds is thrown, when number excedes the
     * the number of buttons returned by @ref numberOfButtons.
     * @throw EDevIO is thrown to indicate low level device problems.
     * @return The state. True if pressed, false otherwise.
     */
    boolean isPressed(in unsigned long number) raises(EDevIO, EOutOfBounds);

    //! Get the number of available buttons.
    /**
     * @return The number of buttons available on the specific platform.
     */
    unsigned long numberOfButtons();
  };
};
#endif
