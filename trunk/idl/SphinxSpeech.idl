// -*- c++ -*- ///////////////////////////////////////////////////////////////
//
// This file is part of Miro (The Middleware For Robots)
//
// (c) 1999, 2000, 2001, 2002
// Department of Neural Information Processing, University of Ulm, Germany
//
// $Id$
// 
//////////////////////////////////////////////////////////////////////////////
#ifndef SphinxSpeech_idl
#define SphinxSpeech_idl

#include "Exception.idl"
#include "Speech.idl"
#include "Time.idl"

module Miro
{
  struct WordIDL {
    string word;
    long startFrame, endFrame; //start and end frame within utterance for this word
    long aScore, lScore; //acoustic and LM scores (not always used!)
    float confidence;    // confidence measure (roughly prob(correct)) for this word
                         // NOT FILLED IN BY THE RECOGNIZER at the moment (sphinx2)
    long latticeDensity; // Average lattice density in segment. 
                            // Larger values imply more confusion and 
                            // less certainty about the result.
                            // To use it for rejection, cutoffs must be found independently
    double phonePerplexity; // Average phone perplexity in segment
                            // Larger values imply more confusion and 
                            // less certainty about the result.
                            // To use it for rejection, cutoffs must be found independently
  };

  struct SentenceIDL {
    sequence<WordIDL> sentence;
    TimeIDL timestamp;
    boolean valid;
  };


  //! Interface to the Sphinx speech recognition services
  /**
   * It registers as "Speech" at the naming service
   * within the selected naming context.
   * It includes the Festival speech production module
   *
   */
  interface SphinxSpeech : Speech
  {
    //! Returns the last recognized sentence
    SentenceIDL getLastSentence() raises(EDevIO);
  };
};
#endif // Speech_idl
