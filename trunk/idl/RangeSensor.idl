// -*- idl -*- ///////////////////////////////////////////////////////////////
//
// This file is part of Miro (The Middleware for Robots)
// Copyright (C) 1999-2005
// Department of Neuroinformatics, University of Ulm, Germany
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation; either version 2, or (at your option)
// any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//
// $Id$
//
#ifndef RangeSensor_idl
#define RangeSensor_idl

#include "Exception.idl"
#include "ScanDescription.idl"
#include "RangeEvent.idl"

module Miro
{
  //! General range sensor interface.
  /**
   * It provides a uniform way to query the layout of range
   * sensors and query their data. This is especially usefull in
   * conjunction with the notification service. All range sensors
   * broadcast their data periodically via the event channel (named
   * "EventChannel" at the naming service) in a unified data format
   * (see @ref RangeScanEventIDL, @ref RangeGroupEventIDL and
   * @ref RangeBunchEventIDL), allowing for generalized range sensor data
   * processing.
   */
  interface RangeSensor
  {
    //! Constant indicating an invalid scan value. 
    /**
     * The specific sensor is either masked out or didn't provide usefull data. 
     */
    const long INVALID_RANGE = -2;
    //! Constant indicating a range beyond the scope of the sensor.
    /** 
     * The scan value is bigger than the maximum distance the range
     * sensor can measure.
     */
    const long HORIZON_RANGE = -1;

    //! The range sensor does not send events
    const long NONE_PUSHING = 0;
    //! The range sensor sends a full scan with its events (@ref RangeScanEventIDL).
    const long FULL = 1;
    //! The range sensor sends one sensor group scan with its events (@ref RangeGroupEventIDL).
    const long GROUPWISE = 2;
    //! The range sensor sends a bunch of sensor readings with its events (@ref RangeBunchEventIDL).
    const long BUNCHWISE = 3;

    //! Query the layout of a range sensor type. 
    ScanDescriptionIDL getScanDescription();
    //! Query a range sensor group.
    RangeGroupEventIDL getGroup(in unsigned long id) raises(EOutOfBounds);
    //! Wait and query a range sensor group.
    /**
     * Wait and get the next incomming report of the specified
     * range sensor group.
     *
     * @throw ETimeOut This exception is thrown, when no report is
     * received for longer than 5 times of the sensors status report
     * period. This usually indicates a crash of the controller board
     * or a too high system load.
     */
    RangeGroupEventIDL getWaitGroup(in unsigned long id) raises(EOutOfBounds, ETimeOut);
    //! Query a range sensor.
    RangeScanEventIDL getFullScan();
    //! Wait and query a range sensor.
    /**
     * Wait and get the next incomming report of the sensor.
     *
     * @throw ETimeOut This exception is thrown, when no report is
     * received for longer than 5 times of the sensors status report
     * period. This usually indicates a crash of the controller board
     * or a too high system load.
     */
    RangeScanEventIDL getWaitFullScan() raises(ETimeOut);
  };
};

#endif // rangeSensor_idl
