// -*- idl -*- ///////////////////////////////////////////////////////////////
//
// This file is part of Miro (The Middleware for Robots)
// Copyright (C) 1999-2005
// Department of Neuroinformatics, University of Ulm, Germany
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation; either version 2, or (at your option)
// any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//
// $Id$
//
#ifndef CanonPanTilt_idl
#define CanonPanTilt_idl

#include "PanTilt.idl"

module Miro
{
  //! Struct representing a pantilt speed and acceleration configuration.
  struct CanonPanTiltSpdAccIDL
  {
    //! Target pan speed value in rad/s.
    double     targetpanspeed;
    //! Target tilt speed value in rad/s.
    double     targettiltspeed;
    //! Minimum pan speed value in rad/s.
    double     panminspeed;
    //! Maximum pan speed value in rad/s.
    double     panmaxspeed;
    //! Minimum tilt speed value in rad/s.
    double     tiltminspeed;
    //! Maximum tilt speed value in rad/s.
    double     tiltmaxspeed;
  };


  //! Interface to the panTilt unit supplied with canon VC series cameras.
  /**
   * This pantilt unit is mounted on the PeopleBot robot.  It registers as
   * "PanTilt" at the naming service in the specified naming context.
   * 
   * @author Guillem Pages Gassull
   */
  interface CanonPanTilt : Miro::PanTilt
  {
    //! Wait for the PTU to complete previous movement
    void waitCompletion() raises(Miro::EDevIO, Miro::ETimeOut);

    //! Move the PTU to the specified destination.
    /** The call awaits completion of the movement.
     */
    void setWaitPosition( in Miro::PanTiltPositionIDL dest) 
      raises(Miro::EOutOfBounds, Miro::EDevIO, Miro::ETimeOut);

    //! Set the actual speed and acceleration settings.
    void setSpdAcc( in CanonPanTiltSpdAccIDL dest )
      raises(Miro::EDevIO, Miro::ETimeOut, Miro::EOutOfBounds);

    //! Query the current speed and acceleration setting.
    /**
     * @return The actual speed and acceleration settings of the PTU.
     */
    CanonPanTiltSpdAccIDL  getSpdAcc() raises(Miro::EDevIO, Miro::ETimeOut);

    //! Query the limits of the PTU. DEPRECATED
    /**
     * getLimits() has been deprecated. Use gatPanTiltLimits() instead
     */
    PanTiltLimitsIDL getLimits() raises(Miro::EDevIO, Miro::ETimeOut);


  };
};

#endif // CanonPanTilt_idl
