// -*- idl -*- ///////////////////////////////////////////////////////////////
//
// This file is part of Miro (The Middleware for Robots)
// Copyright (C) 1999-2005
// Department of Neuroinformatics, University of Ulm, Germany
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation; either version 2, or (at your option)
// any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//
// $Id$
//
//
// Authors: 
//   Hans Utz
//   Stefan Enderle
//   Stefan Sablatnoeg
//
#ifndef Laser_idl
#define Laser_idl

#include "Exception.idl"
#include "Time.idl"
#include "Position.idl"
#include "RangeSensor.idl"

module Miro
{
  /**
   * Number of beams in a laser scan.
   *
   * Note: This constant may be deleted in a later version, when the
   * @ref LaserScanDescriptionIDL is fully used.
   */
  const long LASER_NUM       =  361;

  const long LASER_MAX_VALUE = 8000;

  /**
   * Struct representing a laser scan with @ref LASER_NUM distance
   * readings. 
   */
  struct LaserScanIDL
  {
    /**
     * Time stamp associated to the laser scan.
     */
    TimeIDL   time;
    /**
     * @ref Position stamp associated to the laser scan
     */
    PositionIDL position;
    /**
     * Validity of the positionstamp
     */
    boolean  positionValid;
    /**
     * Array of laser distance values.
     */
    long     value[LASER_NUM];
  };

  /**
   * Interface to the laser scanner.
   */
  interface Laser : RangeSensor
  {
    /**
     * Get the current laser scan. This call immediately
     * returns the last available laser scan.
     */
    LaserScanIDL            getScan();

    /**
     * Get the next laser scan. This call blocks until the next laser
     * scan is read and then returns this scan.
     *
     * @raises ETimeOut
     */
    LaserScanIDL            getWaitScan() raises(ETimeOut);
  };
};

#endif




