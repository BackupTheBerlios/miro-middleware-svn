// -*- idl -*- ///////////////////////////////////////////////////////////////
//
// This file is part of Miro (The Middleware for Robots)
// Copyright (C) 1999-2005
// Department of Neuroinformatics, University of Ulm, Germany
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation; either version 2, or (at your option)
// any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//
// $Id$
//
#ifndef B21Buttons_idl
#define B21Buttons_idl

#include "Buttons.idl"
#include "Time.idl"

module Miro
{
  //! Namespace holding type definitions  and constants for the B21Buttons interface.
  module B21Button
  {
    //! The identifer of the red button.
    const unsigned long RED = 0;
    //! The identifer of the yellow button.
    const unsigned long YELLOW = 1;
    //! The identifer of the green button.
    const unsigned long GREEN = 2;
    //! The identifer of the blue button.
    const unsigned long BLUE = 3;
    //! The identifer of the right kill button. 
    /**
     * Note that only its light can be set, its button status
     * can not be queried.
     */
    const unsigned long RIGHT_KILL = 4;
    //! The identifer of the left kill button 
    /**
     * Note that only its light can be set, its button status
     * can not be queried.
     */
    const unsigned long LEFT_KILL = 5;
    
    //! Data type specifying the button mode.
    /**
     * Note the following mode transformations on pressing of a button:
     * - OFF -> OFF (default)
     * - ON -> ON
     * - FLASHING -> FLASHING
     * - FLASHING_TILL_PRESSED -> OFF
     * - ON_TILL_PRESSED -> OFF
     * - OFF_TILL_PRESSED -> ON
     * - TOGGLE_ON -> TOGGLE_OFF
     * - TOGGLE_OFF -> TOGGLE_ON
     * - ON_WHILE_PRESSED -> ON_WHILE_PRESSED
     * - OFF_WHILE_PRESSED -> OFF_WHILE_PRESSED
     */
    enum Mode {
      OFF, ON, 
      FLASHING, FLASHING_TILL_PRESSED,
      ON_TILL_PRESSED,
      OFF_TILL_PRESSED,
      TOGGLE_ON, TOGGLE_OFF,
      ON_WHILE_PRESSED, 
      OFF_WHILE_PRESSED
    };
  };
  
  //! Interface to the B21 button service.
  /**
   * The B21 has 4 general purpos buttons and 2 emergency stop buttons (kill buttons).
   * Each button also contains a light, that can operate in various modes.
   *
   * The state of the buttons is also broadcasted via the notification
   * service as described in the @ref Button interface.
   *
   * @author Hans Utz
   */
  interface B21Buttons : Buttons
  {
    //! Get the current mode of a single button.
    /**
     * @param number The id of the button.
     *
     * @throw ETOutOfBounds is thrown, when number excedes the
     * the number of buttons returned by @ref numberOfButtons.
     *
     * @return The mode the button currently operating in.
     */
    B21Button::Mode getButtonMode(in unsigned long number) raises(EOutOfBounds);
    
    //! Set the current mode of a single button.
    /**
     * @param number The id of the button.
     * @param mode The mode the button shall operate in from now on.
     *
     * @throw ETOutOfBounds is thrown, when number excedes the
     * the number of buttons returned by @ref numberOfButtons.
     * @throw EDevIO is thrown to indicate low level device problems.
     */
    void setButtonMode(in unsigned long number, in B21Button::Mode mode) raises(EDevIO, EOutOfBounds);
  };
};
#endif
