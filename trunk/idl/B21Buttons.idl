// -*- c++ -*- ///////////////////////////////////////////////////////////////
//
// This file is part of Miro (The Middleware For Robots)
//
// (c) 1999, 2000, 2001, 2002
// Department of Neural Information Processing, University of Ulm, Germany
//
// $Id$
// 
//////////////////////////////////////////////////////////////////////////////
#ifndef B21Buttons_idl
#define B21Buttons_idl

#include "Buttons.idl"
#include "Time.idl"

module Miro
{
  //! Namespace holding type definitions  and constants for the B21Buttons interface.
  module B21Button
  {
    //! The identifer of the red button.
    const long RED = 0;
    //! The identifer of the yellow button.
    const long YELLOW = 1;
    //! The identifer of the green button.
    const long GREEN = 2;
    //! The identifer of the blue button.
    const long BLUE = 3;
    //! The identifer of the right kill button. 
    /**
     * Note that only its light can be set, its button status
     * can not be queried.
     */
    const long RIGHT_KILL = 4;
    //! The identifer of the left kill button 
    /**
     * Note that only its light can be set, its button status
     * can not be queried.
     */
    const long LEFT_KILL = 5;
    
    //! Data type specifying the button mode.
    /**
     * Note the following mode transformations on pressing of a button:
     * - OFF -> OFF
     * - ON -> ON
     * - FLASHING -> FLASHING
     * - FLASHING_TILL_PRESSED -> OFF
     * - ON_TILL_PRESSED -> OFF
     * - OFF_TILL_PRESSED -> ON
     * - TOGGLE_ON -> TOGGLE_OFF
     * - TOGGLE_OFF -> TOGGLE_ON
     * - ON_WHILE_PRESSED -> ON_WHILE_PRESSED
     * - OFF_WHILE_PRESSED -> OFF_WHILE_PRESSED
     */
    enum Mode {
      OFF, ON, 
      FLASHING, FLASHING_TILL_PRESSED,
      ON_TILL_PRESSED,
      OFF_TILL_PRESSED,
      TOGGLE_ON, TOGGLE_OFF,
      ON_WHILE_PRESSED, 
      OFF_WHILE_PRESSED
    };
  };
  
  //! Interface to the B21 button service.
  /**
   * The state of the buttons is also broadcasted via the notification
   * service. It is named EventChannel in the selected NamingContext. The
   * interface is registered under the name "Buttons" at the naming
   * service.
   */
  interface B21Buttons : Buttons
  {
    //! Get the current state of a single button.
    B21Button::Mode getButtonMode(in long id) raises(EOutOfBounds);
    
    //! Set the current state of a single button.
    void setButtonMode(in long id, in B21Button::Mode state) raises(EDevIO, EOutOfBounds);
  };
};
#endif
