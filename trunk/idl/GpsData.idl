/*
 * This file is part of Miro (The Middleware for Robots)
 * Copyright (C) 2005 Ingo van Lil <ingo@vanlil.de>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * $Id$
 */

#ifndef GpsData_idl
#define GpsData_idl

#include "Time.idl"
#include "WorldPoint3D.idl"

module Miro
{
  //! Structure holding a GPS global position
  /**
   * \note \a Double resolution is required for latitude and longitude
   *       values because distances covered by robots are usually very
   *       small compared to Earth's circumfence.
   */
  struct GpsPositionIDL
  {
    //! Latitude in radians.
    /**
     * The latitude ranges from \f$0\f$ a the Equator to \f$\pi/2\f$ at
     * the north pole and \f$-\pi/2\f$ at the south pole.
     */
    double latitude;
    //! Longitude in radians.
    /**
     * The longitude ranges from \f$0\f$ at the Prime Meridian (Greenwhich)
     * to \f$\pi\f$ (eastward) and \f$-\pi\f$ (westward).
     */
    double longitude;
    //! Altitude in meters.
    float altitude;
  };

  //! Structure holding a set of GPS dilution values
  struct GpsDilutionIDL
  {
    //! Horizontal dilution of precision.
    float hdop;
    //! Vertical dilution of precision.
    float vdop;
    //! Position dilution of precision.
    float pdop;
  };

  //! Structure holding a GPS global position update
  /**
   * This structure is used as return value type for the GPS interface's
   * \a getGlobalPosition() and \a getWaitGlobalPosition() methods.
   */
  struct GpsGlobalPositionEventIDL
  {
    //! Timestamp.
    TimeIDL time;
    //! New global position. Unchanged fields may be \c NaN.
    GpsPositionIDL global;
  };

  //! Structure holding a GPS relative position update
  /**
   * This structure is used as return value type for the GPS interface's
   * \a getPosition() and \a getWaitPosition() methods.
   */
  struct GpsRelativePositionEventIDL
  {
    //! Timestamp.
    TimeIDL time;
    //! New relative position in mm. Unchanged fields may be \c NaN.
    WorldPoint3DIDL relative;
  };

  //! Structure holding a GPS global position event
  /**
   * This structure is used to send out notifications whenever a
   * position update is received from the GPS module. It includes a
   * timestamp and updates for both the global position and the
   * position relative to a reference point. Unchanged fields may
   * be \c NaN.
   */
  struct GpsPositionEventIDL
  {
    //! Timestamp.
    TimeIDL time;
    //! Global position update.
    GpsPositionIDL global;
    //! Relative position update (in mm).
    WorldPoint3DIDL relative;
  };

  //! Structure holding a GPS dilution event
  /**
   * This structure is used to send out notifications whenever a
   * dilution update is received from the GPS module and as a return
   * value type for the GPS interface's \a getDilution() and
   * \a getWaitDilution() methods. If it's used to signalize a
   * dilution update only those fields included in the update are
   * filled in, the remaining values are set to \c NaN.
   */
  struct GpsDilutionEventIDL
  {
    //! Timestamp.
    TimeIDL time;
    //! New dilution value(s).
    GpsDilutionIDL dilution;
  };

  //! Structure holding a GPS NMEA-0183 sentence
  /**
   * This structure is use to send out raw messages received from the
   * GPS module. If you need information from specific NMEA sentences
   * that are not handled by the GPS service you can use the
   * \a NmeaNotify configuration parameter to enable dispatching of
   * those sentences and evalutate them in the client task.
   */
  struct GpsSentenceEventIDL
  {
    //! Timestamp.
    TimeIDL time;
    //! GPS sentence in NMEA-0183 format (not including the CR/LF terminator).
    string sentence;
  };
};

#endif // GpsData_idl
