/*
 * This file is part of Miro (The Middleware for Robots)
 * Copyright (C) 2005 Ingo van Lil <ingo@vanlil.de>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * $Id$
 */

#ifndef SonyCameraControl_idl
#define SonyCameraControl_idl

#include "Exception.idl"
#include "CameraControl.idl"

module Miro
{
  //! Struct representing the camera's gain limits
  struct GainRangeIDL {
    //! Minimum gain in db
    short min;
    //! Maximum gain in db
    short max;
  };

  //! Interface for a Sony EVI-D30/D31 camera
  /**
   * @author Ingo van Lil
   *
   * \note The camera connection is one-way only, so it isn't possible to
   *       read feedback from the camera or query the actual state the
   *       hardware is in. This interface's \a getAutoExposure,
   *       \a getIris and \a getGain functions as well as the CameraControl
   *       interface's get* methods will only be able to return the last
   *       known values.<br>
   *       Also, none of these functions will ever throw an \a EDevIO
   *       exception, simply because we don't have any chance to detect
   *       device problems.
   */
  interface SonyCameraControl: CameraControl
  {
    //! Enumeration of available Auto Exposure modes
    enum AutoExposureMode {
      AE_AUTO,		//!< Full Auto Exposure
      AE_MANUAL,	//!< Shutter, iris and gain can be set manually
      AE_FIXED_SHUTTER, //!< Shutter fixed AE
      AE_FIXED_IRIS,	//!< Iris fixed AE
      AE_BRIGHT		//!< Bright mode
    };

    //! Set the camera's Auto Exposure mode
    /**
     * @param ae specifies the mode to use.
     *
     * @throw EOutOfBounds is thrown on invalid argument.
     */
    void setAutoExposure(in AutoExposureMode ae) raises(EOutOfBounds);

    //! Read the current Auto Exposure mode
    /**
     * @return Last known Auto Exposure mode.
     */
    AutoExposureMode getAutoExposure();

    //! Enumeration of available iris apertures
    enum IrisMode {
      IRIS_CLOSE, //!< Iris closed
      IRIS_F28,	  //!< F28
      IRIS_F22,	  //!< F22
      IRIS_F19,	  //!< F19
      IRIS_F16,	  //!< F16
      IRIS_F14,	  //!< F14
      IRIS_F11,	  //!< F11
      IRIS_F9_6,  //!< F9.6
      IRIS_F8,	  //!< F8
      IRIS_F6_8,  //!< F6.8
      IRIS_F5_6,  //!< F5.6
      IRIS_F4_8,  //!< F4.8
      IRIS_F4,	  //!< F4
      IRIS_F3_4,  //!< F3.4
      IRIS_F2_8,  //!< F2.8
      IRIS_F2_4,  //!< F2.4
      IRIS_F2,	  //!< F2
      IRIS_F1_8	  //!< F1.8
    };

    //! Set the iris aperture
    /**
     * @param iris specifies the iris aperture value to use.
     *
     * @throw EOutOfBounds is thrown on invalid argument.
     */
    void setIris(in IrisMode iris) raises(EOutOfBounds);

    //! Read the current iris aperture
    /**
     * @return Last known iris aperture value.
     */
    IrisMode getIris();

    //! Set the camera gain
    /**
     * @param db New camera gain in db. The closest available value will
     *        be used (-3db .. 18db in 3db steps). The camera will be
     *        switched into manual exposure mode.
     *
     * @return The gain value actually used, i.e. after "rounding".
     *
     * @throw EOutOfBounds is thrown if the argument is outside the range
     *        of valid values.
     */
    short setGain(in short db) raises(EOutOfBounds);

    //! Get the camera gain
    /**
     * @return Last known camera gain value in db.
     */
    short getGain();

    //! Read the valid gain value range
    /**
     * @return Allowed range for gain values.
     */
    GainRangeIDL getGainRange();
  };
};

#endif // SonyCameraControl_idl
