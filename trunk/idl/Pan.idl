// -*- idl -*- ///////////////////////////////////////////////////////////////
//
// This file is part of Miro (The Middleware for Robots)
// Copyright (C) 1999-2005
// Department of Neuroinformatics, University of Ulm, Germany
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation; either version 2, or (at your option)
// any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//
// $Id$
//
#ifndef Pan_idl
#define Pan_idl

#include "Exception.idl"

module Miro
{
  //! Struct representing a panning limits configuration.
  struct PanLimitsIDL
  {
    //! Minimal pan angle (in rad).
    float minAngle;
    //! Maximal pan angle (in rad).
    float maxAngle;
  };


  //! Basic interface for a panning unit.
  /** 
   * @author Hans Utz
   */
  interface Pan 
  {
    //! Set the panning angle.
    /**
     * @param angle is specified in radiant.
     * @throw EOutOfBounds
     * is thrown if the specified panning angle is beyond the range of the panning unit.
     * @throw EDevIO
     * is thrown to indicate low level device problems.
     */
    void setPan(in float value) raises(EDevIO, EOutOfBounds);
    //! Get the current panning angle.
    /**
     * @return The panning angle, specified in radiant.
     * @throw EDevIO
     * is thrown to indicate low level device problems.
     */
    float getPan() raises(EDevIO);

    //! Get the target panning angle.
    /**
     * @return The target panning angle, specified in radiant.
     */
    float getTargetPan();

    //! Get the panning angle limits.
    /**
     * @return The angles within the pan unit works, specified in radiant.
     */
    PanLimitsIDL getPanLimits();
  };
};
#endif // Pan_idl
