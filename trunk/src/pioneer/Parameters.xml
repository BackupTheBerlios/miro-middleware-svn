<!DOCTYPE xml SYSTEM "PolicyEditor_behaviour.dtd">
<config> 
  <config_global name="namespace" value="Pioneer" />
  <config_global name="include" value="psos/Parameters.h" />

  <config_group name="ActiveMedia">
    <config_item name="TCM2">
      <config_parameter name="compassOnly" type="bool" default="false" />
      <config_parameter name="inclinometer" type="Miro::InclinometerParameters" />
      <config_parameter name="magnetometer" type="Miro::MagnetometerParameters" />
      <config_parameter name="thermometer" type="Miro::ThermometerParameters" />
    </config_item>

    <config_item parent="Psos::" instance="true">
      <config_parameter name="motion" type="Miro::DifferentialMotionParameters" />
      <constructor>
        motion.minTranslation = -500;
        motion.maxTranslation = 500;

        motion.minLTranslation = -500;
        motion.maxLTranslation = 500;
        motion.minRTranslation = -500;
        motion.maxRTranslation = 500;
        motion.wheelBase = 350;
      </constructor>

      <config_parameter name="sonar" type="bool" default="true" />
      <config_parameter name="sonarDescription" type="Miro::ScanDescriptionIDL" />
      <constructor>
        static const int sonarDistance[8] = { 150, 150, 150, 150, 150, 150, 150, 150 };
        static const int sonarAlpha[8] = { 90, 60, 15, 0, -15, -60, -90, 180 };
        static const int sonarBeta[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };

        sonarDescription.scanType = Miro::RangeSensor::BUNCHWISE;
        sonarDescription.eventName = &quot;Sonar&quot;;
        sonarDescription.group.length(1);
        sonarDescription.group[0].description.minRange = 200;
        sonarDescription.group[0].description.maxRange = 5000;
        sonarDescription.group[0].description.focus = Miro::deg2Rad(30);
        sonarDescription.group[0].sensor.length(8);
        for (unsigned int i = 0; i &lt; 8; ++i) {
          sonarDescription.group[0].sensor[i].height = 350;
          sonarDescription.group[0].sensor[i].distance = sonarDistance[i];
          sonarDescription.group[0].sensor[i].alpha = Miro::deg2Rad(sonarAlpha[i]);
          sonarDescription.group[0].sensor[i].beta = Miro::deg2Rad(sonarBeta[i]);
          sonarDescription.group[0].sensor[i].gamma = 0;
        }
      </constructor>

      <config_parameter name="infrared" type="bool" default="false" />
      <config_parameter name="infraredDescription" type="Miro::ScanDescriptionIDL" />
      <constructor>
        static const int infraredHeight[4] = { 100, 100, 150, 150 };
        static const int infraredDistance[4] = { 150, 150, 150, 150 };
        static const int infraredAlpha[4] = { 45, -45, 90, -90 };
        static const int infraredBeta[4] = { 0, 0, 0, 0};
        static const int infraredGamma[4] = { 70, 70, 90, 90};

        infraredDescription.scanType = ::Miro::RangeSensor::GROUPWISE;
        infraredDescription.eventName = &quot;Infrared &quot;;
        infraredDescription.group.length(1);
        infraredDescription.group[0].description.minRange = 0;
        infraredDescription.group[0].description.maxRange = 500;
        infraredDescription.group[0].description.focus = Miro::deg2Rad(5);
        infraredDescription.group[0].sensor.length(4);
        for (unsigned int i = 0; i &lt; 4; ++i) {
          infraredDescription.group[0].sensor[i].height = infraredHeight[i];;
          infraredDescription.group[0].sensor[i].distance = infraredDistance[i];
          infraredDescription.group[0].sensor[i].alpha = Miro::deg2Rad(infraredAlpha[i]);
          infraredDescription.group[0].sensor[i].beta = Miro::deg2Rad(infraredBeta[i]);
          infraredDescription.group[0].sensor[i].gamma = Miro::deg2Rad(infraredGamma[i]);
        }
      </constructor>

      <config_parameter name="tactile" type="bool" default="false" />
      <config_parameter name="tactileDescription" type="Miro::ScanDescriptionIDL" />
      <constructor>
        static const int tactileDistance[10] = { 150, 150, 150, 150, 150, 150, 150, 150, 150, 150 };
        static const int tactileAlpha[10] = { 90, 60, 15, 0, -15, -60, -90, 180, -180, -120 };
        static const int tactileBeta[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

        tactileDescription.scanType = Miro::RangeSensor::BUNCHWISE;
        tactileDescription.eventName = &quot;Tactile&quot;;
        tactileDescription.group.length(1);
        tactileDescription.group[0].description.minRange = 0;
        tactileDescription.group[0].description.maxRange = 10;
        tactileDescription.group[0].description.focus = Miro::deg2Rad(30);
        tactileDescription.group[0].sensor.length(10);
        for (unsigned int i = 0; i &lt; 10; ++i) {
          tactileDescription.group[0].sensor[i].height = 350;
          tactileDescription.group[0].sensor[i].distance = tactileDistance[i];
          tactileDescription.group[0].sensor[i].alpha = Miro::deg2Rad(tactileAlpha[i]);
          tactileDescription.group[0].sensor[i].beta = Miro::deg2Rad(tactileBeta[i]);
          tactileDescription.group[0].sensor[i].gamma = 0;
        }
      </constructor>

      <config_parameter name="tcm2" type="bool" default="false" />
      <config_parameter name="tcm2Params" type="TCM2Parameters" />
      <constructor>
	tcm2Params.inclinometer.minPitch = Miro::deg2Rad(-20);
	tcm2Params.inclinometer.maxPitch = Miro::deg2Rad(20);
	tcm2Params.inclinometer.minRoll = Miro::deg2Rad(-20);
	tcm2Params.inclinometer.maxRoll = Miro::deg2Rad(20);
	tcm2Params.magnetometer.minFieldStrength = -80;
	tcm2Params.magnetometer.maxFieldStrength = 80;
	tcm2Params.thermometer.minTemperature = -20;
	tcm2Params.thermometer.maxTemperature = 70;
      </constructor>

      <config_parameter name="channelSharing" type="bool" default="false" />
      <config_parameter name="camera" type="bool" default="false" />
      <config_parameter name="cameraUpsideDown" type="bool" default="false" />
      <config_parameter name="cameraType" type="string" default="canon" />

    </config_item>
  </config_group>
</config>
