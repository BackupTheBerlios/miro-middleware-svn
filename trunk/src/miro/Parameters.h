// -*- c++ -*- ///////////////////////////////////////////////////////////////
// This file was auto-generated by makeParameters
//////////////////////////////////////////////////////////////////////////////
#ifndef Parameters_h_394571
#define Parameters_h_394571

#include "ArbiterParameters.h"
#include "BehaviourParameters.h"

#include <ace/INET_Addr.h>
#include <ace/TTY_IO.h>
#include <ace/Time_Value.h>
#include <iostream>
#include <miro/Angle.h>
#include <miro/Singleton.h>
#include <qdom.h>
#include <set>
#include <string>
#include <vector>

namespace Miro
{
  struct ConfigParameters;
  std::ostream&
  operator << (std::ostream& ostr, const ConfigParameters& rhs);

  class ConfigParameters
  {
  public: 
    ConfigParameters();
    virtual ~ConfigParameters();

    virtual void operator <<= (const QDomNode&);
    virtual QDomElement operator >>= (QDomNode&) const;
  protected:
    virtual void printToStream(std::ostream&) const;
    friend
    std::ostream&
    operator << (std::ostream& ostr, const ConfigParameters& rhs);
  };

  class DevParameters : public ConfigParameters
  {
    typedef ConfigParameters Super;

  public: 
    std::string device;

    DevParameters();

    virtual void operator <<= (const QDomNode&);
    virtual QDomElement operator >>= (QDomNode&) const;
  protected:
    virtual void printToStream(std::ostream&) const;
  };

  class TtyParameters : public DevParameters
  {
    typedef DevParameters Super;

  public: 
    ACE_TTY_IO::Serial_Params ttyParams;

    TtyParameters();

    virtual void operator <<= (const QDomNode&);
    virtual QDomElement operator >>= (QDomNode&) const;
  protected:
    virtual void printToStream(std::ostream&) const;
  };

  class RobotParameters : public ConfigParameters
  {
    typedef ConfigParameters Super;

  public: 
    std::string nameServiceIOR;
    std::string name;
    std::string type;

    static Miro::Singleton<RobotParameters> instance;

    RobotParameters();

    virtual void operator <<= (const QDomNode&);
    virtual QDomElement operator >>= (QDomNode&) const;
  protected:
    virtual void printToStream(std::ostream&) const;
  };

  class CameraParameters : public ConfigParameters
  {
    typedef ConfigParameters Super;

  public: 
    ACE_Time_Value latency;
    double alpha;
    double height;
    double cx;
    double cy;
    double f;
    double kappa;
    double sx;
    double dx;
    double dy;
    double nfx;
    double ncx;

    static Miro::Singleton<CameraParameters> instance;

    CameraParameters();

    virtual void operator <<= (const QDomNode&);
    virtual QDomElement operator >>= (QDomNode&) const;
  protected:
    virtual void printToStream(std::ostream&) const;
  };

  class MotionParameters : public ConfigParameters
  {
    typedef ConfigParameters Super;

  public: 
    double maxRotation;
    double minRotation;
    long maxTranslation;
    long minTranslation;

    MotionParameters();

    virtual void operator <<= (const QDomNode&);
    virtual QDomElement operator >>= (QDomNode&) const;
  protected:
    virtual void printToStream(std::ostream&) const;
  };

  class DifferentialMotionParameters : public MotionParameters
  {
    typedef MotionParameters Super;

  public: 
    long wheelBase;
    long maxLTranslation;
    long maxRTranslation;
    long minLTranslation;
    long minRTranslation;

    DifferentialMotionParameters();

    virtual void operator <<= (const QDomNode&);
    virtual QDomElement operator >>= (QDomNode&) const;
  protected:
    virtual void printToStream(std::ostream&) const;
  };






  class EventBehaviourParameters : public BehaviourParameters
  {
    typedef BehaviourParameters Super;

  public: 
    EventBehaviourParameters();

  };

  class TimedBehaviourParameters : public BehaviourParameters
  {
    typedef BehaviourParameters Super;

  public: 
    ACE_Time_Value pace;

    TimedBehaviourParameters();

    virtual void operator <<= (const QDomNode&);
    virtual QDomElement operator >>= (QDomNode&) const;
  protected:
    virtual void printToStream(std::ostream&) const;
  };

  class TaskBehaviourParameters : public BehaviourParameters
  {
    typedef BehaviourParameters Super;

  public: 
    TaskBehaviourParameters();

  };

  class PriorityArbiterParameters : public ArbiterParameters
  {
    typedef ArbiterParameters Super;

  public: 
    PriorityArbiterParameters();

  };

  class MotionArbiterParameters : public PriorityArbiterParameters
  {
    typedef PriorityArbiterParameters Super;

  public: 
    MotionArbiterParameters();

  };

  class PowerArbiterParameters : public PriorityArbiterParameters
  {
    typedef PriorityArbiterParameters Super;

  public: 
    PowerArbiterParameters();

  };

};

#endif // Parameters_h
