// -*- c++ -*- ///////////////////////////////////////////////////////////////
// This file was auto-generated by MakeParameters
//////////////////////////////////////////////////////////////////////////////
#include "Parameters.h"

#include <miro/IO.h>
#include <miro/RangeSensorC.h>
#include <miro/ScanDescriptionHelper.h>
#include <miro/XmlParse.h>
#include <qdom.h>

namespace
{
  using Miro::operator<<=;
  using Miro::operator>>=;
  using Miro::operator<<;
};

namespace FaulMotor
{
  Miro::Singleton<Parameters> Parameters::instance;

  Parameters::Parameters() :
    camera(false),
    cameraUpsideDown(false),
    infraredDescription(),
    infrared(false),
    motion(),
    sonarDescription(),
    tactileDescription(),
    tactile(false),
    sonar(true)
  {
    
        motion.minTranslation = -500;
        motion.maxTranslation = 500;

        motion.minLTranslation = -500;
        motion.maxLTranslation = 500;
        motion.minRTranslation = -500;
        motion.maxRTranslation = 500;
        motion.wheelBase = 350;
      
    
        static const int sonarDistance[8] = { 150, 150, 150, 150, 150, 150, 150, 150 };
        static const int sonarAlpha[8] = { 90, 60, 15, 0, -15, -60, -90, 180 };
        static const int sonarBeta[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };

        sonarDescription.scanType = Miro::RangeSensor::BUNCHWISE;
        sonarDescription.eventName = "Sonar";
        sonarDescription.group.length(1);
        sonarDescription.group[0].description.minRange = 200;
        sonarDescription.group[0].description.maxRange = 5000;
        sonarDescription.group[0].description.focus = Miro::deg2Rad(30);
        sonarDescription.group[0].sensor.length(8);
        for (unsigned int i = 0; i < 8; ++i) {
          sonarDescription.group[0].sensor[i].height = 350;
          sonarDescription.group[0].sensor[i].distance = sonarDistance[i];
          sonarDescription.group[0].sensor[i].alpha = Miro::deg2Rad(sonarAlpha[i]);
          sonarDescription.group[0].sensor[i].beta = Miro::deg2Rad(sonarBeta[i]);
          sonarDescription.group[0].sensor[i].gamma = 0;
        }
      
    
        static const int infraredHeight[4] = { 100, 100, 150, 150 };
        static const int infraredDistance[4] = { 150, 150, 150, 150 };
        static const int infraredAlpha[4] = { 45, -45, 90, -90 };
        static const int infraredBeta[4] = { 0, 0, 0, 0};
        static const int infraredGamma[4] = { 70, 70, 90, 90};

        infraredDescription.scanType = ::Miro::RangeSensor::GROUPWISE;
        infraredDescription.eventName = "Infrared ";
        infraredDescription.group.length(1);
        infraredDescription.group[0].description.minRange = 0;
        infraredDescription.group[0].description.maxRange = 500;
        infraredDescription.group[0].description.focus = Miro::deg2Rad(5);
        infraredDescription.group[0].sensor.length(4);
        for (unsigned int i = 0; i < 4; ++i) {
          infraredDescription.group[0].sensor[i].height = infraredHeight[i];;
          infraredDescription.group[0].sensor[i].distance = infraredDistance[i];
          infraredDescription.group[0].sensor[i].alpha = Miro::deg2Rad(infraredAlpha[i]);
          infraredDescription.group[0].sensor[i].beta = Miro::deg2Rad(infraredBeta[i]);
          infraredDescription.group[0].sensor[i].gamma = Miro::deg2Rad(infraredGamma[i]);
        }
      
    
        static const int tactileDistance[10] = { 150, 150, 150, 150, 150, 150, 150, 150, 150, 150 };
        static const int tactileAlpha[10] = { 90, 60, 15, 0, -15, -60, -90, 180, -180, -120 };
        static const int tactileBeta[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

        tactileDescription.scanType = Miro::RangeSensor::BUNCHWISE;
        tactileDescription.eventName = "Tactile";
        tactileDescription.group.length(1);
        tactileDescription.group[0].description.minRange = 0;
        tactileDescription.group[0].description.maxRange = 10;
        tactileDescription.group[0].description.focus = Miro::deg2Rad(30);
        tactileDescription.group[0].sensor.length(10);
        for (unsigned int i = 0; i < 10; ++i) {
          tactileDescription.group[0].sensor[i].height = 350;
          tactileDescription.group[0].sensor[i].distance = tactileDistance[i];
          tactileDescription.group[0].sensor[i].alpha = Miro::deg2Rad(tactileAlpha[i]);
          tactileDescription.group[0].sensor[i].beta = Miro::deg2Rad(tactileBeta[i]);
          tactileDescription.group[0].sensor[i].gamma = 0;
        }
      
  }

  void
  Parameters::operator <<= (const QDomNode& _node)
  {
    this->Super::operator <<= (_node);

    if (!_node.isNull()) {
      QDomNode n = _node.firstChild();
      while(!n.isNull() ) {
        QDomElement e = n.toElement();
        if( !e.isNull() ) {
          QDomAttr a = e.attributeNode("name");
          if (!a.isNull()) {
            QString i = a.value();
            if (i == "Camera") {
              this->camera <<= n;
            }
            else if (i == "CameraUpsideDown") {
              this->cameraUpsideDown <<= n;
            }
            else if (i == "InfraredDescription") {
              this->infraredDescription <<= n;
            }
            else if (i == "Infrared") {
              this->infrared <<= n;
            }
            else if (i == "Motion") {
              this->motion <<= n;
            }
            else if (i == "SonarDescription") {
              this->sonarDescription <<= n;
            }
            else if (i == "TactileDescription") {
              this->tactileDescription <<= n;
            }
            else if (i == "Tactile") {
              this->tactile <<= n;
            }
            else if (i == "Sonar") {
              this->sonar <<= n;
            }
          }
        }
        n = n.nextSibling();
      }
    }
  }
  QDomElement
  Parameters::operator >>= (QDomNode& _node) const
  {
    QDomElement e = Super::operator >>= (_node);
    QDomElement g;

    g = (this->camera >>= e);
    g.setAttribute("name", "Camera");
    g = (this->cameraUpsideDown >>= e);
    g.setAttribute("name", "CameraUpsideDown");
    g = (this->infraredDescription >>= e);
    g.setAttribute("name", "InfraredDescription");
    g = (this->infrared >>= e);
    g.setAttribute("name", "Infrared");
    g = (this->motion >>= e);
    g.setAttribute("name", "Motion");
    g = (this->sonarDescription >>= e);
    g.setAttribute("name", "SonarDescription");
    g = (this->tactileDescription >>= e);
    g.setAttribute("name", "TactileDescription");
    g = (this->tactile >>= e);
    g.setAttribute("name", "Tactile");
    g = (this->sonar >>= e);
    g.setAttribute("name", "Sonar");

    return e;
  }

  void
  Parameters::printToStream(std::ostream& ostr) const
  {
    Super::printToStream(ostr);

    ostr << "Camera: " << camera << std::endl
         << "CameraUpsideDown: " << cameraUpsideDown << std::endl
         << "InfraredDescription: " << infraredDescription << std::endl
         << "Infrared: " << infrared << std::endl
         << "Motion: " << motion << std::endl
         << "SonarDescription: " << sonarDescription << std::endl
         << "TactileDescription: " << tactileDescription << std::endl
         << "Tactile: " << tactile << std::endl
         << "Sonar: " << sonar << std::endl;
  }
};
