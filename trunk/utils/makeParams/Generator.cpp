// -*- c++ -*- ///////////////////////////////////////////////////////////////
//
// This file is part of Miro (The Middleware For Robots)
//
// (c) 2000, 2001, 2002
// Department of Neural Information Processing, University of Ulm, Germany
//
// $Id$
// $Date$
// 
//////////////////////////////////////////////////////////////////////////////

#include "Generator.h"

#include <iostream>

#define HEAD \
  "// -*- c++ -*- ///////////////////////////////////////////////////////////////\n" ## \
  "// This file was auto-generated by makeParameters\n" ## \
  "//////////////////////////////////////////////////////////////////////////////"

namespace
{
  QString head(HEAD);
  QString spaces("                                                        ");
};

Generator::Generator()
{
  addInclude("iostream");
}

void
Generator::addinclude(const QString& _include)
{
  include_.insert(_include);
}

void
Generator::addInclude(const QString& _Include)
{
  Include_.insert(_Include);
}

void
Generator::addClass(const Class& _name)
{
  class_.push_back(_name);
}

void
Generator::setBaseName(const QString& _fileName)
{
  fileName_ = _fileName;
}

void
Generator::setHeaderExtension(const QString& _extensionName)
{
  extensionName_ = _extensionName;
}

void 
Generator::setNamespace(const QString& _namespace)
{
  namespace_ = _namespace;
}

void
Generator::generateHeader(ostream& ostr) const
{
  if(fileName_.isEmpty())
    throw QString("No file name specified.");

  int indent = 0;

  ostr << head << endl;
  ostr << "#ifndef " << fileName_ << "_" << extensionName_ << endl
       << "#define " << fileName_ << "_" << extensionName_ <<  endl;

  QStringSet::const_iterator i;
  if (include_.size() > 0)
    ostr << endl;
  for (i = include_.begin(); i != include_.end(); ++i)
    ostr << "#include \""<< *i << "\"" << endl;
  if (Include_.size() > 0)
    ostr << endl;
  for (i = Include_.begin(); i != Include_.end(); ++i)
    ostr << "#include <"<< *i << ">" << endl;

  ostr << endl;

  ostr << "// forward declaration" << endl
       << "class QDomNode;" << endl
       << endl;

  if (!namespace_.isEmpty()) {
    ostr << "namespace " <<  namespace_ << endl
	 << "{" << endl;
    indent += STEP;
  }

  ClassVector::const_iterator first, last = class_.end();
  for (first = class_.begin(); first != last; ++first) {
    if (first != class_.begin())
      ostr << endl;
    first->generateHeader(ostr, indent);
  }
   
  while (indent) {
    indent -= STEP;
    ostr << spaces.left(indent) << "};" << endl;
  }

  ostr << endl
       << "#endif // " << fileName_ << "_" << extensionName_ << endl;
}

void
Generator::generateSource(ostream& ostr) const
{
  if(fileName_.isEmpty())
    throw QString("No file name specified.");

  int indent = 0;

  ostr << head << endl;
  ostr << "#include \"" << fileName_ << "." << extensionName_ << "\"" << endl
       << endl
       << "#include <miro/XmlParse.h>" << endl
       << "#include <qdom.h>" << endl
       << endl;

  // match the operator <<= from Miro into local namespace
  if (!namespace_ != QString("Miro")) {
    ostr << "namespace" << endl
	 << "{" << endl
	 << "  using Miro::operator<<=;" << endl
	 << "};" << endl
	 << endl;
  }

  if (!namespace_.isEmpty()) {
    ostr << "namespace " << namespace_ << endl
	 << "{" << endl;
    indent += STEP;
  }

  ClassVector::const_iterator first, last = class_.end();
  for (first = class_.begin(); first != last; ++first) {
    if (first != class_.begin())
      ostr << endl;
    first->generateSource(ostr, indent);
  }
   
  if (!namespace_.isEmpty())
    ostr << "};" << endl;
}
