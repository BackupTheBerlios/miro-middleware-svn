// -*- c++ -*- ///////////////////////////////////////////////////////////////
// This file was auto-generated by MakeParameters
//////////////////////////////////////////////////////////////////////////////
#include "Parameters.h"

#include <miro/TimeHelper.h>
#include <miro/XmlParse.h>
#include <qdom.h>

namespace
{
  using Miro::operator<<=;
  using Miro::operator>>=;
  using Miro::operator<<;
};

TactileStopParameters::TactileStopParameters()
{
}


StraightParameters::StraightParameters() :
  translation(500),
  rotation(Miro::deg2Rad(0))
{
}

void
StraightParameters::operator <<= (const QDomNode& _node)
{
  this->Super::operator <<= (_node);

  if (!_node.isNull()) {
    QDomNode n = _node.firstChild();
    while(!n.isNull() ) {
      QDomElement e = n.toElement();
      if( !e.isNull() ) {
        QDomAttr a = e.attributeNode("name");
        if (!a.isNull()) {
          QString i = a.value();
          if (i == "Translation") {
            this->translation <<= n;
          }
          else if (i == "Rotation") {
            this->rotation <<= n;
            this->rotation = Miro::deg2Rad(this->rotation);
          }
        }
      }
      n = n.nextSibling();
    }
  }
}
QDomElement
StraightParameters::operator >>= (QDomNode& _node) const
{
  QDomElement e = Super::operator >>= (_node);
  QDomElement g;

  g = (this->translation >>= e);
  g.setAttribute("name", "Translation");
  g = (Miro::rad2Deg(this->rotation) >>= e);
  g.setAttribute("name", "Rotation");

  return e;
}

void
StraightParameters::printToStream(std::ostream& ostr) const
{
  Super::printToStream(ostr);

  ostr << "Translation: " << translation << "mm/s" << std::endl
       << "Rotation: " << Miro::rad2Deg(rotation)
 << "/s" << std::endl;
}

WanderParameters::WanderParameters() :
  thresholdChange(.20),
  thresholdStraight(.5),
  minTranslation(200),
  maxTranslation(500),
  minRotation(Miro::deg2Rad(10)),
  maxRotation(Miro::deg2Rad(90))
{
}

void
WanderParameters::operator <<= (const QDomNode& _node)
{
  this->Super::operator <<= (_node);

  if (!_node.isNull()) {
    QDomNode n = _node.firstChild();
    while(!n.isNull() ) {
      QDomElement e = n.toElement();
      if( !e.isNull() ) {
        QDomAttr a = e.attributeNode("name");
        if (!a.isNull()) {
          QString i = a.value();
          if (i == "ThresholdChange") {
            this->thresholdChange <<= n;
          }
          else if (i == "ThresholdStraight") {
            this->thresholdStraight <<= n;
          }
          else if (i == "MinTranslation") {
            this->minTranslation <<= n;
          }
          else if (i == "MaxTranslation") {
            this->maxTranslation <<= n;
          }
          else if (i == "MinRotation") {
            this->minRotation <<= n;
            this->minRotation = Miro::deg2Rad(this->minRotation);
          }
          else if (i == "MaxRotation") {
            this->maxRotation <<= n;
            this->maxRotation = Miro::deg2Rad(this->maxRotation);
          }
        }
      }
      n = n.nextSibling();
    }
  }
}
QDomElement
WanderParameters::operator >>= (QDomNode& _node) const
{
  QDomElement e = Super::operator >>= (_node);
  QDomElement g;

  g = (this->thresholdChange >>= e);
  g.setAttribute("name", "ThresholdChange");
  g = (this->thresholdStraight >>= e);
  g.setAttribute("name", "ThresholdStraight");
  g = (this->minTranslation >>= e);
  g.setAttribute("name", "MinTranslation");
  g = (this->maxTranslation >>= e);
  g.setAttribute("name", "MaxTranslation");
  g = (Miro::rad2Deg(this->minRotation) >>= e);
  g.setAttribute("name", "MinRotation");
  g = (Miro::rad2Deg(this->maxRotation) >>= e);
  g.setAttribute("name", "MaxRotation");

  return e;
}

void
WanderParameters::printToStream(std::ostream& ostr) const
{
  Super::printToStream(ostr);

  ostr << "ThresholdChange: " << thresholdChange << std::endl
       << "ThresholdStraight: " << thresholdStraight << std::endl
       << "MinTranslation: " << minTranslation << "mm/s" << std::endl
       << "MaxTranslation: " << maxTranslation << "mm/s" << std::endl
       << "MinRotation: " << Miro::rad2Deg(minRotation)
 << "/s" << std::endl
       << "MaxRotation: " << Miro::rad2Deg(maxRotation)
 << "/s" << std::endl;
}

TimerParameters::TimerParameters() :
  time(10,0)
{
}

void
TimerParameters::operator <<= (const QDomNode& _node)
{
  this->Super::operator <<= (_node);

  if (!_node.isNull()) {
    QDomNode n = _node.firstChild();
    while(!n.isNull() ) {
      QDomElement e = n.toElement();
      if( !e.isNull() ) {
        QDomAttr a = e.attributeNode("name");
        if (!a.isNull()) {
          QString i = a.value();
          if (i == "Time") {
            this->time <<= n;
          }
        }
      }
      n = n.nextSibling();
    }
  }
}
QDomElement
TimerParameters::operator >>= (QDomNode& _node) const
{
  QDomElement e = Super::operator >>= (_node);
  QDomElement g;

  g = (this->time >>= e);
  g.setAttribute("name", "Time");

  return e;
}

void
TimerParameters::printToStream(std::ostream& ostr) const
{
  Super::printToStream(ostr);

  ostr << "Time: " << time << "sec" << std::endl;
}

MoveToPointParameters::MoveToPointParameters() :
  fastTranslation(500),
  slowTranslation(300),
  maxRotation(Miro::deg2Rad(60)),
  targetX(0.),
  targetY(0.),
  correctOrientation(false),
  angle(Miro::deg2Rad(0.)),
  radius(200),
  delta(Miro::deg2Rad(10.))
{
}

void
MoveToPointParameters::operator <<= (const QDomNode& _node)
{
  this->Super::operator <<= (_node);

  if (!_node.isNull()) {
    QDomNode n = _node.firstChild();
    while(!n.isNull() ) {
      QDomElement e = n.toElement();
      if( !e.isNull() ) {
        QDomAttr a = e.attributeNode("name");
        if (!a.isNull()) {
          QString i = a.value();
          if (i == "FastTranslation") {
            this->fastTranslation <<= n;
          }
          else if (i == "SlowTranslation") {
            this->slowTranslation <<= n;
          }
          else if (i == "MaxRotation") {
            this->maxRotation <<= n;
            this->maxRotation = Miro::deg2Rad(this->maxRotation);
          }
          else if (i == "TargetX") {
            this->targetX <<= n;
          }
          else if (i == "TargetY") {
            this->targetY <<= n;
          }
          else if (i == "CorrectOrientation") {
            this->correctOrientation <<= n;
          }
          else if (i == "Angle") {
            this->angle <<= n;
          }
          else if (i == "Radius") {
            this->radius <<= n;
          }
          else if (i == "Delta") {
            this->delta <<= n;
          }
        }
      }
      n = n.nextSibling();
    }
  }
}
QDomElement
MoveToPointParameters::operator >>= (QDomNode& _node) const
{
  QDomElement e = Super::operator >>= (_node);
  QDomElement g;

  g = (this->fastTranslation >>= e);
  g.setAttribute("name", "FastTranslation");
  g = (this->slowTranslation >>= e);
  g.setAttribute("name", "SlowTranslation");
  g = (Miro::rad2Deg(this->maxRotation) >>= e);
  g.setAttribute("name", "MaxRotation");
  g = (this->targetX >>= e);
  g.setAttribute("name", "TargetX");
  g = (this->targetY >>= e);
  g.setAttribute("name", "TargetY");
  g = (this->correctOrientation >>= e);
  g.setAttribute("name", "CorrectOrientation");
  g = (this->angle >>= e);
  g.setAttribute("name", "Angle");
  g = (this->radius >>= e);
  g.setAttribute("name", "Radius");
  g = (this->delta >>= e);
  g.setAttribute("name", "Delta");

  return e;
}

void
MoveToPointParameters::printToStream(std::ostream& ostr) const
{
  Super::printToStream(ostr);

  ostr << "FastTranslation: " << fastTranslation << "mm/s" << std::endl
       << "SlowTranslation: " << slowTranslation << "mm/s" << std::endl
       << "MaxRotation: " << Miro::rad2Deg(maxRotation)
 << "/s" << std::endl
       << "TargetX: " << targetX << "mm" << std::endl
       << "TargetY: " << targetY << "mm" << std::endl
       << "CorrectOrientation: " << correctOrientation << std::endl
       << "Angle: " << angle << std::endl
       << "Radius: " << radius << "mm" << std::endl
       << "Delta: " << delta << std::endl;
}
