// -*- c++ -*- ///////////////////////////////////////////////////////////////
// This file was auto-generated by MakeParameters
//////////////////////////////////////////////////////////////////////////////
#include "Parameters.h"

#include <miro/XmlParse.h>
#include <qdom.h>

namespace
{
  using Miro::operator<<=;
  using Miro::operator>>=;
  using Miro::operator<<;
};

DummyBehaviourParameters::DummyBehaviourParameters() :
  sendTransition(0),
  dummy(0)
{
}

void
DummyBehaviourParameters::operator <<= (const QDomNode& _node)
{
  this->Super::operator <<= (_node);

  if (!_node.isNull()) {
    QDomNode n = _node.firstChild();
    while(!n.isNull() ) {
      QDomElement e = n.toElement();
      if( !e.isNull() ) {
        QDomAttr a = e.attributeNode("name");
        if (!a.isNull()) {
          QString i = a.value();
          if (i == "SendTransition") {
            this->sendTransition <<= n;
          }
          else if (i == "Dummy") {
            this->dummy <<= n;
          }
        }
      }
      n = n.nextSibling();
    }
  }
}
QDomElement
DummyBehaviourParameters::operator >>= (QDomNode& _node) const
{
  QDomElement e = Super::operator >>= (_node);
  QDomElement g;

  g = (this->sendTransition >>= e);
  g.setAttribute("name", "SendTransition");
  g = (this->dummy >>= e);
  g.setAttribute("name", "Dummy");

  return e;
}

void
DummyBehaviourParameters::printToStream(std::ostream& ostr) const
{
  Super::printToStream(ostr);

  ostr << "SendTransition: " << sendTransition << std::endl
       << "Dummy: " << dummy << std::endl;
}

DummyBehaviourBParameters::DummyBehaviourBParameters()
{
}


DummyBehaviourDParameters::DummyBehaviourDParameters()
{
}







DummyArbiterParameters::DummyArbiterParameters()
{
}



