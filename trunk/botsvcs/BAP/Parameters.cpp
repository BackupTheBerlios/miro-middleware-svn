// -*- c++ -*- ///////////////////////////////////////////////////////////////
// This file was auto-generated by MakeParameters
//////////////////////////////////////////////////////////////////////////////
#include "Parameters.h"

#include <miro/TimeHelper.h>
#include <miro/XmlParse.h>
#include <qdom.h>

namespace Miro
{
  namespace BAP
  {

    EventBehaviourParameters::EventBehaviourParameters()
    {
    }


    TimedBehaviourParameters::TimedBehaviourParameters() :
      pace(0, 100000)
    {
    }

    void
    TimedBehaviourParameters::operator <<= (const QDomNode& _node)
    {
      this->Super::operator <<= (_node);

      if (!_node.isNull()) {
        QDomNode n = _node.firstChild();
        while(!n.isNull() ) {
          QDomElement e = n.toElement();
          if( !e.isNull() ) {
            QDomAttr a = e.attributeNode("name");
            if (!a.isNull()) {
              QString i = a.value();
              if (i == "Pace") {
                this->pace <<= n;
              }
            }
          }
          n = n.nextSibling();
        }
      }
    }
    QDomElement
    TimedBehaviourParameters::operator >>= (QDomNode& _node) const
    {
      QDomElement e = Super::operator >>= (_node);
      QDomElement g;

      g = (this->pace >>= e);
      g.setAttribute("name", "Pace");

      return e;
    }

    void
    TimedBehaviourParameters::printToStream(std::ostream& ostr) const
    {
      Super::printToStream(ostr);

      ostr << "Pace: " << pace << "sec" << std::endl;
    }

    TaskBehaviourParameters::TaskBehaviourParameters()
    {
    }



    PriorityArbiterParameters::PriorityArbiterParameters()
    {
    }


    MotionArbiterParameters::MotionArbiterParameters()
    {
    }


    PowerArbiterParameters::PowerArbiterParameters()
    {
    }


  }
}
