// -*- c++ -*- ///////////////////////////////////////////////////////////////
//
// This file is part of Miro (The Middleware For Robots)
//
// (c) 2000, 2001, 2002, 2003
// Department of Neural Information Processing, University of Ulm, Germany
//
// $Id$
// 
//////////////////////////////////////////////////////////////////////////////
#ifndef BAP_BehaviourParameters_h
#define BAP_BehaviourParameters_h

#include <iostream>
#include <qdom.h>

namespace Miro
{
  namespace BAP
  {
    // forward declarations
    class BehaviourParameters;
    class ActionPattern;
    
    //! Ostream operator for debug purposes.
    std::ostream& operator << (std::ostream& ostr, const BehaviourParameters&);

    //! Base class for all parameter classes for derived Behaviours.
    /**
     * This class should actually be generated by a parameters XML file.
     * But we need some dirty tricks, that the clean design of
     * the parameters definitions does not allow...
     *
     * @author Ingmar Baetge
     * @author Hans Utz
     */
    struct BehaviourParameters
    {
      //------------------------------------------------------------------------
      // public methods
      //------------------------------------------------------------------------

      //! Default constructor.
      BehaviourParameters();
      //! Virtual destructor.
      virtual ~BehaviourParameters();

      //! XML-Parsing operator.
      virtual void operator <<= (const QDomNode&);
      virtual QDomElement operator >>= (QDomNode& _node) const;

    protected:
      //------------------------------------------------------------------------
      // protected methods
      //------------------------------------------------------------------------

      //! Dump the BehaviourParameters to the specified output stream.
      virtual void printToStream(std::ostream&) const;

      
    private:
      //------------------------------------------------------------------------
      // private data
      //------------------------------------------------------------------------

      //! Backlink to the action pattern the parameterized behaviour belongs to.
      ActionPattern * pattern;

      //------------------------------------------------------------------------
      // friend declarations
      //------------------------------------------------------------------------

      friend class Behaviour;
      friend class ActionPattern;
      friend std::ostream& operator << (std::ostream& ostr, 
					const BehaviourParameters&);
    };
  }
}
#endif
