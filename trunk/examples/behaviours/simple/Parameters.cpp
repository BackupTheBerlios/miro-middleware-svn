// -*- c++ -*- ///////////////////////////////////////////////////////////////
// This file was auto-generated by makeParameters
//////////////////////////////////////////////////////////////////////////////
#include "Parameters.h"

#include <miro/XmlParse.h>
#include <qdom.h>

namespace
{
  using Miro::operator<<=;
  using Miro::operator>>=;
};

TactileStopParameters::TactileStopParameters()
{
}


StraightParameters::StraightParameters() :
  rotation(Miro::deg2Rad(0)),
  translation(500)
{
}

void
StraightParameters::operator <<= (const QDomNode& _node)
{
  Super::operator <<= (_node);

  if (!_node.isNull()) {
    QDomNode n = _node.firstChild();
    while(!n.isNull() ) {
      QDomElement e = n.toElement();
      if( !e.isNull() ) {
        QDomAttr a = e.attributeNode("name");
        if (!a.isNull()) {
          QString i = a.value();
          if (i == "Rotation") {
            rotation <<= n;
            rotation = Miro::deg2Rad(rotation);
          }
          else if (i == "Translation") {
            translation <<= n;
          }
        }
      }
      n = n.nextSibling();
    }
  }
}
QDomElement
StraightParameters::operator >>= (QDomNode& _node) const
{
  QDomElement e = Super::operator >>= (_node);
  QDomElement g;

  g = (rotation >>= e);
  g.setAttribute("name", "Rotation");
  g = (translation >>= e);
  g.setAttribute("name", "Translation");

  return e;
}

void
StraightParameters::printToStream(std::ostream& ostr) const
{
  Super::printToStream(ostr);

  ostr << "Rotation: " << rotation << "/s" << endl
       << "Translation: " << translation << "mm/s" << endl;
}

WanderParameters::WanderParameters() :
  maxRotation(Miro::deg2Rad(90)),
  minRotation(Miro::deg2Rad(10)),
  maxTranslation(500),
  minTranslation(200),
  thresholdChange(.20),
  thresholdStraight(.5)
{
}

void
WanderParameters::operator <<= (const QDomNode& _node)
{
  Super::operator <<= (_node);

  if (!_node.isNull()) {
    QDomNode n = _node.firstChild();
    while(!n.isNull() ) {
      QDomElement e = n.toElement();
      if( !e.isNull() ) {
        QDomAttr a = e.attributeNode("name");
        if (!a.isNull()) {
          QString i = a.value();
          if (i == "MaxRotation") {
            maxRotation <<= n;
            maxRotation = Miro::deg2Rad(maxRotation);
          }
          else if (i == "MinRotation") {
            minRotation <<= n;
            minRotation = Miro::deg2Rad(minRotation);
          }
          else if (i == "MaxTranslation") {
            maxTranslation <<= n;
          }
          else if (i == "MinTranslation") {
            minTranslation <<= n;
          }
          else if (i == "ThresholdChange") {
            thresholdChange <<= n;
          }
          else if (i == "ThresholdStraight") {
            thresholdStraight <<= n;
          }
        }
      }
      n = n.nextSibling();
    }
  }
}
QDomElement
WanderParameters::operator >>= (QDomNode& _node) const
{
  QDomElement e = Super::operator >>= (_node);
  QDomElement g;

  g = (maxRotation >>= e);
  g.setAttribute("name", "MaxRotation");
  g = (minRotation >>= e);
  g.setAttribute("name", "MinRotation");
  g = (maxTranslation >>= e);
  g.setAttribute("name", "MaxTranslation");
  g = (minTranslation >>= e);
  g.setAttribute("name", "MinTranslation");
  g = (thresholdChange >>= e);
  g.setAttribute("name", "ThresholdChange");
  g = (thresholdStraight >>= e);
  g.setAttribute("name", "ThresholdStraight");

  return e;
}

void
WanderParameters::printToStream(std::ostream& ostr) const
{
  Super::printToStream(ostr);

  ostr << "MaxRotation: " << maxRotation << "/s" << endl
       << "MinRotation: " << minRotation << "/s" << endl
       << "MaxTranslation: " << maxTranslation << "mm/s" << endl
       << "MinTranslation: " << minTranslation << "mm/s" << endl
       << "ThresholdChange: " << thresholdChange << endl
       << "ThresholdStraight: " << thresholdStraight << endl;
}

TimerParameters::TimerParameters() :
  time(10.0)
{
}

void
TimerParameters::operator <<= (const QDomNode& _node)
{
  Super::operator <<= (_node);

  if (!_node.isNull()) {
    QDomNode n = _node.firstChild();
    while(!n.isNull() ) {
      QDomElement e = n.toElement();
      if( !e.isNull() ) {
        QDomAttr a = e.attributeNode("name");
        if (!a.isNull()) {
          QString i = a.value();
          if (i == "Time") {
            time <<= n;
          }
        }
      }
      n = n.nextSibling();
    }
  }
}
QDomElement
TimerParameters::operator >>= (QDomNode& _node) const
{
  QDomElement e = Super::operator >>= (_node);
  QDomElement g;

  g = (time >>= e);
  g.setAttribute("name", "Time");

  return e;
}

void
TimerParameters::printToStream(std::ostream& ostr) const
{
  Super::printToStream(ostr);

  ostr << "Time: " << time << "sec" << endl;
}
