inline realType pixelLookupManager::byte2Real(byte b)
	{
	return byte2RealLookup[b];
	}

inline realType pixelLookupManager::rgb2RealGray(byte r, byte g, byte b)
	{
	return realRedLookup[r] + realGreenLookup[g] + realBlueLookup[b];
	}

inline byte pixelLookupManager::rgb2Gray(byte r, byte g, byte b)
	{
	return redLookup[r] + greenLookup[g] + blueLookup[b];
	}

inline pixelGray8::pixelGray8()
	{
	g = 0;
	}

inline pixelGray8::pixelGray8(const uint8& v)
	{
	*((uint8*)this) = v;
	}

inline pixelGray8::pixelGray8(const pixelGray8& v)
	{
	g = v.g;
	}

inline pixelGray8::pixelGray8(const pixelGray16& v)
	{
	g = v.g >> 8;
	}

inline pixelGray8::pixelGray8(const pixelRGB16before15& v)
	{
	g = ((v.r + v.g + v.b) / 3) << 3;
	}

inline pixelGray8::pixelGray8(const pixelRGB16behind15& v)
	{
	g = ((v.r + v.g + v.b) / 3) << 3;
	}

inline pixelGray8::pixelGray8(const pixelRGB24& v)
	{
	g = pixelLookup.rgb2Gray(v.r, v.g, v.b);
	//	g = (v.r + v.g + v.b) / 3;
	}

inline pixelGray8::pixelGray8(const pixelRGB24LE& v)
	{
	g = (v.r + v.g + v.b) / 3;
	}

inline pixelGray8::pixelGray8(const pixelRGB32before24& v)
	{
	g = (v.r + v.g + v.b) / 3;
	}

inline pixelGray8::pixelGray8(const pixelRGB32behind24& v)
	{
	g = (v.r + v.g + v.b) / 3;
	}

inline pixelGray8::pixelGray8(const pixelRGB32before24LE& v)
	{
	g = (v.r + v.g + v.b) / 3;
	}

inline pixelGray8::pixelGray8(const pixelRGB32behind24LE& v)
	{
	g = (v.r + v.g + v.b) / 3;
	}

inline pixelGray8::pixelGray8(const pixelHSV32& v)
	{
	byte	r1, g1, b1;
	pixelHSV32::hsv2rgb(r1, g1, b1, v);
	g = (byte)(((shortintType)r1 + (shortintType)g1 + (shortintType)b1) / 3);
	}


inline pixelGray8& pixelGray8::operator=(const uint8& v)
	{
	*((uint8*)this) = v;
	return *this;
	}

inline pixelGray8& pixelGray8::operator=(const pixelGray8& v)
	{
	g = v.g;
	return *this;
	}

inline pixelGray8& pixelGray8::operator=(const pixelGray16& v)
	{
	g = v.g >> 8;
	return *this;
	}

inline pixelGray8& pixelGray8::operator=(const pixelRGB16before15& v)
	{
	g = ((v.r + v.g + v.b) / 3) << 3;
	return *this;
	}

inline pixelGray8& pixelGray8::operator=(const pixelRGB16behind15& v)
	{
	g = ((v.r + v.g + v.b) / 3) << 3;
	return *this;
	}

inline pixelGray8& pixelGray8::operator=(const pixelRGB24& v)
	{
	g = (v.r + v.g + v.b) / 3;
	return *this;
	}

inline pixelGray8& pixelGray8::operator=(const pixelRGB24LE& v)
	{
	g = (v.r + v.g + v.b) / 3;
	return *this;
	}

inline pixelGray8& pixelGray8::operator=(const pixelRGB32before24& v)
	{
	g = (v.r + v.g + v.b) / 3;
	return *this;
	}

inline pixelGray8& pixelGray8::operator=(const pixelRGB32behind24& v)
	{
	g = (v.r + v.g + v.b) / 3;
	return *this;
	}

inline pixelGray8& pixelGray8::operator=(const pixelRGB32before24LE& v)
	{
	g = (v.r + v.g + v.b) / 3;
	return *this;
	}

inline pixelGray8& pixelGray8::operator=(const pixelRGB32behind24LE& v)
	{
	g = (v.r + v.g + v.b) / 3;
	return *this;
	}

inline pixelGray8& pixelGray8::operator=(const pixelHSV32& v)
	{
	byte	r1, g1, b1;
	pixelHSV32::hsv2rgb(r1, g1, b1, v);
	g = (byte)(((shortintType)r1 + (shortintType)g1 + (shortintType)b1) / 3);
	return *this;
	}


inline pixelGray16::pixelGray16()
	{
	g = 0;
	}

inline pixelGray16::pixelGray16(const uint16& v)
	{
	*((uint16*)this) = v;
	}

inline pixelGray16::pixelGray16(const pixelGray8& v)
	{
	g = v.g << 8;
	}

inline pixelGray16::pixelGray16(const pixelGray16& v)
	{
	g = v.g;
	}

inline pixelGray16::pixelGray16(const pixelRGB24& v)
	{
	g = ((v.r + v.g + v.b) / 3) << 8;
	}

inline pixelGray16::pixelGray16(const pixelRGB32before24& v)
	{
	g = ((v.r + v.g + v.b) / 3) << 8;
	}


inline pixelGray16& pixelGray16::operator=(const uint16& v)
	{
	*((uint16*)this) = v;
	return *this;
	}

inline pixelGray16& pixelGray16::operator=(const pixelGray8& v)
	{
	g = v.g << 8;
	return *this;
	}

inline pixelGray16& pixelGray16::operator=(const pixelGray16& v)
	{
	g = v.g;
	return *this;
	}

inline pixelGray16& pixelGray16::operator=(const pixelRGB24& v)
	{
	g = ((v.r + v.g + v.b) / 3) << 8;
	return *this;
	}

inline pixelGray16& pixelGray16::operator=(const pixelRGB32before24& v)
	{
	g = ((v.r + v.g + v.b) / 3) << 8;
	return *this;
	}


inline pixelRealGray::pixelRealGray()
	{
	g = 0.0;
	}

inline pixelRealGray::pixelRealGray(const shortRealType& v)
	{
	g = v;
	}

inline pixelRealGray::pixelRealGray(const pixelGray8& v)
	{
	g = (shortRealType)v.g / (shortRealType)kMaxComponent8;
	}

inline pixelRealGray::pixelRealGray(const pixelGray16& v)
	{
	g = (shortRealType)v.g / (shortRealType)kMaxComponent16;
	}

inline pixelRealGray::pixelRealGray(const pixelRealGray& v)
	{
	g = v.g;
	}

inline pixelRealGray::pixelRealGray(const pixelRGB24& v)
	{
	g = ((shortRealType)v.r + (shortRealType)v.g + (shortRealType)v.b) / (3.0 * (shortRealType)kMaxComponent8);
	}

inline pixelRealGray::pixelRealGray(const pixelRGB32before24& v)
	{
	g = ((shortRealType)v.r + (shortRealType)v.g + (shortRealType)v.b) / (3.0 * (shortRealType)kMaxComponent8);
	}

inline pixelRealGray::pixelRealGray(const pixelRealRGB& v)
	{
	g = (v.r + v.g + v.b) / 3.0;
	}

inline pixelRealGray::pixelRealGray(const pixelHSV32& v)
	{
	byte	r1, g1, b1;
	pixelHSV32::hsv2rgb(r1, g1, b1, v);
	g = ((shortRealType)r1 + (shortRealType)g1 + (shortRealType)b1) / (3.0 * (shortRealType)kMaxComponent8);
	}


inline pixelRealGray& pixelRealGray::operator=(const shortRealType& v)
	{
	g = v;
	return *this;
	}

inline pixelRealGray& pixelRealGray::operator=(const pixelGray8& v)
	{
	g = (shortRealType)v.g / (shortRealType)kMaxComponent8;
	return *this;
	}

inline pixelRealGray& pixelRealGray::operator=(const pixelGray16& v)
	{
	g = (shortRealType)v.g / (shortRealType)kMaxComponent16;
	return *this;
	}

inline pixelRealGray& pixelRealGray::operator=(const pixelRGB24& v)
	{
	g = ((shortRealType)v.r + (shortRealType)v.g + (shortRealType)v.b) / (3.0 * (shortRealType)kMaxComponent8);
	return *this;
	}

inline pixelRealGray& pixelRealGray::operator=(const pixelRGB32before24& v)
	{
	g = ((shortRealType)v.r + (shortRealType)v.g + (shortRealType)v.b) / (3.0 * (shortRealType)kMaxComponent8);
	return *this;
	}

inline pixelRealGray& pixelRealGray::operator=(const pixelRealRGB& v)
	{
	g = (v.r + v.g + v.b) / 3.0;
	return *this;
	}

inline pixelRealGray& pixelRealGray::operator=(const pixelHSV32& v)
	{
	byte	r1, g1, b1;
	pixelHSV32::hsv2rgb(r1, g1, b1, v);
	g = ((shortRealType)r1 + (shortRealType)g1 + (shortRealType)b1) / (3.0 * (shortRealType)kMaxComponent8);
	return *this;
	}


inline pixelRGB16before15::pixelRGB16before15()
	{
	r = 0;
	g = 0;
	b = 0;
	}

inline pixelRGB16before15::pixelRGB16before15(const uint16& v)
	{
	*((uint16*)this) = v;
	}

inline pixelRGB16before15::pixelRGB16before15(const pixelGray8& v)
	{
	r = v.g >> 3;
	g = v.g >> 3;
	b = v.g >> 3;
	}

inline pixelRGB16before15::pixelRGB16before15(const pixelRGB16before15& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}

inline pixelRGB16before15::pixelRGB16before15(const pixelRGB24& v)
	{
	r = v.r >> 3;
	g = v.g >> 3;
	b = v.b >> 3;
	}

inline pixelRGB16before15::pixelRGB16before15(const pixelRGB32before24& v)
	{
	r = v.r >> 3;
	g = v.g >> 3;
	b = v.b >> 3;
	}


inline pixelRGB16before15& pixelRGB16before15::operator=(const uint16& v)
	{
	*((uint16*)this) = v;
	return *this;
	}

inline pixelRGB16before15& pixelRGB16before15::operator=(const pixelGray8& v)
	{
	r = v.g >> 3;
	g = v.g >> 3;
	b = v.g >> 3;
	return *this;
	}

inline pixelRGB16before15& pixelRGB16before15::operator=(const pixelRGB16before15& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}

inline pixelRGB16before15& pixelRGB16before15::operator=(const pixelRGB24& v)
	{
	r = v.r >> 3;
	g = v.g >> 3;
	b = v.b >> 3;
	return *this;
	}

inline pixelRGB16before15& pixelRGB16before15::operator=(const pixelRGB32before24& v)
	{
	r = v.r >> 3;
	g = v.g >> 3;
	b = v.b >> 3;
	return *this;
	}


inline pixelRGB16behind15::pixelRGB16behind15()
	{
	r = 0;
	g = 0;
	b = 0;
	}

inline pixelRGB16behind15::pixelRGB16behind15(const uint16& v)
	{
	*((uint16*)this) = v;
	}

inline pixelRGB16behind15::pixelRGB16behind15(const pixelGray8& v)
	{
	r = v.g >> 3;
	g = v.g >> 3;
	b = v.g >> 3;
	}

inline pixelRGB16behind15::pixelRGB16behind15(const pixelRGB16behind15& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}

inline pixelRGB16behind15::pixelRGB16behind15(const pixelRGB24& v)
	{
	r = v.r >> 3;
	g = v.g >> 3;
	b = v.b >> 3;
	}

inline pixelRGB16behind15::pixelRGB16behind15(const pixelRGB32before24& v)
	{
	r = v.r >> 3;
	g = v.g >> 3;
	b = v.b >> 3;
	}


inline pixelRGB16behind15& pixelRGB16behind15::operator=(const uint16& v)
	{
	*((uint16*)this) = v;
	return *this;
	}

inline pixelRGB16behind15& pixelRGB16behind15::operator=(const pixelGray8& v)
	{
	r = v.g >> 3;
	g = v.g >> 3;
	b = v.g >> 3;
	return *this;
	}

inline pixelRGB16behind15& pixelRGB16behind15::operator=(const pixelRGB16behind15& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}

inline pixelRGB16behind15& pixelRGB16behind15::operator=(const pixelRGB24& v)
	{
	r = v.r >> 3;
	g = v.g >> 3;
	b = v.b >> 3;
	return *this;
	}

inline pixelRGB16behind15& pixelRGB16behind15::operator=(const pixelRGB32before24& v)
	{
	r = v.r >> 3;
	g = v.g >> 3;
	b = v.b >> 3;
	return *this;
	}


inline pixelRGB24::pixelRGB24()
	{
	r = 0;
	g = 0;
	b = 0;
	}

inline pixelRGB24::pixelRGB24(uint8 red, uint8 green, uint8 blue)
	{
	r = red;
	g = green;
	b = blue;
	}

inline pixelRGB24::pixelRGB24(const pixelGray8& v)
	{
	r = v.g;
	g = v.g;
	b = v.g;
	}

inline pixelRGB24::pixelRGB24(const pixelGray16& v)
	{
	r = v.g >> 8;
	g = v.g >> 8;
	b = v.g >> 8;
	}

inline pixelRGB24::pixelRGB24(const pixelRGB16before15& v)
	{
	r = v.r << 3;
	g = v.g << 3;
	b = v.b << 3;
	}

inline pixelRGB24::pixelRGB24(const pixelRGB16behind15& v)
	{
	r = v.r << 3;
	g = v.g << 3;
	b = v.b << 3;
	}

inline pixelRGB24::pixelRGB24(const pixelRGB24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}

inline pixelRGB24::pixelRGB24(const pixelRGB24LE& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}

inline pixelRGB24::pixelRGB24(const pixelRGB32before24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}

inline pixelRGB24::pixelRGB24(const pixelRGB32behind24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}

inline pixelRGB24::pixelRGB24(const pixelRGB32before24LE& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}

inline pixelRGB24::pixelRGB24(const pixelRGB32behind24LE& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}

inline pixelRGB24::pixelRGB24(const pixelHSV32& v)
	{
	pixelHSV32::hsv2rgb(r, g, b, v);
	}


inline pixelRGB24& pixelRGB24::operator=(const pixelGray8& v)
	{
	r = v.g;
	g = v.g;
	b = v.g;
	return *this;
	}

inline pixelRGB24& pixelRGB24::operator=(const pixelGray16& v)
	{
	r = v.g >> 8;
	g = v.g >> 8;
	b = v.g >> 8;
	return *this;
	}

inline pixelRGB24& pixelRGB24::operator=(const pixelRGB16before15& v)
	{
	r = v.r << 3;
	g = v.g << 3;
	b = v.b << 3;
	return *this;
	}

inline pixelRGB24& pixelRGB24::operator=(const pixelRGB16behind15& v)
	{
	r = v.r << 3;
	g = v.g << 3;
	b = v.b << 3;
	return *this;
	}

inline pixelRGB24& pixelRGB24::operator=(const pixelRGB24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}

inline pixelRGB24& pixelRGB24::operator=(const pixelRGB24LE& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}

inline pixelRGB24& pixelRGB24::operator=(const pixelRGB32before24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}

inline pixelRGB24& pixelRGB24::operator=(const pixelRGB32behind24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}

inline pixelRGB24& pixelRGB24::operator=(const pixelRGB32before24LE& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}

inline pixelRGB24& pixelRGB24::operator=(const pixelRGB32behind24LE& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}

inline pixelRGB24& pixelRGB24::operator=(const pixelHSV32& v)
	{
	#ifdef macintosh
	pixelHSV32::hsv2rgb(r, g, b, v);
	#else
	byte	r1, g1, b1;
	pixelHSV32::hsv2rgb(r1, g1, b1, v);
	r = r1;
	g = g1;
	b = b1;
	#endif
	return *this;
	}


inline pixelRGB24LE::pixelRGB24LE()
	{
	r = 0;
	g = 0;
	b = 0;
	}

inline pixelRGB24LE::pixelRGB24LE(const pixelGray8& v)
	{
	r = v.g;
	g = v.g;
	b = v.g;
	}

inline pixelRGB24LE::pixelRGB24LE(const pixelRGB24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}

inline pixelRGB24LE::pixelRGB24LE(const pixelRGB24LE& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}

inline pixelRGB24LE::pixelRGB24LE(const pixelRGB32before24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}


inline pixelRGB24LE& pixelRGB24LE::operator=(const pixelGray8& v)
	{
	r = v.g;
	g = v.g;
	b = v.g;
	return *this;
	}

inline pixelRGB24LE& pixelRGB24LE::operator=(const pixelRGB24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}

inline pixelRGB24LE& pixelRGB24LE::operator=(const pixelRGB24LE& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}

inline pixelRGB24LE& pixelRGB24LE::operator=(const pixelRGB32before24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}


inline pixelRGB32before24::pixelRGB32before24()
	{
	r = 0;
	g = 0;
	b = 0;
	}

inline pixelRGB32before24::pixelRGB32before24(const uint32& v)
	{
	*((uint32*)this) = v;
	}

inline pixelRGB32before24::pixelRGB32before24(uint8 red, uint8 green, uint8 blue)
	{
	r = red;
	g = green;
	b = blue;
	}

inline pixelRGB32before24::pixelRGB32before24(const pixelGray8& v)
	{
	r = v.g;
	g = v.g;
	b = v.g;
	}

inline pixelRGB32before24::pixelRGB32before24(const pixelGray16& v)
	{
	r = v.g >> 8;
	g = v.g >> 8;
	b = v.g >> 8;
	}

inline pixelRGB32before24::pixelRGB32before24(const pixelRGB16before15& v)
	{
	r = v.r << 3;
	g = v.g << 3;
	b = v.b << 3;
	}

inline pixelRGB32before24::pixelRGB32before24(const pixelRGB16behind15& v)
	{
	r = v.r << 3;
	g = v.g << 3;
	b = v.b << 3;
	}

inline pixelRGB32before24::pixelRGB32before24(const pixelRGB24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}

inline pixelRGB32before24::pixelRGB32before24(const pixelRGB24LE& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}

inline pixelRGB32before24::pixelRGB32before24(const pixelRGB32before24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}

inline pixelRGB32before24::pixelRGB32before24(const pixelRGB32behind24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}

inline pixelRGB32before24::pixelRGB32before24(const pixelRGB32before24LE& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}

inline pixelRGB32before24::pixelRGB32before24(const pixelRGB32behind24LE& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}

inline pixelRGB32before24::pixelRGB32before24(const pixelHSV32& v)
	{
	#ifdef macintosh
	pixelHSV32::hsv2rgb(r, g, b, v);
	#else
	byte	r1, g1, b1;
	pixelHSV32::hsv2rgb(r1, g1, b1, v);
	r = r1;
	g = g1;
	b = b1;
	#endif
	}

inline pixelRGB32before24& pixelRGB32before24::operator=(const uint32& v)
	{
	*((uint32*)this) = v;
	return *this;
	}

inline pixelRGB32before24& pixelRGB32before24::operator=(const pixelGray8& v)
	{
	r = v.g;
	g = v.g;
	b = v.g;
	return *this;
	}

inline pixelRGB32before24& pixelRGB32before24::operator=(const pixelGray16& v)
	{
	r = v.g >> 8;
	g = v.g >> 8;
	b = v.g >> 8;
	return *this;
	}

inline pixelRGB32before24& pixelRGB32before24::operator=(const pixelRGB16before15& v)
	{
	r = v.r << 3;
	g = v.g << 3;
	b = v.b << 3;
	return *this;
	}

inline pixelRGB32before24& pixelRGB32before24::operator=(const pixelRGB16behind15& v)
	{
	r = v.r << 3;
	g = v.g << 3;
	b = v.b << 3;
	return *this;
	}

inline pixelRGB32before24& pixelRGB32before24::operator=(const pixelRGB24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}

inline pixelRGB32before24& pixelRGB32before24::operator=(const pixelRGB24LE& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}

inline pixelRGB32before24& pixelRGB32before24::operator=(const pixelRGB32before24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}

inline pixelRGB32before24& pixelRGB32before24::operator=(const pixelRGB32behind24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}

inline pixelRGB32before24& pixelRGB32before24::operator=(const pixelRGB32before24LE& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}

inline pixelRGB32before24& pixelRGB32before24::operator=(const pixelRGB32behind24LE& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}

inline pixelRGB32before24& pixelRGB32before24::operator=(const pixelHSV32& v)
	{
	#ifdef macintosh
	pixelHSV32::hsv2rgb(r, g, b, v);
	#else
	byte	r1, g1, b1;
	pixelHSV32::hsv2rgb(r1, g1, b1, v);
	r = r1;
	g = g1;
	b = b1;
	#endif
	return *this;
	}


inline pixelRGB32behind24::pixelRGB32behind24()
	{
	r = 0;
	g = 0;
	b = 0;
	}

inline pixelRGB32behind24::pixelRGB32behind24(const uint32& v)
	{
	*((uint32*)this) = v;
	}

inline pixelRGB32behind24::pixelRGB32behind24(const pixelGray8& v)
	{
	r = v.g;
	g = v.g;
	b = v.g;
	}

inline pixelRGB32behind24::pixelRGB32behind24(const pixelRGB24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}

inline pixelRGB32behind24::pixelRGB32behind24(const pixelRGB32before24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}

inline pixelRGB32behind24::pixelRGB32behind24(const pixelRGB32behind24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}


inline pixelRGB32behind24& pixelRGB32behind24::operator=(const uint32& v)
	{
	*((uint32*)this) = v;
	return *this;
	}

inline pixelRGB32behind24& pixelRGB32behind24::operator=(const pixelGray8& v)
	{
	r = v.g;
	g = v.g;
	b = v.g;
	return *this;
	}

inline pixelRGB32behind24& pixelRGB32behind24::operator=(const pixelRGB24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}

inline pixelRGB32behind24& pixelRGB32behind24::operator=(const pixelRGB32before24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}

inline pixelRGB32behind24& pixelRGB32behind24::operator=(const pixelRGB32behind24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}


inline pixelRGB32before24LE::pixelRGB32before24LE()
	{
	r = 0;
	g = 0;
	b = 0;
	}

inline pixelRGB32before24LE::pixelRGB32before24LE(const uint32& v)
	{
	*((uint32*)this) = v;
	}

inline pixelRGB32before24LE::pixelRGB32before24LE(const pixelGray8& v)
	{
	r = v.g;
	g = v.g;
	b = v.g;
	}

inline pixelRGB32before24LE::pixelRGB32before24LE(const pixelRGB24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}

inline pixelRGB32before24LE::pixelRGB32before24LE(const pixelRGB32before24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}

inline pixelRGB32before24LE::pixelRGB32before24LE(const pixelRGB32before24LE& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}


inline pixelRGB32before24LE& pixelRGB32before24LE::operator=(const uint32& v)
	{
	*((uint32*)this) = v;
	return *this;
	}

inline pixelRGB32before24LE& pixelRGB32before24LE::operator=(const pixelGray8& v)
	{
	r = v.g;
	g = v.g;
	b = v.g;
	return *this;
	}

inline pixelRGB32before24LE& pixelRGB32before24LE::operator=(const pixelRGB24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}

inline pixelRGB32before24LE& pixelRGB32before24LE::operator=(const pixelRGB32before24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}

inline pixelRGB32before24LE& pixelRGB32before24LE::operator=(const pixelRGB32before24LE& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}


inline pixelRGB32behind24LE::pixelRGB32behind24LE()
	{
	r = 0;
	g = 0;
	b = 0;
	}

inline pixelRGB32behind24LE::pixelRGB32behind24LE(const uint32& v)
	{
	*((uint32*)this) = v;
	}

inline pixelRGB32behind24LE::pixelRGB32behind24LE(const pixelGray8& v)
	{
	r = v.g;
	g = v.g;
	b = v.g;
	}

inline pixelRGB32behind24LE::pixelRGB32behind24LE(const pixelRGB24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}

inline pixelRGB32behind24LE::pixelRGB32behind24LE(const pixelRGB32before24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}

inline pixelRGB32behind24LE::pixelRGB32behind24LE(const pixelRGB32behind24LE& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}


inline pixelRGB32behind24LE& pixelRGB32behind24LE::operator=(const uint32& v)
	{
	*((uint32*)this) = v;
	return *this;
	}

inline pixelRGB32behind24LE& pixelRGB32behind24LE::operator=(const pixelGray8& v)
	{
	r = v.g;
	g = v.g;
	b = v.g;
	return *this;
	}

inline pixelRGB32behind24LE& pixelRGB32behind24LE::operator=(const pixelRGB24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}

inline pixelRGB32behind24LE& pixelRGB32behind24LE::operator=(const pixelRGB32before24& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}

inline pixelRGB32behind24LE& pixelRGB32behind24LE::operator=(const pixelRGB32behind24LE& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}

inline pixelRealRGB::pixelRealRGB()
	{
	r = 0;
	g = 0;
	b = 0;
	}

inline pixelRealRGB::pixelRealRGB(const shortRealType& r, const shortRealType& g, const shortRealType& b)
	{
	pixelRealRGB::r = r;
	pixelRealRGB::g = g;
	pixelRealRGB::b = b;
	}

inline pixelRealRGB::pixelRealRGB(const pixelGray8& v)
	{
	r = g = b = (shortRealType)v.g / (shortRealType)kMaxComponent8;
	}

inline pixelRealRGB::pixelRealRGB(const pixelGray16& v)
	{
	r = g = b = (shortRealType)v.g / (shortRealType)kMaxComponent16;
	}

inline pixelRealRGB::pixelRealRGB(const pixelRealGray& v)
	{
	r = g = b = v.g;
	}

inline pixelRealRGB::pixelRealRGB(const pixelRGB24& v)
	{
	r = (shortRealType)v.r / (shortRealType)kMaxComponent8;
	g = (shortRealType)v.g / (shortRealType)kMaxComponent8;
	b = (shortRealType)v.b / (shortRealType)kMaxComponent8;
	}

inline pixelRealRGB::pixelRealRGB(const pixelRGB32before24& v)
	{
	r = (shortRealType)v.r / (shortRealType)kMaxComponent8;
	g = (shortRealType)v.g / (shortRealType)kMaxComponent8;
	b = (shortRealType)v.b / (shortRealType)kMaxComponent8;
	}

inline pixelRealRGB::pixelRealRGB(const pixelRealRGB& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	}

inline pixelRealRGB::pixelRealRGB(const pixelHSV32& v)
	{
	byte	r1, g1, b1;
	pixelHSV32::hsv2rgb(r1, g1, b1, v);
	r = (shortRealType)r1 / (shortRealType)kMaxComponent8;
	g = (shortRealType)g1 / (shortRealType)kMaxComponent8;
	b = (shortRealType)b1 / (shortRealType)kMaxComponent8;
	}

/*
inline pixelRealRGB::pixelRealRGB(const pixelRealHSV& v)
	{
	}
*/
inline pixelRealRGB& pixelRealRGB::operator=(const pixelGray8& v)
	{
	r = g = b = (shortRealType)v.g / (shortRealType)kMaxComponent8;
	return *this;
	}

inline pixelRealRGB& pixelRealRGB::operator=(const pixelGray16& v)
	{
	r = g = b = (shortRealType)v.g / (shortRealType)kMaxComponent16;
	return *this;
	}

inline pixelRealRGB& pixelRealRGB::operator=(const pixelRealGray& v)
	{
	r = g = b = v.g;
	return *this;
	}

inline pixelRealRGB& pixelRealRGB::operator=(const pixelRGB24& v)
	{
	r = (shortRealType)v.r / (shortRealType)kMaxComponent8;
	g = (shortRealType)v.g / (shortRealType)kMaxComponent8;
	b = (shortRealType)v.b / (shortRealType)kMaxComponent8;
	return *this;
	}

inline pixelRealRGB& pixelRealRGB::operator=(const pixelRGB32before24& v)
	{
	r = (shortRealType)v.r / (shortRealType)kMaxComponent8;
	g = (shortRealType)v.g / (shortRealType)kMaxComponent8;
	b = (shortRealType)v.b / (shortRealType)kMaxComponent8;
	return *this;
	}

inline pixelRealRGB& pixelRealRGB::operator=(const pixelRealRGB& v)
	{
	r = v.r;
	g = v.g;
	b = v.b;
	return *this;
	}

inline pixelRealRGB& pixelRealRGB::operator=(const pixelHSV32& v)
	{
	byte	r1, g1, b1;
	pixelHSV32::hsv2rgb(r1, g1, b1, v);
	r = (shortRealType)r1 / (shortRealType)kMaxComponent8;
	g = (shortRealType)g1 / (shortRealType)kMaxComponent8;
	b = (shortRealType)b1 / (shortRealType)kMaxComponent8;
	return *this;
	}
/*
inline pixelRealRGB& pixelRealRGB::operator=(const pixelRealHSV& v)
	{
	byte	r1, g1, b1;
	pixelHSV32::hsv2rgb(r1, g1, b1, v.h, v.s, v.v);
	r = (shortRealType)r1 / (shortRealType)kMaxComponent8;
	g = (shortRealType)g1 / (shortRealType)kMaxComponent8;
	b = (shortRealType)b1 / (shortRealType)kMaxComponent8;
	return *this;
	}
*/

/**
	pixelHSV32
**/
inline pixelHSV32::pixelHSV32()
	{
	}

inline pixelHSV32::pixelHSV32(const uint32&)
	{
	*((uint32*)this) = v;
	}

inline pixelHSV32::pixelHSV32(uint16 hue, uint8 sat, uint8 val)
	{
	h = hue;
	s = sat;
	v = val;
	}

inline pixelHSV32::pixelHSV32(const pixelGray8& p)
	{
	h = 0;
	s = 0;
	v = p.g;
	}

inline pixelHSV32::pixelHSV32(const pixelRGB24& p)
	{
	rgb2hsv(*this, p.r, p.g, p.b);
	}

inline pixelHSV32::pixelHSV32(const pixelRGB32before24& p)
	{
	rgb2hsv(*this, p.r, p.g, p.b);
	}

inline pixelHSV32::pixelHSV32(const pixelHSV32& p)
	{
	h = p.h;
	s = p.s;
	v = p.v;
	}

inline pixelHSV32& pixelHSV32::operator=(const uint32& p)
	{
	*((uint32*)this) = p;
	return *this;
	}

inline pixelHSV32& pixelHSV32::operator=(const pixelGray8& p)
	{
	h = 0;
	s = 0;
	v = p.g;
	return *this;
	}

inline pixelHSV32& pixelHSV32::operator=(const pixelRGB24& p)
	{
	rgb2hsv(*this, p.r, p.g, p.b);
	return *this;
	}

inline pixelHSV32& pixelHSV32::operator=(const pixelRGB32before24& p)
	{
	rgb2hsv(*this, p.r, p.g, p.b);
	return *this;
	}

inline pixelHSV32& pixelHSV32::operator=(const pixelHSV32& p)
	{
	h = p.h;
	s = p.s;
	v = p.v;
	return *this;
	}
		
inline realType pixelHSV32::hue()
	{
	return ((realType)h * 360.0)/kMaxComponentReal;
	}
		
inline uint16 pixelHSV32::integerHue()
	{
	return ((uint32)h * 360)/kMaxComponent16;
	}
