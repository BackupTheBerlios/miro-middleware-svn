// -*- idl -*- ///////////////////////////////////////////////////////////////
//
// This file is part of Miro (The Middleware for Robots)
// Copyright (C) 1999-2005
// Department of Neuroinformatics, University of Ulm, Germany
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation; either version 2, or (at your option)
// any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//
// $Id$
//
#ifndef CanonCamera_idl
#define CanonCamera_idl

#include "Exception.idl"
#include "CameraControl.idl"

module Miro
{
  //! Interface for a zoom camera.
  /** 
   * This interface is deprecated.
   * Use CanonCameraControl instead. Although the methods stay the same,
   * their semantic does not, so be careful.
   * @author Guillem Pages Gassull
   */
  interface CanonCamera
    {
    //! Set the zoom factor.
    /**
     * @param factor is specified in percentage.
     * @throw EOutOfBounds
     * is thrown if the specified factor is not a percentage
     * @throw EDevIO
     * is thrown to indicate low level device problems.
     */
      void setZoom(in short value) raises(EDevIO, EOutOfBounds, ETimeOut);
      //! Get the current zoom factor.
    /**
     * @return The zoom factor, specified in percentage.
     * @throw EDevIO
     * is thrown to indicate low level device problems.
     */
      short getZoom() raises(EDevIO, ETimeOut);

    //! Set the focus factor.
    /**
     * @param factor is specified in percentage (0 - far / 100 - near).
     * @throw EOutOfBounds
     * is thrown if the specified factor is not a percentage
     * @throw EDevIO
     * is thrown to indicate low level device problems.
     */
      void setFocus(in short value) raises (EDevIO, EOutOfBounds, ETimeOut);
    //! Get the current focus factor.
    /**
     * @return The focus factor, specified in percentage (0 - far / 100 - near).
     * @throw EDevIO
     * is thrown to indicate low level device problems.
     */
      short getFocus() raises(EDevIO, ETimeOut);
    //! Set the camera to autoFocus mode
    /**
     * @throw EDevIO
     * is thrown to indicate low level device problems.
     */
      void autoFocus() raises(EDevIO, ETimeOut);
    //! Get the focusing range for the current zoom position
    /**
     * @return The focusing range for the current position
     * @throw EDevIO
     * is thrown to indicate low level device problems.
     */
      FocusRangeIDL getFocusRange() raises(EDevIO, ETimeOut);


    void setAEoff() raises (EDevIO, ETimeOut);
    void setAEon() raises (EDevIO,  ETimeOut);
    void setAE(in short value) raises (EDevIO, ETimeOut);
    void setIrisAssignment(in short value) raises (EDevIO, ETimeOut);
//    void setAGCGain(in short value) raises (EDevIO, ETimeOut);
//    void setShutterSpeed(in short value) raises (EDevIO, ETimeOut);


  };
};
#endif /* CanonCamera_idl */
