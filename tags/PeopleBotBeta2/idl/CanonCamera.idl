// -*- c++ -*- ///////////////////////////////////////////////////////////////
//
// This file is part of Miro (The Middleware For Robots)
//
// (c) 2002
// Department of Neural Information Processing, University of Ulm, Germany
//
// $Id$
// 
//////////////////////////////////////////////////////////////////////////////
#ifndef CanonCamera_idl
#define CanonCamera_idl

#include "Exception.idl"

module Miro
{
  //! Struct representing the focus limits in the current zoom position
  struct FocusRangeIDL
  {
    //! Minimal focus position (far).
    short min;
    //! Maximal focus position (near).
    short max;
  };
    
  
  //! Interface for a zoom camera.
  /** 
   * @author Guillem Pages Gassull
   */
  interface CanonCamera
    {
    //! Set the zoom factor.
    /**
     * @param factor is specified in percentage.
     * @throw EOutOfBounds
     * is thrown if the specified factor is not a percentage
     * @throw EDevIO
     * is thrown to indicate low level device problems.
     */
    void setZoom(in short value) raises(EDevIO, EOutOfBounds, ETimeOut);
    //! Get the current zoom factor.
    /**
     * @return The zoom factor, specified in percentage.
     * @throw EDevIO
     * is thrown to indicate low level device problems.
     */
    short getZoom() raises(EDevIO, ETimeOut);

    //! Set the focus factor.
    /**
     * @param factor is specified in percentage (0 - far / 100 - near).
     * @throw EOutOfBounds
     * is thrown if the specified factor is not a percentage
     * @throw EDevIO
     * is thrown to indicate low level device problems.
     */
    void setFocus(in short value) raises (EDevIO, EOutOfBounds, ETimeOut);
    //! Get the current focus factor.
    /**
     * @return The focus factor, specified in percentage (0 - far / 100 - near).
     * @throw EDevIO
     * is thrown to indicate low level device problems.
     */
    short getFocus() raises(EDevIO, ETimeOut);
    //! Set the camera to autoFocus mode
    /*
     * @throw EDevIO
     * is thrown to indicate low level device problems.
     */
    void autoFocus() raises(EDevIO, ETimeOut);
    //! Get the focusing range for the current zoom position
    /*
     * @return The focusing range for the current position
     * @throw EDevIO
     * is thrown to indicate low level device problems.
     */
    FocusRangeIDL getFocusRange() raises(EDevIO, ETimeOut);

  };
};
#endif /* CanonCamera_idl */
