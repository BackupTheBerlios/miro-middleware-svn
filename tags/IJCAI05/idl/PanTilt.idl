// -*- c++ -*- ///////////////////////////////////////////////////////////////
//
// This file is part of Miro (The Middleware For Robots)
//
// (c) 2000, 2001, 2002, 2003, 2004, 2005
// Department of Neural Information Processing, University of Ulm, Germany
//
// $Id$
// 
//////////////////////////////////////////////////////////////////////////////
#ifndef PanTilt_idl
#define PanTilt_idl

#include "Tilt.idl"
#include "Pan.idl"

module Miro
{
  //! Struct representing a pantilt position.
  struct PanTiltPositionIDL
  {
    //! Pan anlge in rad.
    float     panValue;
    //! Tilt anlge in rad.
    float     tiltValue;
  };


  //! Struct representing a pantilt limits  configuration.
  struct PanTiltLimitsIDL
  {
    //! Panning limits.
    PanLimitsIDL pan;
    //! Tilting limit
    TiltLimitsIDL tilt;
  };


  //! Interface to a pantilt unit.
  /** 
   * @author Hans Utz
   */
  interface PanTilt : Pan, Tilt
  {
    //! Get the current panTilt position. 
    /**
     * @return The current panning and tilting angles.
     * @throw EDevIO
     * is thrown to indicate low level device problems.
     */
    PanTiltPositionIDL getPosition() raises(EDevIO);

    //! Get the target panTilt position. 
    /**
     * @return The target panning and tilting angles.
     */
    PanTiltPositionIDL getTargetPosition();

    //! Set the desired pantilt position.
    /**
     * @param destination The desired panning and tilting angles.
     * @throw EOutOfBounds
     * if the thrown when the panning or tilting angle is beyond 
     * the range of the pantilt unit.
     * @throw EDevIO
     * is thrown to indicate low level device problems.
     */
    void setPosition(in PanTiltPositionIDL destination) raises(EOutOfBounds, EDevIO);

    //! Query the limits of the PTU.
    /**
     * @return The actual limits settings of the PTU.
     */
    PanTiltLimitsIDL getPanTiltLimits();
  };
};

#endif // PantTilt_idl




